[{"body":"Tabs + Syntax Highlighter + Code Copy YAML: JSON Markdown HTML books: - name: The Hate U Give author: Angie Thomas pages: 392 publisher: Balzer + Bray date_read: 2020-03-23 fiction: yes female_author: yes rating: 5 - name: Good Book author: Uncle Sam pages: 100 publisher: Cisco Press date_read: 2023-03-23 fiction: yes female_author: yes rating: 4 - name: ABC of XML author: Cisco Systems pages: 100 publisher: Cisco Press date_read: 2023-03-23 fiction: no female_author: yes rating: 5 \\\"InputParameterSet\\\": \\[\\ {\\ \\\"Condition\\\": \\\"eq\\\",\\ \\\"ControlParameter\\\": \\\"Enum\\\",\\ \\\"EnableParameters\\\": \\[\\ \\\"Input1\\\"\\ \\],\\ \\\"Name\\\": \\\"Rule1\\\",\\ \\\"ObjectType\\\": \\\"workflow.ParameterSet\\\",\\ \\\"Value\\\": \\\"VM\\\"\\ },\\ {\\ \\\"Condition\\\": \\\"eq\\\",\\ \\\"ControlParameter\\\": \\\"Enum\\\",\\ \\\"EnableParameters\\\": \\[\\ \\\"Input2\\\"\\ \\],\\ \\\"Name\\\": \\\"Rule2\\\",\\ \\\"ObjectType\\\": \\\"workflow.ParameterSet\\\",\\ \\\"Value\\\": \\\"HX\\\"\\ }, Help your user know if your project will help them. Useful information can include: - **What is it good for?**: What types of problems does your project solve? What are the benefits of using it? - **What is it not good for?**: For example, point out situations that might intuitively seem suited for your project, but aren't for some reason. Also mention known limitations, scaling issues, or anything else that might let your users know if the project is not for them. - **What is it _not yet_ good for?**: Highlight any useful features that are coming soon. \u003cli class=\"li\"\u003e \u003cp class=\"p\"\u003e \u003cspan class=\"ph uicontrol\"\u003eImpacted Firmware/Version\u003c/span\u003e—The software version of UCS systems impacted. \u003c/p\u003e \u003c/li\u003e \u003cli class=\"li\"\u003e \u003cp class=\"p\"\u003e \u003cspan class=\"ph uicontrol\"\u003eEffective Date\u003c/span\u003e—Date when the EOL advisory milestone is reached. As an example, for UCS Manager Release 2.2 the effective date is either the date when the EOSM milestone of January 9, 2019 was reached or LDOS milestone is January 31, 2023 was reached. \u003c/p\u003e \u003c/li\u003e Cards Card Panes C \\#include \u0026lt;stdio.h\u003e \\#include \u0026lt;stdlib.h\u003e int main(void) { puts(\"Hello World!\"); return EXIT_SUCCESS; } Imagine Artist and songwriter: John Lennon Co-writer: Yoko Ono Imagine there’s no heaven, It’s easy if you try No hell below us, above us only sky Imagine all the people living for today…\n…\nCard Group Card 1 Content card 1\rCard 2 Content card 2\rCard 3 Content card 3\rHightlight Warning Warning This is a warning. Note Note This is a Note. Tip Tip This is a Tip. Content Resuse and Conditional Tag Shortcodes Include External File The following section explains how to install the database:\nInstallation\nNote Check system compatibility before proceeding. Download the installation files.\nRun the installation script\nsudo sh install.sh\nTest that your installation was successfully completed.\nInclude a code snippet (External File) To create a new pipeline, follow the next steps:\nCreate a configuration file config.yaml:\napiVersion: tekton.dev/v1beta1 kind: Task metadata: name: hello spec: steps: - name: echo image: alpine script: | #!/bin/sh echo \"Hello World\" Apply the file to your cluster kubectl apply config.yaml\nConditional Tag Processing Blocks Fastest OS on the planet! The new TechOS operating system is an open source project. It is a new project, but with grand ambitions. Please follow this space for updates!\nContributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\nFollow us on Twitter! For announcement of latest features etc.\nRead more …\nswaggerui redoc Top ","categories":["ICO"],"description":"New Features 1","excerpt":"New Features 1","ref":"/docs/ico_new/newfeatues1/","tags":["Workflow"],"title":"New Features 1"},{"body":" Warning This is a warning. Note To execute the new tasks for VMware vCenter networking operations, you should upgrade to Intersight Assist version 1.0.9-278. Important: Fixed The Orchestration option is visible in the left panel only if you have installed the Intersight Premier license. Open Only an Account Administrator or a user with the Workflow Designer privilege can use the Workflow Designer to create and edit workflows. To launch the Workflow Designer, choose Orchestration \u003e Workflows. A dashboard displays the following details under these tabs, namely, My Workflows, Sample Workflows, and All Workflows:\nValidation Status\nLast Execution Status\nTop Workflows by Execution Count\nTop Workflow Categories\nNumber of System Defined Workflows\nTop Workflows by Targets\nUsing the dashboard, you can create, edit, clone, or delete a tab. To create your own custom view tab, click + and specify a name and then choose the required parameters that need to be displayed in the columns, tag columns, and widgets. You can rename the tabs if it does not have a Lock icon.\nBelow the dashboard is a tabular list of workflows displaying the following information:\nDisplay Name\nDescription\nSystem Defined\nDefault Version\nExecutions\nLast Execution Status\nValidation Status\nLast Update\nOrganization\nThe Actions column allows you to do the following actions:\nExecute—Executes the workflow.\nHistory—Displays workflow execution history.\nManage Versions—create and manage versions for workflows. See Managing Versions for Workflows.\nDelete—Delete a workflow.\nRetry—Retry a failed workflow.\nCreating a Workflow Workflow creation can be broken down into the following sequence of steps:\nDefining a workflow—you specify the display name, description, and other important attributes.\nDefining workflow inputs, workflow variables, and workflow outputs—you can specify which input parameters are mandatory for the workflow execution, define variable(s) for workflow, and the output(s) generated on successful execution.\nAdding workflow tasks—you can add one or more workflow tasks in the Workflow Designer that are needed for the workflow to carry out its function.\nValidate the workflow—you can validate a workflow to ensure that there are no errors in connecting task inputs and outputs.\nDefining a Workflow Choose Orchestration from the left navigation pane.\nChoose Create Workflow. The Create Workflow screen is categorized into the following areas to help you create a workflow: The following table describes the options available to you while creating a workflow:\nWorkflow Designer Area/Option Description Details General Tab Displays workflow details, and also inputs, variables, and outputs of the workflow. You can add a user-friendly short name, reference name, description, and assign an organization to the workflow. You can also specify a version or set a tag to the workflow. In order to categorize your workflow, use the tag key Category and provide an appropriate category value. Use the following checkboxes to: Set as Default Version—Sets this version as the default version for the workflow. Retryable—Execute the workflow from the point of a failure or retry the execution of the entire workflow. You can retry the execution of the workflow for up to two weeks after the last update to the workflow. Enable Debug Logs—Collects the workflow logs for each tasks. You can analyze and debug the workflow execution. Workflow Inputs—You can click Add Workflow Input and add workflow inputs. Each input has a user-friendly display name, a reference name, description, restrictions, and data type. Also, you can set a default value and encrypt it. For more information, see Defining Workflow Inputs, Variables, and Outputs. Workflow Variable—You can click Add Workflow Variable and add a workflow variable. Each workflow variable has a reference name, data type, and so on. Also, you can set a default value. For more information, see Defining Workflow Inputs, Variables, and Outputs. Workflow Outputs—You can click Add Workflow Output and add workflow outputs. Each output has a user-friendly display name, a reference name, description, restrictions, and data type. Also, you can encrypt a value and map it to task output. Designer Tab Displays the design area where you synthesize your workflow. Categorized into the following areas to help you create a workflow: Tools Area—lists all the tasks, workflows, and operations that are currently available in Intersight. You can drag and drop a task or a workflow to the canvas to create or edit the workflow. You can collapse or expand the Tools area. You can use the Search feature to find a specific task or workflow. Design Area—where you can build your workflow. Drag and drop tasks and workflows from the Tools area to this area of the screen. This area includes the following options that you can use while creating the workflow: Zoom in and Zoom out—Magnify or reduce the view of the workflow. Auto Align Workflow—Automatically align the workflow tasks in the design area. Auto Align Selected Workflow Entities—Align selected workflow entities in the design area. Toggle Task Search—Search for a specific task within the workflow. This is useful when you have several tasks within the workflow. Auto Connect Selected Workflow Entity—Add the workflow entity in the design area. You can drag and drop a task in between the tasks. The possible locations where the selected task can be added is denoted with + icon. Mapping Tab Displays the relationship between the task inputs and the outputs of the selected workflow. Information on workflow inputs and workflow outputs is also displayed. Expand and collapse the Task Inputs and Task Outputs pane. Code Tab Displays the code view of the workflow definition Read-only view of the workflow. You can copy the code, use this as a sample to create a workflow using Intersight APIs. History Tab Status of the executed/in-progress workflows. This tab appears after executing a workflow. View workflow execution history, retry or clone a previous execution. The system displays a maximum of 100 instances of the workflow execution. The workflow execution is populated for each version of the workflow. Note: When a workflow is successfully executed, the options for retrying the workflow are not displayed. You can retry a failed workflow only when the Retryable option is enabled in the General tab. Execute Launches the Enter Workflow Inputs window. Choose the Organization and the Workflow instance name to execute the workflow. For user-created workflows, the organization must match where it was created. Save Workflow Validates and saves the workflow. Review validation errors, if any, and rectify them. Close Designer Closes the Workflow Designer. Closes the Workflow Designer and displays the table view of available workflows. Requests Requests are closely related to workflows. You create requests by running workflows; a request is generated every time you execute a workflow in Cisco Intersight. A request is a process under the control of Cisco Intersight.\nYou can schedule a workflow for later execution, and Cisco Intersight stores details of completed requests. To view the detailed information of a request, choose a request. The following information is displayed in the Requests screen:\nStatus—Displays the status of a workflow. Request can have one of several states depending on its execution status:\nRunning\nBlocked (for example, awaiting an approval)\nCompleted\nFailed (a request can fail when one of its component tasks fails to execute properly)\nDetails—Displays the request details such as name, request ID, target name and type, source name and type, name of the user who has executed the request along with the start time and end time, and duration of the request.\nInputs—Displays the workflow input details\nOutputs—Displays the workflow output details\nExecution Flow—Enable Show Additional Details to view the logs, input, and output mapping details of the user-defined workflows. Displays the workflow execution history details similar to the details displayed in the History tab.\nDefining Workflow Inputs, Variables, and Outputs Workflows can have any number of tasks, inputs, variables, and outputs.\nAny task or workflow input can be either mandatory or optional. A task or workflow cannot run without all of its mandatory inputs. You define whether an input is mandatory or optional when you create the task or workflow.\nAfter specifying the generic properties for a task or workflow, you define the input parameters and variables required for task or workflow execution. In addition, you can set workflow input Parameter Set or Progressive Disclosure rules. These rules control the availability of workflow inputs or filter the data based on the preceding selection during the workflow execution. The Task Designer uses the same parameters and information types as the workflow designer to validate the mappings of task input and output parameters when a task is used in a workflow along with other tasks. Task designer uses the same form as workflow designer to obtain the parameter and information type so as provide same user experience between workflow designer and task designer.\nChoose Orchestration from the left navigation pane and click Create Workflow.\nIn the General tab, click Add Workflow Input in the Workflow Inputs tab.\nIn the Add Workflow Input screen, enter the following details:\na. Display Name—Enter user-friendly short name.\nb. Reference Name\nc. Description—Detailed description of the input\nd. Value Restrictions—Choose Required, Collection/Multiple, or can be left blank\ne. Type—Select a data type. For example, String, Integer, Float, Boolean, Json, Enum, MoReference, Target Data Type, or a custom data type.\nThe fields displayed depend on the value you select for the Type field.\na. If you select the data type as Enum, specify the following:\ni. Enum List---Label for the Enum value.\rii. Widget type.\riii. Set Default Value---Select the checkbox and select the\rcorresponding default value.\riv. Override---Allow the user to override the default value.\rb. If you select the data type as String, specify the following:\ni. Minimum and Maximum Range\rii. Regex---Validates the regular expression when you select\rString in the Type field.\riii. Secure---Indicates that the values of these properties are\rencrypted and stored in Cisco Intersight.\riv. Object Selector---Enable to configure the Intersight managed\robject selectors. This attribute is available only when the\rprimitive data is String.\rSpecify the Intersight API Reference and selector attributes to feed the input from the table selection. Value will be passed according to the configuration set in the Value attribute.\na. If you select the data type as Integer or Float, specify the following:\ni. Minimum and Maximum Range\rii. Set Default Value---Select the checkbox and the\rcorresponding default value.\rb. If you select the data type as Target Data Type or MoReference, specify the following:\ni. Intersight API Reference---Enter the URL of the Intersight\rAPI configured with parameters.\rii. Selector Attribute---Enter the attribute name(s) that needs\rto be displayed in the input table column. You can add\rmultiple selector attributes by clicking +.\rc. If you select the data type as Composite Data Type, you can specify the field mapping for the input field. With field mapping, you can pass the value of workflow input to a composite data field.\nTo pass the value from the parent composite data type to a child composite data type, you must specify the field mapping in the composite data type field. For more information, see Creating a Data Type.\nTo specify the field mapping, do the following:\ni. Key—The input field that you want to hide.\nii. Value Attribute—The value in a template style to be passed dynamically during the execution.\nIf the data type is Object Selector, Enum, or Boolean then the input is referenced as \\${workflow.input.InputReferenceName}.\nIf the data type is MoReference or Target Data Type the input is\nreferenced as \\${workflow.input.InputReferenceName.AttributeName}.\nThe InputReferenceName is the Reference Name given to the input\nfield and not the Display Name or Label.\nClick Add.\nRepeat this procedure to create multiple inputs Sample Link.\nTo add a Parameter Set rule, click Add Rule \u003e Parameter Set.\nFor more information, see Workflow Workflow Input Parameter Set and Progressive Disclosure Rules.\na. Name—The name of the Parameter Set rule.\nb. If Field—Select the input field and the properties that will be used to define the Parameter Set rule.\nThe inputs are referenced as InputName or InputName.Properties. Note: The properties are applicable only if the data type is MoRefefence or Target Data Type. For example, for a Target Data Type input field (DeviceRegistrations), you can specify HypervisorManager.IP Address. a. Condition—The condition for the rule. The condition can be Equal to, Not equal to, Contains, or Matches Pattern.\nb. Value—Select or enter the value. The Parameter Set rule uses this value along with the Condition specified to compare the value from the If Field.\nc. Field to be shown—Select the input field(s) that should be made available when the Parameter Set rule condition is satisfied.\nd. Click Save.\nTo add a Progressive Disclosure rule, click Add Rule \u003e Progressive Disclosure. For more information, see Workflow Input Parameter Set and Progressive Disclosure Rules.\na. Target Field—The target input field on which the progressive disclosure is applied.\nb. Attribute —The inputs are referenced as AttributeName.ParameterName. For example, for an input field, Virtual Manager, you can specify the attribute name as RegisteredDevice.Moid or ConnectionStatus.\nc. Condition—The rule condition for the rule. The condition can be Equal to, Not equal to, or Contains.\nd. Value—The inputs are referenced as \\${InputReferenceName.Attribute} or \\${InputReferenceName.ParameterName}. For example, for a VM input field, you can specify the value as \\${HypervisorManager.Moid} or \\${Target.ConnectionStatus}. Note: For a String input field, if you have selected the Object Selector option then you need not specify the Attribute or Parameter value.\nIn the General tab, click Add Workflow Variables in the Workflow Variables tab. For more information, see Workflow Variables.\nIn the Add Workflow Variable screen, enter the following details:\na. Reference Name—Enter user-friendly short name.\nb. Type—Select the data type. For example, String, Integer, Float, Boolean, Json, Enum, MoReference, or Target Data Type.\nThe fields displayed depend on the value you select for the Type field. a. If you select the data type as String, specify the following: i. Object Selector—Enable to configure the Intersight managed object selectors. The Object Selector field is optional. a. Specify the Intersight API Reference and selector attributes to feed the input from the table selection. The value will be passed according to the configuration set in the Value attribute. b. If you select the data type as Enum, specify the following: i. Enum List—Label and value for the Enum list. ii. Widget type—The widget type as Radio or none.\nb. If you select the data type as Target Data Type or MoReference, specify the following: i. Intersight API Reference—Enter the URL of the Intersight API configured with parameters. ii. Selector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +. c. Select the Initial Mapping To type and specify the corresponding variable value.\nd. Click Add.\nClick Workflow Outputs and click Add Workflow Output.\nChoose a parameter and click Add.\nClick Save.\nWorkflow Input Parameter Set and Progressive Disclosure Rules When you create a workflow, you can specify the inputs for the workflow execution. After you define the workflow inputs, you can set Parameter Set or Progressive Disclosure rules. These rules control the availability of workflow inputs or filter the data based on the preceding selection during the workflow execution. Note You can define a Parameter Set or Progressive Disclosure rule only for a workflow that has more than two input fields with the supported data type. Parameter Set Rule The Parameter Set rules control the availability of specific parameters or inputs during the execution. After the first input is specified, the Parameter Set rule controls which subsequent input fields are made available during the workflow execution.\nExample: The following example shows how to create a Parameter Set rule for a workflow with three input fields. The workflow input fields are:\nEnum—Type is Enum and Enum list is VM and HX.\nInput1—Type is String.\nInput2—Type is String.\nYou can create two workflow input Parameter Set rules. During the workflow execution when the Enum value is VM only Input1 field is made available. Alternately, when the Enum value is HX, only Input2 is made available. The details of the Parameter Set rules are:\nRule1—If Field is Enum, Condition is Equal to, Value is VM, and Fields to be shown is Input1.\nRule2—If Field is Enum, Condition is Equal to, Value is HX, and Fields to be shown is Input2.\nThe following is a sample of the API request.\n\\\"InputParameterSet\\\": \\[\\ {\\ \\\"Condition\\\": \\\"eq\\\",\\ \\\"ControlParameter\\\": \\\"Enum\\\",\\ \\\"EnableParameters\\\": \\[\\ \\\"Input1\\\"\\ \\],\\ \\\"Name\\\": \\\"Rule1\\\",\\ \\\"ObjectType\\\": \\\"workflow.ParameterSet\\\",\\ \\\"Value\\\": \\\"VM\\\"\\ },\\ {\\ \\\"Condition\\\": \\\"eq\\\",\\ \\\"ControlParameter\\\": \\\"Enum\\\",\\ \\\"EnableParameters\\\": \\[\\ \\\"Input2\\\"\\ \\],\\ \\\"Name\\\": \\\"Rule2\\\",\\ \\\"ObjectType\\\": \\\"workflow.ParameterSet\\\",\\ \\\"Value\\\": \\\"HX\\\"\\ }, The supported data types for Parameter Set rules are:\nBoolean\nEnum\nString Object Selector\nMoReference\nTarget\nProgressive Disclosure Rule The Progressive Disclosure rules filter the data available in an input field based on the preceding selection during a workflow execution. The first input field is populated with broadest options. The subsequent input fields are populated with options based on the previous selection.\nExample 1: The following example shows how to create a Progressive Disclosure rule for a workflow with two input fields. Both these input fields are MoReference data type. The workflow input fields are:\nField1—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nField2—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nYou can create a Progressive Disclosure rule so that during the workflow execution, the data is filtered for Field2 fields based on value in the Field1 field. The details of the Progressive Disclosure rule are:\nField2 Rule—Target Field is Field2, Attribute is ConnectionStatus, Condition is Equal to, and Value is \\${Field1.ConnectionStatus}. Example 2:: The following example shows how to create a Progressive Disclosure rule for a workflow with two input fields. Both these input fields are composite custom data type. The workflow input fields are:\nInput1—Composite data type with two fields (Field1 and Field2)\nField1—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nField2—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nInput2—Composite data type with two fields (Field3 and Field4)\nField3—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nField4—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nYou can create two Progressive Disclosure rules. During the workflow execution, the data is filtered for Input2 fields based on value in the Input1 fields. The details of the two Progressive Disclosure rules are:\nInput2.Field3 Rule—Target Field is Input2.Field3, Attribute is ConnectionStatus, Condition is Equal to, and Value is ${Input1.Field1.ConnectionStatus}.\nInput2.Field4 Rule—Target Field is Input2.Field4, Attribute is ConnectionStatus, Condition is Equal to, and Value is ${Input1.Field2.ConnectionStatus}.\nThe following is a sample of the API request.\n\\\"UiInputFilters\\\": \\[\\ {\\ \\\"Filters\\\": \\[\\ \\\"ConnectionStatus eq \\'\\${Input1.Field1.ConnectionStatus}\\'\\\"\\ \\],\\ \\\"Name\\\": \\\"Input2.Field3\\\",\\ \\\"ObjectType\\\": \\\"workflow.UiInputFilter\\\",\\ \\\"UserHelpMessage\\\": \\\"\\\"\\ },\\ {\\ \\\"Filters\\\": \\[\\ \\\"ConnectionStatus eq \\'\\${Input1.Field2.ConnectionStatus}\\'\\\"\\ \\],\\ \\\"Name\\\": \\\"Input2.Field4\\\",\\ \\\"ObjectType\\\": \\\"workflow.UiInputFilter\\\",\\ \\\"UserHelpMessage\\\": \\\"\\\"\\ }\\ \\] The supported data types for the Progressive Disclosure rules are:\nMoReference\nTarget\nString Object Selector\nWorkflow Variables Workflow variables are similar to local variables within functions of a programming language. You define variables for workflows in Workflow Designer, and the scope of the workflow variables lies within the defined workflow. In a workflow, all tasks are bound to the scope of the workflow and have access to the workflow variables that are defined for the workflow. You can use the workflow variable to do the following:\nSimplify complex workflows which have multiple branches based on the conditional operator. Save the output of tasks that get executed in different branches of the workflow into a single variable. This variable can then be mapped in the downstream tasks irrespective of the branch from which it was taken.\nEvaluate the workflow input using a complex expression, save the result as a variable, and reuse the variable in the subsequent tasks.\nTransform the output of a task with the help of template functions and map the value into a workflow variable. The variables can then be used in multiple mappings without having to redo the transformation in every mapping.\nTo define the workflow variable and specify the corresponding value, you can do the following:\nIn the General tab, click Add Workflow Variable and define the variable properties.\nIn the Designer tab, click the task, and then click the Variables tab.\n- To add a new workflow variable, click Add Workflow Variable and\rdefine the variable properties.\r- To add or edit a mapping to an existing variable, click Edit\rMapping and specify the new value.\rNote To view events for a workflow variable, click the **View** icon.\rThe workflow variables can be assigned one of the following values:\nStatic value—Either the default value of the variable or the value specified in the workflow tasks.\nDirect mapping —Mapped to a workflow input, task output, or another workflow variable.\nAdvanced or Transformational mapping—Evaluate a complex expression and save the result in a variable.\nAfter you define the workflow variable, you can map the workflow variable to task input, workflow output, or as an input for another variable. For more information, see [Input, Variable, and Output Mapping]{.underline}.\nFollowing is a simple example which explains static mapping for a workflow variable. A workflow has two tasks Task1 and Task2 and a workflow variable Variable1 is defined with a default value as 100. For Task1, in the Variable tab for the task, you can specify a static mapping for the workflow variable value as 90. Similarly, for Task2, in the Variable tab for the task, you can specify the workflow variable value as 80 by mapping the Variable1 value.\nWhen you execute the workflow, the start value of Variable1 is the default value 100 . After Task1 is executed, the value of Variable1 is set to 90 based on the static value that is mapped for the task. After Task2 is executed, the value of Variable1 is set to 80 based on the static value that is mapped for the task.\nInput, Variable, and Output Mapping Workflows inputs, variables, and task outputs can be used for mapping and they can be used as direct, transformed, or advanced mapping. The syntax to refer to these will depend on the type of mapping.\nWorkflow inputs are referenced as ${workflow.input.InputName} where InputName is the Reference Name given to the workflow input and not the Display Name or Label.\nWorkflow variables are referenced as ${workflow.variable.InputName} , where InputName is the Reference Name for the workflow variable.\nTask outputs are referenced as ${TaskName.output.OutputName} where TaskName is the Instance Name for the task and not the Display Name or Label and OutputName is the Reference Name for the task output.\nTo specify an input mapping, select a task and click Edit against a task input parameter.\nTo specify a workflow variable mapping, select a task and click Map against a workflow variable parameter.\nFollowing are the available options:\nStatic Value—Enter a value that is assigned to the task input or workflow variable field.\nDirect Mapping—Map an existing input, workflow variable, or task output to the task input.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task\\’s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template. You can then preview the template and test the transformation with sample values.\nNote: Transformed mapping is only supported for task inputs of \u003e primitive data types, such as string, integer, boolean, and float.\nAdvanced Mapping—Map a Golang template to the task input or workflow variable. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nFindAllString(s, regex string) ([]string, error)\\ Example: {{(FindAllString .global.task.input.NumberString \\\\\"([0-9]+)\\\\\")}} \\ returns array [“123”, “456”] for input string “123 some text 456”.\nFor example, Atoi function converts the given number in string format to integer type.\nAtoi(s string) (int, error)\\ Example: {{Atoi .global.task.input.SizeString}} \\ returns integer 2048 for input string “2048”\nOperations - Conditional Task Operations can be used to control the execution path of the workflows. Orchestrator supports Condition tasks which can be used to control the tasks that need to be executed.\nTasks to Control Execution Flow of Workflows\nThe Conditional Task under Operations allows you to perform programmatic decisional expressions in a conditional task during a workflow execution. The conditional expression can be simple expression or a combined compound expression.\nNote: Only JSON style template is supported with conditional expressions.\nConditional expressions support the following operators:\nComparison operators such as === (Equal to), != (Not equal to), \u003e (Greater than), \\\u003c (Less than), \u003e= (Greater than or equal to), \\\u003c= (Less than or equal to)\nArithmetic operators such as =, -, * (Multiplication), / (division), % (Modulo), ** (Logical AND)\nLogical operators such as \u0026\u0026 (Logical AND), || (Logical OR), ! ((Logical NOT)\nTernary operator such as condition ? val1 : val2\nThe syntax for workflow input is \\${workflow.input.\\} and the syntax for task output is \\${\\.output.\\}. You can get the values for the task name and task output name from the Code view.\nFollowing is an example for conditional expressions:\nif ( (\\${workflow.input.name} != \\'test\\' \\|\\| \\${workflow.input.name} != \\'test123')) \\'bad input\\'; else if((\\${workflow.input.id} != null \u0026\u0026 \\${workflow.input.id} % 2 == 0)) \\'even\\'; else \\'odd\\';\\ if ( (\\${workflow.input.name} != \\'test123' \\|\\| \\${workflow.input.name} != \\'test123')) \\'bad input\\'; else if((\\${workflow.input.id} != null \u0026\u0026 \\${workflow.input.id} % 2 == 0)) \\'even\\'; else \\'odd\\';\\ if ( (\\${workflow.input.name}.length === 12 \\|\\| \\${workflow.input.name} !== 'test' )) \\'even\\'; else \\'odd\\'; \\\u003c\\\u003c fgfgfgfgfgfg , even\\ if ( (\\${workflow.input.name}.length === 12 \\|\\| \\${workflow.input.name} !== 'test' )) \\'even\\'; else \\'odd\\'; \\\u003c\\\u003c test , odd\\ if ( (\\${workflow.input.name} != null \u0026\u0026 \\'decisionTest\\'.indexOf(\\${workflow.input.name}) != -1 )) \\'even\\'; else \\'odd\\';\\ if ( (\\${workflow.input.name}.toLowerCase() == 'testing')) \\'even\\'; else \\'odd\\'; \\\u003c\\\u003c used integers as input name to try odd path\\ if ( (\\${workflow.input.name}.search(/\\\\s/g) != -1)) \\'even\\'; else \\'odd\\';\\ if ( (\\${workflow.input.name}.match(/\\\\s/g) != -1)) \\'even\\'; else \\'odd\\';\\ if ( (\\${workflow.input.name}.startsWith(\\'Not\\',0) \\|\\| \\${workflow.input.name}.endsWith(\\'.\\'))) \\'even\\'; else \\'odd\\';\\ if ( (\\${workflow.input.name}.length \u003e= 3 \u0026\u0026 \\${workflow.input.name}.length \\\u003c= 20)) \\'even\\'; else \\'odd\\';\\ if ( (\\${workflow.input.name}. === undefined)) 'odd'; else 'even';\\ if ( (\\${workflow.input.name}.search(\\'Failed\\') != -1)) \\'even\\'; else \\'odd\\';\\ if ( (\\${workflow.input.name}.toLowerCase() != \\'\\' \\|\\| \\${workflow.input.name}.toUpperCase() != 'Not-assigned' )) \\'even\\'; else \\'odd\\'; The expression is executed during runtime and depending on the result, the respective path is chosen. If none of the conditions match, the default path is chosen.\nFor example, you can have a conditional task that follows a path of execution depending on the profile state. You can create a condition in a workflow to check the state of the profile. If the profile is in the Assigned state then you can deploy the profile, else delete the profile.\nAfter choosing the conditional task, use the Conditions tab to specify expressions in the Condition field of the tab. The values for the condition are specified in the Value field of the Cases area. Expressions are validated for syntax accuracy when workflow is saved.\nThe following examples return the value of the condition.\n\\${workflow.input.Names}.length\\ \\${workflow.input.ArrayOfIds}.length (here ArrayOfIds represent an array)\\ \\${workflow.input.Names}.toLowerCase()\\ \\${workflow.input.Names}.toUpperCase() The following examples return the boolean value \\’true\\’ or \\‘false\\’.\n\\${workflow.input.Names}.startsWith(\\'Te\\')\\ \\${workflow.input.Names}.endsWith(\\'st\\')\\ \\${workflow.input.Names} == null\\ \\${workflow.input.Names} != null In addition to workflow, task output can also be used. Here a boolean value is used in a ternary operation. If True, branch1 executes, otherwise branch2 executes ${task1.output.IsValid} ? branch1 : branch2.\nOperations - Parallel Loop Task Operations can be used to control the execution path of the workflows. Orchestrator supports the Parallel Loop operation task that can be used to run a single task or sub-workflow, iteratively, based on a specified count input.\nThe iteration count can either be a static value that is specified when the workflow is created or a dynamic value that is derived from a workflow input or task output.\nWhen the task is executed, the count ‘N’ is determined, and the tasks or sub-workflows are scheduled for execution in parallel. When all the instances of the task or sub-workflow reach a final state, the parallel loop operation completes, and the workflow execution moves on to the next task.\nNote If one of the tasks or sub-workflows fails then the entire parallel loop task fails.\nThe dynamic values for the count must be specified as a template function. For example, if a loop must run for a count which matches the length of a workflow input called StringArray, then the count must be specified using a template function {{ len .global.workflow.input.StringArray }}.\nIn addition, you can use the keyword .iteration in a workflow template input to control the inputs that feed into the task. For example, the task within the loop needs to take one value from the workflow input StringArray, then the task string input can be mapped to the template HostGroupName{{.iteration}} during the workflow creation.\nUse the Parallel Loop task from the Operations section in the Intersight Orchestrator Workflow Designer UI to create a request.\nThe following table explains the task input properties:\nProperty Description Count The iteration count value for the parallel loop. The count can either be a static value defined as a constant or a dynamic value defined as an expression that is evaluated to an integer value at execution time. The dynamic values for the count must be specified as a template function. For example, if a loop must run for a count which matches the length of a workflow input called StringArray, then the count must be specified using a template function {{ len .global.workflow.input.StringArray }}. The count must be less than or equal to 100. Example: Create a workflow with the Parallel Loop task to create multiple storage host groups\nThe following example workflow has two tasks—Parallel Loop and New Storage Host Group. The first task runs the Parallel Loop task. In this task, the Count input is a static value and is set to 2. The second task, New Storage Host Group, creates storage host groups with the host group name as a workflow input.\nWhen the workflow is executed, the count ‘N’ is determined as 2, and two create storage host group tasks are executed in parallel. When all the instances of the task reach a final state, the parallel loop completes.\nThe workflow input field required for this example is as follows:\nProperty Description Storage Device Reference Name—StorageDevice Type—Target Data Type Intersight API Reference—/api/v1/storage/PureArrays Selector Attribute—Name Selector Attribute—Vendor The following table lists the properties for the Parallel Loop task:\nProperty Description Count Count—2 The following table lists the properties for the New Storage Host Group task:\nProperty Description Storage Device Workflow Input—${workflow.input.StorageDevice} Host Group Custom Value—HostGroupName{{.iteration}} The keyword .iteration in a workflow template input to control the inputs that feed into the task. After you execute the workflow, you would see the following output:\n├── New Storage Host Group ├── ... │ ├── Inputs │ │ └── Host Group: HostGroupName0 │ │ └── Storage Device:{ 2 } │ │ ├── Moid: 619efa1d6e64612d317a248a │ │ └── ObjectType: storage.PureArray │ └── Outputs │ ├── ConfigResults:[ 1 ] │ │ └── Object: { 4 } │ │ ├── ConfigResCtx: { 1 } │ │ │ └── EntityData: { 1 } │ │ │ └── task: workflow.ApiTask │ │ ├── Message: Host group created successfully. │ │ ├── State: Ok │ │ └── Type: Config │ └── Host Group: HostGroupName0 ├── New Storage Host Group └── ... ├── Inputs │ └── Host Group: HostGroupName1 │ └── Storage Device:{ 2 } │ ├── Moid: 619efa1d6e64612d317a248a │ └── ObjectType: storage.PureArray └── Outputs ├── ConfigResults:[ 1 ] │ └── Object: { 4 } │ ├── ConfigResCtx: { 1 } │ │ └── EntityData: { 1 } │ │ └── task: workflow.ApiTask │ ├── Message: Host group created successfully. │ ├── State: Ok │ └── Type: Config └── Host Group: HostGroupName1 The following is a sample code view:\n{ \"Catalog\": { \"Moid\": \"5e6109bc696f6e2d31f856e5\", \"ObjectType\": \"workflow.Catalog\", \"link\": \"https://www.intersightcom/api/v1/workflow/Catalogs/5e6109bc696f6e2d31f856e5\" }, \"DefaultVersion\": true, \"Description\": \"\", \"InputDefinition\": [ { \"CustomDataTypeProperties\": { \"CatalogMoid\": \"\", \"CustomDataTypeId\": \"\", \"CustomDataTypeName\": \"\", \"ObjectType\": \"workflow.CustomDataProperty\" }, \"Default\": { \"IsValueSet\": false, \"ObjectType\": \"workflow.DefaultValue\", \"Override\": false, \"Value\": null }, \"Description\": \"\", \"DisplayMeta\": { \"InventorySelector\": true, \"ObjectType\": \"workflow.DisplayMeta\", \"WidgetType\": \"None\" }, \"InputParameters\": null, \"IsArray\": false, \"Label\": \"Storage Device\", \"Max\": 0, \"Min\": 0, \"Name\": \"StorageDevice\", \"ObjectType\": \"workflow.TargetDataType\", \"Properties\": [ { \"ConnectorAttribute\": \"RegisteredDevice.Moid\", \"ConstraintAttributes\": [ \"ObjectType\" ], \"DisplayAttributes\": [ \"Name\", \"Vendor\" ], \"ObjectType\": \"workflow.TargetProperty\", \"Selector\": \"/api/v1/storage/PureArrays\", \"SelectorProperty\": { \"Body\": null, \"Method\": \"GET\", \"ObjectType\": \"workflow.SelectorProperty\" }, \"SupportedObjects\": [ \"storage.PureArray\" ] } ], \"Required\": true } ], \"InputParameterSet\": [], \"Label\": \"Parallel Loop\", \"Name\": \"ParallelLoop\", \"OutputDefinition\": [], \"OutputParameters\": null, \"Properties\": { \"Cloneable\": true, \"EnableDebug\": false, \"ExternalMeta\": true, \"ObjectType\": \"workflow.WorkflowProperties\", \"Retryable\": false, \"SupportStatus\": \"Supported\" }, \"Tags\": [], \"Tasks\": [ { \"Description\": \"\", \"Label\": \"\", \"Name\": \"StartTask\", \"NextTask\": \"parallelLoop1\", \"ObjectType\": \"workflow.StartTask\" }, { \"Description\": \"\", \"Label\": \"\", \"Name\": \"SuccessEndTask\", \"ObjectType\": \"workflow.SuccessEndTask\" }, { \"Description\": \"\", \"Label\": \"\", \"Name\": \"FailureEndTask\", \"ObjectType\": \"workflow.FailureEndTask\" }, { \"Count\": \"2\", \"Description\": \"A Parallel Loop is a control task that runs one task or one sub-workflow multiple times based on a specified count. The count can be a static value that is specified during design time or a dynamic value that is derived from workflow inputs or task outputs. When the loop is executed, the count 'N' is determined, N tasks or sub-workflows are scheduled for execution in parallel. When all N instances of the task or sub-workflow reach a final state the parallel loop will complete and workflow execution will move on to the next task. If any one of the tasks or sub-workflows fails, then the entire loop will fail. Dynamic values for count must be specified as a template. For example, if a loop must run for a count which matches the length of a workflow input called StringArray, then the count must be specified using a template '{{ len .global.workflow.input.StringArray }}'. The iteration of the loop is available using the keyword '.iteration' and it can be used to control inputs that feed into the task. For example, the task inside the loop needs to take one value from the workflow input StringArray, then the task string input can be mapped to the template '{{ index .global.workflow.input.StringArray .iteration}}' during design.\", \"Label\": \"Parallel Loop\", \"LoopStartTask\": \"NewStorageHostGroup1\", \"Name\": \"parallelLoop1\", \"NumberOfBatches\": 1, \"ObjectType\": \"workflow.LoopTask\", \"OnSuccess\": \"SuccessEndTask\", \"Parallel\": true }, { \"CatalogMoid\": \"5c2fc884696f6e2d316c5d59\", \"Description\": \"Create a host group with host group name as input. On successful execution, the newly created host group name is generated as output.\", \"InputParameters\": { \"HostGroupName\": \"HostGroupName{{.iteration}}\", \"StorageDevice\": \"${workflow.input.StorageDevice}\" }, \"Label\": \"New Storage Host Group\", \"Name\": \"NewStorageHostGroup1\", \"ObjectType\": \"workflow.WorkerTask\", \"OnFailure\": \"\", \"OnSuccess\": \"\", \"RollbackDisabled\": false, \"TaskDefinitionId\": \"5f7ed8a2696f6e2d30eb388b\", \"TaskDefinitionName\": \"NewStorageHostGroup\", \"UseDefault\": false, \"Version\": 2 } ], \"UiInputFilters\": [], \"UiRenderingData\": { \"Positions\": [ { \"Name\": \"StartTask\", \"X\": 269.5, \"Y\": 45.5 }, { \"Name\": \"SuccessEndTask\", \"X\": 269.5, \"Y\": 303 }, { \"Name\": \"FailureEndTask\", \"X\": 412.5, \"Y\": 303 }, { \"Name\": \"parallelLoop1\", \"X\": 149.01800537109375, \"Y\": 116.75314331054688 }, { \"Name\": \"NewStorageHostGroup1\", \"X\": 185, \"Y\": 177 } ] }, \"Version\": 1, \"WorkflowMetadata\": null } Managing the Lifecycle of a Workflow Workflow management consists of organizing, creating, updating, and deletion of workflows. The following table describes the set of actions that you can perform with workflows in Cisco Intersight.\nActions\rDescription\rView Workflows\rChoosing Orchestration from the left navigation pane will display all workflows in a tabular format. You can view information such as the workflow name and description, the number of versions available, the number of times the workflow has been executed, the last execution status, validation information and the last update time and date.\rCreate a New Workflow\rChoose Orchestration from the left navigation pane and click Create Workflow. This option opens up the Workflow Designer, using which you can create a new workflow.\rCreate a Version for a Workflow\rYou can create multiple versions for a workflow. In addition, you can set a specific version of the workflow as the default version for the workflow. See Managing Versions for Workflows.\rDelete a Workflow\rFrom the tabular list of workflows, you can select a workflow and click Delete. This will remove the workflow and all versions of the workflow.\nYou cannot delete a workflow when :\nworkflow is used as sub-workflow task in another workflow.\nworkflow is in running state.\nExecute a Workflow\rSelect a workflow from the tabular list of workflows and choose Execute. Alternatively, you can click the workflow name, and then choose Execute in the Workflow Designer.\nImportant: Workflow execution includes privilege-based validation for tasks. With the introduction of privilege-based validation for virtualization, compute and storage tasks, a user must have all the required privileges to execute all the domain tasks within a workflow. For example, a user can successfully execute a workflow that includes storage and virtualization tasks only if the user has both Storage and Virtualization Administrator privileges. In the absence of either one of these privileges, the Execute button will not be displayed and the user cannot execute the workflow.\nHowever, an Account Administrator can execute all workflow.\nWhile configuring the properties of a workflow, if you selected the Retryable option, then in the event of a workflow failure, you can either choose to execute the workflow again from the point of failure, or you can execute the entire workflow again.\nClone a Workflow\rFrom the tabular list of workflows, you can select a workflow and click Clone. This will clone the selected workflow.\rSave a Workflow as\rFrom the tabular list of workflows, you can choose a workflow and click. By default, the workflow details are displayed in the Designer tab. You can choose Save As option from the Action drop-down list to clone or create a new version of the existing workflow.\nYou can also perform this operation in the General tab.\nIn the Save As screen, you can choose one of the following:\nNew Version---Specify a new version and related description. Click Save.\nThis option is not available for a system generated workflow.\nClone---Specify user-friendly short name, reference name, description, and tag key. Click Save. For more information, see Cloning a Workflow.\nCloning a Workflow You can clone a workflow. The cloned workflow is identical to the original workflow. You can edit the new workflow immediately. You might do this, for example, to create a workflow that is similar to the source workflow that can be edited based on your requirements. The new workflow has a new, separate version history.\nTo clone a workflow, complete the following steps:\nChoose Orchestration from the left navigation pane.\nFrom the tabular list of workflows, select a workflow and choose Clone.\nIn the Clone Workflow screen, edit the user-friendly short name, reference name, description, and organization details. The organization mappings are displayed only for pre-canned workflows and not for the custom workflows.\nCheck the Open Clone in Editor check box if you want to open the cloned workflow in the workflow designer and edit the details.\nNote: Open Clone in Editor check box is not displayed when you clone a workflow using the Save As option.\nClick Clone. Managing Versions for Workflows Cisco Intersight allows you to create and manage versions for workflows. In addition to creating versions, you can also set a specific version as the default version for the workflow. You can create a version of a workflow and execute it only if you are one of the following users:\nAccount Administrator\nUser with Workflow Designer privileges\nRead-Only users can only view versions of a workflow. They cannot create, edit, execute or delete versions. Users with Storage Administrator and Virtualization Administrator privileges can only view and execute specific versions of a workflow.\nTo create a version for a workflow, complete the following steps:\nChoose Orchestration from the left navigation pane.\nFrom the tabular list of workflows, select a workflow and choose Manage Versions.\nIn the Manage Versions screen, you can perform the following tasks:\nCreate a new version for the workflow\nExecute a specific version of the workflow\nDelete a specific version. You cannot directly delete the default version of a workflow. To delete the default version, perform the following:\nMake another version the default.\nChange the workflow version to be deleted as non-default.\nDelete the workflow version that was changes as non-default.\nSet a specific version of the workflow as the default version\nChoose Create a New Version and enter the following details:\nSource Version—Choose a specific version that will form the source for the new version that you are creating.\nVersion—Specify a version number for the workflow.\nDescription—Enter a description for the version so that you can identify it.\nSet as Default Version—Check this check box to set this new version as the default version for the workflow.\nClick Create.\nAfter creating a version for a workflow, clicking on the version number on the Manage Versions screen opens the workflow in Workflow Designer.\nNote: Deleting a workflow will delete all versions created for the workflow.\nExporting a Workflow Intersight Cloud Orchestrator enables you to export workflows from an account to your system and then import them to another account.\nTo export a workflow, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick the Workflow tab.\nFrom the tabular list of workflows, do one of the following:\nSelect a workflow, click the Ellipsis (…) icon in the same row, and then choose Export Workflow.\nSelect multiple workflows, click the Ellipsis (…) icon from the header or footer of the tabular list, and then choose Export Workflow.\nNote: You can also export workflows from the Actions menu in the Workflow Designer window.\nIn the Export Workflow screen:\na. In the JSON File Name field, use the default filename or enter a filename of your choice for the JSON file that stores the workflow components.\nb. Use the Export Tags toggle button to include or exclude the user-defined tags. ICO does not export the system-defined tags.\nc. Click Export.\nd. Save a local copy of the JSON file.\nImporting a Workflow Intersight Cloud Orchestrator enables you to import workflows to your account by importing a JSON file that contains the workflow components. You can create the JSON file by exporting the workflow components from another account.\nTo import a workflow, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Import.\nThe Import wizard appears.\nIn the Select File screen:\na. From the Organization drop-down list, choose the organization to which you want to import the workflow(s).\nb. Click Browse, and then select the JSON file that contains the Workflow(s).\nNote: Ensure that the file size of the JSON file is not more than 1MB. If the file size is more than 1MB, export the workflow(s) in batches, and then try import.\nc. Click Next.\nIntersight Cloud Orchestrator validates the JSON file and displays\nthe workflow(s) in the Details screen.\nIn the Details screen:\na. To associate an additional tag to the components listed in the table, enter the tag in the Set Tags field. Note: Set Tags is an optional field. You must enter the tag in the key:value format.\nb. If one or more workflow components are already available in the system, choose a rule to replace or skip the duplicate components.\nc. Click Import.\nIn the Import Result screen:\na. Verify the status of the imported workflow.\nb. If you want to view the details of the import request:\nClick the link displayed above the table.\nAlternatively, click the Requests icon displayed in the menu bar.\nFor more information, see Requests.\na. Click Close.\nYou can execute the imported workflow from the Workflows tab.\nDefining Workflow Input Rules Intersight Cloud Orchestrator allows you to configure input rules that control the display of fields in the workflow execution screen. You can define these input rules for a workflow by using the Intersight API and while creating a composite data type. By default, all input fields for a workflow are displayed in the workflow execution screen. By configuring input rules, the fields in this screen are displayed or hidden based on the value selected for a previous input field.\nAfter configuring input rules in the workflow definition using the Intersight API, you can view the input rules using the Code tab in the Workflow Designer.\nFollowing is a sample of a simple input rule set for a workflow:\n\\\"InputParameterSet\\\":\\[\\ {\\ \\\"ObjectType\\\": \\\"workflow.ParameterSet\\\",\\ \\\"Name\\\": \\\"rule-1\\\",\\ \\\"ControlParameter\\\": \\\"input-1\\\",\\ \\\"Condition\\\": \\\"eq\\\",\\ \\\"Value\\\": \\\"true\\\",\\ \\\"EnableParameters\\\": \\[\\ \\\"input-2\\\"\\ \\]\\ },\\ {\\ \\\"ObjectType\\\": \\\"workflow.ParameterSet\\\",\\ \\\"Name\\\": \\\"rule-2\\\",\\ \\\"ControlParameter\\\": \\\"input-1\\\",\\ \\\"Condition\\\": \\\"ne\\\",\\ \\\"Value\\\": \\\"true\\\",\\ \\\"EnableParameters\\\": \\[\\ \\\"input-3\\\",\\ \\]\\ }\\ \\] Following is an example for the parameter sets defined at workflow level: {\\ \\\"Label\\\": \\\"Provision VM\\\",\\ \\\"Name\\\": \\\"ProvisionVM\\\",\\ \\\"DefaultVersion\\\": true,\\ \\\"Description\\\": \\\"\\\",\\ // Parameter set defintion \\ \\\"InputParameterSet\\\": \\[\\ {\\ // rule-1 enables \\'vmwarehost\\' input when value of \\'vmtype\\' is \\'vmware\\'\\ \\\"Name\\\": \\\"rule-1\\\",\\ \\\"ControlParameter\\\": \\\"vmtype\\\",\\ \\\"Condition\\\": \\\"eq\\\",\\ \\\"Value\\\": \\\"vmware\\\",\\ \\\"EnableParameters\\\": \\[\\ \\\"vmwarehost\\\"\\ \\]\\ },\\ {\\ // rule-2 enables \\'hxcluster\\' input when value of \\'vmtype\\' is \\'hx\\'\\ \\\"Name\\\": \\\"rule-2\\\",\\ \\\"ControlParameter\\\": \\\"vmtype\\\",\\ \\\"Condition\\\": \\\"eq\\\",\\ \\\"Value\\\": \\\"hx\\\",\\ \\\"EnableParameters\\\": \\[\\ \\\"hxcluster\\\"\\ \\]\\ }\\ \\],\\ \\\"InputDefinition\\\": \\[\\ {\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataType\\\",\\ \\\"InputParameters\\\": null,\\ \\\"Label\\\": \\\"VM Type\\\",\\ \\\"Name\\\": \\\"vmtype\\\",\\ \\\"Required\\\": false,\\ \\\"Properties\\\": {\\ \\\"ClassId\\\": \\\"workflow.PrimitiveDataProperty\\\",\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataProperty\\\",\\ \\\"Constraints\\\": {\\ \\\"ClassId\\\": \\\"workflow.Constraints\\\",\\ \\\"ObjectType\\\": \\\"workflow.Constraints\\\",\\ \\\"EnumList\\\": \\[\\ {\\ \\\"ClassId\\\": \\\"workflow.EnumEntry\\\",\\ \\\"ObjectType\\\": \\\"workflow.EnumEntry\\\",\\ \\\"Label\\\": \\\"VMWare\\\",\\ \\\"Value\\\": \\\"vmware\\\"\\ },\\ {\\ \\\"ClassId\\\": \\\"workflow.EnumEntry\\\",\\ \\\"ObjectType\\\": \\\"workflow.EnumEntry\\\",\\ \\\"Label\\\": \\\"HX\\\",\\ \\\"Value\\\": \\\"hx\\\"\\ }\\ \\],\\ \\\"Max\\\": 0,\\ \\\"Min\\\": 0,\\ \\\"Regex\\\": \\\"\\\"\\ },\\ \\\"InventorySelector\\\": \\[\\],\\ \\\"Secure\\\": false,\\ \\\"Type\\\": \\\"enum\\\"\\ }\\ },\\ {\\ \\\"Name\\\": \\\"vmname\\\",\\ \\\"Label\\\": \\\"VM Name\\\",\\ \\\"Required\\\": false,\\ \\\"Properties\\\": {\\ \\\"Type\\\": \\\"string\\\",\\ \\\"Constraints\\\": {\\ \\\"Min\\\": 0,\\ \\\"Max\\\": 0\\ },\\ \\\"Secure\\\": false\\ },\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataType\\\"\\ },\\ {\\ \\\"Name\\\": \\\"vmwarehost\\\",\\ \\\"Label\\\": \\\"Host\\\",\\ \\\"Required\\\": false,\\ \\\"Properties\\\": {\\ \\\"Type\\\": \\\"string\\\",\\ \\\"Constraints\\\": {\\ \\\"Min\\\": 0,\\ \\\"Max\\\": 0\\ },\\ \\\"Secure\\\": false\\ },\\ \\\"Default\\\": {\\ \\\"Override\\\": false,\\ \\\"Value\\\": null\\ },\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataType\\\"\\ },\\ {\\ \\\"Name\\\": \\\"hxcluster\\\",\\ \\\"Label\\\": \\\"Cluster\\\",\\ \\\"Required\\\": false,\\ \\\"Properties\\\": {\\ \\\"Type\\\": \\\"string\\\",\\ \\\"Constraints\\\": {\\ \\\"Min\\\": 0,\\ \\\"Max\\\": 0\\ },\\ \\\"Secure\\\": false\\ },\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataType\\\"\\ }\\ \\],\\ \\\"OutputDefinition\\\": \\[\\],\\ \\\"OutputParameters\\\": null,\\ \\\"Tasks\\\": \\[\\ {\\ \\\"ClassId\\\": \\\"workflow.StartTask\\\",\\ \\\"Description\\\": \\\"\\\",\\ \\\"Label\\\": \\\"\\\",\\ \\\"Name\\\": \\\"StartTask\\\",\\ \\\"NextTask\\\": \\\"NewProfile1596244596840\\\",\\ \\\"ObjectType\\\": \\\"workflow.StartTask\\\"\\ },\\ {\\ \\\"ClassId\\\": \\\"workflow.SuccessEndTask\\\",\\ \\\"Description\\\": \\\"\\\",\\ \\\"Label\\\": \\\"\\\",\\ \\\"Name\\\": \\\"SuccessEndTask\\\",\\ \\\"ObjectType\\\": \\\"workflow.SuccessEndTask\\\"\\ },\\ {\\ \\\"ClassId\\\": \\\"workflow.FailureEndTask\\\",\\ \\\"Description\\\": \\\"\\\",\\ \\\"Label\\\": \\\"\\\",\\ \\\"Name\\\": \\\"FailureEndTask\\\",\\ \\\"ObjectType\\\": \\\"workflow.FailureEndTask\\\"\\ },\\ {\\ \\\"CatalogMoid\\\": \\\"5dd45ab6696f6e2d301e2df6\\\",\\ \\\"ClassId\\\": \\\"workflow.WorkerTask\\\",\\ \\\"Description\\\": \\\"Task to create a Profile\\\",\\ \\\"InputParameters\\\": null,\\ \\\"Label\\\": \\\"Provision VM\\\",\\ \\\"Name\\\": \\\"ProvisionVM1596244596840\\\",\\ \\\"ObjectType\\\": \\\"workflow.WorkerTask\\\",\\ \\\"OnFailure\\\": \\\"\\\",\\ \\\"OnSuccess\\\": \\\"SuccessEndTask\\\",\\ \\\"TaskDefinitionId\\\": \\\"5efd7c84696f6e2d309e6877\\\",\\ \\\"TaskDefinitionName\\\": \\\"NewProfile\\\",\\ \\\"Version\\\": 1\\ }\\ \\],\\ \\\"Version\\\": 1\\ } Following is an example for the parameter sets defined at custom data type level: {\\ \\\"Label\\\": \\\"ClusterType\\\",\\ \\\"Name\\\": \\\"ClusterType\\\",\\ \\\"CompositeType\\\": true,\\ \\\"Description\\\": \\\"Type definition for a cluster information.\\\",\\ \\\"TypeDefinition\\\": \\[\\ {\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataType\\\",\\ \\\"Label\\\": \\\"Cluster Type\\\",\\ \\\"Name\\\": \\\"clustertype\\\",\\ \\\"Properties\\\": {\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataProperty\\\",\\ \\\"Constraints\\\": {\\ \\\"ObjectType\\\": \\\"workflow.Constraints\\\",\\ \\\"EnumList\\\": \\[\\ {\\ \\\"ObjectType\\\": \\\"workflow.EnumEntry\\\",\\ \\\"Label\\\": \\\"VM Ware\\\",\\ \\\"Value\\\": \\\"vmware\\\"\\ },\\ {\\ \\\"ObjectType\\\": \\\"workflow.EnumEntry\\\",\\ \\\"Label\\\": \\\"HX AP\\\",\\ \\\"Value\\\": \\\"hxap\\\"\\ }\\ \\]\\ },\\ \\\"Type\\\": \\\"enum\\\"\\ }\\ },\\ {\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataType\\\",\\ \\\"Label\\\": \\\"VMware Cluster\\\",\\ \\\"Name\\\": \\\"vmwarecluster\\\"\\ },\\ {\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataType\\\",\\ \\\"Label\\\": \\\"HX Cluster\\\",\\ \\\"Name\\\": \\\"hxcluster\\\"\\ },\\ {\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataType\\\",\\ \\\"Label\\\": \\\"Cluster Description\\\",\\ \\\"Name\\\": \\\"clusterdescr\\\"\\ }\\ \\],\\ \\\"ParameterSet\\\": \\[\\ {\\ \\\"Name\\\": \\\"rule-1\\\",\\ \\\"Field\\\": \\\"clustertype\\\",\\ \\\"Condition\\\": \\\"eq\\\",\\ \\\"Value\\\": \\\"vmware\\\",\\ \\\"ShowFields\\\": \\[\\ \\\"vmwarecluster\\\"\\ \\]\\ },\\ {\\ \\\"Name\\\": \\\"rule-2\\\",\\ \\\"Field\\\": \\\"clustertype\\\",\\ \\\"Condition\\\": \\\"eq\\\",\\ \\\"Value\\\": \\\"hxap\\\",\\ \\\"ShowFields\\\": \\[\\ \\\"hxcluster\\\"\\ \\]\\ }\\ \\]\\ } Supported Workflows for Storage Targets The following table lists workflows supported in the various storage targets available on Intersight:\nList of Storage Workflows Pure Storage NetApp Hitachi New Storage Host Y Y Y New Storage Host Group Y N N New VMFS Datastore Y Y Y New NAS Datastore N Y N Remove NFS Datastore N Y N Remove Storage Host Y Y Y Remove Storage Export Policy N Y N Remove Storage Host Group Y N N Remove VMFS Datastore Y Y N Update Storage Host Y Y Y Update NAS Datastore N Y N Update VMFS Datastore Y N N New Storage Interface N Y N New Storage Export Policy N Y N New Storage Virtual Machine N Y N ","categories":["ICO"],"description":"Workflow Designer helps you create new workflows (as well as tasks and data types) and also edit existing workflows to manage targets in Cisco Intersight.","excerpt":"Workflow Designer helps you create new workflows (as well as tasks and …","ref":"/docs/ico/wokflowdesigner/","tags":["Workflow"],"title":"Workflow Designer"},{"body":"This is a sample text.\n\u003c/div\u003e \u003cdiv id=\"content-desktop\"\u003e\u003c/div\u003e \u003cnav class=\"collapse td-sidebar-nav\" id=\"td-section-nav\"\u003e \u003cul class=\"td-sidebar-nav__section pr-md-3 ul-0\"\u003e \u003cli class=\"td-sidebar-nav__section-title td-sidebar-nav__section with-child active-path\" id=\"m-docs-li\"\u003e \u003ca href=\"/docs/\" class=\"align-left pl-0 td-sidebar-link td-sidebar-link__section tree-root\" id=\"m-docs\"\u003e\u003cspan class=\"\"\u003eDocumentation\u003c/span\u003e\u003c/a\u003e \u003cul class=\"ul-1\"\u003e \u003cli class=\"td-sidebar-nav__section-title td-sidebar-nav__section with-child\" id=\"m-docsgettingstarted-li\"\u003e \u003ca href=\"/docs/gettingstarted/\" class=\"align-left pl-0 td-sidebar-link td-sidebar-link__section\" id=\"m-docsgettingstarted\"\u003e\u003cspan class=\"\"\u003eGetting Started\u003c/span\u003e\u003c/a\u003e \u003cul class=\"ul-2 foldable\"\u003e \u003cli class=\"td-sidebar-nav__section-title td-sidebar-nav__section without-child collapse\" id=\"m-docsgettingstartedoverview-li\"\u003e \u003ca href=\"/docs/gettingstarted/overview/\" class=\"align-left pl-0 td-sidebar-link td-sidebar-link__page\" id=\"m-docsgettingstartedoverview\"\u003e\u003cspan class=\"\"\u003eOverview\u003c/span\u003e\u003c/a\u003e \u003c/li\u003e 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 Param ( [switch]$EnableBasicAuth = $false, [switch]$SKipNetworkProfileCheck = $false, [switch]$ForceNewSSLCert = $false, [string]$SubjectName = $env:COMPUTERNAME, [int]$CertValidityDays = 1095 ) Function New-SelfSignedCert { Param ( [string]$SubjectName, [int]$ValidDays = 1095 ) $hostnonFQDN = $env:computerName $hostFQDN = [System.Net.Dns]::GetHostByName(($env:computerName)).Hostname $SignatureAlgorithm = \"SHA256\" $name = New-Object -COM \"X509Enrollment.CX500DistinguishedName.1\" $name.Encode(\"CN=$SubjectName\", 0) $key = New-Object -COM \"X509Enrollment.CX509PrivateKey.1\" $key.ProviderName = \"Microsoft Enhanced RSA and AES Cryptographic Provider\" $key.KeySpec = 1 $key.Length = 4096 $key.SecurityDescriptor = \"D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)\" $key.MachineContext = 1 $key.Create() $serverauthoid = New-Object -COM \"X509Enrollment.CObjectId.1\" $serverauthoid.InitializeFromValue(\"1.3.6.1.5.5.7.3.1\") $ekuoids = New-Object -COM \"X509Enrollment.CObjectIds.1\" $ekuoids.Add($serverauthoid) $ekuext = New-Object -COM \"X509Enrollment.CX509ExtensionEnhancedKeyUsage.1\" $ekuext.InitializeEncode($ekuoids) $cert = New-Object -COM \"X509Enrollment.CX509CertificateRequestCertificate.1\" $cert.InitializeFromPrivateKey(2, $key, \"\") $cert.Subject = $name $cert.Issuer = $cert.Subject $cert.NotBefore = (Get-Date).AddDays(-1) $cert.NotAfter = $cert.NotBefore.AddDays($ValidDays) $SigOID = New-Object -ComObject X509Enrollment.CObjectId $SigOID.InitializeFromValue(([Security.Cryptography.Oid]$SignatureAlgorithm).Value) ","categories":["ICO"],"description":"Intersight Cloud Orchestrator allows workflow designers to run Ansible Playbook on the Ansible Controller node using the **Invoke Ansible Playbook** reusable task in the workflow.","excerpt":"Intersight Cloud Orchestrator allows workflow designers to run Ansible …","ref":"/docs/ico/executors/ansible/","tags":["Executors"],"title":"Ansible"},{"body":"February February 23 Placeholder February 16 Added support for Encryption Key management in IPMI Over LAN Policy on C-Series Intersight\rManaged Mode servers. For more information, see the Creating an IPMI Over LAN Policy section\rin the Cisco\rIntersight Managed Mode Configuration Guide.\nFebruary 9 Added OS installation support for Red Hat Enterprise Linux (RHEL) 8.6, 8.7,\r9.0, and 9.1 and Ubuntu 22.04 LTS on UCS C-Series Standalone and Intersight\rManaged Mode servers. For more information, see Supported\rOperating Systems for Standalone Servers and Supported\rOperating Systems for Intersight Managed Mode Servers.\nFebruary 2 Cisco UCS Tools VIB Version 1.3.1-1OEM release includes support for VMware ESXi version 8.0\rand is available for download on cisco.com. For more information, see Cisco UCS Tools. Added support for HyperFlex Data Platform version 5.0(2b) for B200 M6 compute node support.\rFor more information, see Cisco\rHyperFlex Cluster Deployment and Expand Cisco\rHyperFlex Clusters in Cisco Intersight. Added API support in Intersight Workload Optimizer (IWO). For more information, see the Cisco IWO API\rdocumentation. January January 19 Added support for creating orchestration tasks by importing an OpenAPI 3.x specification\rfile. For more information, see Creating\rOrchestration Tasks from OpenAPI Specifications File. Added support for OS Installation on remote Storage Area Network LUN targets in C-Series\rStandalone and all Intersight Managed Mode servers. For more information, see Install Target Selection. Added support for UCS-IOM-2304 and UCS-IOM-2304V2 with Cisco UCS 6536 Fabric\rInterconnect. For more information, see Supported\rHardware for Intersight Managed Mode. January 12 Added support for the following Graphics Processing Units in Intersight Managed Mode:\nUCSC-GPU-A16 on Cisco UCS C-Series M6 server\nUCSC-GPU-A100 on Cisco UCS C-Series M5 and M6 servers\nFor more information, see Supported\rHardware for Intersight Managed Mode.\nAdded Integrated Systems Administrator and Integrated Systems Operator privileges to\rmanage Integrated Systems. For more information, see Organizations\rand Roles in Intersight.\nAdded support for NVMe over RDMA over Converged Ethernet V2 (RoCE V2) with ESXi on Cisco\rUCS\rVIC 15000 series adapters. For more information, see RDMA Over Converged\rEthernet\r(RoCE).\n","categories":["ICO"],"description":"","excerpt":"February February 23 Placeholder February 16 Added support for …","ref":"/docs/whats_new/2023/","tags":["Workflow"],"title":"2023"},{"body":"Executors – Invoke Ansible Playbook - Reusable Task Supported Targets The Invoke Ansible Playbook task can be run only on the targets that are added as an Ansible Endpoint target type in Cisco Intersight.\nThe Invoke Ansible Playbook task is executed as an orchestrator task and does not include the management of the Ansible Controller node.\nTo run the Ansible Playbook task on the Ansible Controller node from Cisco Intersight, ensure that:\nThe Ansible target is reachable through Intersight Assist when hosted on the customer premises.\nThe Ansible Playbook modules and Ansible Playbook executables required to run the playbooks are already installed on the Ansible Controller node.\nThe Ansible Controller node has password-less SSH access to the hosts.\nThe Ansible Controller node can resolve the endpoint hostnames if the Ansible Host Inventory file specifies the hostnames.\nFor more information on Intersight Target Claim, see Target Claim Using Intersight Assist.\nUsing the Executor Ansible Playook Reusable Task Use the Invoke Ansible Playbook from the Executors section in the Intersight Orchestrator Task Designer UI to create a Invoke Ansible Playbook reusable task.\nFor more information on tasks, see Defining a Task\nThe following table explains the Invoke Ansible Playbook task properties:\nProperty Description General For more information, see Defining a Task. Inputs Ansible Controller—The target on which the Ansible Playbook task is run. By default, the Ansible Controller task input is created for the task. The Ansible Playbook target must be in the Connected state. Outputs To extract the required values from the command responses and map it to task outputs, do the following: Create Task Output—Specify the task output.\nMap to Task Output—Check the check box to map the task output to an command response.\nTask Output—Select the command response to which the task output is mapped. The options available are:\nExit Code | Invoke Ansible Playbook\nExecution Summary | Invoke Ansible Playbook\nExecution Log Path | Invoke Ansible Playbook\n| | | | | | | | | | | | |\n.\nFor example, if you create two task outputs Exitcode and Logapth and map it to Exit Code | Invoke Ansible Playbook and Execution Log Path | Invoke Ansible Playbook respectively, after the workflow is executed, the output will show:\nThe following table explains the Invoke Ansible Playbook executor input:\nProperty\nDescription\nPlaybook Path\nThe path of the Ansible Playbook file that resides on the Ansible Controller node added as Ansible Endpoint target in Intersight.\nStatic Value—The path of the Ansible Playbook.\nDirect Mapping—Select an existing task input or task output field.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task’s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nHost Inventory\nThe path of the host inventory file that resides on the Ansible Controller or a comma-separated list of hosts on which the Ansible Playbook task is run.\nStatic Value—The path of the host inventory file that resides on the Ansible Controller or a comma-separated list of hosts.\nFor example, you can enter the hostname as root@10.10.10.10,\nNote:\nThe hostname must be suffixed with a comma (,).\nDirect Mapping—Select the path from the task input or task output.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task’s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nCommand Timeout\nThe command timeout in seconds for the execution of the Ansible Playbook. The range is 10 to 7200 seconds.\nThe default timeout is 600 seconds.\nStatic Value—The command timeout in seconds.\nDirect Mapping—Select the command timeout from the task input or task output.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task’s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nCommand Line Argument\nThe optional command line arguments required to run the Ansible playbook.\nStatic Value—The command line argument.\nDirect Mapping—Select the input from the task input or task output.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task’s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nEscape character backslash(\\) needs to be used when the command line arguments contain double quotes(\").\nThe following command line options are not supported by the Ansible Playbook task.\n-vvv\n-vvvv\n-k, -K\n-c\n--connection\n--sftp-extra-args\n--scp-extra-args\n--ask-vault-password\n--step\nFor information on the available command line arguments, see https://docs.ansible.com/ansible/latest/cli/ansible-playbook.html.\nThe following table explains the Ansible Playbook executor Outputs:\nProperty\nDescription\nExit Code\nThe exit code after the execution of the Ansible Playbook against the given endpoint.\nExecution Summary\nThe summary after the execution of Ansible Playbook against the given endpoint.\nExecution Log Path\nThe Ansible execution log path on the Ansible Control node after the execution of Ansible Playbook against the given endpoint.\nThe following table explains the Invoke Ansible Playbook task Outcomes:\nProperty\nDescription\nOutcomes\nTo set the custom execution status and status message based on the obtained outputs, do the following:\nClick Add Outcome.\nName—The name for the outcome.\nOutcome Type—Select the outcome type. The options available are Success, Skip To Success, Error, Terminal Error, Skip Task Execution, or Status.\nFor more information on Outcomes, see Outcomes\nMessage—The message when the condition is met.\nCondition—The condition for the outcome.\nFor example, {{eq .global.InvokeAnsiblePlaybook1.output.ExitCode “0”}}.\nThis condition checks whether the output `ExitCode` of the executor named `InvokeAnsiblePlaybook1` equals to 0. If the condition is true, the task status is set to the value provided in `Outcome Type` and task status message is set to value provided in `Message`.\nTemplate Parameters The request body template can refer to values from task inputs, previous task outputs, or implicit parameters. The following table explains the template parameters.\nPrefix/Format\nDescription\n{{.global.task.input.\u003cParameterName\u003e}} Task input reference.\n{{.global.\u003cExecutorRefName\u003e.output.\u003cParameterName\u003e}} Previous executor output reference. ExecutorRefName is the name of the previous executor having output ParameterName.\n{{.security.AccountMoid}} Implicit parameter reference to Account MoID under which the workflow is running.\n{{.security.OrganizationMoid}} Implicit parameter reference to Organization MoID under which the workflow is running.\nTemplate Functions The template engine has in-built functions to transform values before they are populated in the request templates. The following table explains the functions supported in Invoke SSH Commands task.\nFunction\nDescription\nTrimSpace\nReturns a string after removing white spaces from a the string.\nExample:\n{{TrimSpace .global.task.input.HostName}} ContainsString\nReturns a boolean if a substring is present in a given string.\nExample:\n{{if (ContainsString .global.task.input.SizeAsString \\”MB\\”)}}Mega Bytes{{else}}Bytes{{end}} FindAllString\nReturns a slice of substrings matching the regular expression in a given string.\nExample:\n{{(FindAllString .global.task.input.NumberString \\”([0-9]+)\\”)}} The above example returns array [“123”, “456”] for input string “123 some text 456.”\nToJson\nConverts a value to a JSON format.\nExample:\n{{(FindAllString .global.task.input.NumberString \\\"([0-9]+)\\\") | ToJson}} The above example returns JSON array literal [“123”, “456”] for input string “123 some text 456.”\nAsArray\nTakes in an element and returns an array of one element.\nExample:\n{{AsArray .global.task.output.serverMo}} The above example returns an array of one server Mo.\nSubstring\nReturns a substring within the given index bounds.\nExample:\n{{Substring .global.task.input.StorageId 2 6}} The above example returns “ABCD” for string “12ABCD3456.”\nIpToCidr\nReturns the classless inter-domain routing (CIDR) notation of an IPv4 address and subnet mask.\nExample:\n{{IpToCidr .global.task.input.Ip .global.task.input.Netmask}} The above example returns “10.10.10.10/24” for the input parameters “10.10.10.10” and “255.255.255.0.”\nLookupInSlice\nChecks if a given value is present in given slice or array and returns true if it exists. This function can be used for any value.\nExample:\n{{LookupInSlice .global.task.input.IpAddressList \\”10.10.10.10\\”}} The above example returns true for input [”10.10.10.10”, “20.20.20.20”].\nIndex\nReturns a value from an array when an input index exists.\nExample:\n{{ index .global.task.input.nodes .global.task.input.idx }} In the above example, if nodes is an array of devices and idx is 2, the index function returns the second device in the array.\nItob\nConverts an integer to a boolean.\nExample:\n{{ Itob global.task.input.OnOffFlip }} The above example returns true and false for inputs 1 and 0 respectively.\nItoa\nConverts a given number to a string value.\nExample:\n{{ Itoa global.task.input.Port }} The above example returns “12345” for input 12345.\nItof\nConverts a given integer to a float value.\nExample:\n{{ Itof global.task.input.Rate }} The above example returns 15.0 for an input 15.\nBtoa\nConverts a given boolean to a string value.\nExample:\n{{ Btoa global.task.input.OnOffFlip }} The above example returns “true” for input true.\nBtoi\nConverts a given boolean to a integer value.\nExample:\n{{ Btoi global.task.input.OnOffFlip }} The above example returns 1 and 0 for inputs true and false respectively.\nAtob\nConverts the given string into a boolean value.\nExample:\n{{ Atob global.task.input.OnOffFlip }}Returns true for input “true” Atoi\nConverts a given number in string format to the integer type.\nExample:\n{{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048” Ftoa\nConverts a given number into the string form based on the given precision.\nExample:\n{{Ftoa .global.task.input.Size 2}} returns the following output: 123.456 =\u003e “123.45”, 1028 =\u003e “1028.00” Ftoi\nConverts a given float input to a integer value.\nExample:\n{{ Ftoi global.task.input.Rate }} The above example returns 15 for an input 15.833.\nEval\nSupports an expression evaluation function. The below example returns 2GB for a input value of 2048. Note that the second argument is passed as ‘.’ in the template, which represents the map of all parameters.\n{{Eval \\\"{{.global.task.input.Size}} / 1024\\\" .}}GB Template Engine Syntax The template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements\nThe comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}} Conditional Statements\nThe template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \u003ccomparision_statement\u003e}} Template to be used {{end}} {{if \u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}} {{if \u003ccomparision_statement\u003e}} Template to be used {{else if \u003ccomparision_statement}} Tempalte to be used {{end}} Invoke Ansible Playbook Reusable Task Example Example: Create a reusable task to run Ansible Playbook on the hosts\nThis example task runs on an Intersight Ansible Playbook controller. In this task, the Ansible Playbook path and host inventory list fields are provided by the task input fields.\nThe task properties required for this example are as following:\nProperty\nDescription\nGeneral\nOrganization—The organization that you are creating the task in.\nDisplay Name—A user friendly short name to identify the task definition.\nReference Name—The name of the Task definition.\nInputs\nAnsible Controller—By default, the Ansible Controller task input is created for the task.\nReference Name—AnsibleController\nType—Target Data Type\nPlaybook Path—The user defined task input for the path of the Ansible Playbook.\nReference Name—PlaybookPath\nType—String\nHost Inventory—The user defined task input for the path of the host inventory file.\nReference Name—HostInventory\nType—String\nOutputs\nExitCode—Task output\nReference Name—ExitCode\nType—String\nMap to Task Output—Exit Code | Invoke Ansible Playbook\nSummary—Task output\nReference Name—Summary\nType—String\nMap to Task Output—Execution Summary | Invoke Ansible Playbook\nLogpath—Task output\nReference Name—Logpath\nType—String\nMap to Task Output—Execution Log Path | Invoke Ansible Playbook\nThe following table explains the Invoke Ansible Playbook executor inputs:\nProperty\nDescription\nPlaybook Path\nDirect Mapping—{{.global.task.input.PlaybookPath}}\nHost Inventory\nDirect Mapping—{{.global.task.input.HostInventory}}\nCommand Timeout\nDefault value.\nCommand Line Argument\nStatic—-vv\nCommand line argument –vv is for the Ansible execution log verbosity.\n","categories":["ICO"],"description":"Intersight Cloud Orchestrator allows workflow designers to run Ansible Playbook on the Ansible Controller node using the **Invoke Ansible Playbook** reusable task in the workflow.","excerpt":"Intersight Cloud Orchestrator allows workflow designers to run Ansible …","ref":"/docs/ico/executors/ansible-resuable/","tags":["Executors"],"title":"Ansible Resuable"},{"body":"Sliders - Pics Sliders - Text \u003c!DOCTYPE html\u003e\rUnified monitoring and management Simplify the monitoring and management of Cisco and third-party compute, network, storage, integrated systems, virtualization, container, and public cloud resources and workloads, all from one unified hybrid IT operations platform.\rIncrease scale across data centers, remote locations, and public cloud without additional complexity.\rUse unified dashboards for at-a-glance insights across Cisco, third-party, and public cloud resources Cisco UCS Manager, Cisco IMC software, Cisco HyperFlex Connect, and Cisco UCS Director tunneling allow access to element managers that do not have local network access.\rConfiguration, provisioning, and installation\rAll Cisco, third-party, and public cloud resources can be allocated and reallocated among application workloads for more dynamic and efficient use of hybrid IT capacity.\rPolicy-based profiles and templates for deployment and configuration enable you to consistently provision and operate your hybrid IT infrastructure and resources, maintain standardization, eliminate configuration errors, and minimize configuration drift.\rLeverage policies and templates or clone profiles to quickly provision Cisco UCS or HyperFlex servers, regardless of where they are deployed.\rCreate, deploy, and manage Cisco HyperFlex configurations.\rOrchestration and workflow designer\rCisco Intersight Cloud Orchestrator is a low/no-code framework to create and execute complex orchestrations across multiple infrastructure domains, applications, and external endpoints.\rIntersight Cloud Orchestrator includes a library of out-of-the-box automation tasks supporting operations across Cisco and third-party compute, network, storage, integrated systems, virtualization, container, public cloud platforms, and other automation engines such as HashiCorp Terraform Cloud.\rUse the custom task designer to create your own library of automated operations using open standards such as HTTP/API, Ansible, PowerShell, SSH, and more.\rUse out-of-the-box workflows or create your own workflows by assembling tasks along with logical controls and loops. Built-in data transformation features help you adapt the format and flow of information as it passes through different domain automation and tasks.\rBoth workflow designer and custom task designer provide a drag-and-drop UI to simplify authoring with a low/no-code user experience.\r❮\r❯\rDiagrams GOAT 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 Mermaid Flowchart graph TD\rStart --\u003e Need{\"Hugo version \u003e= 0.93.0\"}\rNeed -- No --\u003e Off[\"Set params.mermaid.enable = true\"]\rOff --\u003e Author\rNeed -- Yes --\u003e Author[Insert mermaid codeblock]\rSequence sequenceDiagram\rparticipant Alice\rparticipant Bob\rAlice-\u003e\u003eJohn: Hello John, how are you?\rloop Healthcheck\rJohn-\u003e\u003eJohn: Fight against hypochondria\rend\rNote right of John: Rational thoughts prevail!\rJohn--\u003e\u003eAlice: Great!\rJohn-\u003e\u003eBob: How about you?\rBob--\u003e\u003eJohn: Jolly good!\rPie Chart pie title What Voldemort doesn't have?\r\"FRIENDS\" : 20\r\"FAMILY\" : 30\r\"NOSE\" : 30\r\"Office\" :15\r\"New Test\" : 5\rpie title What Voldemort doesn't have? \"FRIENDS\" : 20 \"FAMILY\" : 30 \"NOSE\" : 50 Graph graph LR\rA[Square Rect] -- Link text --\u003e B((Circle))\rA --\u003e C(Round Rect)\rB --\u003e D{Rhombus}\rC --\u003e D\rGit Graph gitGraph:\rcommit \"Ashish\"\rbranch newbranch\rcheckout newbranch\rcommit id:\"1111\"\rcommit tag:\"test\"\rcheckout main\rcommit type: HIGHLIGHT\rcommit\rmerge newbranch\rcommit\rbranch b2\rcommit\rGantt Diagram gantt\rtitle A Gantt Diagram\rdateFormat YYYY-MM-DD\rsection Section\rA task :a1, 2014-01-01, 30d\rAnother task :after a1 , 20d\rsection Another\rTask in sec :2014-01-12 , 12d\ranother task : 24d\rgraph TB\rc1--\u003ea2\rsubgraph one\ra1--\u003ea2\rend\rsubgraph two\rb1--\u003eb2\rend\rsubgraph three\rc1--\u003ec2\rend\rgraph TD\rA[Christmas] --\u003e|Get money| B(Go shopping)\rB --\u003e C{Let me think}\rC --\u003e|One| D[Laptop]\rC --\u003e|Two| E[iPhone]\rC --\u003e|Three| F[fa:fa-car Car]\rUML Diagrams with PlantUML participant participant as Foo\ractor actor as Foo1\rboundary boundary as Foo2\rcontrol control as Foo3\rentity entity as Foo4\rdatabase database as Foo5\rcollections collections as Foo6\rqueue queue as Foo7\rFoo -\u003e Foo1 : To actor\rFoo -\u003e Foo2 : To boundary\rFoo -\u003e Foo3 : To control\rFoo -\u003e Foo4 : To entity\rFoo -\u003e Foo5 : To database\rFoo -\u003e Foo6 : To collections\rFoo -\u003e Foo7: To queue\rFoo -\u003e Foo8: Go to start\rFoo -\u003e Foo9: Go to end MindMap support with MarkMap # markmap\r## Links\r- \u003chttps://markmap.js.org/\u003e\r- [GitHub](https://github.com/gera2ld/markmap)\r## Related\r- [coc-markmap](https://github.com/gera2ld/coc-markmap)\r- [gatsby-remark-markmap](https://github.com/gera2ld/gatsby-remark-markmap)\r## Features\r- links\r- **inline** ~~text~~ *styles*\r- multiline\rtext\r- `inline code`\r-\r```js\rconsole.log('code block');\r```\r- Katex - $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ ","categories":["ICO"],"description":"New Features 2","excerpt":"New Features 2","ref":"/docs/ico_new/newfeatues3/","tags":["Workflow"],"title":"New Features 2"},{"body":" TechOS is the OS of the future.\nRuns on bare metal in the cloud!\nFastest OS on the planet! The new TechOS operating system is an open source project. It is a new project, but with grand ambitions. Please follow this space for updates!\nContributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\nFollow us on Twitter! For announcement of latest features etc.\nRead more …\nContributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\nTop Imagine Artist and songwriter: John Lennon Co-writer: Yoko Ono Imagine there’s no heaven, It’s easy if you try No hell below us, above us only sky Imagine all the people living for today…\n…\nC #include \u003cstdio.h\u003e #include \u003cstdlib.h\u003e int main(void) { puts(\"Hello World!\"); return EXIT_SUCCESS; } Header card 1 Content card 1\rHeader card 2 Content card 2\rHeader card 3 Content card 3\rNote: To execute the new tasks for VMware vCenter networking operations, you should upgrade to Intersight Assist version 1.0.9-278.\nTo launch the Task Designer, choose Orchestration \u003e Task. A dashboard displays the following details under these tabs, namely, My Tasks, System Tasks, and All Tasks:\nTop Task Categories\nNumber of System Defined Tasks\nTop Workflows by Targets\nBelow the dashboard is a tabular list of tasks displaying the following information:\nDisplay Name\nDescription\nValidation Status\nLast Update\nSystem Defined\nOrganization\nFrom this screen, with an account administrator or a Workflow Designer role, you can perform the following actions for an organization:\nCreate a task\nEdit or delete a task\nNote: Tasks created in an organization can be used in workflows created within that organization only.\nSupported Requests You can define and execute one or more API requests in the task definition. You can extract the required values from the API responses and use them in subsequent API requests as task output values. You provide values for different properties in an HTTP API request and use them in subsequent API request or as task output values. You can also provide values for different properties of an HTTP API request, such as, HTTP method, URL, header, cookies, etc.\nThe API requests can be executed on external targets that are reachable by Intersight, either directly or through device connectors. The supported HTTP authentication scheme is Basic Authentication over HTTPS. The external targets with their credentials are defined when specifying the Targets in the Targets screen (see: Target Management). Hence, there is no need to provide credentials or authentication specific headers in the request. The input parameter of type target data type is the source from which the details are automatically collected from.\nResponse Parser The response parser contains information about the required values, their types, and the location in the API responses. You specify the required values along with API request details. These details are used by the response parser to extract values from the API responses. The extracted values are used as task output values and to determine the task execution status and the status message.\nThe supported response type is JSON. The response parser supports extraction of values from JSON responses. The users shall provide the information such as the value parameter name, type and the JSON path of the value location. You can extract multiple values from the API response by providing the above details for each required value.\nOutcomes An outcome is the combination of a condition and task status. You use the extracted values from the API response to determine the task status and set the status with an appropriate message, when the conditions match. You can specify one or more outcomes and the outcomes are evaluated in the specified order. The first outcome condition that matches sets the task status and message. If none of the outcome condition matches, the task shall be marked as successful. The outcomes of a task are as follows:\nSuccess—Marks the API execution as Success if the condition matches\nSkip to Success—Stops further API executions of the task and marks the task as successful when the condition matches\nStatus—Retains a task as work in progress, only updating the status\nError—Marks the API execution as Failed if the condition matches. Task retry will be attempted if the task has any retries left\nTerminal error—Marks the API execution as Failed if the condition matches. This marks a non-recoverable error and no retries are attempted\nSkip Task Execution—Skips execution of task if the condition matches in the API. This will skip execution of all the subsequent APIs in the task\nIf the task status is Terminal Error, there are no retries for that task.\nCreating a Task Task creation can be broken down into the following sequence of steps:\nDefining a task—you specify the name of the task and provide a few other generic details.\nDefining task inputs and task outputs—you can specify which input parameters are required to execute the task and the output expected from the execution.\nAdding multiple API requests in the Task Designer.\nDefining a Task Choose Orchestration from the left navigation pane.\nClick Tasks tab.\nChoose Create Task.\nDrag and drop a task from the Tools section on the Design area.\nIn the Task Properties area, choose the General tab and enter the following information:\na. Organization—Name of the organization that you are creating the task in\nb. Task Name—A user-friendly short name for the task\nc. Description—A description for the task\nd. Retry Count—Number of times a task should be tried before it is marked failed\ne. Retry Delay—Delay, in seconds, after which a task is tried again\nf. Timeout—Timeout value, in seconds, after which a task is termed as timed out\ng. Set Tags—Set a tag for the task in the key:value format\nh. Enable Rollback Task—Enable to rollback a task and choose an appropriate task from the drop-down list. Create the required workflow inputs and map it accordingly\nNote: Rollback operation for Assign IP Address to Virtual Machine Network task is not supported on Windows virtual machines.\nDefining Task Inputs and Outputs In the Task Properties area, choose the Input tab and choose a parameter. For more information about the Input properties, see Workflow Designer.\nClick the Edit icon to open the Create Task Input dialog.\nIn the Add Input screen, enter the following details:\na. Display Name—Enter user-friendly short name.\nb. Reference Name\nc. Description—Detailed description of the input\nd. Value Restrictions—Choose Required, Collection/Multiple, or can be left blank\ne. Type—Choose a data type for primitive data type. For example, enum\nf. Enum List—Label for the enum value\ng. Minimum and Maximum Range\nh. Regex—Validates the regular expression when you select String in the Type field.\ni. Object Selector—Enable to configure the Intersight managed object selectors. This attribute is available only when the primitive data is String. Specify the Intersight API Reference and selector attributes to feed the input from the table selection. Value will be passed according to the configuration set in the Value attribute.\nj. Intersight API Reference—Enter the URL of the Intersight API configured with parameters.\nk. Selector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nl. Value Attribute—Enter the value to be passed as an input while executing a task. This value should be any one of the attribute name specified in the Selector Attribute field. This attribute is available only when the primitive data is String.\nm. Secure—Indicates that the values of these properties are encrypted and stored in Cisco Intersight.\n\u003c!-- --\u003e The fields displayed depend on the value you select for the Type field. Task designer does not support target date type. \u003c!-- --\u003e Click Add.\nRepeat this procedure to create multiple task inputs.\nIn the Task Properties area, choose the Output tab and choose a parameter. For more information about the output properties, see Input and Output.\nThe created task is available in the General category in Workflow Designer. You can create a workflow by dragging and dropping the task on the Workflow Design area.\nTemplate Engine Syntax** The template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements** The comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .global.CreateSnapshot.output.HttpStatusCode 400) (lt .global.CreateSnapshot.output.HttpStatusCode 500)}}\nConditional Statements The template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \\\u003ccomparision_statement\u003e}} Template to be used {{end}} {{if \\\u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}} {{if \\\u003ccomparision_statement\u003e}} Template to be used {{else if \\\u003ccomparision_statement}} Tempalte to be used {{end}} {{if (eq .global.CreateSnapshot.output.HttpStatusCode 200)}}\\ Snapshot with name {{.global.CreateSnapshot.input.Name}} is created successfully.\\ {{end}}\\ \\ {{if (eq .global.CreateSnapshot.output.HttpStatusCode 200)}}\\ Snapshot with name {{.global.CreateSnapshot.input.Name}} is created successfully.\\ {{else}}\\ Snapshot creation failed with message {{.global.CreateSnapshot.output.HttpStatusMsg}}.\\ {{end}}\\ \\ {{if (eq .global.CreateSnapshot.output.HttpStatusCode 200)}}\\ Snapshot with name {{.global.CreateSnapshot.input.Name}} is created successfully.\\ {{else if (eq .global.CreateSnapshot.output.HttpStatusCode 409)}}\\ A Snapshot with name {{.global.CreateSnapshot.input.Name}} already exists.\\ {{else}}\\ Snapshot creation failed with message {{.global.CreateSnapshot.output.HttpStatusMsg}}.\\ {{end}} Example Task: Creating a Snapshot of Pure Flash Array This example shows how to create a snapshot of a volume in a Pure Flash Array. Specify the following information in the General tab of the Task Properties area.\n+——-+————————————————————–+ | Field | Value | | Name | | +=======+==============================================================+ | Task | New Pure Volume Snapshot | | Name | | +——-+————————————————————–+ | Retry | 1 | | Count | | | | The task will be retried once more when the task fails. | +——-+————————————————————–+ | Retry | 10 | | Delay | | | | The task will be retried after 10 seconds. | +——-+————————————————————–+ | Ti | 20 | | meout | | | | If the task does not complete execution in 20 seconds, then | | | it is marked as Failed. If a retry count is configured | | | (which is 1 for this task), the task is retried after the | | | specified retry delay, which is 10 seconds. | +——-+————————————————————–+\nThe snapshot is created using the Pure Flash Array volume API. Below is a sample API request and response from Pure Flash Array API Reference.\nPOST /volume\\ {\\ \\\"snap\\\": true,\\ \\\"source\\\": \\[\\ \\\"\\\u003cVolume Name 1\u003e\\\",\\ \\\"\\\u003cVolume Name 2\u003e\\\"\\ \\]\\ } From the above API, it can be inferred that the name of the source volume is required, for which the snapshot is created. To do this, add a task input parameter of type string to fetch the volume name as a task input. Assuming the task input parameter is named as VolumeName, the following template can be used to create the above request. This template is populated as value for Body field in the API request’s input panel.\n{\\ \\\"snap\\\": true,\\ \\\"source\\\": \\[\\ \\\"{{.global.task.input.VolumeName}}\\\"\\ \\]\\ } You either receive a success or a failure message for the request. The following is a sample of the success message. The success message displays the serial number and the new snapshot name against the Name and Serial properties. This information is extracted as a task output.\n200 OK\\ \\[\\ {\\ \\\"created\\\": \\\"2017-12-16T05:12:53Z\\\",\\ \\\"name\\\": \\\"\\\u003csnapshot name\u003e\\\",\\ \\\"serial\\\": \\\"\\\u003cserial number\u003e\\\",\\ \\\"size\\\": 5368709120,\\ \\\"source\\\": \\\"\\\u003cvolume name\u003e\\\"\\ }\\ \\] In case of a failure, the response displays an array of errors. Each error contains a message, a code, and a context. In this example, if the specified volume name is not found, the following message is displayed.\n400 BAD REQUEST\\ \\[\\ {\\ \\\"msg\\\": \\\"Volume does not exist.\\\",\\ \\\"code\\\": 6,\\ \\\"ctx\\\": \\\"\\\u003cVolume Name\u003e\\\"\\ }\\ \\] If the msg property is present in the response, the property can be used to determine the task status with HTTP status code 400. The property named msg can be accessed using the JSON path \\$[0].msg. The details to extract the parameters are provided as value for Response Parser field in API request’s input area. The path is a valid JSON path that locates a required data in the API response.\n+——————-+————————————————–+ | Response | Details | | Parameter | | +===================+==================================================+ | SnapshotName | This parameter contains the extracted snapshot | | | name in the API output. | | | | | | - Name: SnapshotName | | | | | | - Path: \\$[0].name | | | | | | - Type: string | +——————-+————————————————–+ | Serial | This parameter contains the extracted serial | | | value in the API output. | | | | | | - Name: Serial | | | | | | - Path: \\$[0].serial | | | | | | - Type: string | +——————-+————————————————–+ | Error | This parameter contains the extracted error | | | message in the API output. | | | | | | - Name: Error | | | | | | - Path: \\$[0].msg | | | | | | - Type: string | +——————-+————————————————–+\nTo define a task, drag and drop the Invoke Web API Request task into the Task Designer area. Use the Properties area to populate API details. The following is sample information that can be entered the General tab.\n+——+—————————————————————+ | F | Value | | ield | | | Name | | +======+===============================================================+ | Name | Create Snapshot | | | | | | The name must be unique. The APIs inside the task cannot be | | | named as Create Snapshot. A name without space, such as | | | CreateSnapshot can be used to refer the API output in | | | subsequent API requests. In this example the following | | | details are referred using API name. | | | | | | HTTP Status Code: | | | | | | {{.global.CreateSnapshot.output.HttpStatusCode}} | | | | | | The parameters extracted from the response are referred using | | | the API name after extracting the value from the response | | | through the response parser as follows: | | | | | | {{.global.CreateSnapshot.output.Serial}} | +——+—————————————————————+ | Set | Checked - true | | Exte | | | rnal | As this is the first API and task does not have an input of | | Ta | type Target, a dialog appears that can be used to add a task | | rget | input of Target type. The claimed Pure Storage Array target | | | is provided as value for this task input during execution. | +——+—————————————————————+\nThe task input pertains to the API request details and to extract the required values from response. The following is an example of the required input values for the create snapshot API.\n+———+————————————————————+ | Field | Value | | Name | | +=========+============================================================+ | Method | POST | +———+————————————————————+ | URL | /volume | | | | | | The relative URL of the REST API end point is specified. | | | The host part is filled through the information in pure | | | target (Protocol, IPAddress, Port). | +———+————————————————————+ | Body | Content Type: JSON | | | | | | Text: | | | | | | {\\ | | | \\“snap\\\": true,\\ | | | \\“source\\\": [\\ | | | \\”{{.global.task.input.VolumeName}}\\”\\ | | | ]\\ | | | } | +———+————————————————————+ | R | The following parameters are added: | | esponse | | | Parser | - SnapshotName: Path: \\$[0].name, Type: string | | | | | | - Serial: Path: \\$[0].serial, Type: string | | | | | | - Error: Path: \\$[0].msg, Type: string | +———+————————————————————+\nThe extracted values from the API responses determine the task status. In this example, the following outcomes are added based on the API response.\nIf the status code is 401, the task encounters terminal failure with Authorization Failed message. The retry also fails. Hence the outcome type is set as Terminal Error. So, the task is not retried despite a retry is being specified. +————+———————————————————+ | Outcome | Value | | Property | | +============+=========================================================+ | Name | Authorization Error | | | | | | Identifies an outcome in the outcomes list of task | | | designer. The name is not used for any other purpose. | +————+———————————————————+ | Condition | {{eq .global.CreateSnapshot.output.HttpStatusCode 401}} | | | | | | This condition checks whether the response status code | | | of API named ‘Create Snapshot’ is 401. | +————+———————————————————+ | Outcome | Terminal Error | | Type | | +————+———————————————————+ | _ | Authorization Error. Check the target credentials. | | _Message** | | +————+———————————————————+\nIf the HTTP status code is 400 and the extracted error is Volume does not exist, the task fails terminally. In this case, the retry execution also fails, hence the outcome type is set as Terminal Error. +——–+————————————————————-+ | O | Value | | utcome | | | Pr | | | operty | | +========+=============================================================+ | Name | Volume does not exist | | | | | | The name here is to identify an outcome quickly in the | | | outcomes list of task. The name is not used for any other | | | purpose. | +——–+————————————————————-+ | Con | { | | dition | {and (eq .global.CreateSnapshot.output.HttpStatusCode 400)\\ | | | (eq .globa | | | l.CreateSnapshot.output.Error \\‘Volume does not exist.\\’)}} | | | | | | If we refer the sample response in previous sections, we | | | will get a 400-Bad Request with response containing error | | | msg ‘Volume does not exist.’. | +——–+————————————————————-+ | O | Terminal Error | | utcome | | | Type | | +——–+————————————————————-+ | M | A volume with name {{.global.task.input.VolumeName}} does | | essage | not exist. Check the volume name given. | | | | | | This outcome for a given volume name input ‘oracle-db’ will | | | fail the task with message ‘A volume with name oracle-db | | | does not exist. Check the volume name given. | +——–+————————————————————-+\nFor any API failure caused by bad user input, do not retry and fail the task immediately. +——–+————————————————————-+ | O | Value | | utcome | | | Pr | | | operty | | +========+=============================================================+ | ** | Any client error | | Name** | | | | Identifies a result in the outcomes list of task designer, | | | and is not used for any other purpose | +——–+————————————————————-+ | _ | { | | _Condi | {and (ge .global.CreateSnapshot.output.HttpStatusCode 400)\\ | | tion** | (lt .global.CreateSnapshot.output.HttpStatusCode 500)}} | | | | | | This condition checks if the HTTP status code is in the | | | range between 400 to 499. | +——–+————————————————————-+ | O | Terminal Error | | utcome | | | Type | | +——–+————————————————————-+ | Mes | API request | | sage | failed - {{.global.CreateSnapshot.output.HttpStatusCode}}\\ | | | {{if (index .global.CreateSnapshot.output `Error`)}}:\\ | | | {{.global.CreateSnapshot.output.Error}}{{else}} \\ | | | {{.global.CreateSnapshot.output.HttpStatusMsg}}{{end}} | | | | | | This message checks that a valid error message is extracted | | | by using an if else block | | | | | | {{if (index .global.CreateSnapshot.output `Error`)}} | | | | | | If the error value is ‘Snapshot not supported’, the task | | | status message is ‘API request failed – 405: Snapshot not | | | supported’. | | | | | | If no valid error message is present in the response, the | | | HTTP status message is used. For example, **API request | | | failed – 413 Payload Too Large**. | +——–+————————————————————-+\nFor errors on the server, the task must be tried again before setting the outcome type as Error instead of Terminal Error. +—–+—————————————————————-+ | O | Value | | utc | | | ome | | | Pr | | | ope | | | rty | | +=====+================================================================+ | ** | Any server error | | Nam | | | e** | The name here is to identify an outcome quickly in the | | | outcomes list of task designer. The name is not used for any | | | other purpose. | +—–+—————————————————————-+ | _ | {{and (ge .global.CreateSnapshot.output.HttpStatusCode 500) \\ | | _Co | (lt .global.CreateSnapshot.output.HttpStatusCode 600)}} | | ndi | | | tio | This condition checks if the HTTP status code is in the range | | n** | between 500 to 599. | +—–+—————————————————————-+ | O | Error | | utc | | | ome | The outcome type is set as Error. Hence, the request is | | Typ | retried, if retries are configured. | | e | | +—–+—————————————————————-+ | ** | API requ | | Mes | est failed - {{.global.CreateSnapshot.output.HttpStatusCode}}\\ | | sag | {{if (index .global.CreateSnapshot.output `Error`)}}:\\ | | e** | {{.global.CreateSnapshot.output.Error}}{ | | | {else}} {{.global.CreateSnapshot.output.HttpStatusMsg}}{{end}} | | | | | | This is the same message that is used in the client error | | | outcome. | +—–+—————————————————————-+\nThis can be termed as the final outcome for a successful completion. +——–+————————————————————-+ | O | Value | | utcome | | | Pr | | | operty | | +========+=============================================================+ | ** | All Good | | Name** | | | | The name identifies an outcome in the outcomes list of task | | | designer. The name is not used for any other purpose. | +——–+————————————————————-+ | _ | True | | _Condi | | | tion** | {{eq .global.CreateSnapshot.output.HttpStatusCode 200}} | | | | | | True can be used as the condition to capture all | | | scenarios or the specific success response status code can | | | be used, which is 200. | +——–+————————————————————-+ | O | Success | | utcome | | | Type | | +——–+————————————————————-+ | Mes | A snapshot with name | | sage | | | | {{.global.CreateSnapshot.output.SnapshotName}} | | | | | | and serial | | | | | | {{.global.CreateSnapshot.output.Serial}} | | | | | | is created successfully for volume with name | | | | | | {{.global.task.input.VolumeName}} | | | | | | . | | | | | | The outcome for a given volume name input oracle-db sets | | | the task to success with the message: **A snapshot with | | | name oracle-db.8 and serial B3CD9AF2175A4E2800011010 is | | | created successfully for volume with name oracle-db**. | +——–+————————————————————-+\nAs part of this task, an inventory refresh request can be sent to pull the new snapshot inventory. This API contains the following details in the request.\nPOST /v1/task/PureScopedInventories\\ {\\ \\\"Type\\\": \\\"storage.PureVolumeSnapshot\\\",\\ \\\"NamingProperty\\\": \\\"Name\\\",\\ \\\"Values\\\": \\[\\ \\\"\\\u003cSnapshot_Name\u003e\\\"\\ \\],\\ \\\"RegisteredDevice\\\": {\\ \\\"ObjectType\\\": \\\"asset.DeviceRegistration\\\",\\ \\\"Moid\\\": \\\"\\\u003cPure Device Registration Id\u003e\\\"\\ }\\ } The snapshot name is obtained from previous API output by using the following reference: {{.global.CreateSnapshot.output.SnapshotName}}.\nThe device registration ID is obtained by performing a GET API of the selected target and extracting the MOID from the RegisteredDevice. For more information, see API Docs.\nThis section is realized by sending two Intersight API requests: GET /v1/asset/Targets/\\\u003cTarget_Moid\u003e and using the extracted registered device Moid in the above request. Having explained the API specific details in the previous section, we will quickly add two API calls to the same task.\nDo not choose the Set External Target option in the General tab. This is because the API calls can be inferred as Intersight API calls.\nThis section captures the details related to the Intersight API call that gets the registered device Moid from the given target task input.\nThe outcomes shall be added for better experience with these Intersight API calls and since the previous section explains the outcomes in detail, this section does not cover them.\nGET is used as the default, if no value is provided for Method field.\n+——————+—————————————————+ | Field Name | Value | +==================+===================================================+ | API Name | Get Device Id | +——————+—————————————————+ | Set External | Unchecked/false | | Target | | +——————+—————————————————+ | URL | /v1/asset/Targets/ | | | | | | {{.global.task.input.Target.Moid}} | +——————+—————————————————+ | Response | We will extract the Moid of the | | Parser | ‘RegisteredDevice’ relation. | | | | | | DeviceMoid – Path: \\$.RegisteredDevice.Moid, | | | Type: string | +——————+—————————————————+\nThe target Moid required in the URL is populated from the task input Target. As part of this API output, the extracted device Moid can be referred in the next API request body with the following reference:\n{{.global.GetDeviceId.output.DeviceMoid}}\nUsing this example, you can also capture details for the Intersight API that requests the inventory refresh for Pure Flash Array snapshots. The snapshot name is extracted from the first API and the device Moid is extracted from the second API to create a request for this API.\n+—————+——————————————————+ | Field Name | Value | +===============+======================================================+ | API Name | Request Inventory Refresh | +—————+——————————————————+ | Set | Unchecked or false | | External | | | Target | | +—————+——————————————————+ | Method | POST | +—————+——————————————————+ | URL | /v1/task/PureScopedInventories | +—————+——————————————————+ | Body | Content Type: JSON | | | | | | Text: | | | | | | {\\ | | | \\“Type\\\": \\“storage.PureVolumeSnapshot\\”,\\ | | | \\“NamingProperty\\\": \\“Name\\”,\\ | | | \\“Values\\\": [\\ | | | | | | \\”{{.global.CreateSnapshot.output.SnapshotName}}\\”\\ | | | ],\\ | | | \\“RegisteredDevice\\\": {\\ | | | | | | \\“ObjectType\\\": \\“asset.DeviceRegistration\\”,\\ | | | \\“Mo | | | id\\\": \\”{{.global.GetDeviceId.output.DeviceMoid}}\\”\\ | | | }\\ | | | } | +—————+——————————————————+\nThere is no response body for this request. Therefore, the outcomes can be added based on API HTTP status code to set the task status. The outcome is not added her as they have been captured in detail for the first outcome. The extracted values from the API response SnapshotName and Serial are mapped to task output so that they are available as task output that can be referred in subsequent tasks in a workflow. This can be done by creating two task output parameters named ‘SnapshotName’ and ‘Serial’ in ‘Output tab of Properties area. The task output can be mapped to take API response values by using Map to Task Output action. The values extracted using Response Parser in an API can be mapped by selecting Parameters and then the API Name entry in Task Output drop down and providing the actual parameter names in Path field.\nExample: Obtaining Cisco ASA Details\nThe previous example illustrates the need to make API requests to a claimed target in Intersight. This section explains a sample task that obtains simple information from Cisco ASA, while is reachable from Intersight Assist. Intersight does not have a device connector for Cisco ASA.\nAs a first step, Cisco ASA is added as custom target. Cisco ASA uses HTTP basic authentication and has REST API interface. Hence, requests can be made to Cisco ASA as part of Intersight IO tasks. The device must be reachable from Intersight Assist. The device can be added as a Custom Target in Targets screen, by providing IP address, credentials and Intersight Assist from which the device is reachable. Cisco ASA added as custom target must be configured from Intersight tasks. Though, Cisco ASA supports basic authentication and does not need a session token to be created in Intersight, you can use a session token to showcase the Web API support for handling values for request and response headers.\nA session token is created and used in the request header to facilitate in the extraction of response headers. In this example, the task executes two API requests in Cisco ASA, namely create a session token and use the session token to obtain the Cisco ASA version.\nTo obtain a session token, use the Post call /api/tokenservices’ to create a session token. Use the Delete request /api/tokenservices/\\ to delete the session. Cisco ASA expects a request to create a session token. It must include the basic authentication header that Intersight populates when using the details in the custom target.\nPOST /api/tokenservices\\ 204 No Content\\ \\ Response Headers\\ X-Auth-Token: \\\u003cNew Session Token\u003e The subsequent API requests must have the X-Auth-Token request header.\nThe following table explains the request details that need to be provided in Task Designer to create session token.\n+—————+——————————————————+ | Field Name | Value | +===============+======================================================+ | API Name | Get Session Token | +—————+——————————————————+ | Set External | Checked | | Target | | | | A task input of target type is added through the | | | Task Designer dialog. | +—————+——————————————————+ | Method | POST | +—————+——————————————————+ | URL | /api/tokenservices | +—————+——————————————————+\nNote: There is no need to have a request body or response parser given because the API does not generate a response body.\nDetails, such as, response headers, cookies, status code, and status message, can be referred in subsequent API requests using references based on the API name as follows:\n+————–+——————————————————-+ | Response | Reference Name | | Parameter | | +==============+=======================================================+ | Headers—-A | {{.global.GetSessionToken.output.HttpHeaders}} | | map of | | | headers with | A specific response header value can be obtained | | keys being | using two notations: | | the header | {{.glob | | name and | al.GetSessionToken.output.HttpHeaders.\\}} | | values being | or {{index .global.GetSessionToken.output.HttpHeaders | | a string | `HeaderName`}} | | array of | | | header | Examples of above notations are: | | values. | | | | {{.global.GetSessionToken.output.HttpHeaders.Date}} | | | | | | {{index .global.GetSessionToken.output.HttpHeaders | | | `X-Auth-Token`}} | | | | | | The above examples get the header value in the form | | | of string array and individual values can be | | | accessed by index template function. The index | | | function can also be used to access a specific header | | | in Headers. | | | | | | {{index | | | .global.GetSessionToken.output.HttpHeaders.Date 0}} | | | | | | {{index (index | | | .global.GetSessionToken.output.HttpHeaders | | | `X-Auth-Token`) 0}} | | | | | | Note: The template engine used by Intersight IO | | | considers hyphens (-) as special characters and does | | | not allow obtaining headers with hyphens using the | | | first dotted notation. Considering the fact that most | | | of the header names are hyphenated, it is recommended | | | to use the second notation only. | +————–+——————————————————-+ | Cookies—A | {{.global.GetSessionToken.output.HttpCookies}} | | map of | | | cookies with | The further values of specific cookies can be | | keys being | referred using either the dot notation or with index | | cookie names | function. The details are explained in the previous | | and the | row about Headers. | | values being | | | strings. | | +————–+——————————————————-+ | HTTP Status | {{.global.GetSessionToken.output.HttpStatusCode}} | | C | | | ode—Number | | +————–+——————————————————-+ | HTTP Status | {{.global.GetSessionToken.output.HttpStatusMsg}} | | Mess | | | age—String | | +————–+——————————————————-+\nThe following table explains the various outcomes that the API request can produce.\n+—————–+—————————————————-+ | Outcome Name | Details | +=================+====================================================+ | Unauthorized | Condition—{{eq | | | .global.GetSessionToken.output.HttpStatusCode | | | 401}} | | | | | | Outcome Type:—Terminal Error | | | | | | Message: Authorization failed. Check the target | | | credentials. | +—————–+—————————————————-+ | Session Limit | Condition—{{eq | | Breached | .global.GetSessionToken.output.HttpStatusCode | | | 503}} | | | | | | Outcome—Type: Error | | | | | | Message—Maximum number of sessions reached. | +—————–+—————————————————-+ | All Well | Condition—{{eq | | | .global.GetSessionToken.output.HttpStatusCode | | | 204}} | | | | | | Outcome Type—Success | | | | | | Message—Session token is Obtained. | +—————–+—————————————————-+\nThe auth token obtained from the first API can be used in the second API to obtain the ASA version and other details as follows:\nGET /api/monitoring/device/components/version\\ Request Headers:\\ X-Auth-Token: \\\\ 200 OK\\ {\\ \\“kind\\\": \\“object#Version\\”,\\ \\“selfLink\\\": \\\"/api/monitoring/device/version\\”,\\ \\“deviceType\\\": \\“ASAv\\”,\\ \\“upTimeinSeconds\\\": 208800,\\ \\“totalFlashinMB\\\": 8192,\\ \\“currentTimeinSeconds\\\": 1612870500,\\ \\“firewallMode\\\": \\“Transparent\\”,\\ \\“asaVersion\\\": \\“9.5(2)\\”\\ } The following table explains the request details that need to be provided in Task Designer API request panel for the ASA version request.\n+—————+——————————————————+ | Field Name | Value | +===============+======================================================+ | API Name | Get ASA Version | +—————+——————————————————+ | Set External | Checked | | Target | | +—————+——————————————————+ | URL | /api/monitoring/device/components/version | +—————+——————————————————+ | H | {\\ | | eaders—JSON | \\“X-Auth-Token\\\": [\\ | | with header | \\”{{index | | name mapped | (index .global.GetSessionToken.output.HttpHeaders \\ | | to array of | `X-Auth-Token`) 0}}\\”\\ | | header values | ]\\ | | | } | | | | | | The token value is extracted from the previous API | | | response header and used here in this API request | | | header. | +—————+——————————————————+ | Response | Version—Path: \\$.asaVersion, Type: string | | Parser | | +—————+——————————————————+\nA simple outcome checks for status code. If outcome is 200, the task is marked as failed.\nName—Not OK\nCondition—{{ne .global.GetASAVersion.output.HttpStatusCode 200}}\nOutcome Type—Error\nMessage—GET ASA version failed\nThe two API requests have been added to obtain session token and then to obtain the ASA version. The extracted API output can be mapped to the task output.\nTask Input and Executor Output Mapping Task inputs and previous executors output can be used for direct mapping or transformed mappings. The syntax to refer to these will depend on the type of mapping. Task inputs are referenced as {{.global.task.input.InputName}} where InputName is the Reference Name given to the Task input and not the Display Name or Label. Similarly, task outputs are referenced as \\${TaskName.output.TaskOutput}.\nTo specify an input mapping, select a task and click Edit against a task input parameter.\nThe options available are:\nStatic Value—Enter a value that is assigned to the task input field.\nDirect Mapping—Map an existing task input or previous executors output to the selected task input\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task\\’s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template. You can then preview the template and test the transformation with sample values.\nNote: Transformed mapping is only supported for task inputs of primitive data types, such as string, integer, boolean, and float.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string. \u003c!-- --\u003e Example 1:\nFindAllString(s, regex string) ([]string, error)\\ Example: {{(FindAllString .global.task.input.NumberString \\\\”([0-9]+)\\\\”)}} \\ returns array [“123”, “456”] for input string “123 some text 456”.\nExample 2:\nAtoi function converts the given number in string format to integer type.\\ Atoi(s string) (int, error)\\ Example: {{Atoi .global.task.input.SizeString}} \\ returns integer 2048 for input string “2048”\nExporting a Task Intersight Cloud Orchestrator enables you to export tasks from an account to your system and then import them to another account.\nTo export a task, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Tasks.\nFrom the tabular list of tasks, do one of the following:\nSelect a task, click the Ellipsis (…) icon in the same row, and then choose Export Task.\nSelect multiple tasks, click the Ellipsis (…) icon from the header or footer of the tabular list, and then choose Export Task.\nNote: You can also export tasks from the Actions menu in the Task Designer window.\nIn the Export Task screen:\na. In the JSON File Name field, use the default filename or enter a filename of your choice for the JSON file that stores the task components.\nb. Use the Export Tags toggle button to include or exclude the user-defined tags. ICO does not export the system-defined tags.\nc. Click Export.\nd. Save a local copy of the JSON file.\nImporting a Task Intersight Cloud Orchestrator enables you to import tasks to your account by importing a JSON file that contains the task components. You can create the JSON file by exporting the task components from another account.\nTo import a task, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Tasks.\nClick Import.\n\u003c!-- --\u003e The Import wizard appears. \u003c!-- --\u003e In the Select File screen:\na. From the Organization drop-down list, choose the organization to which you want to import the task(s).\nb. Click Browse, and then select the JSON file that contains the task(s).\nNote: Ensure that the file size of the JSON file is not more than 1MB. If the file size is more than 1MB, export the task(s) in batches, and then try import.\nc. Click Next.\n\u003c!-- --\u003e Intersight Cloud Orchestrator validates the JSON file and displays the task(s) in the Details screen.\n\u003c!-- --\u003e In the Details screen:\na. To associate an additional tag to the components listed in the table, enter the tag in the Set Tags field.\nNote: Set Tags is an optional field. You must enter the tag in the key:value format.\nb. If one or more task or task components are already available in the system, choose a rule to replace or skip the duplicate components.\nc. Click Import.\n\u003c!-- --\u003e In the Import Result screen:\na. Verify the status of the imported task and task components.\nb. If you want to view the details of the import request:\nClick the link displayed above the table.\nAlternatively, click the Requests icon displayed in the menu bar.\n\u003c!-- --\u003e For more information, see Requests.\na. Click Close.\nManaging the Lifecycle of a Task Task management consists of organizing, creating, updating, and deletion of tasks. The following table describes the set of actions that you can perform with tasks in Cisco Intersight.\n+——–+————————————————————-+ | A | Description | | ctions | | +========+=============================================================+ | View | Choosing Orchestration from the left navigation pane will | | Tasks | display all workflows in a tabular format. Clicking Tasks | | | will display all tasks in a tabular format. You can view | | | information such as the task name and description, the | | | number of versions available, the number of times the task | | | has been executed, the last execution status, validation | | | information and the last update time and date. | +——–+————————————————————-+ | Create | Choose Orchestration from the left navigation pane and | | a New | click Tasks. Then, click Create Task. This option opens up | | Task | the Task Designer, using which you can create a new task. | +——–+————————————————————-+ | Delete | From the tabular list of workflows, you can select a task | | a Task | and click Delete. This will remove the task. | +——–+————————————————————-+ | Clone | From the tabular list of tasks, you can select a task and | | a Task | click Clone. This will clone the selected task. | +——–+————————————————————-+ | Save a | From the tabular list of tasks, you can choose a task and | | Task | click. By default, the workflow details are displayed in | | as | the Designer tab. You can choose Save As option from the | | | Action drop-down list to clone a task. | | | | | | In the Save As screen, you can specify user-friendly short | | | name, reference name, description, and tag key. Click Save. | | | For more information, see Cloning a Task. | +——–+————————————————————-+\nCloning a Task You can clone only a user-defined task. The cloned task is identical to the original task. You can edit the new task immediately. You might do this, for example, to create a task that is similar to the source task that can be edited based on your requirements.\nTo clone a task, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Tasks.\nFrom the tabular list of tasks, select a task and choose Clone.\nIn the Clone Task screen, edit the user-friendly short name, reference name, and description.\nCheck the Open Clone in Editor check box if you want to open the cloned task and edit the details.\nNote: Open Clone in Editor check box is not displayed when you clone a task using the Save As option\nClick Clone. The cloned task will be created in the same organization the source task belongs to. Supported Target Management Tasks The Target Management tasks contain a subset of tasks that can be used within workflows to perform a range ot operations on the endpoint targets. The Target Management tasks supported in Intersight are:\nNew Target—Claim a new endpoint within a workflow in Intersight. The supported target types are HTTP, SSH, Powershell, or Ansible endpoints.\nGet Target—Get the details of a claimed target within a workflow. The task inputs are name, hostname or IP address, and target type. On successful execution, name, moid, hostname or IP address, port, connection status, and target type are generated as the task outputs.\n\u003c!-- --\u003e The supported target types are HTTP, SSH, Powershell, or Ansible endpoints. \u003c!-- --\u003e Remove Target—Unclaim the target endpoint from Intersight. When a target is unclaimed, it is immediately detached from the corresponding Intersight account. The target retains any configuration applied before the unclaim operation. Compute Tasks Matrix The following table lists compute tasks supported on UCS C-Series Standalone Server and Intersight Managed Mode (IMM) Server:\nCompute Tasks UCS C-Series Standalone IMM Server Server\nCopy Server Profile Y Y\nDeploy Server Profile Y Y\nDismount Server Virtual Media Y N Device\nMount Server Virtual Media Device Y N\nRemove Server from Server Profile Y Y\nRestart IMC Y Y\nSet Server One Time Boot Device Y N\nSet Server Power State Y Y\nSet Server to Server Profile Y Y\nStop Server Operating System Y Y\nAdd Server Policies to Profile Y Y\nRemove Server Policies from Y Y Profile\nNew Server Profile Y Y\nNew Server Profile from Template Y Y\nDelete Server Virtual Drives Y Y\nClear Server Storage Controller Y Y Foreign Configuration\nImport Server Storage Controller Y Y Foreign Configuration\nSet Server Physical Drive State Y Y\nNew Server Precision Boot Device Y N\nRemove Server Precision Boot Y N Device\nSupported Tasks for Storage Targets The following table lists tasks supported in the various storage targets available on Intersight:\nList of Tasks Pure Storage NetApp Hitachi\nAdd Storage Export Policy to Volume N Y N\nAdd Host to Storage Host Group Y N N\nAdd Hosts to Storage Host Group Y N N\nCompress Storage Pool N N Y\nConnect Initiators to Storage Host Y Y Y\nConnect Volume to Storage Host Y N Y\nConnect Volume to Storage Host Group Y N N\nConnect WWNs or IQNs to Storage Host Y N N\nCopy Storage Volume N N Y\nDisconnect Initiators from Storage Y N Y Host\nDisconnect Volume from Storage Host Y N Y\nDisconnect Volume from Storage Host Y N N Group\nDisconnect WWNs or IQNs from Storage Y N N Host\nExpand Storage LUN N Y N\nEdit Storage Pool N N Y\nExpand Storage Volume Y Y Y\nFind NetApp igroup LUN Map N Y N\nExpand Storage Pool N N Y\nFind Storage LUN by ID N Y N\nFind Storage Volume by ID Y Y N\nFormat Storage Volume N N Y\nNew Storage Export Policy N Y N\nNew Storage Fibre Channel Interface N Y N\nNew storage IP interface N Y N\nNew Storage Host Y Y Y\nNew Storage Host Group Y N N\nNew Storage LUN N Y N\nNew Storage LUN ID N Y N\nNew Storage Virtual Machine N Y N\nNew Storage Pool N N Y\nNew Storage Volume Y Y Y\nRemove storage export policy N Y N\nRemove Host from Storage Host Group Y N N\nRemove Hosts from Storage Host Group Y N N\nRemove Storage Host Y Y Y\nRemove Storage Host Group Y N N\nRemove Storage LUN N Y N\nRemove Storage LUN ID N Y N\nRemove Storage Pool N N Y\nRemove Storage Volume Y Y Y\n","categories":["ICO"],"description":"Cisco Intersight allows you to create tasks in which API requests can be executed in remote targets that can be reached through Intersight. You create tasks so that they can be used in workflows.","excerpt":"Cisco Intersight allows you to create tasks in which API requests can …","ref":"/docs/ico/taskdesigner/","tags":["Task"],"title":"Task Designer"},{"body":"\r\u003c!DOCTYPE html\rPUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\u003e\rWhat's New in Cisco Intersight\rDecember 8\rAdded support for Cisco UCS VIC 1300 Series adapters on Cisco UCS B-Series and\rC-Series M5 servers in Intersight Managed Mode. For more information, see Supported\rHardware for Intersight Managed Mode and Creating a LAN Connectivity Policy\rin Supported\rUCS Server Policies.\nDecember 1\rIntroducing Nexus Cloud in Controlled Availability. Contact your account representative to\rget access.\nFor complete list of the new Nexus Cloud features, click\rhere.\rAdded support for node redeployment workflow using Cisco Intersight for HyperFlex clusters.\rFor more\rinformation, see HyperFlex\rNode Redeployment Workflow.\nEnhanced Hardware Support Manager capability to support VMware vSphere 8.0 and manage\rfirmware upgrade operations on Standalone and Intersight Managed Mode servers from VMware\rvSphere Life Cycle Manager. For more\rinformation, see Managing\rFirmware using Hardware Support Manager.\nEnhancements to Intersight Managed Mode:\nAdded the ability to set the default drive state for new disks on M6 servers. For\rmore\rinformation, see the Creating a Storage Policy section in Supported\rUCS Server Policies.\nEnhanced Port VLAN count to 108000 with VLAN Port Count Optimization Enabled on Cisco\rUCS\r6400 Series and 6500 Series Fabric Interconnects. For more information, see the\rCreating\ra Switch Control Policy section in Configuring\rUCS Domain Policies.\nEnhancements to Intersight Cloud Orchestrator (ICO):\nAdded port channel and virtual port channel management tasks in the ICO Task Library\rfor\rCisco Nexus. For more information, see Supported\rTasks for Network Targets.\nAdded the ability to view port channels and virtual port channels of Cisco Nexus\rtargets.\rFor more information, see Ethernet\rSwitches\rDetails View.\nAdded User Interface support and inventory object for managing the remote replication\rin\rHitachi storage in Cisco Intersight.\rNovember 19\rAdded support for Oracle database and Azure Billing as new targets, vCPU Scaling\rControls,\rand Maintenance Automation Avoidance in Intersight Workload Optimizer (IWO). For more\rinformation, see Intersight\rWorkload Optimizer.\nNovember 10\rCisco Intersight User Interface new look is now Generally Available. For more information\rand\rhelp on understanding the changes, see Cisco\rIntersight\rNew Look.\nEnhanced the Licensing User Interface in Cisco Intersight. For more information, see License Management.\nEnhancements to Cisco HyperFlex Systems:\nHyperFlex Upgrade enhancements:\nSupport for a workflow retry for a failed HyperFlex cluster upgrade. For\rmore\rinformation, see Upgrade\rCisco HyperFlex Systems in Cisco Intersight.\nIncreased the supported maximum cluster size for upgrade of HyperFlex\rESXi\rclusters from 16 to 32 converged nodes when upgrading to HyperFlex Data\rPlatform\rversion 5.0(2a) or later. For more information, see Upgrade\rCisco HyperFlex Systems in Cisco Intersight.\niSCSI management on HyperFlex Edge, Fabric Interconnect, and Datacenter without\rFabric\rInterconnect (DC-No-FI) clusters. For more information, see Cisco\rHyperFlex\rSystems Administration Guide for Intersight.\nHyperFlex Expansion recommendation for additional CPU, memory, and storage\rcapacity.\rThis\ris a Feature Preview. For more information, see HyperFlex Cluster\rCapacity Planning.\nAdded support for select server actions on Redfish servers. This is a feature preview.\rFor\rmore\rinformation, see Redfish Server\rTarget\rManagement in Intersight.\nAdded support for monitoring health and generating alarms for Intersight managed Cisco\rNexus devices. For more information, see Ethernet\rSwitches Table View.\nAdded support for monitoring health and reporting alarms for Cisco Nexus devices that are\rpart\rof the Intersight Integrated Systems. For more information, see Cisco\rIntersight Integrated Systems.\nOctober 20\rAdded the ability to install SUSE Linux Enterprise Server (SLES) Operating System on UCS\rC-Series\rStandalone and Intersight Managed Mode servers. For more information, see Operating System\rInstallation\rOverview and Installing an Operating\rSystem.\rOctober 13\rAdded End of Life (EoL) Advisories for VMware ESXi 6.5/6.7 running on HyperFlex clusters.\rFor\rmore information, see Cisco End\rof\rLife\rAdvisories.\nEnhancements to Intersight Managed Mode:\nAdded the ability to pre-allocate connected device type and device number to a\rchassis or\rrack server for Server Port Roles. For more information, see the Creating a Port\rPolicy\rsection in the Cisco\rIntersight Managed Mode Configuration Guide.\nAdded the ability to configure Private VLANs on a Fabric Interconnect and to\rapply\rthem\ron the vNICs of server profiles. For more information, see the Creating a VLAN\rConfiguration Policy section in the Cisco\rIntersight Managed Mode Configuration Guide.\nOctober 6\rAdded the ability to manually configure vNICs or VHBAs on the adapters with Simple or\rAdvanced Placement options in LAN Connectivity and SAN Connectivity Policies, on\rIntersight\rManaged Mode servers. For more information, see Creating a LAN Connectivity Policy\rand\rCreating a SAN Connectivity Policy sections in the Cisco\rIntersight Managed Mode Configuration Guide.\nAdded support for HyperFlex NIC-based deployment starting with HXDP version 5.0(2a)\rfor\rHX\rEdge and DC-No-FI clusters. For more information, see Cisco\rHyperFlex Cluster Deployment.\nSeptember 30\rAdded the ability for Intersight to collect user session recording data to optimize\rcustomer\rexperience, proactively fix bugs, and improve the product. For more information, see\rUser\rSession\rRecording.\rSeptember 29\rAdded the ability to create, using API, reserved identifiers for Fabric\rInterconnect-attached\rservers and to view and delete them in Intersight. For more information, see Reserved\rIdentifiers.\nAdded support for Tomcat, WebSphere, and Java Virtual Machine as new cloud targets in\rIntersight\rWorkload Optimizer. For more information, see Cisco Intersight Workload Optimizer\rTarget\rConfiguration Guide under Intersight Workload\rOptimizer.\nSeptember 22\rIntroducing the new look for the Intersight User Interface available to try at Welcome to Intersight. This is a\rfeature\rpreview. For more information, see Cisco\rIntersight New Look.\nEnhancements to Intersight Managed Mode:\nAdded the ability to clear or reset Trusted Platform Module (TPM)\rconfiguration\rusing\rthe\rTPM Clear option. For more information, see Server\rInventory\rView.\nAdded the ability to view the power consumption telemetry data for Cisco UCS\rX-Series\rservers. For more information, see Server\rDetails\rView.\rSeptember 15\rEnhancements to Cisco HyperFlex Systems:\nAdded HyperFlex Data Platform 4.5(2e) support for HyperFlex cluster\rdeployment\rand\rupgrade. For more information, see Cisco\rHyperFlex\rCluster\rDeployment and Upgrade\rCisco HyperFlex Systems in Cisco Intersight.\nAdded Dynamic Cause and Resolution information specific to the node\renvironment\raccessible at the Health Check level. For more information, see Health\rCheck\rfor\rCisco HyperFlex Clusters.\nAdded new Security Checks with Cause and Resolution information for HyperFlex\rhealth\rcheck. For more information, see Health\rCheck\rfor\rCisco HyperFlex Clusters.\nNew features and enhancements to Intersight Cloud Orchestrator (ICO):\nAdded Syslog and SNMP server management tasks in the ICO Task Library for\rCisco\rNexus\rand\rCisco MDS targets. For more information, see Supported\rTasks for Network Targets.\nAdded the ability to view SNMP and Syslog server details for Cisco Nexus and\rCisco\rMDS\rtargets. For more information, see Ethernet\rSwitches\rDetails View and SAN\rSwitches\rDetails\rView.\nAdded Pure storage tasks for creating and managing snapshots. For more\rinformation,\rsee\rSupported\rTasks for Storage Targets.\rAdded REST API 2.x support for Pure Storage FlashArray. For more information,\rsee\rSupported Systems.\rAdded the ability for an account admin to collect tech support bundles from the\rIntersight\rapplication. For more information, see Server Actions, Chassis\rActions, and Fabric\rInterconnect Actions.\nSeptember 8\rEnhancements to Cisco Intersight with NetApp ONTAP storage:\nAdded the ability to view the configurations of a NetApp storage system on\rthe\rChecks\rtab\runder the Storage UI section.\nEnhancements to NetApp storage views under the Storage UI section.\nSeptember 1\rAdded HyperFlex Data Platform 5.0(2a) support for HyperFlex cluster deployment and\rupgrade\rincluding:\nCisco HyperFlex HX245C/225C M6 All Flash/Hybrid Server nodes support.\nSupport for ESXi 7.0 U3—HXDP 5.0(2a) provides support for VMware ESXi 7.0 U3.\rSoftware Encryption support on HyperFlex stretch cluster.\nFor more information, see Cisco\rHyperFlex\rCluster\rDeployment and Upgrade\rCisco HyperFlex Systems in Cisco Intersight.\nAugust 25\rAdded Logical Availability Zones (LAZ) support for HyperFlex cluster deployment and\rexpansion\rin\rDatacenter without Fabric Interconnect (DC-no-FI) mode with 8 or more nodes. For\rmore\rinformation, see DC-No-FI\rOverview.\nEnhancements to Intersight Kubernetes Service (IKS):\nSupport for Kubernetes 1.22. For more information, see Intersight\rKubernetes Service Feature Compatibility Matrix.\nSupport for running the Intersight Device Connector inside IKS clusters on\rvSphere.\rSupport for configuring proxy connection to Intersight using the Device\rConnector\rProxy\rpolicy. For more information, see HTTP\rProxy policy.\nUpdates to the Changelog\ron\rnew\rand deprecated features, fixed issues, and important notices.\nAdded the ability to configure Cisco ID using Cisco Software Download services for\rCisco\rRepository-based firmware upgrades. For more information, see Cisco Software\rDownload.\nAugust 11\rEnhancements to OS Installation for UCS C-Series Standalone and Intersight Managed\rMode\rservers:\rAdded support for Unified Extensible Firmware Interface (UEFI) Secure Boot.\rAdded support for ESXi 7.0 Update 3 and RHEL 8.5 OS.\nAdded support for Ubuntu 20.04.1 LTS, 20.04.2 LTS, 20.04.3 LTS, and 20.04.4\rLTS\rOS.\rFor more information, see OS\rInstallation\rwith\rUEFI Secure Boot, Supported\rOperating Systems for Standalone Servers, and Supported\rOperating Systems for Intersight Managed Mode Servers.\nAdded the ability to configure static pin groups for breakout ports in Cisco UCS 6400\rand\r6500\rSeries Fabric Interconnects. For more information, see the Creating a Port Policy\rsection in\rConfiguring\rUCS Domain Policies.\rAdded DNS and NTP tasks in the ICO Task Library for Cisco Nexus targets. For more\rinformation,\rsee Supported\rTasks\rfor Network Targets.\nAdded the ability to view L2 neighbor details for Cisco Nexus targets. For more\rinformation,\rsee\rEthernet\rSwitches\rDetails\rView.\rAdded support for Interoperability compliance (Cisco UCS HCL and NetApp IMT) for\rFlexPod\rintegrated system. For more information, see Cisco Intersight Integrated\rSystems.\rAdded support for Google Cloud Platform as a new cloud target in Intersight Workload\rOptimizer.\rFor more information, see the Google Cloud Platform section in the IWO Target\rConfiguration\rGuide.\nAugust 4\rAdded support for monitoring select Dell PowerEdge and HPE ProLiant servers as\rRedfish\rservers.\rThis is a feature preview. For more information, see Redfish\rServer\rTarget\rManagement in Intersight.\nAdded support for viewing the undeployed changes in UCS Domain Profiles. For more\rinformation,\rsee Domain\rProfile.\rAdded Inventory, Health Monitoring, and Online Insertion and Removal support for the\rfollowing\rGraphics Processing Units on UCS X440P with UCSX-210C-M6 servers:\nUCSX-GPU-T4-16\nUCSX-GPU-A40\nUCSX-GPU-A100-80\nUCSX-GPU-A16\nFor more information, see Supported\rSystems for Intersight Managed Mode.\nEnhancements to Cisco Intersight with NetApp ONTAP storage: Added new NetApp storage tasks in the Intersight Cloud Orchestrator task\rlibrary.\rEnhancements to NetApp storage views under the Storage UI section.\nFor more information, see Supported\rTasks\rfor\rStorage Targets.\nAugust 2\rNew features and enhancements to Intersight Workload Optimizer (IWO):\nSupport for AWS EC2 C6a instances.\nSupport for Azure SQL Databases managed under the vCore pricing model.\nSupport for Instance Store Aware Scaling for Azure VMs to ensure cloud\rscaling\ractions\rrespect instance store requirements.\nIWO now adds injected sidecars to a new group called \"Injected Sidecars/All\rContainerSpecs\".\nVMs can now be filtered by target name, type, or category when you use Search\ror\rcreate\rgroups.\nFor more information, see Cisco Intersight\rWorkload\rOptimizer.\rJuly 28\rEnhancements to Cisco HyperFlex Systems:\nAdded HyperFlex Data Platform 4.5(2d) support for HyperFlex cluster\rdeployment\rand\rupgrade. For more information, see Cisco\rHyperFlex\rSystems\rInstallation Guide for Intersight and Upgrade\rCisco HyperFlex Systems in Intersight.\nAdded Datacenter without Fabric Interconnect (DC-No-FI) HyperFlex cluster\rsupport\rwith\r3-12 nodes. Added NVMe cache in All Flash models, All NVMe server models,\rand\r40/100\rGE\rNetworking support with DC-No-FI HyperFlex clusters, new workflow for\rDC-No-FI\rinstall,\rand compute only node support. For more information, see DC-No-FI\rOverview.\nEnhanced Hardware Support Manager capability to manage firmware upgrade operations on\rIntersight\rManaged Mode servers from VMware vSphere Life Cycle Manager. For more information,\rsee\rClaim\rTargets\rUsing VMware vCenter and Managing\rFirmware\rusing Hardware Support Manager.\rJuly 21\rEnhancements to Intersight Managed Mode:\nAdded configuration and inventory support for Cisco UCS 6536 Fabric\rInterconnect.\rFor\rmore information, see Migrating\rto Cisco UCS 6500 Series Fabric Interconnects.\nAdded the capability for 100-Gbps end-to-end support with the following:\nUCS-FI-6536 Fabric Interconnect\nUCSX-I-9108-100G Intelligent Fabric Module (IFM)\nUCSX-ML-V5D200G modular LAN on motherboard (mLOM) adapter for Cisco\rUCS\rX210\rCompute Node\nAdded the following Graphics Processing Units (GPU) for UCSX-210C-M6 servers:\rInventory and Online Insertion and Removal (OIR) support for UCS\rX210C\rserver\rCompute Node Front Mezz (UCSX-X10C-GPUFM).\nInventory, Health Monitoring, and OIR support for NVIDIA T4 GPU\r(UCSX-GPU-T4-MEZZ).\nFor more information, see Supported\rSystems for Intersight Managed Mode.\nAdded the ability to configure breakout ports for Cisco UCS 6400 Series and\r6500\rSeries\rFabric Interconnects. For more information, see Creating a Port Policy\rsection\rin Configuring\rUCS Domain Policies.\nExtended Drift Detection and Remediation to server profiles deployed on the\rFabric\rInterconnect-attached servers. For more information, see the Server Profiles\rDrift\rsection in Server\rProfiles.\rJuly 14\rCisco Intersight Integrated Systems management capabilities are now Generally\rAvailable.\rThese\rfeatures enable the management of FlexPod environment as an integrated system that\rconsists\rof a\rsingle management control plane for the underlying compute, network, storage, and\rvirtualization\rresources. For more information, see Cisco\rIntersight Integrated Systems.\nSupport for managing Cisco UCS C890 M5 targets in Intersight is now Generally\rAvailable.\rFor\rmore\rinformation, see Managing\rCisco\rUCS\rC890 M5 Targets.\nNew features and enhancements to Intersight Cloud Orchestrator:\nEnhanced the ICO Task Library to list the Network tasks based on device\rtypes.\rFor\rmore\rinformation, see Supported\rTasks for Network Targets.\nAdded new Hitachi storage tasks in the ICO Task Library to create and manage\rsnapshots.\rFor more information, see Supported\rTasks for Storage Targets.\nAdded the ability to view NTP details for Cisco Nexus targets. For more\rinformation,\rsee\rEthernet\rSwitches\rDetails View.\rJuly 7\rAdded VLAN management tasks in the ICO Task Library for Cisco Nexus targets. For more\rinformation, see Supported\rTasks\rfor\rNetwork Targets.\nAdded the ability to view VLAN inventory for Cisco Nexus targets. For more\rinformation,\rsee\rEthernet\rSwitches\rDetails\rView.\rAdded VSAN management tasks in the ICO Task Library for Cisco MDS targets. For more\rinformation,\rsee Supported\rTasks\rfor Network Targets.\nAdded the ability to view VSAN inventory for Cisco MDS targets. For more information,\rsee\rSAN Switches\rDetails\rView.\rJune 30\rAdded the ability to view FC port neighbor details of Cisco MDS targets. This is a\rfeature\rpreview. For more information, see SAN Switches\rDetails\rView.\rJune 16\rAdded the ability to create an FC Zone Policy containing direct access storage\rpaths\rconfiguration, and attach this policy to a vHBA to provision zones for the vHBA.\rFor\rmore\rinformation, see Create an FC Zone Policy and Creating a SAN Connectivity policy\rsections in\rthe Cisco\rIntersight\rManaged Mode Configuration Guide.\nJune 8\rAdded HyperFlex Data Platform 5.0(1c) support for HyperFlex cluster\rdeployment\rand\rupgrade. For more information, see Cisco\rHyperFlex\rSystems\rInstallation Guide for Intersight and Upgrade\rCisco HyperFlex Systems in Intersight.\nMay 26\rAdded the ability to enable Hardware Support Manager (HSM) in VMware vCenter\rtargets.\rHSM\rprovides the capability to manage firmware upgrade operations on Cisco UCS\rC-Series\rStandalone servers from VMware vCenter Life Cycle Manager (vLCM). For more\rinformation,\rsee Claim Targets and Managing Firmware using Hardware Support Manager.\nMay 19\rAdded the ability to configure rack server and chassis IDs on recommission.\rFor\rmore\rinformation, see Servers\rTable View and Chassis Table\rView.\rNew features and enhancements to Intersight Cloud Orchestrator:\nAdded the following tasks to manage Cisco MDS targets:\nSet DNS Server\nRemove DNS Server\nSet NTP Server\nRemove NTP Server\nThis is a feature preview. For more information, see Supported\rTasks for Network Targets.\nAdded the ability to view DNS and NTP server details of Cisco MDS\rtargets.\rThis\ris a feature preview. For more information, see SAN\rSwitches\rDetails View.\nAdded the ability to view the features and the licenses of Cisco\rNexus\rtargets.\rThis is a feature preview. For more information, see Ethernet\rSwitches Details View.\nMay 12\rAdded support for NVMe cache in All Flash models, All NVMe hardware models,\rand\r40/100 GE\rNetworking with DC-no-FI HyperFlex clusters. For more information, see HyperFlex\rDC-no-FI Deployment.\nMay 5\rSpring Framework fix is now available in Intersight. For more\rinformation,\rsee Cisco\rSecurity Advisory for Spring Framework.\nEnhancements to Cisco Intersight Workload Optimizer:\nApplication Performance Management—Added the capability to use\rpercentile\rcalculations for AppDynamics.\nCloud Resource Management—Added the ability to view cost breakdown by\rTag\rChart.\rOn-Prem Resource Management—Improved actions detail for virtual\rmachines\rand\radded support for NetApp ONTAP 9.\nContainer Platform Management—Added the capability to obtain resizing\rrecommendations. Added the ability to manually execute actions for\rAzure\rKubernetes Service.\nFor more information, see Intersight Workload Optimizer\rTarget\rConfiguration Guide and Intersight Workload Optimizer User\rGuide.\nAdded the ability to send real-time notifications using webhooks when\revents\roccur\rwithin the local Intersight environment. For more information, see Configuring\rWebhooks.\nApril 28\rEnhancements to Cisco HyperFlex Systems:\nAdded the capability to manage encrypted datastores in\rIntersight.\rFor\rmore\rinformation, see Manage\rDatastores.\nAdded support to expand HyperFlex clusters with M6 HyperFlex\rnodes.\rFor\rmore\rinformation, see Expand\rCisco HyperFlex Clusters in Intersight.\nAdded the ability to change the type of an AWS virtual machine instance\rin\rIntersight\rVirtualization Service. For more information, see Resizing\ran AWS Virtual Machine Instance.\nAdded new NetApp Smart LUN storage tasks in the Intersight Cloud\rOrchestrator\rtask\rlibrary. For more information, see Supported\rTasks for Storage Targets.\nAdded the ability to view the power state telemetry data for UCS servers.\rFor\rmore\rinformation, see Servers\rDetails\rView.\nApril 21\rEnhanced sort and filter capability for additional columns in the Servers\rTable\rView\rincluding HCL Status, Contract Status, and more. For more information,\rsee\rServers\rTable\rView.\rAdded HyperFlex Data Platform 4.5(2c) support for HyperFlex cluster\rdeployment\rand\rupgrade. For more information, see Cisco\rHyperFlex Cluster Deployment and Upgrade\rCisco HyperFlex Systems in Intersight.\nNew features and enhancements to Intersight Cloud Orchestrator:\nAdded new tasks to manage the Cisco Nexus and MDS targets\ravailable\rin\rCisco\rIntersight. This is a feature preview. For more information, see\rSupported\rTasks for Network Targets.\rAdded the ability to view ports of Cisco Nexus and MDS targets,\rand\rport\rchannels of Cisco MDS targets. This is a feature preview. For\rmore\rinformation, see Ethernet\rSwitches Table View and SAN\rSwitches Table View.\nAdded the Serial Loop task to iteratively run tasks based on a\rspecified\rcount or condition. For more information, see Operations\r– Serial Loop Task.\nAdded the ability to enable automatic rollback of a workflow when\rthe\rworkflow execution fails. For more information, see Defining\ra\rWorkflow.\nAdded the ability to support Cisco UCS Director as one of the\rendpoints\rfor\rthe Invoke Web API task. For more information, see Executors - Invoke\rWeb\rAPI\rRequest.\rAdded support for custom mode of installation in the OS\rinstallation\rworkflow. For more information, see Adding an OS Installation Workflow to Workflow Designer.\rEnhancements to Cisco Intersight with NetApp ONTAP storage: Enhancements to NetApp storage views under the Storage UI\rsection.\rAdded new NetApp storage tasks in the Intersight Cloud\rOrchestrator\rtask\rlibrary.\nFor more information, see Supported\rTasks for Storage Targets.\nApril 14\rEnhancements to Cisco Intersight Workload Optimizer (IWO):\nAdded support to manage Microsoft SQL Server and My SQL Server\rtargets in\rIWO.\rAdded the ability to dynamically adjust the number of pod replicas\rfor\rhorizontally scalable Kubernetes services.\nAdded support for the new AWS M6i family of instances and improved\rcost\rcalculations for AWS.\nAdded support for Azure Dv5-series and Ev5-series instance types.\nFor more information, see Intersight Workload Optimizer\rTarget\rConfiguration Guide and Intersight Workload Optimizer User\rGuide.\nAdded the ability to log in to Intersight using Account Name URL, as well\ras\radd\rand\rverify Domain Names, which can then be added to IdPs. For more\rinformation,\rsee\rConfiguring\rAccount Settings and Single Sign-on\rwith\rIntersight.\rAdded the ability to configure static pin groups for managing Ethernet\rand\rFibre\rChannel traffic in Intersight Managed Mode servers. For more\rinformation,\rsee\rthe\rCreating a Port Policy section in the Cisco\rIntersight Managed Mode Configuration Guide.\nApril 7\rAdded the ability in HyperFlex Cluster Device Connector to view connectivity\rdetails\rand\rhelp remediate issues. For more information, see Configuring Device\rConnector.\nAdded support for HashiCorp Configuration Language variables and downloading\rTerraform\rstate version contents. For more information, see Configuring\rIntersight Services for Hashicorp Terraform.\nMarch 24\rAdded the ability to claim Cisco MDS and Nexus switch endpoint targets,\rand\rview\rthe\rinventory information. This is a feature preview. For more information,\rsee\rClaim Targets, Ethernet\rSwitches Table View, and SAN\rSwitches Table View.\rAdded the following privileges:\rNetwork Administrator and Network Operator to support Cisco Nexus\rendpoints.\rSAN Administrator and SAN Operator to support Cisco MDS\rendpoints.\rFor more information, see Organizations and\rRoles\rin\rIntersight.\nEnhancements to Intersight Kubernetes Service (IKS):\rSupport for Kubernetes 1.21 in IKS using ContainerD CRI. For more\rinformation, see Intersight\rKubernetes Service Feature Compatibility Matrix.\nSupport for Cisco Intersight Service Mesh Manager 1.8.2. For more\rinformation, see Cisco\rIntersight Service Mesh Manager.\nFor more information on new or deprecated features, enhancements,\rand\rissues\rin IKS, see Changelog.\rMarch 10\rEnhancements to Cisco HyperFlex Systems:\nAdded the ability to upgrade server firmware for HyperFlex Fabric\rInterconnect-attached clusters. For more information, see Upgrade\rCisco HyperFlex Systems in Intersight.\nAdded the ability to expand HyperFlex 2-Node Edge clusters. For\rmore\rinformation, see Expand\rCisco HyperFlex Clusters in Intersight.\nAdded the ability to launch vKVM on all servers in UCSM Managed Mode\rwithout\rthe\rneed\rfor secondary authentication with UCS Manager. For more information, see\rLaunch\rVirtual\rKVM.\rAdded the following capabilities for Hitachi storage in Intersight Cloud\rOrchestrator:\nFind Storage Volume by ID task. For more information, see Task Designer.\nRemove or Update VMFS Datastore workflows. For more information,\rsee\rWorkflow\rDesigner.\rMarch 3\rAdded support for the following features for Cisco UCS C890 M5 Rack\rServer\rManagement:\nGeneral Server Actions\nInventory and Alarms\nvKVM Launch\nIntegration with Cisco TAC\nManaging Foreign Drive Configurations\nSetting Disk State\nVirtual Disk Management\nTrusted Platform Module Support\nFor more information, see Managing\rCisco\rUCS\rC890\rM5 Targets.\nFebruary 17\rAdded the ability to view EC2 inventory for Amazon Web Services and\rperform\rpower\roperations on EC2 virtual machines. For more information, see Virtualization\rService.\rAdded support in Intersight Cloud Orchestrator to create variables for a\rworkflow.\rFor more information, see Workflow\rVariables.\nFebruary 10\rAdded the ability to configure and launch Tunneled vKVM on all servers in\rIntersight\rManaged Mode. For more information, see Creating a Virtual KVM Policy.\nAdded new tasks for VMware vCenter networking operations to manage\rdistributed\rvirtual switches and distributed virtual networks. For more information,\rsee\rTask Designer.\rAdded new tasks for managing networks and assigning IP addresses to the\rvirtual\rmachines. For more information, see Task\rDesigner.\nFebruary 3\rEnhancements to Device Contract Coverage widgets to include:\nEnhanced view of devices with contract status now allows up to\rthree\rdevice\rtypes.\nAbility to view and export contract status details from the\rDevice\rContract\rCoverage page.\nFor more information, see Contract\rStatus Widgets.\nAdded a new task for UCS C-Series standalone and Intersight Managed Mode\rservers\rin\rthe workflow designer to create server profiles from templates. For more\rinformation, see Compute\rTasks\rMatrix.\nAdded support for Kubernetes 1.20 in Intersight Kubernetes Service. For\rmore\rinformation, see Intersight\rKubernetes Service Feature Compatibility Matrix.\nEnhanced chassis and server power policies by adding support for Power\rSave\rMode,\rDynamic Power Rebalancing and setting the Power Priority. For more\rinformation,\rsee\rCreating a Power Policy for Chassis and Creating\ra Power Policy for Server.\rJanuary 27\rAdded HyperFlex Data Platform 5.0(1b) support for HyperFlex cluster\rdeployment\rand\rupgrade. For more information, see Cisco\rHyperFlex\rSystems Installation Guide for Intersight and Upgrade\rCisco HyperFlex Systems in Intersight.\nAdded capability to configure Software encryption on ESXi-based HyperFlex\rEdge\rclusters and Fabric Interconnect clusters:\nAbility to manage keys natively in Intersight with Intersight Key\rManager.\rAbility to re-key and validate encryption keys.\nFor more information, see HyperFlex\rSoftware\rEncryption.\nAdded capability to protect encrypted datastores with N:1 Replication.\rFor\rmore\rinformation, see N:1\rReplication for Cisco HyperFlex Clusters.\nEnhancements to Cisco Intersight with NetApp ONTAP storage:\nAdded Intersight alarms for events generated from NetApp Active\rIQ\rUnified\rManager. This support is applicable from Active IQ Unified\rManager\r9.10\ror\rlater releases.\rAdded storage VM and volume details in the Storage Inventory\rpage.\rAdded Graphical View support for Cisco UCS S3260 servers in standalone\rmode.\rFor\rmore\rinformation, see Servers\rDetails\rView.\nJanuary 20\rEnhancements to status.intersight.com\rpage:\nEnhanced classification and categorization of Intersight\rservices.\rAdded Slack subscription option for notification of Intersight\rstatus\rupdates.\nAdded capability to get Intersight status updates for specific\rcomponents.\rFor more information, see Intersight\rStatus Page.\nAdded workflow tasks for claiming, getting target details, and removing\rSSH,\rAnsible,\rPowerShell, and HTTP endpoint targets in Intersight. For more\rinformation,\rsee\rSupported\rTarget Management Tasks.\rAdded support for a graceful termination of firmware upgrade in\rstandalone\rservers.\rFor more information, see Managing\rFirmware in\rStandalone Mode.\nAdded new Cisco Security Advisories. For a complete list of advisories\rand\rmore\rinformation, see Intersight\rAdvisories.\nJanuary 13\rEnhancements to Cisco HyperFlex Systems:\nAdded ability to view hosts, virtual machines, and drives.\nAdded capability to view, create, and manage datastores and\rstorage\rcontainers.\nFor more information, see Cisco\rHyperFlex Systems Administration Guide.\nAdded ability to open a TAC case directly from the HyperFlex\rClusters\rtable\rview. For more information, see Integration\rwith Cisco TAC.\nEnhancements to Intersight Cloud Orchestrator (ICO):\nAdded ability to create reusable tasks to invoke Ansible Playbook\rand\rSSH\rcommands to automate operations on the target devices. For more\rinformation,\rsee Executors –\rInvoke\rAnsible Playbook - Reusable Task and Executors –\rInvoke\rSSH\rCommands - Reusable Task.\nAdded support for key-based authentication for SSH and Ansible\rtarget\rdevices. For more information, see Claim\rTargets.\rJanuary 6\rEnhancements to Cisco Intersight Workload Optimizer (IWO):\nAdded ability to perform multiple Azure volume actions together\ron a\rsingle\rVM.\nAdded capability to recommend scaling actions for AWS RDS\rdatabase\rservers.\rAdded capability to run Buy VM Reservation plan for Cloud\rResource\rManagement\rto view RI purchase opportunities.\nAdded capability to discover the app services and plans for Azure\rApp\rdeployment.\nAdded capability to analyze on-premises volumes and ability to\rview\rblade\rservers as hosts in a datacenter for on-premises Resource\rManagement.\rImproved Savings and Investments charts, Top Accounts chart, and\rimprovements\rfor AWS and Azure targets.\nFor more information, see Intersight Workload Optimizer\rTarget Configuration\rGuide and Intersight Workload Optimizer\rUser\rGuide.\n","categories":["ICO"],"description":"","excerpt":"\r\u003c!DOCTYPE html\rPUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" …","ref":"/docs/whats_new/2022/","tags":["Workflow"],"title":"2022"},{"body":"Data types also specify boundaries for values, and constraints like regular expressions.\nCisco Intersight provides a whole range of system-defined data types that you can use in your workflows. In addition, you can also create a data type in Cisco Intersight. To view all data types that are currently available or configured, choose Orchestration \u003e Data Types. A dashboard displays the following details under these tabs, namely, My Data Types, System Data Types, and All Data Types:\nNumber of Composite Type\nNumber of System Defined Data Type\nYou can view a tabular list of data types with the following information:\nReference Name\nDisplay Name\nComposite Type\nDescription\nLast Updated\nOrganization\nFrom this screen, as an Account Administrator, or as a user with Workflow Designer privileges, you can perform the following actions:\nCreate a new data type\nEdit or delete a custom data type\nClone a data type\nNote: You cannot edit or delete a system-defined data type.\nThere are many input types defined in Cisco Intersight representing a broad selection of categorical, numeric, and text parameters. For example, some existing data types are:\nGeneric Text Input (the least restricted input type)\nIPv4 Address\nOS Type\nMemory Size Selector\n\u003c!-- --\u003e Primitive data type—Represents primitive data like String, Float, Integer, Boolean, Json, or Enum. Following are the attributes specific to primitive data types:\nType\nSecure\nConstraints (specifies limits and boundaries for values)\nObject Selector (lists the Cisco Intersight managed object selectors). This attribute is available only when the primitive data is String. Following are the attributes specific to Object Selector:\nIntersight API Reference—Enter the URL of the Intersight API configured with parameters.\nSelector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nValue Attribute—Enter the value to be passed as an input while executing a task. This value should be any one of the attribute name specified in the Selector Attribute field.\nArray data type—Represents an array of a given type. It can be an array of primitive data, reference data, or of custom data type. Following are the attributes specific to array data types:\nArrayItemType\nMin\nMax\nMoReference data type—Represents Cisco Intersight Managed object reference. Following are the attributes specific to reference data types:\nIntersight API Reference—Enter the URL of the Intersight API configured with parameters.\nSelector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nTarget data type—Represents a target endpoint or device. Following are the attributes specific to target data types:\nIntersight API Reference—Enter the URL of the Intersight API configured with parameters.\nSelector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nSupport Objects—Enter the object filter used for mentioning the interesting object in the task definition. You can add multiple support objects by clicking +.\nConstraint Attribute—Enter the attribute used for defining decision conditions to choose the right implementation task. You can add multiple constraint attributes by clicking +.\nConnector Attribute—Enter the attribute used for defining what value to be passed as input to the implementation task.\nCustom data type—Allows defining type constraints once and then use them in multiple tasks and workflows. Following are the attributes specific to target data types:\nCustom Data Type Name\nCatalog Moid\nYou choose existing input types from a list that displays a name, type, and category for each variable. The list can be filtered to make finding a given data type manageable.\nIf none of the existing data types serves your need in a particular application, it is possible to create custom data types by defining restrictions on existing data types.\nCreating a Data Type To create a data type, perform the following steps:\nChoose Orchestration from the left navigation pane and click Data Types.\nChoose Create Data Type.\nIn the Create Data Type screen, enter the following information:\nOrganization—Choose an organization from the drop-down list.\nName—Enter a name for the custom data type definition. The name can be alphanumeric and can include a combination of upper case and lower case letters and special characters.\nLabel—Enter a label that helps you identify the data type.\nDescription—Enter a description, if required.\nSet Tags—Enter a tag in the key:value format, if required.\nSelect the parameters for the data type—Choose Simple or Composite. A Simple data type has only a singular value, while a composite data type has multiple properties. \u003c!-- --\u003e For example, a LoginName is a simple data type whereas a MailingAddress would be a Composite data type (with street, city, state, and so on.) Note: Target data type is not supported when you choose Composite as a parameter input.\nTo add additional inputs, click Add Field and click New Definition. Then, enter the following information: Name\nLabel\nDescription\nRequired—Update this field only when you are adding a Composite data type.\nType—Choose a data type for primitive data type. For example, String, Integer, Float, Boolean, Json, Enum, MoReference, Target Data Type, or custom data type.\n\u003c!-- --\u003e The fields displayed depend on the value you select for the Type field. If you select the data type as Enum, specify the following:\na. Enum List—Enum label and value. You can add multiple selector attributes by clicking +.\nb. Widget type.\nIf you select the data type as String, specify the following:\na. Minimum and MaximumRange\nb. Regex—Validates the regular expression when you select String in the Type field.\nc. Secure—Indicates that the values of these properties are encrypted and stored in Cisco Intersight.\nd. ObjectSelector—Enable to configure the Intersight managed object selectors. This attribute is available only when the primitive data is String. Specify the Intersight API Reference and selector attributes to feed the input from the table selection. Value will be passed according to the configuration set in the Value attribute.\nIf you select the data type as Integer or Float, specify the following:\na. Minimum and MaximumRange.\nIf you select the data type as MoReference, specify the following:\na. Intersight API Reference—Enter the URL of the Intersight API configured with parameters.\nb. Selector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nIf you selected a composite data type, you can specify the field mapping details. With field mapping, you can pass the value from the parent composite data type to a child composite data type.\n\u003c!-- --\u003e To specify the field mapping, do the following:\na. Key—The input field that you want to hide.\nb. Value Attribute—The value in a template style to be passed dynamically during the execution. The inputs are referenced as \\${datatype.type.AttributeName}.\n\u003c!-- --\u003e Click Add.\nTo add a Parameter Set rule, click Add Rule \u003e Parameter Set.\n\u003c!-- --\u003e For more information, see Error! Reference source not found..\na. Name—The name of the Parameter Set rule.\nb. If Field—Select the input field that will be used for the Parameter Set rule.\nc. Condition—The condition for the rule. The condition can be Equal to, Not equal to, Contains, or Matches Pattern.\nd. Value—The value of the input (If Field) that will be used for the Parameter Set rule.\ne. Field to be shown—Select input fields that should be made available when the Parameter Set rule condition is satisfied.\nf. Click Save.\n\u003c!-- --\u003e Click Preview to validate the definitions that you have added and make corrections, if required.\nClick Add.\n\u003c!-- --\u003e The data type that you added is displayed in the tabular list on the Data Types screen. You can now create a workflow and use this data type in the workflow input. Similar to workflows, you can define the Parameter Set rules at custom data type level. Data Type Parameter Set Rule When you create a composite data type, you can specify the fields for the data type. After you define the fields, you can set a Parameter Set rules. The Parameter Set rule control the availability of specific parameters or inputs during the execution. After the first input is specified, the Parameter Set rule controls which subsequent input fields are made available during the execution.\nNote: You can define a Parameter Set rule only for a custom data type that has more than two input fields with the supported data type.\nThe supported data types for the Parameter Set rules are:\nBoolean\nEnum\nString Object Selector\nMoReference\nExample: The following example shows how to create a Parameter Set rule for a composite data type with four fields. The composite data type fields are:\nCluster Type—Type is Enum and Enum list is VM and HX.\nVMware Cluster—Type is String.\nHX Cluster—Type is String.\nCluster Description—Type is String.\nYou can create two Parameter Set rules. During the execution when the Cluster Type value is VM only VMware Cluster field is made available. Alternately, when the Cluster Type value is HX, only HX Cluster is made available. The details of the Parameter Set rules are:\nRule1—If Field is Cluster Type, Condition is Equal to, Value is VM, and Fields to be shown is VMware Cluster.\nRule2—If Field is Cluster Type, Condition is Equal to, Value is HX, and Fields to be shown is HC Cluster.\nCloning a Data Type You can clone a data type. The cloned data type is identical to the original data type. You can edit the new data type immediately. You might do this, for example, to create a data type that is similar to the source data type that can be edited based on your requirements. The new data type has a new, separate version history.\nTo clone a data type, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Data Type.\nFrom the tabular list of data types, select a data type and choose Clone.\nIn the Clone Data Type screen, edit the user-friendly short name, reference name, description, and organization details. The organization mappings are displayed only for pre-canned data types and not for the custom data types.\nCheck the Open Clone in Editor check box if you want to open the cloned data type and edit the details.\nClick Clone.\nExporting a Data Type Intersight Cloud Orchestrator enables you to export data types from an account to your system and then import them to another account.\nTo export a data type, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Data Type.\nFrom the tabular list of data types, do one of the following:\nSelect a data type, click the Ellipsis (…) icon in the same row, and then choose Export Data Type.\nSelect multiple data types, click the Ellipsis (…) icon from the header or footer of the tabular list, and then choose Export Data Type.\nIn the Export Data Type screen:\na. In the JSON File Name field, use the default filename or enter a filename of your choice for the JSON file that stores the data type components.\nb. Use the Export Tags toggle button to include or exclude the user-defined tags. ICO does not export the system-defined tags.\nc. Click Export.\nd. Save a local copy of the JSON file.\nImporting a Data Type Intersight Cloud Orchestrator enables you to import data types to your account by importing a JSON file that contains the data type components. You can create the JSON file by exporting the data type components from another account.\nTo import a data type, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Data Type.\nClick Import.\n\u003c!-- --\u003e The Import wizard appears. \u003c!-- --\u003e In the Select File screen:\na. From the Organization drop-down list, choose the organization to which you want to import the data type(s).\nb. Click Browse, and then select the JSON file that contains the data type(s).\nNote: Ensure that the file size of the JSON file is not more than 1MB. If the file size is more than 1MB, export the data type(s) in batches, and then try import.\nc. Click Next.\n\u003c!-- --\u003e Intersight Cloud Orchestrator validates the JSON file and displays the data type(s) in the Details screen.\n\u003c!-- --\u003e In the Details screen:\na. To associate an additional tag to the components listed in the table, enter the tag in the Set Tags field.\nNote: Set Tags is an optional field. You must enter the tag in the key:value format.\nb. If one or more data type components are already available in the system, choose a rule to replace or skip the duplicate components.\nc. Click Import.\n\u003c!-- --\u003e In the Import Result screen:\na. Verify the status of the imported data type(s).\nb. If you want to view the details of the import request:\nClick the link displayed above the table.\nAlternatively, click the Requests icon displayed in the menu bar.\n\u003c!-- --\u003e For more information, see Requests.\na. Click Close.\n","categories":["ICO"],"description":"Intersight Orchestrator supports the use of data types for workflows and tasks. Data types for input and output defines types and associated constraints on values that can be specified.","excerpt":"Intersight Orchestrator supports the use of data types for workflows …","ref":"/docs/ico/datatype/","tags":["Data Type"],"title":"Data Type"},{"body":"Overview The Invoke PowerShell Script task is an out-of-box solution that allows you to automate PowerShell operations on the PowerShell target that is added as a PowerShell endpoint target in Cisco Intersight. This feature allows a workflow designer to extend the automation capabilities of the workflow engine beyond what is natively available in the task library and interact with the PowerShell target endpoint. For more information, see Intersight Kubernetes Service\nSupported Targets The Invoke PowerShell Script task can be run only on the targets that are added as a PowerShell endpoint target type in Cisco Intersight.\nTo run the PowerShell Script task on the PowerShell target endpoint from Cisco Intersight, ensure that:\nThe endpoint is reachable through Intersight Assist.\nThe endpoint target is in the Connected state.\nPowerShell Remoting is enabled on the target endpoint to allow the endpoint to receive PowerShell remote commands.\nTo enable PowerShell Remoting on a PowerShell endpoint target, execute the following remoting script on the PowerShell target endpoint:\nParam ( [switch]$EnableBasicAuth = $false, [switch]$SKipNetworkProfileCheck = $false, [switch]$ForceNewSSLCert = $false, [string]$SubjectName = $env:COMPUTERNAME, [int]$CertValidityDays = 1095 ) Function New-SelfSignedCert { Param ( [string]$SubjectName, [int]$ValidDays = 1095 ) $hostnonFQDN = $env:computerName $hostFQDN = [System.Net.Dns]::GetHostByName(($env:computerName)).Hostname $SignatureAlgorithm = \"SHA256\" $name = New-Object -COM \"X509Enrollment.CX500DistinguishedName.1\" $name.Encode(\"CN=$SubjectName\", 0) $key = New-Object -COM \"X509Enrollment.CX509PrivateKey.1\" $key.ProviderName = \"Microsoft Enhanced RSA and AES Cryptographic Provider\" $key.KeySpec = 1 $key.Length = 4096 $key.SecurityDescriptor = \"D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)\" $key.MachineContext = 1 $key.Create() $serverauthoid = New-Object -COM \"X509Enrollment.CObjectId.1\" $serverauthoid.InitializeFromValue(\"1.3.6.1.5.5.7.3.1\") $ekuoids = New-Object -COM \"X509Enrollment.CObjectIds.1\" $ekuoids.Add($serverauthoid) $ekuext = New-Object -COM \"X509Enrollment.CX509ExtensionEnhancedKeyUsage.1\" $ekuext.InitializeEncode($ekuoids) $cert = New-Object -COM \"X509Enrollment.CX509CertificateRequestCertificate.1\" $cert.InitializeFromPrivateKey(2, $key, \"\") $cert.Subject = $name $cert.Issuer = $cert.Subject $cert.NotBefore = (Get-Date).AddDays(-1) $cert.NotAfter = $cert.NotBefore.AddDays($ValidDays) $SigOID = New-Object -ComObject X509Enrollment.CObjectId $SigOID.InitializeFromValue(([Security.Cryptography.Oid]$SignatureAlgorithm).Value) [string[]] $AlternativeName += $hostnonFQDN $AlternativeName += $hostFQDN $IAlternativeNames = New-Object -ComObject X509Enrollment.CAlternativeNames foreach ($AN in $AlternativeName) { $AltName = New-Object -ComObject X509Enrollment.CAlternativeName $AltName.InitializeFromString(0x3,$AN) $IAlternativeNames.Add($AltName) } $SubjectAlternativeName = New-Object -ComObject X509Enrollment.CX509ExtensionAlternativeNames $SubjectAlternativeName.InitializeEncode($IAlternativeNames) [String[]]$KeyUsage = (\"DigitalSignature\", \"KeyEncipherment\") $KeyUsageObj = New-Object -ComObject X509Enrollment.CX509ExtensionKeyUsage $KeyUsageObj.InitializeEncode([int][Security.Cryptography.X509Certificates.X509KeyUsageFlags]($KeyUsage)) $KeyUsageObj.Critical = $true $cert.X509Extensions.Add($KeyUsageObj) $cert.X509Extensions.Add($ekuext) $cert.SignatureInformation.HashAlgorithm = $SigOID $CERT.X509Extensions.Add($SubjectAlternativeName) $cert.Encode() $enrollment = New-Object -COM \"X509Enrollment.CX509Enrollment.1\" $enrollment.InitializeFromRequest($cert) $certdata = $enrollment.CreateRequest(0) $enrollment.InstallResponse(2, $certdata, 0, \"\") # extract/return the thumbprint from the generated cert $parsed_cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2 $parsed_cert.Import([System.Text.Encoding]::UTF8.GetBytes($certdata)) return $parsed_cert.Thumbprint } # Setup error handling Trap { $_ Exit 1 } # Treat non terminating erros as terminating errors $ErrorActionPreference = \"Stop\" # Get the ID and security principal of the current user account $myWindowsID=[System.Security.Principal.WindowsIdentity]::GetCurrent() $myWindowsPrincipal=new-object System.Security.Principal.WindowsPrincipal($myWindowsID) # Get the security principal for the Administrator role $adminRole=[System.Security.Principal.WindowsBuiltInRole]::Administrator # Check to see if we are currently running \"as Administrator\" if (-Not $myWindowsPrincipal.IsInRole($adminRole)) { Write-Output \"ERROR: You need elevated Administrator privileges in order to run this script.\" Write-Output \" Start Windows PowerShell by using the Run as Administrator option.\" Exit 2 } # Ensure PowerShell version is greater that 3.0 if ($PSVersionTable.PSVersion.Major -lt 3) { Throw \"Minimum required PowerShell version is 3.0\" } # Ensure WinRM is present on the machine if (!(Get-Service \"WinRM\" -ErrorAction SilentlyContinue)) { Throw \"WinRM service is not present on the machine\" } # Ensure WinRM is running on the machine if (!(Get-Service \"WinRM\" -ErrorAction SilentlyContinue | where {$_.Status -eq \"Running\"})) { Write-Output \"WinRM service is not running\" Write-Output \"Attempting to start WinRM service\" Start-Service \"WinRM\" } # Check if PS Remoting is already enabled, if not enable it # WinRM should be running; check that we have a PS session config. if (!(Get-PSSessionConfiguration -Verbose:$false) -or (!(Get-ChildItem WSMan:\\localhost\\Listener))) { if ($SkipNetworkProfileCheck) { Write-Verbose \"Enabling PS Remoting without checking Network profile.\" Enable-PSRemoting -SkipNetworkProfileCheck -Force -ErrorAction Stop Write-Output \"Enabled PS Remoting.\" } else { Write-Verbose \"Enabling PS Remoting.\" Enable-PSRemoting -Force -ErrorAction Stop Write-Output \"Enabled PS Remoting.\" } } else { Write-Verbose \"PS Remoting is already enabled.\" } # Ensure LocalAccountTokenFilterPolicy is set to 1 # https://github.com/ansible/ansible/issues/42978 # Needed for NTLM authentication $token_path = \"HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System\" $token_prop_name = \"LocalAccountTokenFilterPolicy\" $token_key = Get-Item -Path $token_path $token_value = $token_key.GetValue($token_prop_name, $null) if ($token_value -ne 1) { Write-Verbose \"Setting LocalAccountTOkenFilterPolicy to 1\" if ($null -ne $token_value) { Remove-ItemProperty -Path $token_path -Name $token_prop_name } New-ItemProperty -Path $token_path -Name $token_prop_name -Value 1 -PropertyType DWORD \u003e $null } # Make sure there is a SSL listener. $listeners = Get-ChildItem WSMan:\\localhost\\Listener if (!($listeners | Where-Object {$_.Keys -like \"TRANSPORT=HTTPS\"})) { # We cannot use New-SelfSignedCertificate on 2012R2 and earlier $thumbprint = New-SelfSignedCert -SubjectName $SubjectName -ValidDays $CertValidityDays Write-Output \"Self-signed SSL certificate generated; thumbprint: $thumbprint\" # Create the hashtables of settings to be used. $valueset = @{ Hostname = $SubjectName CertificateThumbprint = $thumbprint } $selectorset = @{ Transport = \"HTTPS\" Address = \"*\" } Write-Verbose \"Enabling SSL listener.\" New-WSManInstance -ResourceURI 'winrm/config/Listener' -SelectorSet $selectorset -ValueSet $valueset Write-Verbose \"Enabled SSL listener.\" } else { Write-Verbose \"SSL listener is already active.\" # Force a new SSL cert on Listener if the $ForceNewSSLCert if ($ForceNewSSLCert) { # We cannot use New-SelfSignedCertificate on 2012R2 and earlier $thumbprint = New-SelfSignedCert -SubjectName $SubjectName -ValidDays $CertValidityDays Write-Verbose \"Self-signed SSL certificate generated; thumbprint: $thumbprint\" $valueset = @{ CertificateThumbprint = $thumbprint Hostname = $SubjectName } # Delete the listener for SSL $selectorset = @{ Address = \"*\" Transport = \"HTTPS\" } Remove-WSManInstance -ResourceURI 'winrm/config/Listener' -SelectorSet $selectorset # Add new Listener with new SSL cert New-WSManInstance -ResourceURI 'winrm/config/Listener' -SelectorSet $selectorset -ValueSet $valueset } } # Enable/Disable basic authentication as needed $basicAuth = Get-Item WSMan:\\localhost\\Service\\Auth\\Basic if ($EnableBasicAuth) { if ($basicAuth.Value -eq \"true\") { Write-Output \"Basic authentication is already enabled\" } else { Write-Output \"Basic authentication is currently disabled\" Set-Item WSMan:\\localhost\\Service\\Auth\\Basic -Value $true Write-Output \"Basic authentication has been enabled\" } } else { if ($basicAuth.Value -eq \"true\") { Write-Output \"Basic authentication is currently enabled\" Set-Item WSMan:\\localhost\\Service\\Auth\\Basic -Value $false Write-Output \"Basic authentication has been disabled\" } else { Write-Output \"Basic authentication is already disabled\" } } # Check firewall $rule = Get-NetFirewallRule | where {$_.DisplayName -eq \"Allow WinRM HTTPS\"} if ($rule) { if ($rule.Profile.ToString() -eq \"Any\") { Write-Output \"Firewall rule already exists for WinRM\" } else { Set-NetFirewallRule -DisplayName \"Allow WinRM HTTPS\" -Profile Any } } else { Write-Output \"Creating firewall rule for WinRM\" New-NetFirewallRule -Profile Any -Name \"Allow WinRM HTTPS\" -DisplayName \"Allow WinRM HTTPS\" -Direction Inbound -LocalPort 5986 -Protocol \"TCP\" -Action Allow -Enabled True | Out-Null } # Test a remoting connection to localhost, which should work. $httpResult = Invoke-Command -ComputerName \"localhost\" -ScriptBlock {$env:COMPUTERNAME} -ErrorVariable httpError -ErrorAction SilentlyContinue $httpsOptions = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck $httpsResult = New-PSSession -UseSSL -ComputerName \"localhost\" -SessionOption $httpsOptions -ErrorVariable httpsError -ErrorAction SilentlyContinue if ($httpResult -and $httpsResult) { Write-Verbose \"HTTP: Enabled | HTTPS: Enabled\" } elseif ($httpsResult -and !$httpResult) { Write-Verbose \"HTTP: Disabled | HTTPS: Enabled\" } elseif ($httpResult -and !$httpsResult) { Write-Verbose \"HTTP: Enabled | HTTPS: Disabled\" } else { Write-Output \"Unable to establish an HTTP or HTTPS remoting session.\" Throw \"Unable to establish an HTTP or HTTPS remoting session.\" } Write-Output \"PS Remoting has been successfully configured for Intersight.\" Using the Executor PowerShell Script embedded task Use the Invoke PowerShell Script from the Executors section in the Intersight Orchestrator Workflow Designer UI to create a task for a PowerShell Script target endpoint.\nProduct Description ABC Sample Text The following table explains the PowerShell Script task properties:\nProperty Description External Target The PowerShell endpoint on which the PowerShell Script task is run.\nThe PowerShell Script target must be in the connected state.\nStatic Value—Click Select External Target to select the PowerShell endpoint target from the Cisco Intersight target inventory.\nDirect Mapping—Select an existing workflow input or Task output field.\nTo create a new Workflow input, select Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the task input.\nScript The PowerShell script to be executed on the endpoint.\nStatic Value—The PowerShell script.\nDirect Mapping—Select an existing workflow input or Task output field.\nTo create a new Workflow input, select Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nNote: When you specify the PowerShell script statement and enable the Response Parser Type as JSON, at the time of execution of the workflow, Intersight pipes ConvertTo-Json to the script to get the corresponding responses as JSON output. However, PowerShell script statements do not output to the pipe command, and the workflow may fail and return the error \"An empty pipe element is not allowed.\". For example, for a script foreach ($x in 1,2,3,4,5) {$x} with Response Parser Type as JSON, when the workflow is executed the workflow fails and returns the error \"An empty pipe element is not allowed\".\nYou must wrap the PowerShell script statement with the $() operator, such as $(foreach ($x in 1,2,3,4,5) {$x} ) for the PowerShell script to work.\nTimeout The duration in seconds for which the task waits for a response from the PowerShell target endpoint.\nThe field corresponds to the wsman:OperationTimeout field in the WinRM SOAP/XML message.\nStatic Value—The timeout in seconds.\nDirect Mapping—Select the command timeout from the Workflow input or Task output.\nTo create a new Workflow input, select Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input.\nResponse Parser The response parser contains information about the required values, their types, and the location in the API responses. You specify the required values along with API request details. These details are used by the response parser to extract the values from the API responses.\nStatic Value—Select the response type as JSON or Text.\nEnable JSON Parsing—Select enable to parse the script response and extract the data from it.\nDepth—The number of levels of the contained objects that must be included in the JSON representation.\nPath—The content specific path information that identifies the parameter value within the content. The value is usually XPath or JSONPath.\nName—The name of the output under which the captured value is saved.\nType—The response parameter type—String, Integer, Float, or Boolean.\nEnable Text Parsing—Select enable to parse the script response and extract data from it.\nRegular Expression—The regular expression of the line in the command response where the interested capture value resides. The format to specify the capture value in this input is $\u003cName of the parameter\u003e. For example, if the value of the Regular Expression field is $\u003cParameterName\u003e\\@cisco\\.com, then the Name field must be given the value - ParameterName.\nName—The name of the output under which the captured value is saved. This name should be the same that is provided in the Regular Expression—$\u003cName\u003e.\nType—The response parameter type—String, Integer, Float, or Boolean.\nDirect Mapping—Select the command timeout from the Workflow input or Task output.\nTo create a new Workflow input, select Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input.\nThe following table explains the task Output properties:\nProperty Description Exit Code The exit code after the execution of the PowerShell script against the given endpoint. Response The response returned by the script. Extracted Parameters The list of output parameters extracted from the response. The following table explains the task Outcomes properties:\nProperty Description Outcomes To use the extracted values from the API response to determine the task status and set the status with an appropriate message, when the conditions match, do the following:\nClick Add Outcome.\nName—The name for the outcome.\nOutcome Type—Select the outcome type as Success, Error, or Skip Task Execution.\nFor more information on Outcomes, see Outcomes\nMessage—The message when the condition is met.\nCondition—The condition for the outcome.\nFor example, {{eq .local.response.ExitCode \"0\"}}.\nThis condition checks whether the response exit code of API is 0.\nUsing the Executor PowerShell Script custom task Use the Invoke PowerShell Script from the Executors section in the Intersight Orchestrator Task Designer UI .\nFor more information on custom tasks, see Defining a Task\nThe following table explains the PowerShell Script custom task properties:\nProperty Description General For more information, see Defining a Task\n.\nInputs External Target—The PowerShell endpoint target on which the PowerShell script task is run. Outputs To extract the required values from the API responses and map it to task outputs, do the following:\nCreate Task Output—Specify the task output.\nMap to Task Output—Check the check box to map the task output to an API response.\nTask Output—Select the API response to which the task output is mapped. The options available are:\nExit Code | Invoke PowerShell Script\nResponse | Invoke PowerShell Script\nExtracted Parameters | Invoke PowerShell Script\nFor example, if you create a new task output New Exit Code and map it to Exit Code | Invoke PowerShell Script, after the workflow is executed, the output will show:\n.\n└── Outputs/\n├── ConfigResults:[ 1 ]/\n│ └── Object:{ 3 }/\n│ ├── ConfigResCtx:{ 1 }/\n│ │ └── EntityData:{ 1 }/\n│ │ └── task:workflow.PowerShellApiTask\n│ ├── State:Ok\n│ └── Type:Config\n├── Custom_Task_Output:Handles NPM(K) PM(K) WS(K) CPU(s) Id SI ProcessName/\n│ ----- ------ ----- ----- ------ -- -- -----------\n│ 264 16 4880 24808 1.11 2600 2 ApplicationFrameHost\n│ 405 28 109036 5628 85.55 2112 2 chrome\n│ ...\n└── New Exit Code:0\nThe following table explains the PowerShell Script custom task input:\nProperty Description Script The PowerShell script to be executed on the target endpoint.\nStatic Value—The PowerShell Script.\nDirect Mapping—Select an existing Task input or Task output field.\nNote: When you use Direct Mapping and select a task input, and then execute the workflow it fails and returns the error map[Text:get-service : The term 'map[Text:get-service' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again..\nYou must prefix .Text to the Direct Mapping input in Advanced Mapping. For example, for a task input Script, the Advanced Mapping input should be{{.global.task.input.Script.Text}}\nAdvanced Mapping—Map a Golang template to the task input.\nTimeout The duration in seconds for which the task waits for a response from the PowerShell target endpoint.\nThe field corresponds to the wsman:OperationTimeout field in the WinRM SOAP/XML message.\nStatic Value—The timeout in seconds.\nDirect Mapping—Select the command timeout from the Task input or Task output.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input.\nResponse Parser The response parser contains information about the required values, their types, and the location in the API responses. You specify the required values along with API request details. These details are used by the response parser to extract the values from the API responses.\nStatic Value—Select the response type as JSON or Text.\nEnable JSON Parsing—Select enable to parse the script response and extract the data from it.\nDepth—The number of levels of the contained objects that must be included in the JSON representation.\nPath—The content specific path information that identifies the parameter value within the content. The value is usually XPath or JSONPath.\nName—The name of the output under which the captured value is saved.\nType—The response parameter type—String, Integer, Float, or Boolean.\nEnable Text Parsing—Select enable to parse the script response and extract data from it.\nRegular Expression—The regular expression of the line in the command response where the interested capture value resides. The format to specify the capture value in this input is $\u003cName of the parameter\u003e. For example, if the value of the Regular Expression field is $\u003cParameterName\u003e\\@cisco\\.com, then the Name field must be given the value - ParameterName.\nName—The name of the output under which the captured value is saved. This name should be the same that is provided in the Regular Expression—$\u003cName\u003e.\nType—The response parameter type—String, Integer, Float, or Boolean.\nDirect Mapping—Select the input from the Task input or Task output.\nNote: When you use Direct Mapping and select a task input, and execute the workflow it fails and returns the error Error in execution: API request cannot be populated: invalid character 'm' looking for beginning of value.\nYou must pipe ToJson to Direct Mapping in Advanced Mapping. For example, for a task input ResponseParser, the Advanced Mapping input should be {{.global.task.input.ResponseParser| ToJson}}.\nAdvanced Mapping—Map a Golang template to the task input.\nThe following table explains the PowerShell Script custom task Outcomes:\nProperty Description Outcomes To use the extracted values from the API response to determine the task status and set the status with an appropriate message, when the conditions match, do the following:\nClick Add Outcome.\nName—The name for the outcome.\nOutcome Type—Select the outcome type. The options available are Success, Skip To Success, Error, Terminal Error, Skip Task Execution, or Status.\nFor more information on Outcomes, see Outcomes\nMessage—The message when the condition is met.\nCondition—The condition for the outcome.\nFor example, {{eq .global.InvokePowerShellScript1.output.ExitCode \"0\"}}.\nThis condition checks whether the response exit code of the API named ‘InvokePowerShellScript1’ used in a custom task is 0.\nTemplate Parameters The request body template can refer to values from workflow inputs, previous task outputs, or implicit parameters for Intersight API calls. The following table explains the template parameters.\nPrefix/Format Description {{.global.workflow.input.\u003cParameterName\u003e}} Workflow input reference. {{.global.\u003cTaskRefName\u003e.output.\nParameters.\u003cParameterName\u003e}} Previous task output reference. TaskRefName is the name of the previous task having output ParameterName. {{.security.AccountMoid}} Implicit parameter reference to Account MoID under which the workflow is running. {{.security.OrganizationMoid}} Implicit parameter reference to Organization MoID under which the workflow is running. Template Engine Syntax The template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements\nThe comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}} Conditional Statements\nThe template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \\\u003ccomparision_statement\u003e}} Template to be used {{end}} {{if \\\u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}} {{if \\\u003ccomparision_statement\u003e}} Template to be used {{else if \\\u003ccomparision_statement}} Tempalte to be used {{end}} ","categories":["ICO"],"description":"Intersight Cloud Orchestrator allows workflow designers to run PowerShell Script on a PowerShell target endpoint using the Invoke PowerShell Script embedded task in the workflow.","excerpt":"Intersight Cloud Orchestrator allows workflow designers to run …","ref":"/docs/ico/executors/powershell/","tags":["Executors"],"title":"Powershell"},{"body":"\u003c!DOCTYPE html\rPUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"\u003e\rWhat's New in Cisco Intersight\rDecember 20\rLog4j fix is now available in Intersight. For more information, see Cisco Security Advisory for Apache Log4j\nDecember 9\rEnhancements to Cisco HyperFlex Systems in Intersight:\nAdded HyperFlex Data Platform 4.5(2b) support for HyperFlex cluster deployment and\rupgrade. For more information, see Cisco HyperFlex Systems Installation Guide for\rIntersight and Upgrade Cisco HyperFlex Systems in\rIntersight\nAdded capability to alert users about End of Life and End of Support dates for Cisco\rHyperFlex Data Platform software releases that are no longer supported. For more\rinformation, see Cisco End of Life Advisories\nEnhancements to Intersight Cloud Orchestrator (ICO):\nAdded ability to execute PowerShell scripts using Invoke PowerShell Script tasks to automate\roperations on the PowerShell target endpoints. For more information, see Executors – Invoke PowerShell Script\nAdded ability to support Cisco Application Policy Infrastructure Controller (APIC) as one of\rthe target endpoints in Invoke Web API task. For more information, see Executors - Invoke Web API Request\nAdded support for launching VMware ESXi host console. For more information, see General Information on Hosts\nAdded support for VMware ESXi host maintenance mode actions. For more information, see General Information on Hosts\nAdded OS Installation support for Windows 2022 and RHEL 8.4 for standalone and Intersight\rManaged Mode (IMM) servers. For more information, see Supported Operating Systems for Standalone Servers\rand Supported Operating Systems for Intersight Managed Mode\rServers\nAdded support for Image Views and Health Overlay on the UCSM Managed Mode (UMM) Fabric\rInterconnects Details View. For more information, see Fabric Interconnects Details View\nAdded support for specifying the switching mode for Ethernet and Fibre Channel ports. For more\rinformation, see Creating a Switch Control Policy\nAdded support for specifying the VSAN scope of an FC port and for specifying the role of the FC\rport as FC Storage or FC Uplink. For more information, see Creating a Port Policy and Creating a VSAN Configuration Policy\nAdded the ability to configure Out-Of-Band IP addresses to route traffic using the management\rport of the Fabric Interconnect. For more information, see Creating an IMC Access Policy\nAbility to enable the Get Subscription Information option to obtain subscription details such as\rusage, status, and expiration date to be displayed on the Licensing page. For more information,\rsee Registering\rIntersight with Cisco Smart Licensing\nAdded IKS licensing support (Trial and Advantage) for clusters running on VMware, which will\rreport vCPU usage of IKS clusters running on VMware. For more information, see Cisco\rIntersight Kubernetes Service Licensing\nDecember 2\rThe Cisco Intersight Service Mesh Manager (Intersight SMM) extension, a managed Istio offering,\ris now Generally Available. Intersight SMM enables you to observe, inspect, and manage\rapplication traffic, control the ingress/egress gateways, and use policy-based secure\rconnectivity. For more information, see Cisco Intersight Service Mesh Manager\nEnhancements for the Add Terraform Workspace workflow selections including Execution Mode, Apply\rMethod, User Interface, and Share State Globally. For more information, see Terraform Service enhancements for the Add Terraform\rWorkspace workflow\nAdded Parallel Loop task in Intersight Cloud Orchestrator (ICO) to iteratively run a single task\ror sub-workflow based on the specified count. For more information, see Operations - Parallel Loop Task\nNovember 19\rEnhancements for standalone and Intersight Managed Mode (IMM) servers:\nAdded network device and VLAN ID configuration support in Cisco Mode of OS Installation. For\rmore information, see Performing OS Installation in Cisco mode\nAdded ability to reset vKVM. For more information, see Server Actions and Supported Virtual KVM\nAdded new targets to support target claim, using Resource Groups, for the Organization. For more\rinformation, see Target\rClaim for Compute/Fabric, Hyperconverged, Orchestrator, and Platform Services Targets\rEnhancements to Intersight Cloud Orchestrator (ICO):\nAdded tasks for creating and managing virtual machine templates\nAdded support for viewing virtual machine template inventory.\rFor more information, see General Information on Virtual Machine Templates\rEnhancements to Cisco Intersight Workload Optimizer (IWO): Added ability to recommend scale actions for Azure VMs based on the number of NICs supported\rby an Azure pricing tier.\nAdded support for node pools to deploy and scale compute resources for Kubernetes services.\rAdded improvements in cumulative savings and investments charts and actions for Azure\rresource groups.\nAdded ability to view additional information for container platform actions, services, and\rvStorage resize actions.\nAdded capability to discover tags assigned to workloads and view them from the Actions\rDetails page for pending actions.\nFor more information, see Intersight Workload Optimizer Target Configuration\rGuide and Intersight Workload Optimizer User Guide\nNovember 12\rCisco HyperFlex Data Platform 5.0(1a) release provides the following features in Intersight:\nSupport for install and upgrade of a HyperFlex converged node on HyperFlex-Series M6 servers.\rYou can use HyperFlex-Series M6 servers, as well as compliant UCS C-Series M6 servers, to\rdeploy HyperFlex clusters.\nFor more information, see Cisco HyperFlex Systems Installation Guide for\rIntersight and Upgrade Cisco HyperFlex Systems in Intersight Added ability to take snapshots of virtual machines and restore, using N:1 Replication for\rHyperFlex Clusters in Intersight:\nAbility to configure different retention counts on the source and target clusters.\nAbility to use HyperFlex Fabric Interconnected clusters as source clusters.\nBackup dashboard enhancements to include error reporting for failed snapshots and\rreplication, drill down options, and consolidated view of failed backups and restores in\rthe last 24 hours.\nFor more information, see N:1 Replication for HyperFlex Clusters\nAdded Non-Volatile Memory Express (NVMe) configuration support in Boot Order policy for\rstandalone and Intersight Managed Mode (IMM) servers. For more information, see Boot Order Policy\nAdded embedded tasks in Intersight Cloud Orchestrator (ICO) to invoke Ansible Playbook and SSH\rcommands to automate operations on the target devices. For more information, see Executors -\rInvoke Ansible Playbook\rand Executors -\rInvoke SSH Commands\rOctober 28\rAdded support to integrate Cisco Intersight Workload Optimizer (IWO) with ServiceNow for change\rmanagement of actions and recommendations. For more information, see Intersight Workload Optimizer Target Configuration Guide and Intersight Workload Optimizer User Guide\nAdded support for the configuration of Disjoint Layer 2 VLANs on UCS Fabric Interconnect uplink\rports. For more information, see Creating a VLAN Configuration Policy\rEnhancements to Intersight Kubernetes Service (IKS):\nAdded support for the Service Mesh Manager (SMM) add-on. This is a feature preview. For more\rinformation, see Service Mesh Manager for IKS\nAdded support for deleting cluster profiles using Intersight API.\rOctober 22\rEnhancements to Cisco Intersight with NetApp ONTAP storage:\nAdded Health status information to Storage General page\nEnhanced Storage Inventory page to include:\nNTP Server details\nSensor details which include PSU, FRU, and Fan details for each Node\nCIFS and NVMe information for Storage Virtual Machines\nLatency, IOPS, and Throughput statistics for Volumes, LUNs, VMs, Aggregates, and\rNodes Total Data Capacity details for Volumes\nVLAN and link aggregation details for Ports October 14\rEnhancements to Cisco Intersight Workload Optimizer (IWO): Added support to manage New Relic target.\nAdded ability to collect Guest Metrics from vCenter targets.\nFor more information, see Intersight Workload Optimizer Target Configuration\rGuide and Intersight Workload Optimizer User Guide\nAdded tasks for mounting and connecting external datastores on the ESXi hosts via iSCSI software\radapters.\rAdded support for Cisco UCS C225 M6 server in Standalone mode and in Intersight Managed Mode\r(IMM). For more information, see Supported Systems\nOctober 7\rEnhancements to Intersight Service for Terraform (IST):\nAdded workflow to create a workspace in Terraform Cloud.\nAdded rollback option for Add Terraform Variables workflow.\nAdded an option to destroy plan (destroy existing infrastructure managed by Terraform) to\rStart New Terraform Plan workflow.\rFor more information, see TFC-ICO Integration: Out-of-Box ICO Workflows\rEnhancements to Server Profile management:\nAdded Resource Pools to group homogeneous resources and automate configuration of Cisco UCS\rStandalone and Fabric Interconnect-attached servers. For more information, see Resource Pools and Configuring Server Profiles\rAdded support for Universally Unique Identifier (UUID) pools and UUID static address on\rFabric Interconnect-attached servers. For more information, see UUID Pools and Configuring Server Profiles\rAdded tasks for creating and managing storage pools in the storage targets available in\rIntersight. For more information, see Supported Tasks for Storage Targets\rAdded capability to define Parameter Set and Progressive Disclosure rules for workflow inputs.\rFor more information, see Workflow Input Parameter Set and Progressive Disclosure\rRules\rAdded capability to define Parameter Set rules for composite data types. For more information,\rsee Data Type Parameter Set Rule\rOctober 5\rEnhancements to Cisco Intersight Workload Optimizer (IWO): Improved Container Resource Management for Kubernetes CPU Metrics and Kubernetes Node\rActions.\nImproved Cloud Resource Management to include uptime data in cost calculations for cloud VMs,\rcumulative savings and cumulative investments charts, and AWS Savings plans utilization and\rcoverage.\nAdded recommendation in Container Resize Action to increase the vCPU limit capacity for\raddressing slow response times associated with CPU throttling.\nFor more information, see Intersight Workload Optimizer Target Configuration\rGuide and Intersight Workload Optimizer User Guide\nSeptember 30\rAdded the ability to configure the timezone for Standalone servers. For more information, see Creating an NTP Policy\nSeptember 24\rAdded the ability to configure a retention period for audit logs as part of account settings\rconfiguration. For more information, see Account Settings Configuration​\nEnhanced Intersight Target Claim:\nAdded Resource Group to classify and manage resources for Organizations. For more\rinformation, see Creating a Resource Group\rAdded Device Administrator and Device Technician privileges to support Organization user\rrole. For more information, see Creating a User Defined role\rSeptember 16\rSupport for Cisco UCS X-series in Intersight Managed Mode (IMM) is now Generally Available. For\rmore information, see Supported Systems​ and Chassis Inventory View\nAdded support for managing Cisco UCS C890 M5 targets in Intersight. This is a feature preview.\rFor more information, see Managing Cisco UCS C890 M5 Targets​\nEnhancements to Intersight Cloud Orchestrator (ICO):\nAdded support for exporting and importing workflows, tasks, and data types from one account\rto another. For more information, see Workflow Designer, Task\rDesigner, and Data Types\nAdded support for viewing execution graph after the successful execution of user-defined\rworkflows. For more information, see Workflow Designer\nAdded new tasks for creating and managing virtual machine snapshots. For more information,\rsee General Information on Virtual Machines\nAdded new tasks for creating and managing VMware datastore clusters associated with VMware\rvCenter devices such as datacenters, datastores, virtual machines, and host.\nAdded support for cloning Orchestration tasks. For more information, see Task\rDesigner\nSeptember 9\rAutomated generation of TAC Service Request and Return Material Authorization from\rIntersight, is now Generally Available. For more information, see Enabling Proactive Support through Intersight​\rCisco Hardware Compatibility List (HCL) to determine hardware compliance is available for\rCisco UCS C245 M6 and C225 M6 servers in Standalone Mode. For more information, see Compliance with Hardware Compatibility List (HCL)​\nAdded support for viewing virtual machine snapshot inventory. For more information, see General Information on Virtual Machines\nAdded new Cisco Security Advisories. For a complete list of advisories and more information,\rsee Intersight Advisories\nSeptember 2\rAdded ability to select and view the location information of VMware datastore clusters\rassociated with VMware vCenter devices such as datacenters, datastores, virtual machines,\rand host. For more information, see General Information on Datastore Clusters\nAdded support for managing the inventory information of VMware datastore clusters. For more\rinformation, see General Information on Datastore Clusters\nEnhanced UI for Task Input and Rollback Task Input mappings in Task Designer. For more\rinformation, see Task Designer\nAdded new Cisco Security Advisories. For a complete list of advisories and more information,\rsee Intersight Advisories\nAugust 26\rEnhanced Storage Policy to simplify storage configuration. For more information, see Creating a Storage Policy\nAdded support for Cisco UCS C245 M6 server in Intersight Managed Mode (IMM). For more\rinformation, see Supported Systems\nAdded support for Cisco UCS C220 M6, C240 M6, and B200 M6 servers in UCSM Managed Mode (UMM).\rFor more information, see Supported Systems\nAdded support for operating system installation for Cisco UCS C245 M6 server in Intersight\rManaged Mode (IMM). For more information, see Operating System Installation Overview\nCisco Hardware Compatibility List (HCL) to determine hardware compliance is available for:\rCisco UCS C245 M6 server in Standalone and in Intersight Managed Mode (IMM)\nCisco UCS C220 M6, C240 M6, and B200 M6 servers in UCSM Managed Mode (UMM)\nFor more information, see Compliance with Hardware Compatibility List (HCL)\nAdded ability to support vCenter as one of the endpoints in Invoke Web API task. For more\rinformation, see Executors - Invoke Web API Request\rAugust 19\rAdded capability to run HyperFlex health checks for network retransmits, and ability to\rvalidate the disk state, DNS latency, keystore file consistency, and ESXi HyperFlex user\rpassword on HyperFlex clusters. For more information, see Health Check for HyperFlex Clusters\nAdded support for operating system installation for Cisco UCS C220 M6, C240 M6, and B200 M6\rservers in Intersight Managed Mode (IMM). For more information, see Operating System Installation Overview\nAdded support for streamlining replacement of Fabric Interconnects. For more information, see\rRMA Upgrades and Replacement\rAdded ability to filter dashboards by tags and organizations. Also, added dashboard presets\rthat allow for easier custom dashboard builds. For more information, see Dashboard Management\nAugust 12\rAdded support for HyperFlex cluster expansion for Edge and FI-Attached clusters. For more\rinformation, see Expand Cisco HyperFlex Clusters in Intersight\rAdded support for operating system installation for standalone Cisco UCS C-Series M6 servers.\rFor more information, see Supported Operating Systems for Standalone\rServers\nCisco Hardware Compatibility List (HCL) to determine hardware compliance is available for\rCisco UCS C220 M6, C240 M6, and B200 M6 servers. For more information, see Compliance with Hardware Compatibility List (HCL)\nEnhancements to Intersight managed devices:\nIntersight Managed Mode features including functionalities such as Policies, Pools,\rProfiles, and Templates are now Generally Available for Private Virtual Appliance.\rThese features are supported on Intersight Private Virtual Appliance starting with\rversion 1.0.9-302. For more information, see Intersight Managed Mode\nAdded support for Cisco UCS C220 M6, C240 M6, and B200 M6 servers in Intersight\rManaged Mode. The support is also available on Intersight Virtual Appliance starting\rwith version 1.0.9-302. For more information, see Supported Systems\nJuly 30\rAdded support for Cisco UCS C-Series M6 servers in Standalone mode. For more information, see\rSupported Systems\rAdded support for streamlining replacement of Fabric Interconnects. For more information, see\rRMA Upgrades and Replacement\rAdded support for Power and Thermal policies for B-Series chassis. For more information, see\rChassis Policies and Server Policies\rAdded support for configuring CA signed certificates on Intersight Managed Mode servers. For\rmore information, see Server Actions\nEnhancements to Intersight Cloud Orchestrator:\nAdded new tasks for UCS C-Series standalone servers to support precision boot device\roperations. For more information, see Compute Tasks Matrix\nAdded OS installation workflow to the ICO automation library, which can be included\ras a part of another comprehensive workflow. For more information, see Installing an Operating System\nAdded support for cloning Orchestration data types. For more information, see Data\rTypes\nJuly 22\rAdded support to lock/unlock the front panel and reset CMOS for IMM servers. For more\rinformation, see Server Actions\nAdded support for login using Identity Provider (IdP) initiated SSO, which enables login to\rIntersight through an IdP user portal, or through an App URL supported by some IdPs. For\rmore information, see Overview of Single Sign-On with Cisco\rIntersight\nAdded capability to automatically allocate MAC Prefix during HyperFlex cluster profile\rconfiguration. For more information, see Cisco HyperFlex Systems Installation Guide for Intersight\nCisco Hardware Compatibility List (HCL) to determine hardware compliance is available for\rCisco UCS S-Series servers. For more information, see Compliance with Hardware Compatibility List (HCL)\nAdded support for cloning or creating a new version of the existing workflow in workflow\rdesigner. For more information, see Workflow Designer\nJuly 15\rAdded capability to run NTP Client Service Status, Package Version, and Stale Node health\rchecks on HyperFlex clusters. For more information, see HyperFlex Health Check\nEnhanced the Terraform cloud integration by enabling users to add/update the default list of\rmanaged hosts for an agent. For more information, see Deploy a Terraform Cloud Agent\nJuly 8\rAdded out-of-box workflows in Intersight Cloud Orchestrator (ICO) which allows users to\radd/update variables, queue a plan, and approve a run on a Terraform Cloud workspace. For\rmore information, see Intersight Service for Terraform\nAdded ability to update managed hosts and other Terraform Agent properties. For more\rinformation, see Deploy a Terraform Cloud Agent\nAdded ability to manage vKVM, Tunneled vKVM, and VMRC console sessions launched from\rIntersight. For more information, see Managing Sessions\nAdded support to manage Dynatrace and Cloud Foundry targets in Intersight Workload Optimizer\r(IWO). For more information, see Intersight Workload Optimizer Target Configuration Guide and Intersight Workload Optimizer User Guide\nAdded support to send email notifications for alarms raised in Intersight. For more\rinformation, see Configuring Email Notifications\nJuly 1\rAdded support for enabling the Azure Stack QoS capability, GENEVE offload protocol, and\rselecting FC-NVMe protocol for Intersight Managed Mode servers. For more information, see Creating a LAN Connectivity Policy, Creating an Ethernet Adapter Policy, and Creating a SAN Connectivity Policy\nAdded HyperFlex Data Platform 4.5(2a) support for HyperFlex cluster deployment and upgrade.\rFor more information, see HyperFlex Cluster Management and Upgrading Cisco HyperFlex Systems with Cisco\rIntersight\nJune 24\rEnhancements to Cisco Intersight Workload Optimizer (IWO):\nImproved AWS Savings Plans and Kubernetes Analytics, ability to identify performance and\refficiency opportunities for a single Kubernetes Cluster, and Currency Settings\renhancements. For more information, see Intersight Workload Optimizer User Guide\nEnhancements for Kubernetes pod “Move” actions and the “Number of Replicas” chart. To use\rthis feature, the Kubernetes Collector for Cisco Intersight Workload Optimizer must be\rupdated to the latest version. For more information, see Intersight Workload Optimizer Target Configuration Guide\rAdded ability to select and view the location information of VMware vCenter objects such as\rdatacenters, clusters, datastores, virtual machines, or folders in which the objects reside.\rAdded a single task to support invoke guest customization for VMware vCenter in Workflow\rDesigner for Linux or Windows virtual machines.\n\u003e\u003e\u003e\u003e\u003e\u003e\u003e c40a51f58caa9d91bcbb736eef6530f9c840e6b4\rJune 17\rAdded ability to support Bearer Token authentication scheme in HTTP endpoint target\rwith an optional ability to add endpoint without authentication. For more\rinformation, see Executors -Invoke Web API Request\nAdded ability to skip execution of a custom web API task based on the task inputs or\rprevious API outputs. This will skip execution of all the subsequent APIs in the\rtask. For more information, see Task Designer\nAdded a new task for formatting storage volumes in various storage targets available\rin Intersight. For more information, see Supported Tasks for Storage Targets\rJune 10\rAdded HyperFlex Data Platform 4.0(2f) support for HyperFlex cluster deployment\rand upgrade. For more information, see HyperFlex Cluster Management and Upgrading Cisco HyperFlex Systems with\rCisco Intersight\nAdded ability to specify Task Status Outcomes in Web API task, which allows\rcustomization of task execution status and/or message based on API response. For\rmore information, see Executors -Invoke Web API Request\nJune 3\rAdded capability to configure the interval and start date for the data used in\rcalculating capacity forecast for HyperFlex clusters. This enables faster\rreplanning and allows known capacity change windows to be skipped from the\rcapacity planning calculation. For more information, see HyperFlex Cluster Capacity Planning\nAdded new tasks for VMware vCenter networking operations to provision and manage\rvSphere standard switches, distributed virtual switches, and VMkernel networks.\rFor more information, see Workflow Designer\nUpdated support to accommodate recent changes to Cisco ID for Multi-Factor\rAuthentication (MFA). If MFA for your individual Cisco ID user account was\renabled before April 16, 2021, you will be asked to re-enable it as part of your\rnext login to Intersight.\nMay 27\rSupport for NetApp ONTAP storage to simplify management and orchestration of\rNetApp FlexPod and ONTAP data storage environments is now Generally Available.\rFor more information, see Intersight Cloud Orchestrator and\rIntersight Assist\rAdded capability to use multiple Intersight Assists in an Intersight Account with\rCisco Intersight Workload Optimizer (IWO) service. For more information, see Intersight Workload Optimizer Getting\rStarted Guide\nMay 20\rAdded ability to perform server and Fabric Interconnect firmware upgrade in UCS\rManager Mode for Private Virtual Appliance. For more information, see Managing Firmware in UCS Manager\rMode\nAdded support for viewing the network inventory information of VMware vCenter\rdevices such as datacenters, hosts, or virtual machines. For more information,\rsee General Information on Datacenters, General Information on Hosts, and General Information on Virtual Machines\rAdded support to manage Nutanix Hybrid Cloud Platform (HCI) and Nutanix Acropolis\r(AOS) targets in Cisco Intersight Workload Optimizer (IWO). For more\rinformation, see Intersight Workload Optimizer Target\rConfiguration Guide\nMay 6\rCisco Intersight Cloud Orchestrator features are now Generally Available. For\rmore information, see Cisco Intersight Cloud Orchestrator\nAdded support for cloning workflows. For more information, see Workflow Designer\nAdded support to automatically upgrade the HyperFlex compatibility catalog on\rconnected HyperFlex clusters. This capability seamlessly introduces support for\rnew drive models, without requiring a HyperFlex Data Platform upgrade\nAdded ability to filter dashboards by tags and organizations. Also, added\rdashboard presets that allow for easier custom dashboard builds. For more\rinformation, see Dashboard Management\nAdded new Cisco\rSecurity Advisories. For a complete list of advisories and more information, see Intersight Advisories\rApril 29\rEnhancements to Cisco Intersight Cloud Orchestrator:\nAdded ability to easily retrieve design-time debug logs for the Invoke Web API\rtasks to achieve easier troubleshooting for workflow designers. For more\rinformation, see Workflow Designer\rAdded support to apply data transformation of various types such as string\rformatting, date time processing, convert data from one format to the other, so\rthat data can be made available between different workflow tasks in the required\rformat. For more information, see Input and Output Mapping Added support for displaying summary dashboards for Workflow Designer, Task\rDesigner, and Data Types tabs. The tabs display user-defined and\rsystem-generated workflows, tasks, and data types. For more information, see\rWorkflow Designer Workflow Designer Added Online Insertion and Removal (OIR) support for blade and rack server\rsub-components, rack server fans and power supply units, chassis enclosure and IOM,\rchassis and IOM cable changes, and FI and FEX fan and power supply units. For more\rinformation, see Online Insertion and Removal\rDashboard widget that displays contract status based on the current validity of the\rservice contracts, now includes UCS Chassis and Intersight Managed Mode devices. For\rmore information, see Contract Status Widgets\rAdded the ability to create IPMI users by using the Local User Policy. For more\rinformation, see Server Policies\rCisco Intersight Service for HashiCorp Terraform Service (IST) features are now\rGenerally Available. For more information, see Intersight Service for HashiCorp\rTerraform\rAdded new Cisco\rField Notices. For a complete list of advisories and more information, see Intersight Advisories\rApril 22\rIntersight Managed Mode features are now Generally Available. Enhancements to\rIntersight managed devices are: Added support for online insertion and removal of servers in a blade chassis and\rchassis power supply units and fans. The insertion and removal is done\rtransparently and without disrupting other components in the chassis, thereby\rensuring better service and platform management.\rAdded support to configure and assign Flow Control, Link Aggregation, and Link\rControl policies in Intersight Managed domains. For more information, see Domain Policies Added support for monitoring the Hardware Compatibility List (HCL) status on the\rIntersight Managed Mode (IMM) servers. For more information, see Compliance with Hardware Compatibility\rList (HCL) Added ability to easily create and manage Server Profiles at scale with Server\rProfile Templates. For more information, see Server Profile Templates\nAdded ability to deploy operating system configurations to multiple servers using\rvalues in a CSV file. For more information, see Uploading CSV Files for Operating System Deployment\rAdded support to show folder details for VMware vCenter objects such as clusters,\rdatacenters, datastores, and virtual machines. For more information, see Viewing Virtualized Objects in Cisco\rIntersight\nAdded new tasks for UCS C-Series standalone and Intersight Managed Mode (IMM)\rservers in the workflow designer to support server profile management and server\rstorage operations. For more information, see Compute Tasks Matrix\nEnhancements in Cisco Intersight Workload Optimizer (IWO) include ability to\rrecommend scaling throughput capacity for Azure VMs, integration with Azure\rMonitor Log Analytics, support for Azure Site Recovery and Backup Volumes,\rimproved Cloud Analytics, support for AWS Savings Plans, and License Policy\rEnhancements. For more information, see Intersight Workload Optimizer User Guide\nAdded new Cisco\rSecurity Advisories. For a complete list of advisories and more information, see Advisories\rApril 15\rAdded Cisco Intersight Workload Optimizer targets including Microsoft Hyper-V,\rRed Hat Enterprise Virtualization (RHEV), HPE OneView, Dell EMC SC Series, and\rHPE 3PAR. For more information, see the Intersight Workload Optimizer Target Configuration\rGuide\nAdded ability to query Smart License status information for HyperFlex clusters\rusing Intersight API. For more information, see Intersight API\nApril 8\rAdded support for managing AppDynamics instances running on public cloud or SaaS\rdirectly from Intersight, without the need for Cisco Intersight Assist. For more\rinformation, see Intersight Workload Optimizer\nApril 1\rIntroducing Cisco Intersight Kubernetes Service (IKS), a fully curated,\rlightweight container management platform for delivering multi-cloud,\rproduction-grade, and upstream Kubernetes clusters. As part of this release:\rAdded the ability to deploy and manage the lifecycle of Kubernetes clusters in\rVMware ESXi environments.\rAdded support to install Cisco Intersight Workload Optimizer (IWO) agent Helm\rcharts on IKS clusters for full-stack app visualization, Machine Learning\r(AIOps) based right-sizing, and intelligent top-down auto-scaling.\rFor more information, see Cisco Intersight Kubernetes Service\nIntroducing Cisco Intersight Service for HashiCorp Terraform Service (IST) to\rdeliver consistent infrastructure automation using IaC across hybrid clouds.\rThis is a feature preview. For more information, see Intersight Service for HashiCorp\rTerraform\nAdded support for operating system installation on Intersight Managed Mode\rservers. For more information, see Operating System Installation Overview\nMarch 29\rAdded support for inventory of virtual disks that are attached to a virtual\rmachine. For more information, see Inventory of Virtual Disks\nAdded support for adding and removing virtual disks from a virtual machine. For\rmore information, see Virtual Disk Operations\nMarch 25\rEnhancements in HyperFlex\rAdded the ability to upgrade HyperFlex Data Platform and VMware ESXi for Fabric\rInterconnect-attached HyperFlex clusters. For more information, see Upgrading Cisco HyperFlex Systems with\rCisco Intersight\rAdded HyperFlex Data Platform 4.0(2e) support for HyperFlex cluster deployment\rand upgrade. For more information, see HyperFlex Cluster Management and Upgrading Cisco HyperFlex Systems with\rCisco Intersight\rAdded support for excluding drives and storage controllers during firmware\rupgrades or downgrades of UCS C-Series and S-series standalone servers. For more\rinformation, see Upgrading UCS C-Series Standalone\rServers Firmware and Upgrading UCS S-Series Standalone\rServers Firmware\nMarch 18\rAdded support for monitoring health and generating alarms for Intersight managed\rstorage devices, adapters, and vNICs.\nMarch 11\rAdded support for configuring and deploying the Syslog policy to collect logs on\rthe remote syslog servers. For more information, see Syslog Policy in Server\rPolicies\nMarch 5\rAdded support to the storage controller inventory operations that include\rchanging the physical drive state, removing the unused virtual drive, and\rimporting or clearing the foreign configuration. For more information, see\rServer Inventory View\rMarch 4\rSupport for Hitachi Virtual Storage Platform to automate storage and\rvirtualization tasks, and view inventory information is now Generally\rAvailable. For more information, see Intersight Orchestrator and\rIntersight Assist\rAbility to invoke web APIs via HTTP or HTTPS tasks to automate operations\ron the endpoints, added as Targets, in Intersight is now Generally\rAvailable. For more information, see Executors – Invoke Web API Request\nEnhancements to the Intersight Managed Mode Policies\nAdded support for creating a Certificate Management Policy and\rassociating the policy with a server profile. For more\rinformation, see Server\rPolicies\nAdded support for configuring and deploying the SNMP Policy to\rmanage and monitor the network devices. For more information,\rsee SNMP\rPolicy in Domain Policies\nFebruary 18\rAdded the ability to upgrade server firmware for HyperFlex Edge\rclusters. For more information, see Upgrading Cisco HyperFlex\rEdge Systems\nAdded support for power actions on virtual machines and ESXi host\robjects. For more information, see General Information on\rVirtual Machines\nAdded support for access to VMware virtual machines console through\rVMware Remote Console (VMRC) protocol.\nAdded support for configuring and deploying the Virtual Media Policy to\rmap and mount virtual media images on the Intersight Managed Fabric\rInterconnect-attached servers. For more information, see Creating a Virtual Media Policy\rFebruary 12\rAll Intersight Managed Mode features are now in Early Availability.\rEnhancements to the Fabric Interconnect-attached devices include:\rCapabilities\rIntroducing Device Console, an application running on the\rFabric Interconnects, to allow monitoring device health and\rtheir connection status to Intersight. For more information,\rsee Device Console\rDomain Policies\rAdded support for configuring the MAC address aging time\rusing Switch Control Policy. For more information, see Creating\ra Switch Control Policy\rServer Policies\rAdded support for static addressing as part of the LAN\rConnectivity and SAN Connectivity policies. For more\rinformation, see Server\rPolicies and Server Profiles Added support for selecting and importing the default\rconfigurations to an Ethernet Adapter Policy or a Fibre\rChannel Adapter Policy. For more information, see Creating an Ethernet Adapter Policy and Creating a Fibre Channel Adapter Policy Added support for viewing the actual boot order of the\rIntersight managed servers in the Server Inventory View tab.\rFor more information, see Server Inventory View\rAdded support for enabling iSCSI boot on adapters. For more\rinformation, see Server Policies\rAdded support for applying QoS policy on the vNIC and vHBA\rpolicies. For more information, see Creating an Ethernet QoS Policy and Creating a Fibre Channel QoS Policy\rAdded Task Designer for creating tasks that make Intersight API and REST\rAPI calls to external targets that can be reached from Intersight,\reither directly or through device connectors. For more information, see\rTask Designer\rFebruary 4\rEnhancements for Intersight managed devices\nAdded support for configuring and deploying the Syslog Policy on\rIntersight managed Fabric Interconnect-attached domains. For\rmore information, see Syslog\rPolicy in Domain Policies\rAdded support for monitoring the health and generating alarms\rfor Intersight managed Fabric Interconnects, servers, and\rchassis\rAdded\rthe ability to provide capacity recommendations for HyperFlex Clusters.\rFor more information, see HyperFlex\rCapacity Planning\rAdded\rnew Cisco Security Advisories. For a complete list of advisories and\rmore information, see Advisories\rJanuary 21\rAdded support to access the TPM inventory details from a claimed device\rin Intersight Managed FI-attached servers. For information, see Server Inventory View\rAdded ability to disable the tech support bundle collection. For more\rinformation, see Tech Support Bundle\rCollection\rJanuary 14\rEnhancements for Intersight managed Fabric Interconnects\nAdded support for excluding Fabric Interconnect traffic\revacuation during upgrade of Intersight managed Fabric\rInterconnects. For more information, see Upgrading Fabric\rInterconnect Firmware\rAdded support for configuring a port as an appliance port to\rallow NFS storage to connect directly with Intersight managed\rFabric Interconnects. For more information, see Domain\rPolicies and Creating a Port\rPolicy\rIntroducing new external witness support for HyperFlex Edge 2-Node\rClusters. This feature increases cluster availability and flexibility\rfor remote sites. For more information, see Configuring Device Connector\rJanuary 7\rAbility\rto launch Virtual KVM and Tunneled vKVM directly from Cisco Intersight\rusing SSO authentication for servers running with firmware version\r4.1(3a) or later releases. For more information, see Launch Virtual KVM and Launch Tunneled Virtual KVM\rEnhancements in HyperFlex Data Platform 4.5 Release\rAbility to configure N:1 Replication of HyperFlex Edge clusters\rfrom Intersight. For more information, see N:1 Replication for\rHyperFlex Edge Clusters\rAdded HyperFlex Data Platform 4.5(1a) support for HyperFlex\rcluster deployment (FI and Edge) and upgrade of HyperFlex Edge\rclusters. For more information, see HyperFlex Cluster\rManagement and Upgrading Cisco\rHyperFlex Systems with Cisco Intersight\rIntroducing the ability to run pre-defined health checks on\rHyperFlex clusters and view granular details about the health of\rHyperFlex clusters. For more information, see HyperFlex Health\rCheck\r","categories":["ICO"],"description":"","excerpt":"\u003c!DOCTYPE html\rPUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" …","ref":"/docs/whats_new/2021/","tags":["Workflow"],"title":"2021"},{"body":"Test Sample Text\n","categories":["executors"],"description":"Intersight Cloud Orchestrator allows workflow designers to run commands over SSH by using the **Invoke SSH Commands** reusable task in the workflows.","excerpt":"Intersight Cloud Orchestrator allows workflow designers to run …","ref":"/docs/ico/executors/ssh/","tags":["SSH"],"title":"SSH Commands"},{"body":"\r\u003c!DOCTYPE html\u003e\rWhat's New\rShow all\rICO\rIMM\rHX\rIKS\rICO\rKubernetes\rICO\rKubernetes\rICO\rKubernetes\rIMM\rIMM\rHX\rHX\rHX\rHX\rIMM\r","categories":["ICO"],"description":"New What's New","excerpt":"New What's New","ref":"/docs/whats_new/testdata/","tags":["What's New"],"title":"New What's New"},{"body":" Note: To execute the new tasks for VMware vCenter networking operations, you should upgrade to Intersight Assist version 1.0.9-278.\nImportant: The Orchestration option is visible in the left panel only if you have installed the Intersight Premier license.\nOnly an Account Administrator or a user with the Workflow Designer privilege can use the Workflow Designer to create and edit workflows.\nTo launch the Workflow Designer, choose Orchestration \u003e Workflows. A dashboard displays the following details under these tabs, namely, My Workflows, Sample Workflows, and All Workflows:\nValidation Status\nLast Execution Status\nTop Workflows by Execution Count\nTop Workflow Categories\nNumber of System Defined Workflows\nTop Workflows by Targets\nUsing the dashboard, you can create, edit, clone, or delete a tab. To create your own custom view tab, click + and specify a name and then choose the required parameters that need to be displayed in the columns, tag columns, and widgets. You can rename the tabs if it does not have a Lock icon.\nBelow the dashboard is a tabular list of workflows displaying the following information:\nDisplay Name\nDescription\nSystem Defined\nDefault Version\nExecutions\nLast Execution Status\nValidation Status\nLast Update\nOrganization\nThe Actions column allows you to do the following actions:\nExecute—Executes the workflow.\nHistory—Displays workflow execution history.\nManage Versions—create and manage versions for workflows. See Managing Versions for Workflows.\nDelete—Delete a workflow.\nRetry—Retry a failed workflow.\nCreating a Workflow Workflow creation can be broken down into the following sequence of steps:\nDefining a workflow—you specify the display name, description, and other important attributes.\nDefining workflow inputs, workflow variables, and workflow outputs—you can specify which input parameters are mandatory for the workflow execution, define variable(s) for workflow, and the output(s) generated on successful execution.\nAdding workflow tasks—you can add one or more workflow tasks in the Workflow Designer that are needed for the workflow to carry out its function.\nValidate the workflow—you can validate a workflow to ensure that there are no errors in connecting task inputs and outputs.\nDefining a Workflow Choose Orchestration from the left navigation pane.\nChoose Create Workflow. The Create Workflow screen is categorized into the following areas to help you create a workflow: The following table describes the options available to you while creating a workflow:\nWorkflow Designer Area/Option Description Details General Tab Displays workflow details, and also inputs, variables, and outputs of the workflow. You can add a user-friendly short name, reference name, description, and assign an organization to the workflow. You can also specify a version or set a tag to the workflow. In order to categorize your workflow, use the tag key Category and provide an appropriate category value. Use the following checkboxes to: Set as Default Version—Sets this version as the default version for the workflow. Retryable—Execute the workflow from the point of a failure or retry the execution of the entire workflow. You can retry the execution of the workflow for up to two weeks after the last update to the workflow. Enable Debug Logs—Collects the workflow logs for each tasks. You can analyze and debug the workflow execution. Workflow Inputs—You can click Add Workflow Input and add workflow inputs. Each input has a user-friendly display name, a reference name, description, restrictions, and data type. Also, you can set a default value and encrypt it. For more information, see Defining Workflow Inputs, Variables, and Outputs. Workflow Variable—You can click Add Workflow Variable and add a workflow variable. Each workflow variable has a reference name, data type, and so on. Also, you can set a default value. For more information, see Defining Workflow Inputs, Variables, and Outputs. Workflow Outputs—You can click Add Workflow Output and add workflow outputs. Each output has a user-friendly display name, a reference name, description, restrictions, and data type. Also, you can encrypt a value and map it to task output. Designer Tab Displays the design area where you synthesize your workflow. Categorized into the following areas to help you create a workflow: Tools Area—lists all the tasks, workflows, and operations that are currently available in Intersight. You can drag and drop a task or a workflow to the canvas to create or edit the workflow. You can collapse or expand the Tools area. You can use the Search feature to find a specific task or workflow. Design Area—where you can build your workflow. Drag and drop tasks and workflows from the Tools area to this area of the screen. This area includes the following options that you can use while creating the workflow: Zoom in and Zoom out—Magnify or reduce the view of the workflow. Auto Align Workflow—Automatically align the workflow tasks in the design area. Auto Align Selected Workflow Entities—Align selected workflow entities in the design area. Toggle Task Search—Search for a specific task within the workflow. This is useful when you have several tasks within the workflow. Auto Connect Selected Workflow Entity—Add the workflow entity in the design area. You can drag and drop a task in between the tasks. The possible locations where the selected task can be added is denoted with + icon. Mapping Tab Displays the relationship between the task inputs and the outputs of the selected workflow. Information on workflow inputs and workflow outputs is also displayed. Expand and collapse the Task Inputs and Task Outputs pane. Code Tab Displays the code view of the workflow definition Read-only view of the workflow. You can copy the code, use this as a sample to create a workflow using Intersight APIs. History Tab Status of the executed/in-progress workflows. This tab appears after executing a workflow. View workflow execution history, retry or clone a previous execution. The system displays a maximum of 100 instances of the workflow execution. The workflow execution is populated for each version of the workflow. Note: When a workflow is successfully executed, the options for retrying the workflow are not displayed. You can retry a failed workflow only when the Retryable option is enabled in the General tab. Execute Launches the Enter Workflow Inputs window. Choose the Organization and the Workflow instance name to execute the workflow. For user-created workflows, the organization must match where it was created. Save Workflow Validates and saves the workflow. Review validation errors, if any, and rectify them. Close Designer Closes the Workflow Designer. Closes the Workflow Designer and displays the table view of available workflows. Requests Requests are closely related to workflows. You create requests by running workflows; a request is generated every time you execute a workflow in Cisco Intersight. A request is a process under the control of Cisco Intersight.\nYou can schedule a workflow for later execution, and Cisco Intersight stores details of completed requests. To view the detailed information of a request, choose a request. The following information is displayed in the Requests screen:\nStatus—Displays the status of a workflow. Request can have one of several states depending on its execution status:\nRunning\nBlocked (for example, awaiting an approval)\nCompleted\nFailed (a request can fail when one of its component tasks fails to execute properly)\nDetails—Displays the request details such as name, request ID, target name and type, source name and type, name of the user who has executed the request along with the start time and end time, and duration of the request.\nInputs—Displays the workflow input details\nOutputs—Displays the workflow output details\nExecution Flow—Enable Show Additional Details to view the logs, input, and output mapping details of the user-defined workflows. Displays the workflow execution history details similar to the details displayed in the History tab.\nDefining Workflow Inputs, Variables, and Outputs Workflows can have any number of tasks, inputs, variables, and outputs.\nAny task or workflow input can be either mandatory or optional. A task or workflow cannot run without all of its mandatory inputs. You define whether an input is mandatory or optional when you create the task or workflow.\nAfter specifying the generic properties for a task or workflow, you define the input parameters and variables required for task or workflow execution. In addition, you can set workflow input Parameter Set or Progressive Disclosure rules. These rules control the availability of workflow inputs or filter the data based on the preceding selection during the workflow execution. The Task Designer uses the same parameters and information types as the workflow designer to validate the mappings of task input and output parameters when a task is used in a workflow along with other tasks. Task designer uses the same form as workflow designer to obtain the parameter and information type so as provide same user experience between workflow designer and task designer.\nChoose Orchestration from the left navigation pane and click Create Workflow.\nIn the General tab, click Add Workflow Input in the Workflow Inputs tab.\nIn the Add Workflow Input screen, enter the following details:\na. Display Name—Enter user-friendly short name.\nb. Reference Name\nc. Description—Detailed description of the input\nd. Value Restrictions—Choose Required, Collection/Multiple, or can be left blank\ne. Type—Select a data type. For example, String, Integer, Float, Boolean, Json, Enum, MoReference, Target Data Type, or a custom data type.\nThe fields displayed depend on the value you select for the Type field.\na. If you select the data type as Enum, specify the following:\ni. Enum List---Label for the Enum value.\rii. Widget type.\riii. Set Default Value---Select the checkbox and select the\rcorresponding default value.\riv. Override---Allow the user to override the default value.\rb. If you select the data type as String, specify the following:\ni. Minimum and Maximum Range\rii. Regex---Validates the regular expression when you select\rString in the Type field.\riii. Secure---Indicates that the values of these properties are\rencrypted and stored in Cisco Intersight.\riv. Object Selector---Enable to configure the Intersight managed\robject selectors. This attribute is available only when the\rprimitive data is String.\rSpecify the Intersight API Reference and selector attributes to feed the input from the table selection. Value will be passed according to the configuration set in the Value attribute.\na. If you select the data type as Integer or Float, specify the following:\ni. Minimum and Maximum Range\rii. Set Default Value---Select the checkbox and the\rcorresponding default value.\rb. If you select the data type as Target Data Type or MoReference, specify the following:\ni. Intersight API Reference---Enter the URL of the Intersight\rAPI configured with parameters.\rii. Selector Attribute---Enter the attribute name(s) that needs\rto be displayed in the input table column. You can add\rmultiple selector attributes by clicking +.\rc. If you select the data type as Composite Data Type, you can specify the field mapping for the input field. With field mapping, you can pass the value of workflow input to a composite data field.\nTo pass the value from the parent composite data type to a child composite data type, you must specify the field mapping in the composite data type field. For more information, see Creating a Data Type.\nTo specify the field mapping, do the following:\ni. Key—The input field that you want to hide.\nii. Value Attribute—The value in a template style to be passed dynamically during the execution.\nIf the data type is Object Selector, Enum, or Boolean then the input is referenced as \\${workflow.input.InputReferenceName}.\nIf the data type is MoReference or Target Data Type the input is\nreferenced as \\${workflow.input.InputReferenceName.AttributeName}.\nThe InputReferenceName is the Reference Name given to the input\nfield and not the Display Name or Label.\nClick Add.\nRepeat this procedure to create multiple inputs.\nTo add a Parameter Set rule, click Add Rule \u003e Parameter Set.\nFor more information, see Workflow Workflow Input Parameter Set and Progressive Disclosure Rules.\na. Name—The name of the Parameter Set rule.\nb. If Field—Select the input field and the properties that will be used to define the Parameter Set rule.\nThe inputs are referenced as InputName or InputName.Properties. Note: The properties are applicable only if the data type is MoRefefence or Target Data Type. For example, for a Target Data Type input field (DeviceRegistrations), you can specify HypervisorManager.IP Address. a. Condition—The condition for the rule. The condition can be Equal to, Not equal to, Contains, or Matches Pattern.\nb. Value—Select or enter the value. The Parameter Set rule uses this value along with the Condition specified to compare the value from the If Field.\nc. Field to be shown—Select the input field(s) that should be made available when the Parameter Set rule condition is satisfied.\nd. Click Save.\nTo add a Progressive Disclosure rule, click Add Rule \u003e Progressive Disclosure. For more information, see Workflow Input Parameter Set and Progressive Disclosure Rules.\na. Target Field—The target input field on which the progressive disclosure is applied.\nb. Attribute —The inputs are referenced as AttributeName.ParameterName. For example, for an input field, Virtual Manager, you can specify the attribute name as RegisteredDevice.Moid or ConnectionStatus.\nc. Condition—The rule condition for the rule. The condition can be Equal to, Not equal to, or Contains.\nd. Value—The inputs are referenced as \\${InputReferenceName.Attribute} or \\${InputReferenceName.ParameterName}. For example, for a VM input field, you can specify the value as \\${HypervisorManager.Moid} or \\${Target.ConnectionStatus}. Note: For a String input field, if you have selected the Object Selector option then you need not specify the Attribute or Parameter value.\nIn the General tab, click Add Workflow Variables in the Workflow Variables tab. For more information, see Workflow Variables.\nIn the Add Workflow Variable screen, enter the following details:\na. Reference Name—Enter user-friendly short name.\nb. Type—Select the data type. For example, String, Integer, Float, Boolean, Json, Enum, MoReference, or Target Data Type.\nThe fields displayed depend on the value you select for the Type field. a. If you select the data type as String, specify the following: i. Object Selector—Enable to configure the Intersight managed object selectors. The Object Selector field is optional. a. Specify the Intersight API Reference and selector attributes to feed the input from the table selection. The value will be passed according to the configuration set in the Value attribute. b. If you select the data type as Enum, specify the following: i. Enum List—Label and value for the Enum list. ii. Widget type—The widget type as Radio or none.\nb. If you select the data type as Target Data Type or MoReference, specify the following: i. Intersight API Reference—Enter the URL of the Intersight API configured with parameters. ii. Selector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +. c. Select the Initial Mapping To type and specify the corresponding variable value.\nd. Click Add.\nClick Workflow Outputs and click Add Workflow Output.\nChoose a parameter and click Add.\nClick Save.\nWorkflow Input Parameter Set and Progressive Disclosure Rules When you create a workflow, you can specify the inputs for the workflow execution. After you define the workflow inputs, you can set Parameter Set or Progressive Disclosure rules. These rules control the availability of workflow inputs or filter the data based on the preceding selection during the workflow execution.\nNote: You can define a Parameter Set or Progressive Disclosure rule only for a workflow that has more than two input fields with the supported data type.\nParameter Set Rule The Parameter Set rules control the availability of specific parameters or inputs during the execution. After the first input is specified, the Parameter Set rule controls which subsequent input fields are made available during the workflow execution.\nExample: The following example shows how to create a Parameter Set rule for a workflow with three input fields. The workflow input fields are:\nEnum—Type is Enum and Enum list is VM and HX.\nInput1—Type is String.\nInput2—Type is String.\nYou can create two workflow input Parameter Set rules. During the workflow execution when the Enum value is VM only Input1 field is made available. Alternately, when the Enum value is HX, only Input2 is made available. The details of the Parameter Set rules are:\nRule1—If Field is Enum, Condition is Equal to, Value is VM, and Fields to be shown is Input1.\nRule2—If Field is Enum, Condition is Equal to, Value is HX, and Fields to be shown is Input2.\nThe following is a sample of the API request.\n\\\"InputParameterSet\\\": \\[\\ {\\ \\\"Condition\\\": \\\"eq\\\",\\ \\\"ControlParameter\\\": \\\"Enum\\\",\\ \\\"EnableParameters\\\": \\[\\ \\\"Input1\\\"\\ \\],\\ \\\"Name\\\": \\\"Rule1\\\",\\ \\\"ObjectType\\\": \\\"workflow.ParameterSet\\\",\\ \\\"Value\\\": \\\"VM\\\"\\ },\\ {\\ \\\"Condition\\\": \\\"eq\\\",\\ \\\"ControlParameter\\\": \\\"Enum\\\",\\ \\\"EnableParameters\\\": \\[\\ \\\"Input2\\\"\\ \\],\\ \\\"Name\\\": \\\"Rule2\\\",\\ \\\"ObjectType\\\": \\\"workflow.ParameterSet\\\",\\ \\\"Value\\\": \\\"HX\\\"\\ }, The supported data types for Parameter Set rules are:\nBoolean\nEnum\nString Object Selector\nMoReference\nTarget\nProgressive Disclosure Rule The Progressive Disclosure rules filter the data available in an input field based on the preceding selection during a workflow execution. The first input field is populated with broadest options. The subsequent input fields are populated with options based on the previous selection.\nExample 1: The following example shows how to create a Progressive Disclosure rule for a workflow with two input fields. Both these input fields are MoReference data type. The workflow input fields are:\nField1—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nField2—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nYou can create a Progressive Disclosure rule so that during the workflow execution, the data is filtered for Field2 fields based on value in the Field1 field. The details of the Progressive Disclosure rule are:\nField2 Rule—Target Field is Field2, Attribute is ConnectionStatus, Condition is Equal to, and Value is \\${Field1.ConnectionStatus}. Example 2:: The following example shows how to create a Progressive Disclosure rule for a workflow with two input fields. Both these input fields are composite custom data type. The workflow input fields are:\nInput1—Composite data type with two fields (Field1 and Field2)\nField1—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nField2—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nInput2—Composite data type with two fields (Field3 and Field4)\nField3—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nField4—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nYou can create two Progressive Disclosure rules. During the workflow execution, the data is filtered for Input2 fields based on value in the Input1 fields. The details of the two Progressive Disclosure rules are:\nInput2.Field3 Rule—Target Field is Input2.Field3, Attribute is ConnectionStatus, Condition is Equal to, and Value is ${Input1.Field1.ConnectionStatus}.\nInput2.Field4 Rule—Target Field is Input2.Field4, Attribute is ConnectionStatus, Condition is Equal to, and Value is ${Input1.Field2.ConnectionStatus}.\nThe following is a sample of the API request.\n\\\"UiInputFilters\\\": \\[\\ {\\ \\\"Filters\\\": \\[\\ \\\"ConnectionStatus eq \\'\\${Input1.Field1.ConnectionStatus}\\'\\\"\\ \\],\\ \\\"Name\\\": \\\"Input2.Field3\\\",\\ \\\"ObjectType\\\": \\\"workflow.UiInputFilter\\\",\\ \\\"UserHelpMessage\\\": \\\"\\\"\\ },\\ {\\ \\\"Filters\\\": \\[\\ \\\"ConnectionStatus eq \\'\\${Input1.Field2.ConnectionStatus}\\'\\\"\\ \\],\\ \\\"Name\\\": \\\"Input2.Field4\\\",\\ \\\"ObjectType\\\": \\\"workflow.UiInputFilter\\\",\\ \\\"UserHelpMessage\\\": \\\"\\\"\\ }\\ \\] The supported data types for the Progressive Disclosure rules are:\nMoReference\nTarget\nString Object Selector\nWorkflow Variables Workflow variables are similar to local variables within functions of a programming language. You define variables for workflows in Workflow Designer, and the scope of the workflow variables lies within the defined workflow. In a workflow, all tasks are bound to the scope of the workflow and have access to the workflow variables that are defined for the workflow. You can use the workflow variable to do the following:\nSimplify complex workflows which have multiple branches based on the conditional operator. Save the output of tasks that get executed in different branches of the workflow into a single variable. This variable can then be mapped in the downstream tasks irrespective of the branch from which it was taken.\nEvaluate the workflow input using a complex expression, save the result as a variable, and reuse the variable in the subsequent tasks.\nTransform the output of a task with the help of template functions and map the value into a workflow variable. The variables can then be used in multiple mappings without having to redo the transformation in every mapping.\nTo define the workflow variable and specify the corresponding value, you can do the following:\nIn the General tab, click Add Workflow Variable and define the variable properties.\nIn the Designer tab, click the task, and then click the Variables tab.\nTo add a new workflow variable, click Add Workflow Variable and define the variable properties.\nTo add or edit a mapping to an existing variable, click Edit Mapping and specify the new value.\nNote: To view events for a workflow variable, click the View icon.\nThe workflow variables can be assigned one of the following values:\nStatic value—Either the default value of the variable or the value specified in the workflow tasks.\nDirect mapping —Mapped to a workflow input, task output, or another workflow variable.\nAdvanced or Transformational mapping—Evaluate a complex expression and save the result in a variable.\nAfter you define the workflow variable, you can map the workflow variable to task input, workflow output, or as an input for another variable. For more information, see [Input, Variable, and Output Mapping]{.underline}.\nFollowing is a simple example which explains static mapping for a workflow variable. A workflow has two tasks Task1 and Task2 and a workflow variable Variable1 is defined with a default value as 100. For Task1, in the Variable tab for the task, you can specify a static mapping for the workflow variable value as 90. Similarly, for Task2, in the Variable tab for the task, you can specify the workflow variable value as 80 by mapping the Variable1 value.\nWhen you execute the workflow, the start value of Variable1 is the default value 100 . After Task1 is executed, the value of Variable1 is set to 90 based on the static value that is mapped for the task. After Task2 is executed, the value of Variable1 is set to 80 based on the static value that is mapped for the task.\nInput, Variable, and Output Mapping Workflows inputs, variables, and task outputs can be used for mapping and they can be used as direct, transformed, or advanced mapping. The syntax to refer to these will depend on the type of mapping.\nWorkflow inputs are referenced as ${workflow.input.InputName} where InputName is the Reference Name given to the workflow input and not the Display Name or Label.\nWorkflow variables are referenced as ${workflow.variable.InputName} , where InputName is the Reference Name for the workflow variable.\nTask outputs are referenced as ${TaskName.output.OutputName} where TaskName is the Instance Name for the task and not the Display Name or Label and OutputName is the Reference Name for the task output.\nTo specify an input mapping, select a task and click Edit against a task input parameter.\nTo specify a workflow variable mapping, select a task and click Map against a workflow variable parameter.\nFollowing are the available options:\nStatic Value—Enter a value that is assigned to the task input or workflow variable field.\nDirect Mapping—Map an existing input, workflow variable, or task output to the task input.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task\\’s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template. You can then preview the template and test the transformation with sample values.\nNote: Transformed mapping is only supported for task inputs of \u003e primitive data types, such as string, integer, boolean, and float.\nAdvanced Mapping—Map a Golang template to the task input or workflow variable. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nFindAllString(s, regex string) ([]string, error)\\ Example: {{(FindAllString .global.task.input.NumberString \\\\\"([0-9]+)\\\\\")}} \\ returns array [“123”, “456”] for input string “123 some text 456”.\nFor example, Atoi function converts the given number in string format to integer type.\nAtoi(s string) (int, error)\\ Example: {{Atoi .global.task.input.SizeString}} \\ returns integer 2048 for input string “2048”\nOperations - Conditional Task Operations can be used to control the execution path of the workflows. Orchestrator supports Condition tasks which can be used to control the tasks that need to be executed.\nTasks to Control Execution Flow of Workflows\nThe Conditional Task under Operations allows you to perform programmatic decisional expressions in a conditional task during a workflow execution. The conditional expression can be simple expression or a combined compound expression.\nNote: Only JSON style template is supported with conditional expressions.\nConditional expressions support the following operators:\nComparison operators such as === (Equal to), != (Not equal to), \u003e (Greater than), \\\u003c (Less than), \u003e= (Greater than or equal to), \\\u003c= (Less than or equal to)\nArithmetic operators such as =, -, * (Multiplication), / (division), % (Modulo), ** (Logical AND)\nLogical operators such as \u0026\u0026 (Logical AND), || (Logical OR), ! ((Logical NOT)\nTernary operator such as condition ? val1 : val2\nThe syntax for workflow input is \\${workflow.input.\\} and the syntax for task output is \\${\\.output.\\}. You can get the values for the task name and task output name from the Code view.\nFollowing is an example for conditional expressions:\n1 2 3 4 5 6 7 8 9 10 11 12 13 if ( (\\${workflow.input.name} != \\'test\\' \\|\\| \\${workflow.input.name} != \\'test123')) \\'bad input\\'; else if((\\${workflow.input.id} != null \u0026\u0026 \\${workflow.input.id} % 2 == 0)) \\'even\\'; else \\'odd\\';\\ if ( (\\${workflow.input.name} != \\'test123' \\|\\| \\${workflow.input.name} != \\'test123')) \\'bad input\\'; else if((\\${workflow.input.id} != null \u0026\u0026 \\${workflow.input.id} % 2 == 0)) \\'even\\'; else \\'odd\\';\\ if ( (\\${workflow.input.name}.length === 12 \\|\\| \\${workflow.input.name} !== 'test' )) \\'even\\'; else \\'odd\\'; \\\u003c\\\u003c fgfgfgfgfgfg , even\\ if ( (\\${workflow.input.name}.length === 12 \\|\\| \\${workflow.input.name} !== 'test' )) \\'even\\'; else \\'odd\\'; \\\u003c\\\u003c test , odd\\ if ( (\\${workflow.input.name} != null \u0026\u0026 \\'decisionTest\\'.indexOf(\\${workflow.input.name}) != -1 )) \\'even\\'; else \\'odd\\';\\ if ( (\\${workflow.input.name}.toLowerCase() == 'testing')) \\'even\\'; else \\'odd\\'; \\\u003c\\\u003c used integers as input name to try odd path\\ if ( (\\${workflow.input.name}.search(/\\\\s/g) != -1)) \\'even\\'; else \\'odd\\';\\ if ( (\\${workflow.input.name}.match(/\\\\s/g) != -1)) \\'even\\'; else \\'odd\\';\\ if ( (\\${workflow.input.name}.startsWith(\\'Not\\',0) \\|\\| \\${workflow.input.name}.endsWith(\\'.\\'))) \\'even\\'; else \\'odd\\';\\ if ( (\\${workflow.input.name}.length \u003e= 3 \u0026\u0026 \\${workflow.input.name}.length \\\u003c= 20)) \\'even\\'; else \\'odd\\';\\ if ( (\\${workflow.input.name}. === undefined)) 'odd'; else 'even';\\ if ( (\\${workflow.input.name}.search(\\'Failed\\') != -1)) \\'even\\'; else \\'odd\\';\\ if ( (\\${workflow.input.name}.toLowerCase() != \\'\\' \\|\\| \\${workflow.input.name}.toUpperCase() != 'Not-assigned' )) \\'even\\'; else \\'odd\\'; The expression is executed during runtime and depending on the result, the respective path is chosen. If none of the conditions match, the default path is chosen.\nFor example, you can have a conditional task that follows a path of execution depending on the profile state. You can create a condition in a workflow to check the state of the profile. If the profile is in the Assigned state then you can deploy the profile, else delete the profile.\nAfter choosing the conditional task, use the Conditions tab to specify expressions in the Condition field of the tab. The values for the condition are specified in the Value field of the Cases area. Expressions are validated for syntax accuracy when workflow is saved.\nThe following examples return the value of the condition.\n\\${workflow.input.Names}.length\\ \\${workflow.input.ArrayOfIds}.length (here ArrayOfIds represent an array)\\ \\${workflow.input.Names}.toLowerCase()\\ \\${workflow.input.Names}.toUpperCase() The following examples return the boolean value \\’true\\’ or \\‘false\\’.\n\\${workflow.input.Names}.startsWith(\\'Te\\')\\ \\${workflow.input.Names}.endsWith(\\'st\\')\\ \\${workflow.input.Names} == null\\ \\${workflow.input.Names} != null In addition to workflow, task output can also be used. Here a boolean value is used in a ternary operation. If True, branch1 executes, otherwise branch2 executes ${task1.output.IsValid} ? branch1 : branch2.\nOperations - Parallel Loop Task Operations can be used to control the execution path of the workflows. Orchestrator supports the Parallel Loop operation task that can be used to run a single task or sub-workflow, iteratively, based on a specified count input.\nThe iteration count can either be a static value that is specified when the workflow is created or a dynamic value that is derived from a workflow input or task output.\nWhen the task is executed, the count ‘N’ is determined, and the tasks or sub-workflows are scheduled for execution in parallel. When all the instances of the task or sub-workflow reach a final state, the parallel loop operation completes, and the workflow execution moves on to the next task.\nNote:\nIf one of the tasks or sub-workflows fails then the entire parallel loop task fails.\nThe dynamic values for the count must be specified as a template function. For example, if a loop must run for a count which matches the length of a workflow input called StringArray, then the count must be specified using a template function {{ len .global.workflow.input.StringArray }}.\nIn addition, you can use the keyword .iteration in a workflow template input to control the inputs that feed into the task. For example, the task within the loop needs to take one value from the workflow input StringArray, then the task string input can be mapped to the template HostGroupName{{.iteration}} during the workflow creation.\nUse the Parallel Loop task from the Operations section in the Intersight Orchestrator Workflow Designer UI to create a request.\nThe following table explains the task input properties:\nProperty Description Count The iteration count value for the parallel loop. The count can either be a static value defined as a constant or a dynamic value defined as an expression that is evaluated to an integer value at execution time. The dynamic values for the count must be specified as a template function. For example, if a loop must run for a count which matches the length of a workflow input called StringArray, then the count must be specified using a template function {{ len .global.workflow.input.StringArray }}. The count must be less than or equal to 100. Example: Create a workflow with the Parallel Loop task to create multiple storage host groups\nThe following example workflow has two tasks—Parallel Loop and New Storage Host Group. The first task runs the Parallel Loop task. In this task, the Count input is a static value and is set to 2. The second task, New Storage Host Group, creates storage host groups with the host group name as a workflow input.\nWhen the workflow is executed, the count ‘N’ is determined as 2, and two create storage host group tasks are executed in parallel. When all the instances of the task reach a final state, the parallel loop completes.\nThe workflow input field required for this example is as follows:\nProperty Description Storage Device Reference Name—StorageDevice Type—Target Data Type Intersight API Reference—/api/v1/storage/PureArrays Selector Attribute—Name Selector Attribute—Vendor The following table lists the properties for the Parallel Loop task:\nProperty Description Count Count—2 The following table lists the properties for the New Storage Host Group task:\nProperty Description Storage Device Workflow Input—${workflow.input.StorageDevice} Host Group Custom Value—HostGroupName{{.iteration}} The keyword .iteration in a workflow template input to control the inputs that feed into the task. After you execute the workflow, you would see the following output:\n├── New Storage Host Group\r├── ...\r│ ├── Inputs\r│ │ └── Host Group: HostGroupName0\r│ │ └── Storage Device:{ 2 }\r│ │ ├── Moid: 619efa1d6e64612d317a248a\r│ │ └── ObjectType: storage.PureArray\r│ └── Outputs\r│ ├── ConfigResults:[ 1 ]\r│ │ └── Object: { 4 }\r│ │ ├── ConfigResCtx: { 1 }\r│ │ │ └── EntityData: { 1 }\r│ │ │ └── task: workflow.ApiTask\r│ │ ├── Message: Host group created successfully.\r│ │ ├── State: Ok\r│ │ └── Type: Config\r│ └── Host Group: HostGroupName0\r├── New Storage Host Group\r└── ...\r├── Inputs\r│ └── Host Group: HostGroupName1\r│ └── Storage Device:{ 2 }\r│ ├── Moid: 619efa1d6e64612d317a248a\r│ └── ObjectType: storage.PureArray\r└── Outputs\r├── ConfigResults:[ 1 ]\r│ └── Object: { 4 }\r│ ├── ConfigResCtx: { 1 }\r│ │ └── EntityData: { 1 }\r│ │ └── task: workflow.ApiTask\r│ ├── Message: Host group created successfully.\r│ ├── State: Ok\r│ └── Type: Config\r└── Host Group: HostGroupName1\rThe following is a sample code view:\n{ \"Catalog\": { \"Moid\": \"5e6109bc696f6e2d31f856e5\", \"ObjectType\": \"workflow.Catalog\", \"link\": \"https://www.intersightcom/api/v1/workflow/Catalogs/5e6109bc696f6e2d31f856e5\" }, \"DefaultVersion\": true, \"Description\": \"\", \"InputDefinition\": [ { \"CustomDataTypeProperties\": { \"CatalogMoid\": \"\", \"CustomDataTypeId\": \"\", \"CustomDataTypeName\": \"\", \"ObjectType\": \"workflow.CustomDataProperty\" }, \"Default\": { \"IsValueSet\": false, \"ObjectType\": \"workflow.DefaultValue\", \"Override\": false, \"Value\": null }, \"Description\": \"\", \"DisplayMeta\": { \"InventorySelector\": true, \"ObjectType\": \"workflow.DisplayMeta\", \"WidgetType\": \"None\" }, \"InputParameters\": null, \"IsArray\": false, \"Label\": \"Storage Device\", \"Max\": 0, \"Min\": 0, \"Name\": \"StorageDevice\", \"ObjectType\": \"workflow.TargetDataType\", \"Properties\": [ { \"ConnectorAttribute\": \"RegisteredDevice.Moid\", \"ConstraintAttributes\": [ \"ObjectType\" ], \"DisplayAttributes\": [ \"Name\", \"Vendor\" ], \"ObjectType\": \"workflow.TargetProperty\", \"Selector\": \"/api/v1/storage/PureArrays\", \"SelectorProperty\": { \"Body\": null, \"Method\": \"GET\", \"ObjectType\": \"workflow.SelectorProperty\" }, \"SupportedObjects\": [ \"storage.PureArray\" ] } ], \"Required\": true } ], \"InputParameterSet\": [], \"Label\": \"Parallel Loop\", \"Name\": \"ParallelLoop\", \"OutputDefinition\": [], \"OutputParameters\": null, \"Properties\": { \"Cloneable\": true, \"EnableDebug\": false, \"ExternalMeta\": true, \"ObjectType\": \"workflow.WorkflowProperties\", \"Retryable\": false, \"SupportStatus\": \"Supported\" }, \"Tags\": [], \"Tasks\": [ { \"Description\": \"\", \"Label\": \"\", \"Name\": \"StartTask\", \"NextTask\": \"parallelLoop1\", \"ObjectType\": \"workflow.StartTask\" }, { \"Description\": \"\", \"Label\": \"\", \"Name\": \"SuccessEndTask\", \"ObjectType\": \"workflow.SuccessEndTask\" }, { \"Description\": \"\", \"Label\": \"\", \"Name\": \"FailureEndTask\", \"ObjectType\": \"workflow.FailureEndTask\" }, { \"Count\": \"2\", \"Description\": \"A Parallel Loop is a control task that runs one task or one sub-workflow multiple times based on a specified count. The count can be a static value that is specified during design time or a dynamic value that is derived from workflow inputs or task outputs. When the loop is executed, the count 'N' is determined, N tasks or sub-workflows are scheduled for execution in parallel. When all N instances of the task or sub-workflow reach a final state the parallel loop will complete and workflow execution will move on to the next task. If any one of the tasks or sub-workflows fails, then the entire loop will fail. Dynamic values for count must be specified as a template. For example, if a loop must run for a count which matches the length of a workflow input called StringArray, then the count must be specified using a template '{{ len .global.workflow.input.StringArray }}'. The iteration of the loop is available using the keyword '.iteration' and it can be used to control inputs that feed into the task. For example, the task inside the loop needs to take one value from the workflow input StringArray, then the task string input can be mapped to the template '{{ index .global.workflow.input.StringArray .iteration}}' during design.\", \"Label\": \"Parallel Loop\", \"LoopStartTask\": \"NewStorageHostGroup1\", \"Name\": \"parallelLoop1\", \"NumberOfBatches\": 1, \"ObjectType\": \"workflow.LoopTask\", \"OnSuccess\": \"SuccessEndTask\", \"Parallel\": true }, { \"CatalogMoid\": \"5c2fc884696f6e2d316c5d59\", \"Description\": \"Create a host group with host group name as input. On successful execution, the newly created host group name is generated as output.\", \"InputParameters\": { \"HostGroupName\": \"HostGroupName{{.iteration}}\", \"StorageDevice\": \"${workflow.input.StorageDevice}\" }, \"Label\": \"New Storage Host Group\", \"Name\": \"NewStorageHostGroup1\", \"ObjectType\": \"workflow.WorkerTask\", \"OnFailure\": \"\", \"OnSuccess\": \"\", \"RollbackDisabled\": false, \"TaskDefinitionId\": \"5f7ed8a2696f6e2d30eb388b\", \"TaskDefinitionName\": \"NewStorageHostGroup\", \"UseDefault\": false, \"Version\": 2 } ], \"UiInputFilters\": [], \"UiRenderingData\": { \"Positions\": [ { \"Name\": \"StartTask\", \"X\": 269.5, \"Y\": 45.5 }, { \"Name\": \"SuccessEndTask\", \"X\": 269.5, \"Y\": 303 }, { \"Name\": \"FailureEndTask\", \"X\": 412.5, \"Y\": 303 }, { \"Name\": \"parallelLoop1\", \"X\": 149.01800537109375, \"Y\": 116.75314331054688 }, { \"Name\": \"NewStorageHostGroup1\", \"X\": 185, \"Y\": 177 } ] }, \"Version\": 1, \"WorkflowMetadata\": null } Managing the Lifecycle of a Workflow Workflow management consists of organizing, creating, updating, and deletion of workflows. The following table describes the set of actions that you can perform with workflows in Cisco Intersight.\nActions\rDescription\rView Workflows\rChoosing Orchestration from the left navigation pane will display all workflows in a tabular format. You can view information such as the workflow name and description, the number of versions available, the number of times the workflow has been executed, the last execution status, validation information and the last update time and date.\rCreate a New Workflow\rChoose Orchestration from the left navigation pane and click Create Workflow. This option opens up the Workflow Designer, using which you can create a new workflow.\rCreate a Version for a Workflow\rYou can create multiple versions for a workflow. In addition, you can set a specific version of the workflow as the default version for the workflow. See Managing Versions for Workflows.\rDelete a Workflow\rFrom the tabular list of workflows, you can select a workflow and click Delete. This will remove the workflow and all versions of the workflow.\nYou cannot delete a workflow when :\nworkflow is used as sub-workflow task in another workflow.\nworkflow is in running state.\nExecute a Workflow\rSelect a workflow from the tabular list of workflows and choose Execute. Alternatively, you can click the workflow name, and then choose Execute in the Workflow Designer.\nImportant: Workflow execution includes privilege-based validation for tasks. With the introduction of privilege-based validation for virtualization, compute and storage tasks, a user must have all the required privileges to execute all the domain tasks within a workflow. For example, a user can successfully execute a workflow that includes storage and virtualization tasks only if the user has both Storage and Virtualization Administrator privileges. In the absence of either one of these privileges, the Execute button will not be displayed and the user cannot execute the workflow.\nHowever, an Account Administrator can execute all workflow.\nWhile configuring the properties of a workflow, if you selected the Retryable option, then in the event of a workflow failure, you can either choose to execute the workflow again from the point of failure, or you can execute the entire workflow again.\nClone a Workflow\rFrom the tabular list of workflows, you can select a workflow and click Clone. This will clone the selected workflow.\rSave a Workflow as\rFrom the tabular list of workflows, you can choose a workflow and click. By default, the workflow details are displayed in the Designer tab. You can choose Save As option from the Action drop-down list to clone or create a new version of the existing workflow.\nYou can also perform this operation in the General tab.\nIn the Save As screen, you can choose one of the following:\nNew Version---Specify a new version and related description. Click Save.\nThis option is not available for a system generated workflow.\nClone---Specify user-friendly short name, reference name, description, and tag key. Click Save. For more information, see Cloning a Workflow.\nCloning a Workflow You can clone a workflow. The cloned workflow is identical to the original workflow. You can edit the new workflow immediately. You might do this, for example, to create a workflow that is similar to the source workflow that can be edited based on your requirements. The new workflow has a new, separate version history.\nTo clone a workflow, complete the following steps:\nChoose Orchestration from the left navigation pane.\nFrom the tabular list of workflows, select a workflow and choose Clone.\nIn the Clone Workflow screen, edit the user-friendly short name, reference name, description, and organization details. The organization mappings are displayed only for pre-canned workflows and not for the custom workflows.\nCheck the Open Clone in Editor check box if you want to open the cloned workflow in the workflow designer and edit the details.\nNote: Open Clone in Editor check box is not displayed when you clone a workflow using the Save As option.\nClick Clone. Managing Versions for Workflows Cisco Intersight allows you to create and manage versions for workflows. In addition to creating versions, you can also set a specific version as the default version for the workflow. You can create a version of a workflow and execute it only if you are one of the following users:\nAccount Administrator\nUser with Workflow Designer privileges\nRead-Only users can only view versions of a workflow. They cannot create, edit, execute or delete versions. Users with Storage Administrator and Virtualization Administrator privileges can only view and execute specific versions of a workflow.\nTo create a version for a workflow, complete the following steps:\nChoose Orchestration from the left navigation pane.\nFrom the tabular list of workflows, select a workflow and choose Manage Versions.\nIn the Manage Versions screen, you can perform the following tasks:\nCreate a new version for the workflow\nExecute a specific version of the workflow\nDelete a specific version. You cannot directly delete the default version of a workflow. To delete the default version, perform the following:\nMake another version the default.\nChange the workflow version to be deleted as non-default.\nDelete the workflow version that was changes as non-default.\nSet a specific version of the workflow as the default version\nChoose Create a New Version and enter the following details:\nSource Version—Choose a specific version that will form the source for the new version that you are creating.\nVersion—Specify a version number for the workflow.\nDescription—Enter a description for the version so that you can identify it.\nSet as Default Version—Check this check box to set this new version as the default version for the workflow.\nClick Create.\nAfter creating a version for a workflow, clicking on the version number on the Manage Versions screen opens the workflow in Workflow Designer.\nNote: Deleting a workflow will delete all versions created for the workflow.\nExporting a Workflow Intersight Cloud Orchestrator enables you to export workflows from an account to your system and then import them to another account.\nTo export a workflow, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick the Workflow tab.\nFrom the tabular list of workflows, do one of the following:\nSelect a workflow, click the Ellipsis (…) icon in the same row, and then choose Export Workflow.\nSelect multiple workflows, click the Ellipsis (…) icon from the header or footer of the tabular list, and then choose Export Workflow.\nNote: You can also export workflows from the Actions menu in the Workflow Designer window.\nIn the Export Workflow screen:\na. In the JSON File Name field, use the default filename or enter a filename of your choice for the JSON file that stores the workflow components.\nb. Use the Export Tags toggle button to include or exclude the user-defined tags. ICO does not export the system-defined tags.\nc. Click Export.\nd. Save a local copy of the JSON file.\nImporting a Workflow Intersight Cloud Orchestrator enables you to import workflows to your account by importing a JSON file that contains the workflow components. You can create the JSON file by exporting the workflow components from another account.\nTo import a workflow, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Import.\nThe Import wizard appears.\nIn the Select File screen:\na. From the Organization drop-down list, choose the organization to which you want to import the workflow(s).\nb. Click Browse, and then select the JSON file that contains the Workflow(s).\nNote: Ensure that the file size of the JSON file is not more than 1MB. If the file size is more than 1MB, export the workflow(s) in batches, and then try import.\nc. Click Next.\nIntersight Cloud Orchestrator validates the JSON file and displays\nthe workflow(s) in the Details screen.\nIn the Details screen:\na. To associate an additional tag to the components listed in the table, enter the tag in the Set Tags field. Note: Set Tags is an optional field. You must enter the tag in the key:value format.\nb. If one or more workflow components are already available in the system, choose a rule to replace or skip the duplicate components.\nc. Click Import.\nIn the Import Result screen:\na. Verify the status of the imported workflow.\nb. If you want to view the details of the import request:\nClick the link displayed above the table.\nAlternatively, click the Requests icon displayed in the menu bar.\nFor more information, see Requests.\na. Click Close.\nYou can execute the imported workflow from the Workflows tab.\nDefining Workflow Input Rules Intersight Cloud Orchestrator allows you to configure input rules that control the display of fields in the workflow execution screen. You can define these input rules for a workflow by using the Intersight API and while creating a composite data type. By default, all input fields for a workflow are displayed in the workflow execution screen. By configuring input rules, the fields in this screen are displayed or hidden based on the value selected for a previous input field.\nAfter configuring input rules in the workflow definition using the Intersight API, you can view the input rules using the Code tab in the Workflow Designer.\nFollowing is a sample of a simple input rule set for a workflow:\n\\\"InputParameterSet\\\":\\[\\ {\\ \\\"ObjectType\\\": \\\"workflow.ParameterSet\\\",\\ \\\"Name\\\": \\\"rule-1\\\",\\ \\\"ControlParameter\\\": \\\"input-1\\\",\\ \\\"Condition\\\": \\\"eq\\\",\\ \\\"Value\\\": \\\"true\\\",\\ \\\"EnableParameters\\\": \\[\\ \\\"input-2\\\"\\ \\]\\ },\\ {\\ \\\"ObjectType\\\": \\\"workflow.ParameterSet\\\",\\ \\\"Name\\\": \\\"rule-2\\\",\\ \\\"ControlParameter\\\": \\\"input-1\\\",\\ \\\"Condition\\\": \\\"ne\\\",\\ \\\"Value\\\": \\\"true\\\",\\ \\\"EnableParameters\\\": \\[\\ \\\"input-3\\\",\\ \\]\\ }\\ \\] Following is an example for the parameter sets defined at workflow level: {\\ \\\"Label\\\": \\\"Provision VM\\\",\\ \\\"Name\\\": \\\"ProvisionVM\\\",\\ \\\"DefaultVersion\\\": true,\\ \\\"Description\\\": \\\"\\\",\\ // Parameter set defintion \\ \\\"InputParameterSet\\\": \\[\\ {\\ // rule-1 enables \\'vmwarehost\\' input when value of \\'vmtype\\' is \\'vmware\\'\\ \\\"Name\\\": \\\"rule-1\\\",\\ \\\"ControlParameter\\\": \\\"vmtype\\\",\\ \\\"Condition\\\": \\\"eq\\\",\\ \\\"Value\\\": \\\"vmware\\\",\\ \\\"EnableParameters\\\": \\[\\ \\\"vmwarehost\\\"\\ \\]\\ },\\ {\\ // rule-2 enables \\'hxcluster\\' input when value of \\'vmtype\\' is \\'hx\\'\\ \\\"Name\\\": \\\"rule-2\\\",\\ \\\"ControlParameter\\\": \\\"vmtype\\\",\\ \\\"Condition\\\": \\\"eq\\\",\\ \\\"Value\\\": \\\"hx\\\",\\ \\\"EnableParameters\\\": \\[\\ \\\"hxcluster\\\"\\ \\]\\ }\\ \\],\\ \\\"InputDefinition\\\": \\[\\ {\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataType\\\",\\ \\\"InputParameters\\\": null,\\ \\\"Label\\\": \\\"VM Type\\\",\\ \\\"Name\\\": \\\"vmtype\\\",\\ \\\"Required\\\": false,\\ \\\"Properties\\\": {\\ \\\"ClassId\\\": \\\"workflow.PrimitiveDataProperty\\\",\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataProperty\\\",\\ \\\"Constraints\\\": {\\ \\\"ClassId\\\": \\\"workflow.Constraints\\\",\\ \\\"ObjectType\\\": \\\"workflow.Constraints\\\",\\ \\\"EnumList\\\": \\[\\ {\\ \\\"ClassId\\\": \\\"workflow.EnumEntry\\\",\\ \\\"ObjectType\\\": \\\"workflow.EnumEntry\\\",\\ \\\"Label\\\": \\\"VMWare\\\",\\ \\\"Value\\\": \\\"vmware\\\"\\ },\\ {\\ \\\"ClassId\\\": \\\"workflow.EnumEntry\\\",\\ \\\"ObjectType\\\": \\\"workflow.EnumEntry\\\",\\ \\\"Label\\\": \\\"HX\\\",\\ \\\"Value\\\": \\\"hx\\\"\\ }\\ \\],\\ \\\"Max\\\": 0,\\ \\\"Min\\\": 0,\\ \\\"Regex\\\": \\\"\\\"\\ },\\ \\\"InventorySelector\\\": \\[\\],\\ \\\"Secure\\\": false,\\ \\\"Type\\\": \\\"enum\\\"\\ }\\ },\\ {\\ \\\"Name\\\": \\\"vmname\\\",\\ \\\"Label\\\": \\\"VM Name\\\",\\ \\\"Required\\\": false,\\ \\\"Properties\\\": {\\ \\\"Type\\\": \\\"string\\\",\\ \\\"Constraints\\\": {\\ \\\"Min\\\": 0,\\ \\\"Max\\\": 0\\ },\\ \\\"Secure\\\": false\\ },\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataType\\\"\\ },\\ {\\ \\\"Name\\\": \\\"vmwarehost\\\",\\ \\\"Label\\\": \\\"Host\\\",\\ \\\"Required\\\": false,\\ \\\"Properties\\\": {\\ \\\"Type\\\": \\\"string\\\",\\ \\\"Constraints\\\": {\\ \\\"Min\\\": 0,\\ \\\"Max\\\": 0\\ },\\ \\\"Secure\\\": false\\ },\\ \\\"Default\\\": {\\ \\\"Override\\\": false,\\ \\\"Value\\\": null\\ },\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataType\\\"\\ },\\ {\\ \\\"Name\\\": \\\"hxcluster\\\",\\ \\\"Label\\\": \\\"Cluster\\\",\\ \\\"Required\\\": false,\\ \\\"Properties\\\": {\\ \\\"Type\\\": \\\"string\\\",\\ \\\"Constraints\\\": {\\ \\\"Min\\\": 0,\\ \\\"Max\\\": 0\\ },\\ \\\"Secure\\\": false\\ },\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataType\\\"\\ }\\ \\],\\ \\\"OutputDefinition\\\": \\[\\],\\ \\\"OutputParameters\\\": null,\\ \\\"Tasks\\\": \\[\\ {\\ \\\"ClassId\\\": \\\"workflow.StartTask\\\",\\ \\\"Description\\\": \\\"\\\",\\ \\\"Label\\\": \\\"\\\",\\ \\\"Name\\\": \\\"StartTask\\\",\\ \\\"NextTask\\\": \\\"NewProfile1596244596840\\\",\\ \\\"ObjectType\\\": \\\"workflow.StartTask\\\"\\ },\\ {\\ \\\"ClassId\\\": \\\"workflow.SuccessEndTask\\\",\\ \\\"Description\\\": \\\"\\\",\\ \\\"Label\\\": \\\"\\\",\\ \\\"Name\\\": \\\"SuccessEndTask\\\",\\ \\\"ObjectType\\\": \\\"workflow.SuccessEndTask\\\"\\ },\\ {\\ \\\"ClassId\\\": \\\"workflow.FailureEndTask\\\",\\ \\\"Description\\\": \\\"\\\",\\ \\\"Label\\\": \\\"\\\",\\ \\\"Name\\\": \\\"FailureEndTask\\\",\\ \\\"ObjectType\\\": \\\"workflow.FailureEndTask\\\"\\ },\\ {\\ \\\"CatalogMoid\\\": \\\"5dd45ab6696f6e2d301e2df6\\\",\\ \\\"ClassId\\\": \\\"workflow.WorkerTask\\\",\\ \\\"Description\\\": \\\"Task to create a Profile\\\",\\ \\\"InputParameters\\\": null,\\ \\\"Label\\\": \\\"Provision VM\\\",\\ \\\"Name\\\": \\\"ProvisionVM1596244596840\\\",\\ \\\"ObjectType\\\": \\\"workflow.WorkerTask\\\",\\ \\\"OnFailure\\\": \\\"\\\",\\ \\\"OnSuccess\\\": \\\"SuccessEndTask\\\",\\ \\\"TaskDefinitionId\\\": \\\"5efd7c84696f6e2d309e6877\\\",\\ \\\"TaskDefinitionName\\\": \\\"NewProfile\\\",\\ \\\"Version\\\": 1\\ }\\ \\],\\ \\\"Version\\\": 1\\ } Following is an example for the parameter sets defined at custom data type level: {\\ \\\"Label\\\": \\\"ClusterType\\\",\\ \\\"Name\\\": \\\"ClusterType\\\",\\ \\\"CompositeType\\\": true,\\ \\\"Description\\\": \\\"Type definition for a cluster information.\\\",\\ \\\"TypeDefinition\\\": \\[\\ {\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataType\\\",\\ \\\"Label\\\": \\\"Cluster Type\\\",\\ \\\"Name\\\": \\\"clustertype\\\",\\ \\\"Properties\\\": {\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataProperty\\\",\\ \\\"Constraints\\\": {\\ \\\"ObjectType\\\": \\\"workflow.Constraints\\\",\\ \\\"EnumList\\\": \\[\\ {\\ \\\"ObjectType\\\": \\\"workflow.EnumEntry\\\",\\ \\\"Label\\\": \\\"VM Ware\\\",\\ \\\"Value\\\": \\\"vmware\\\"\\ },\\ {\\ \\\"ObjectType\\\": \\\"workflow.EnumEntry\\\",\\ \\\"Label\\\": \\\"HX AP\\\",\\ \\\"Value\\\": \\\"hxap\\\"\\ }\\ \\]\\ },\\ \\\"Type\\\": \\\"enum\\\"\\ }\\ },\\ {\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataType\\\",\\ \\\"Label\\\": \\\"VMware Cluster\\\",\\ \\\"Name\\\": \\\"vmwarecluster\\\"\\ },\\ {\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataType\\\",\\ \\\"Label\\\": \\\"HX Cluster\\\",\\ \\\"Name\\\": \\\"hxcluster\\\"\\ },\\ {\\ \\\"ObjectType\\\": \\\"workflow.PrimitiveDataType\\\",\\ \\\"Label\\\": \\\"Cluster Description\\\",\\ \\\"Name\\\": \\\"clusterdescr\\\"\\ }\\ \\],\\ \\\"ParameterSet\\\": \\[\\ {\\ \\\"Name\\\": \\\"rule-1\\\",\\ \\\"Field\\\": \\\"clustertype\\\",\\ \\\"Condition\\\": \\\"eq\\\",\\ \\\"Value\\\": \\\"vmware\\\",\\ \\\"ShowFields\\\": \\[\\ \\\"vmwarecluster\\\"\\ \\]\\ },\\ {\\ \\\"Name\\\": \\\"rule-2\\\",\\ \\\"Field\\\": \\\"clustertype\\\",\\ \\\"Condition\\\": \\\"eq\\\",\\ \\\"Value\\\": \\\"hxap\\\",\\ \\\"ShowFields\\\": \\[\\ \\\"hxcluster\\\"\\ \\]\\ }\\ \\]\\ } Supported Workflows for Storage Targets The following table lists workflows supported in the various storage targets available on Intersight:\nList of Storage Workflows Pure Storage NetApp Hitachi New Storage Host Y Y Y New Storage Host Group Y N N New VMFS Datastore Y Y Y New NAS Datastore N Y N Remove NFS Datastore N Y N Remove Storage Host Y Y Y Remove Storage Export Policy N Y N Remove Storage Host Group Y N N Remove VMFS Datastore Y Y N Update Storage Host Y Y Y Update NAS Datastore N Y N Update VMFS Datastore Y N N New Storage Interface N Y N New Storage Export Policy N Y N New Storage Virtual Machine N Y N ","categories":["ICO"],"description":"Workflow Designer helps you create new workflows (as well as tasks and data types) and also edit existing workflows to manage targets in Cisco Intersight.","excerpt":"Workflow Designer helps you create new workflows (as well as tasks and …","ref":"/docs/ico/wokflowdesigner-copy/","tags":["Workflow"],"title":"Sample Topic"},{"body":"Referencing variables in the Workflow Designer Usage Description Code Workflow Input You can reference a workflow input by replacing NAME with the the reference name you have given it inside the workflow designer {{.global.workflow.input.NAME}} Task Output You can reference a task output by replacing TASK with the name of the task (from the Code view), and by replacing NAME with the name of the output {{.global.TASK.output.NAME}} Org Moid The Moid of the Intersight org used to execute this workflow {{.security.OrganizationMoid}} Referencing variables in the Task Designer Usage Description Code Task Input You can reference a task input by replacing NAME with the the reference name you have given it inside the task designer {{.global.task.input.NAME}} Sub-Task Output You can reference a sub-task output by replacing SUBTASK with the reference name of the sub-task, and by replacing NAME with the name of the output {{.global.SUBTASK.output.NAME}} Advanced functions Usage Description Code Conditional Will allow you to select what option you want to execute based on a conditional. Replace VALUE with the specific value you want to compare against. {{if (eq .global.workflow.input.example VALUE)}}IF TRUE{{else if eq .global.workflow.input.example VALUE}}ELIF TRUE{{else}}ELSE{{end}} Optional variable Only executes a block of the template if the variable was provided in the input. Inside of the with block, you refer to the name of the original variable as $x (or whatever variable you use) {{with $x := .global.workflow.input.example}}{{$x}}{{end}} Regex Apply a regex pattern to a string to filter out a sub-string. Replace REGEX with your regex pattern. This can be combined with the index feature below to filter out the n-th sub-string. {{FindAllString .global.workflow.input.example “REGEX”}} Get n-th entry Allows you to get the n-th entry from a list. Replace NUMBER with the position of the list item you want to select. {{index .global.workflow.input.example NUMBER}} Sub-parameter Allows you to select the subparameter of a previous operation. Replace SUBELEMENT with the parameter you are looking for {{(index .global.workflow.input.example NUMBER).SUBELEMENT}} Loop Allows you to loop through a list and execute a template for each entry in the list. If you want to prepend something to your list, you can use if $index to only apply on the first pass of the loop {{range $index, $element := .global.workflow.input.example}}{{$element}}{{end}} List length Get the length of a list {{len .global.workflow.input.example}} ","categories":["ICO"],"description":"","excerpt":"Referencing variables in the Workflow Designer Usage Description Code …","ref":"/docs/ico/cheatsheet/","tags":["Data Type"],"title":"Template Syntax (Go Template)"},{"body":"Executors – Invoke SSH Commands - Reusable Task The Invoke SSH Commands task executes SSH commands against the given Intersight SSH endpoint target.\nSupported Targets The Invoke SSH Commands task can be run only on the targets that are added as an SSH or Ansible endpoint target type in Cisco Intersight.\nTo run the SSH Command task on the SSH or Ansible endpoint target from Cisco Intersight, ensure that:\nThe endpoint is reachable through Intersight Assist.\nThe endpoint target is in the Connected state.\nThe endpoint credentials are valid.\nFor more information on Intersight Target Claim, see Target Claim Using Intersight Assist.\nUsing the Executor SSH Commands Reusable Task Use the Invoke SSH Commands from the Executors section in the Intersight Orchestrator Task Designer UI to create a Invoke SSH Commands reusable task.\nFor more information on tasks, see Defining a Task.\nThe following table explains the Invoke SSH Commands task properties:\nProperty\nDescription\nGeneral\nFor more information, see Defining a Task.\nInputs\nExternal Target—The external target on which the SSH commands are run. By default, the External Target task input is created for the task.\nThe SSH commands can be run only on targets added as SSH or Ansible endpoint target in Intersight and are in the connected state.\nOutputs\nTo extract the required values from the command responses and map it to task outputs, do the following:\nCreate Task Output—Specify the task output.\nMap to Task Output—Check the check box to map the task output to an command response.\nTask Output—Select the command response to which the task output is mapped. The options available are:\nExit Code | Invoke SSH Commands\nCommand Output | Invoke SSH Commands\nCommand Execution Error| Invoke SSH Commands\nExtracted Parameters | Invoke SSH Commands\nFor more information on task outputs, see Executor Output properties.\nThe following table explains the Invoke SSH Commands executor input:\nProperty\nDescription\nSSH Command\nThe SSH commands that need to be executed on the remote server along with the details of command type.\nCommand— The SSH command string to execute against the given target. You need to specify only the command string.\nYou can specify multiple commands that need to run on the given target. For more information, see Using SSH Commands.\nNote:\nThe command chaining is allowed only when the command type is non-interactive.\nStatic Value—The SSH commands that are to be run on the remote server.\nNon-Interactive Command—The SSH command that does not require user prompts.\nInteractive Command—The SSH commands that require user prompts. For example, the Sudo or install packages command prompts for the user inputs. To specify the user inputs for the command, do the following:\nExpect —The regular expression of the expect prompt of the interactive command. You must provide the complete regular expression of the Expect string and the expression must end with the special character ‘$’ to match the end of the Expect string.\nSend—The answer string to the expect prompt. You can specify a string value.\nEnd prompt—The regular expression of the Shell Prompt of the remote server or target. You must provide the complete regular expression of the Shell Prompt and it must end with special character ‘$’ to match the end of the Shell Prompt string.\nDirect Mapping—Select an existing task input or task output field.\nYou can map only a custom data type of type SSH Command.\nNote:\nDirect mapping of task input or output of string data type is not valid.\nAdvanced Mapping—You can use Go template expressions for advance use cases where data manipulation is required.\nFor example, to use substring of the task input StringInput in the SSH command, the advanced mapping can be:\n{Command: \"{{Substring .global.task.input.StringInput 5 15}}\", CommandType: \"NonInteractiveCmd\"} The CommandType can be `NonInteractiveCmd` and `InteractiveCmd`.\nFollowing is an example for the ‘InteractiveCmd’:\n{ \"Command\": \"{{Substring .global.task.input.StringInput 5 15}}\", \"CommandType\": \"InteractiveCmd\", \"ExpectPrompts\": [ { \"Expect\": \"Password:\\\\s+$\", \"Send\": \"dummyValue\" } ], \"ShellPrompt\": \"\\\\[root\\\\@onprem-appliance\\\\]\\\\s+$\" } For more information on template functions, see Template Functions.\nCommand Timeout\nThe command timeout in seconds for the execution of the command against the given endpoint. The range is 10 to 7200 seconds.\nThe default timeout value is 600 seconds.\nStatic Value—The command timeout in seconds for the execution of the command against the given target.\nDirect Mapping——Select an existing task input or task output field.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task’s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nExpected Exit Codes\nThe list of expected exit codes for the SSH command that is run by the task. Task status is set to Success if the obtained exit code is present in the list of expected exit codes.\nIf this input is not specified, then the default exit code is 0 and is used to determine the status of command execution.\nStatic Value—The exit code for the SSH command that is run by the task.\nDirect Mapping—Select the expected exit codes from the task input or task output.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nResponse Parser\nThe response parser specification which is used to extract the values from the command response.\nStatic Value\nRegular Expression—The regular expression of the line in the command response where the interested capture value resides. The format to specify the capture value in this input is ‘$’. For example, if we need to capture ‘intersight’ in the sample response ‘intersight@cisco.com’, the regular expression looks like $\\@cisco\\.com where ‘Name’ is the name given to this captured parameter.\nName—The name of the output under which the captured value is saved. This name should be the same that is provided in the Regular Expression—$.\nType—The response parameter type—String, Integer, Float, or Boolean.\nThe default value is String.\nDirect Mapping—Select a task input or task output field.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nFor more information, see Response Parser.\nThe following table explains the SSH Command executor Outputs :\nProperty\nDescription\nExit Code\nThe exit code after the execution of the command against the given endpoint.\nCommand Output\nThe complete response after the execution of the command against the given endpoint.\nCommand Execution Error\nCaptures the error encountered while executing the command.\nExtracted Parameters\nThe response parser extracted outputs from the command execution response.\nThe following table explains the Invoke SSH Commands task Outcomes:\nProperty\nDescription\nOutcomes\nTo set the custom execution status and status message based on the obtained outputs, do the following:\nClick Add Outcome.\nName—The name for the outcome.\nOutcome Type—Select the outcome type. The options available are Success, Skip To Success, Error, Terminal Error, Skip Task Execution, or Status.\nFor more information on Outcomes, see Outcomes\nMessage—The message when the condition is met.\nCondition—The condition for the outcome.\nFor example, {{eq .global.InvokeSshCommands1.output.ExitCode “0”}}.\nThis condition checks whether the output `ExitCode` of the executor named `InvokeSshCommands1` equals to 0. If the condition is true, the task status is set to the value provided in `Outcome Type` and task status message is set to value provided in `Message`.\nUsing SSH Commands You can specify multiple commands that need to run on the given target by chaining the commands with special characters. The following table explains the operators.\nOperators\nFunction\n\u0026\u0026 (Logical AND)\nThe command following this operator will only execute if the command preceding this operator has been successfully executed.\n; (Semi-colon)\nThe command following this operator will execute even if the command preceding this operator is not successfully executed.\n|| ( Logical OR)\nThe command succeeding this operator is only executed if the command preceding it has failed.\n| (Pipe)\nThe output of the first command acts as input to the second command.\n! (NOT)\nNegates an expression within a command. It is much like an “except” statement.\n\u003e,», \u003c (Redirection)\nRedirects the output of a command or a group of commands to a file or stream.\nTemplate Parameters The request body template can refer to values from task inputs, previous task outputs, or implicit parameters. The following table explains the template parameters.\nPrefix/Format\nDescription\n{{.global.task.input.\u003cParameterName\u003e}} Task input reference.\n{{.global.\u003cExecutorRefName\u003e.output.\u003cParameterName\u003e}} Previous executor output reference. ExecutorRefName is the name of the previous executor having output ParameterName.\n{{.security.AccountMoid}} Implicit parameter reference to Account MoID under which the workflow is running.\n{{.security.OrganizationMoid}} Implicit parameter reference to Organization MoID under which the workflow is running.\nTemplate Functions The template engine has in-built functions to transform values before they are populated in the request templates. The following table explains the functions supported in Invoke SSH Commands task.\nFunction\nDescription\nTrimSpace\nReturns a string after removing white spaces from a the string.\nExample:\n{{TrimSpace .global.task.input.HostName}} ContainsString\nReturns a boolean if a substring is present in a given string.\nExample:\n{{if (ContainsString .global.task.input.SizeAsString \\”MB\\”)}}Mega Bytes{{else}}Bytes{{end}} FindAllString\nReturns a slice of substrings matching the regular expression in a given string.\nExample:\n{{(FindAllString .global.task.input.NumberString \\”([0-9]+)\\”)}} The above example returns array [“123”, “456”] for input string “123 some text 456.”\nToJson\nConverts a value to a JSON format.\nExample:\n{{(FindAllString .global.task.input.NumberString \\\"([0-9]+)\\\") | ToJson}} The above example returns JSON array literal [“123”, “456”] for input string “123 some text 456.”\nAsArray\nTakes in an element and returns an array of one element.\nExample:\n{{AsArray .global.task.output.serverMo}} The above example returns an array of one server Mo.\nSubstring\nReturns a substring within the given index bounds.\nExample:\n{{Substring .global.task.input.StorageId 2 6}} The above example returns “ABCD” for string “12ABCD3456.”\nIpToCidr\nReturns the classless inter-domain routing (CIDR) notation of an IPv4 address and subnet mask.\nExample:\n{{IpToCidr .global.task.input.Ip .global.task.input.Netmask}} The above example returns “10.10.10.10/24” for the input parameters “10.10.10.10” and “255.255.255.0.”\nLookupInSlice\nChecks if a given value is present in given slice or array and returns true if it exists. This function can be used for any value.\nExample:\n{{LookupInSlice .global.task.input.IpAddressList \\”10.10.10.10\\”}} The above example returns true for input [”10.10.10.10”, “20.20.20.20”].\nIndex\nReturns a value from an array when an input index exists.\nExample:\n{{ index .global.task.input.nodes .global.task.input.idx }} In the above example, if nodes is an array of devices and idx is 2, the index function returns the second device in the array.\nItob\nConverts an integer to a boolean.\nExample:\n{{ Itob global.task.input.OnOffFlip }} The above example returns true and false for inputs 1 and 0 respectively.\nItoa\nConverts a given number to a string value.\nExample:\n{{ Itoa global.task.input.Port }} The above example returns “12345” for input 12345.\nItof\nConverts a given integer to a float value.\nExample:\n{{ Itof global.task.input.Rate }} The above example returns 15.0 for an input 15.\nBtoa\nConverts a given boolean to a string value.\nExample:\n{{ Btoa global.task.input.OnOffFlip }} The above example returns “true” for input true.\nBtoi\nConverts a given boolean to a integer value.\nExample:\n{{ Btoi global.task.input.OnOffFlip }} The above example returns 1 and 0 for inputs true and false respectively.\nAtob\nConverts the given string into a boolean value.\nExample:\n{{ Atob global.task.input.OnOffFlip }}Returns true for input “true” Atoi\nConverts a given number in string format to the integer type.\nExample:\n{{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048” Ftoa\nConverts a given number into the string form based on the given precision.\nExample:\n{{Ftoa .global.task.input.Size 2}} returns the following output: 123.456 =\u003e “123.45”, 1028 =\u003e “1028.00” Ftoi\nConverts a given float input to a integer value.\nExample:\n{{ Ftoi global.task.input.Rate }} The above example returns 15 for an input 15.833.\nEval\nSupports an expression evaluation function. The below example returns 2GB for a input value of 2048. Note that the second argument is passed as ‘.’ in the template, which represents the map of all parameters.\n{{Eval \\\"{{.global.task.input.Size}} / 1024\\\" .}}GB Template Engine Syntax The template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements\nThe comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}} Conditional Statements\nThe template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \u003ccomparision_statement\u003e}} Template to be used {{end}} {{if \u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}} {{if \u003ccomparision_statement\u003e}} Template to be used {{else if \u003ccomparision_statement}} Tempalte to be used {{end}} Response Parser A response parser is a collection of parameters that model values to be extracted from the SSH command response.\nExample: Create a response parser to get the IP address for a ping command\nTo get the IP address for the host such as www.example.com, you can use the ping command:\nping example.com -4 Pinging example.com [93.184.216.34] with 32 bytes of data: Reply from 93.184.216.34: bytes=32 time=229ms TTL=53 Reply from 93.184.216.34: bytes=32 time=230ms TTL=53 Reply from 93.184.216.34: bytes=32 time=230ms TTL=53 Reply from 93.184.216.34: bytes=32 time=229ms TTL=53ping example.com To extract the IP address from the command output for an SSH Command task, you can configure the response parser as:\nRegular Expression—Pinging\\s+example.com\\s+\\[$\\]\\s+.*\nName—IP\nNote:\nThis name should be the same that is provided in the Regular Expression field. In the above example, the Regular Expression uses name $ so the Name specified must be “IP”.\nType—String\nInvoke SSH Command Reusable Task Examples Example 1: Create a reusable SSH Command task to list the current working directory on the host\nThis example task runs on an Intersight SSH endpoint target. This task runs the pwd command on the SSH endpoint target and obtains the current working directory in the output.\nProperty\nDescription\nGeneral\nOrganization—The organization that you are creating the task in.\nDisplay Name—A user friendly short name to identify the task definition.\nReference Name—The name of the Task definition.\nInputs\nExternal Target—By default, the External Target task input is created for the task.\nReference Name—Target\nType—Target Data Type\nOutputs\nExitCode—Task output\nReference Name—ExitCode\nType—String\nMap to Task Output—Exit Code | Invoke SSH Command\nResponse—Task output\nReference Name—Response\nType—String\nMap to Task Output—Command Output| Invoke SSH Command\nLastline—Task output\nReference Name—Response\nType—String\nMap to Task Output—Extracted Parameters | Invoke SSH Command - WorkingDirectory\nError—Task output\nReference Name—Error\nType—String\nMap to Task Output—Extracted Parameters | Invoke SSH Command - CommandExecutionError\nThe following table explains the Invoke SSH Command executor inputs:\nProperty\nDescription\nSSH Command\nStatic | Non-interactive—Command—pwd\nCommand Timeout\nDefault value.\nExpected Exit Codes\nDefault value.\nResponse Parser\nWhen you run the pwd command, you get the following output:\n$pwd /home/user To extracts the path and display it, configure the response parser as:\nRegular Expression—$\nName—WorkingDirectory\nType—String\nThe configured response parser captures the entire response line.\nExample 2: Create a reusable SSH Command task to install jq Linux command line utility on a host using interactive SSH commands\nThis example task runs on an Intersight SSH endpoint target. In this task, the Sudo password is provided by the command input field, and jq Linux command line utility is installed on the SSH endpoint target.\nThe task properties required for this example are as following:\nProperty\nDescription\nGeneral\nOrganization—The organization that you are creating the task in.\nDisplay Name—A user friendly short name to identify the task definition.\nReference Name—The name of the Task definition.\nInputs\nExternal Target—By default, the External Target task input is created for the task.\nReference Name—Target\nType—Target Data Type\nOutputs\nExitCode—Task output\nReference Name—ExitCode\nType—String\nMap to Task Output—Exit Code | Invoke SSH Command\nResponse—Task output\nReference Name—Response\nType—String\nMap to Task Output—Command Output| Invoke SSH Command\nThe following table explains the Invoke SSH Command executor inputs:\nProperty\nDescription\nSSH Command\nStatic | Interactive—Command—sudo yum install -y jq | Interactive\nExpect—The Expect string obtained while executing the SSH command is [sudo] password for qali:. You need to specify the Expect input as the regular expression of the Obtained prompt \\[sudo\\]\\spassword\\sfor\\sqali:\\s$.\nSend—testPasswd.\nShell Prompt—The shell prompt obtained before executing the SSH command is qali@automationvm-15:~$. You need to specify the regular expression of the obtained shell prompt qali\\@automationvm-15:~\\$\\s?$.\nCommand Timeout\nDefault value.\nExpected Exit Codes\nDefault value.\nResponse Parser\nDefault value.\n","categories":["executors"],"description":"Intersight Cloud Orchestrator allows workflow designers to run commands over SSH by using the **Invoke SSH Commands** reusable task in the workflows.","excerpt":"Intersight Cloud Orchestrator allows workflow designers to run …","ref":"/docs/ico/executors/ssh-reusable/","tags":["SSH"],"title":"SSH Commands - Reusable"},{"body":"Sample ::: {.body .refbody} ::: section The Workflow Designer helps you create new workflows (as well as tasks and data types) and also edit existing workflows to manage targets in Cisco Intersight.\n::: {.note .note} [Note:]{.notetitle}\nTo execute the new tasks for VMware vCenter networking operations, you should upgrade to Intersight Assist version 1.0.9-278. :::\n::: {.note .important} [Important:]{.importanttitle}\nThe [Orchestration]{.ph .uicontrol} option is visible in the left panel only if you have installed the Intersight Premier license.\nOnly an Account Administrator or a user with the Workflow Designer privilege can use the Workflow Designer to create and edit workflows. :::\nTo launch the Workflow Designer, choose [[Orchestration]{.ph .uicontrol} \u003e [Workflows]{.ph .uicontrol}]{.ph .menucascade}. A dashboard displays the following details under these tabs, namely, [My Workflows]{.ph .uicontrol}, [Sample Workflows]{.ph .uicontrol}, and [All Workflows]{.ph .uicontrol}:\n[Validation Status]{.ph .uicontrol}\n[Last Execution Status]{.ph .uicontrol}\n[Top Workflows by Execution Count]{.ph .uicontrol}\n[Top Workflow Categories]{.ph .uicontrol}\n[Number of System Defined Workflows]{.ph .uicontrol}\n[Top Workflows by Targets]{.ph .uicontrol}\nUsing the dashboard, you can create, edit, clone, or delete a tab. To create your own custom view tab, click + and specify a name and then choose the required parameters that need to be displayed in the columns, tag columns, and widgets. You can rename the tabs if it does not have a Lock icon.\nBelow the dashboard is a tabular list of workflows displaying the following information:\n[Display Name]{.ph .uicontrol}\n[Description]{.ph .uicontrol}\n[System Defined]{.ph .uicontrol}\n[Default Version]{.ph .uicontrol}\n[Executions]{.ph .uicontrol}\n[Last Execution Status]{.ph .uicontrol}\n[Validation Status]{.ph .uicontrol}\n[Last Update]{.ph .uicontrol}\n[Organization]{.ph .uicontrol}\nThe [Actions]{.ph .uicontrol} column allows you to do the following actions:\n[Execute]{.ph .uicontrol}—Executes the workflow.\n[History]{.ph .uicontrol}—Displays workflow execution history.\n[Manage Versions]{.ph .uicontrol}—create and manage versions for workflows. See Managing Versions for Workflows later in this document.\n[Delete]{.ph .uicontrol}—Delete a workflow.\n[Retry]{.ph .uicontrol}—Retry a failed workflow. :::\n::: section\nCreating a Workflow Workflow creation can be broken down into the following sequence of steps:\n[Defining a workflow]{.ph .uicontrol}—you specify the display name, description, and other important attributes.\n[Defining workflow inputs, workflow variables, and workflow outputs]{.ph .uicontrol}—you can specify which input parameters are mandatory for the workflow execution, define variable(s) for workflow, and the output(s) generated on successful execution.\n[Adding workflow tasks]{.ph .uicontrol}—you can add one or more workflow tasks in the Workflow Designer that are needed for the workflow to carry out its function.\n[Validate the workflow]{.ph .uicontrol}—you can validate a workflow to ensure that there are no errors in connecting task inputs and outputs. :::\n::: section\nDefining a Workflow Choose [Orchestration]{.ph .uicontrol} from the left navigation pane.\nChoose [Create Workflow]{.ph .uicontrol}. The [Create Workflow]{.keyword .wintitle} screen is categorized into the following areas to help you create a workflow:\nThe following table describes the options available to you while creating a workflow:\n::: tablenoborder +———————-+———————-+———————-+ | Workflow Designer | Description | Details | | Area/Option | | | +======================+======================+======================+ | [General Tab]{.ph | Displays workflow | You can add a | | .uicontrol} | details, and also | user-friendly short | | | inputs, variables, | name, reference | | | and outputs of the | name, description, | | | workflow. | and assign an | | | | organization to the | | | | workflow. You can | | | | also specify a | | | | version or set a tag | | | | to the workflow. In | | | | order to categorize | | | | your workflow, use | | | | the tag key | | | | [Category]{.ph | | | | .uicontrol} and | | | | provide an | | | | appropriate category | | | | value. Use the | | | | following checkboxes | | | | to: | | | | | | | | [Set as Default | | | | Version]{.ph | | | | .uicontrol}—Sets | | | | this version as the | | | | default version for | | | | the workflow. | | | | | | | | [Retryable]{.ph | | | | . | | | | uicontrol}—Execute | | | | the workflow from | | | | the point of a | | | | failure or retry the | | | | execution of the | | | | entire workflow. You | | | | can retry the | | | | execution of the | | | | workflow for up to | | | | two weeks after the | | | | last update to the | | | | workflow. | | | | | | | | [Enable Debug | | | | Logs]{.ph | | | | .u | | | | icontrol}—Collects | | | | the workflow logs | | | | for each tasks. You | | | | can analyze and | | | | debug the workflow | | | | execution. | | | | | | | | [Workflow | | | | Inputs]{.ph | | | | .uicontrol}—You | | | | can click [Add | | | | Workflow Input]{.ph | | | | .uicontrol} and add | | | | workflow inputs. | | | | Each input has a | | | | user-friendly | | | | display name, a | | | | reference name, | | | | description, | | | | restrictions, and | | | | data type. Also, you | | | | can set a default | | | | value and encrypt | | | | it. For more | | | | information, see | | | | [Defining Workflow | | | | Inputs, Variables, | | | | and | | | | Outputs](/help/res | | | | ources/Workflow_Desi | | | | gner#defining_workfl | | | | ow_inputs_variables_ | | | | and_outputs){.xref}. | | | | | | | | [Workflow | | | | Variable]{.ph | | | | .uicontrol}—You | | | | can click [Add | | | | Workflow | | | | Variable]{.ph | | | | .uicontrol} and add | | | | a workflow variable. | | | | Each workflow | | | | variable has a | | | | reference name, data | | | | type, and so on. | | | | Also, you can set a | | | | default value. For | | | | more information, | | | | see [Defining | | | | Workflow Inputs, | | | | Variables, and | | | | Outputs](/help/res | | | | ources/Workflow_Desi | | | | gner#defining_workfl | | | | ow_inputs_variables_ | | | | and_outputs){.xref}. | | | | | | | | [Workflow | | | | Outputs]{.ph | | | | .uicontrol}—You | | | | can click [Add | | | | Workflow Output]{.ph | | | | .uicontrol} and add | | | | workflow outputs. | | | | Each output has a | | | | user-friendly | | | | display name, a | | | | reference name, | | | | description, | | | | restrictions, and | | | | data type. Also, you | | | | can encrypt a value | | | | and map it to task | | | | output. | +———————-+———————-+———————-+ | [Designer Tab]{.ph | Displays the design | Categorized into the | | .uicontrol} | area where you | following areas to | | | synthesize your | help you create a | | | workflow. | workflow: | | | | | | | | - Tools | | | | Area—lists all | | | | the tasks, | | | | workflows, and | | | | operations that | | | | are currently | | | | available in | | | | Intersight. You | | | | can drag and | | | | drop a task or a | | | | workflow to the | | | | canvas to create | | | | or edit the | | | | workflow. You | | | | can collapse or | | | | expand the Tools | | | | area. You can | | | | use the Search | | | | feature to find | | | | a specific task | | | | or workflow. | | | | | | | | - Design | | | | Area—where you | | | | can build your | | | | workflow. Drag | | | | and drop tasks | | | | and workflows | | | | from the Tools | | | | area to this | | | | area of the | | | | screen. This | | | | area includes | | | | the following | | | | options that you | | | | can use while | | | | creating the | | | | workflow: | | | | | | | | - Zoom in and | | | | Zoom | | | | | | | | out—Magnify | | | | or reduce | | | | the view of | | | | the | | | | workflow. | | | | | | | | - Auto Align | | | | Work | | | | flow—Automatically | | | | align the | | | | workflow | | | | tasks in the | | | | design area. | | | | | | | | - Auto Align | | | | Selected | | | | Workflow | | | | | | | | Entities—Align | | | | selected | | | | workflow | | | | entities in | | | | the design | | | | area. | | | | | | | | - Toggle Task | | | | | | | | Search—Search | | | | for a | | | | specific | | | | task within | | | | the | | | | workflow. | | | | This is | | | | useful when | | | | you have | | | | several | | | | tasks within | | | | the | | | | workflow. | | | | | | | | - Auto Connect | | | | Selected | | | | Workflow | | | | Entity—Add | | | | the workflow | | | | entity in | | | | the design | | | | area. You | | | | can drag and | | | | drop a task | | | | in between | | | | the tasks. | | | | The possible | | | | locations | | | | where the | | | | selected | | | | task can be | | | | added is | | | | denoted with | | | | [+ ]{.ph | | | | .uicontrol} | | | | icon. | +———————-+———————-+———————-+ | [Mapping Tab]{.ph | Displays the | Expand and collapse | | .uicontrol} | relationship between | the [Task | | | the task inputs and | Inputs]{.ph | | | the outputs of the | .uicontrol} and | | | selected workflow. | [Task Outputs]{.ph | | | | .uicontrol} pane. | | | Information on | | | | workflow inputs and | | | | workflow outputs is | | | | also displayed. | | +———————-+———————-+———————-+ | [Code Tab]{.ph | Displays the code | Read-only view of | | .uicontrol} | view of the workflow | the workflow. You | | | definition | can copy the code, | | | | use this as a sample | | | | to create a workflow | | | | using Intersight | | | | APIs. | +———————-+———————-+———————-+ | [History Tab]{.ph | Status of the | View workflow | | .uicontrol} | executed/in-progress | execution history, | | | workflows. This tab | retry or clone a | | | appears after | previous execution. | | | executing a | The system displays | | | workflow. | a maximum of 100 | | | | instances of the | | | | workflow execution. | | | | The workflow | | | | execution is | | | | populated for each | | | | version of the | | | | workflow. | | | | | | | | ::: {.note .note} | | | | [Note:]{.notetitle} | | | | When a workflow is | | | | successfully | | | | executed, the | | | | options for retrying | | | | the workflow are not | | | | displayed. You can | | | | retry a failed | | | | workflow only when | | | | the [Retryable]{.ph | | | | .uicontrol} option | | | | is enabled in the | | | | [General]{.ph | | | | .uicontrol} tab. | | | | ::: | +———————-+———————-+———————-+ | [Execute]{.ph | Launches the [Enter | Choose the | | .uicontrol} | Workflow | Organization and the | | | Inputs]{.keyword | Workflow instance | | | .wintitle} window. | name to execute the | | | | workflow. | | | | | | | | For user-created | | | | workflows, the | | | | organization must | | | | match where it was | | | | created. | +———————-+———————-+———————-+ | [Save Workflow]{.ph | Validates and saves | Review validation | | .uicontrol} | the workflow. | errors, if any, and | | | | rectify them. | +———————-+———————-+———————-+ | [Close Designer]{.ph | Closes the Workflow | Closes the Workflow | | .uicontrol} | Designer. | Designer and | | | | displays the table | | | | view of available | | | | workflows. | +———————-+———————-+———————-+ ::: :::\n::: section\nRequests Requests are closely related to workflows. You create requests by running workflows; a request is generated every time you execute a workflow in Cisco Intersight. A request is a process under the control of Cisco Intersight.\nYou can schedule a workflow for later execution, and Cisco Intersight stores details of completed requests. To view the detailed information of a request, choose a request. The following information is displayed in the Requests screen:\nStatus—Displays the status of a workflow. Request can have one of several states depending on its execution status:\nRunning\nBlocked (for example, awaiting an approval)\nCompleted\nFailed (a request can fail when one of its component tasks fails to execute properly)\nDetails—Displays the request details such as name, request ID, target name and type, source name and type, name of the user who has executed the request along with the start time and end time, and duration of the request.\nInputs—Displays the workflow input details\nOutputs—Displays the workflow output details\nExecution Flow—Enable [Show Additional Details]{.ph .uicontrol} to view the logs, input, and output mapping details of the user-defined workflows. Displays the workflow execution history details similar to the details displayed in the [History]{.ph .uicontrol} tab. :::\n::: {#id_131513__Defining_WF_IO .section}\nDefining Workflow Inputs, Variables, and Outputs Workflows can have any number of tasks, inputs, variables, and outputs.\nAny task or workflow input can be either mandatory or optional. A task or workflow cannot run without all of its mandatory inputs. You define whether an input is mandatory or optional when you create the task or workflow.\nAfter specifying the generic properties for a task or workflow, you define the input parameters and variables required for task or workflow execution. In addition, you can set workflow input Parameter Set or Progressive Disclosure rules. These rules control the availability of workflow inputs or filter the data based on the preceding selection during the workflow execution. The Task Designer uses the same parameters and information types as the workflow designer to validate the mappings of task input and output parameters when a task is used in a workflow along with other tasks. Task designer uses the same form as workflow designer to obtain the parameter and information type so as provide same user experience between workflow designer and task designer.\nChoose [Orchestration]{.ph .uicontrol} from the left navigation pane and click [Create Workflow]{.ph .uicontrol}.\nIn the [General]{.ph .uicontrol} tab, click [Add Workflow Input]{.ph .uicontrol} in the [Workflow Inputs]{.ph .uicontrol} tab.\nIn the [Add Workflow Input]{.ph .uicontrol} screen, enter the following details:\na. [Display Name]{.ph .uicontrol}—Enter user-friendly short name.\nb. [Reference Name]{.ph .uicontrol}\nc. [Description]{.ph .uicontrol}—Detailed description of the input\nd. [Value Restrictions]{.ph .uicontrol}—Choose [Required]{.ph .uicontrol}, [Collection/Multiple]{.ph .uicontrol}, or can be left blank\ne. [Type]{.ph .uicontrol}—Select a data type. For example, String, Integer, Float, Boolean, Json, Enum, MoReference, Target Data Type, or a custom data type.\nThe fields displayed depend on the value you select for the Type field. f. If you select the data type as [Enum]{.ph .uicontrol}, specify the following:\ni. [Enum List]{.ph .uicontrol}---Label for the Enum value. ii. [Widget type]{.ph .uicontrol}. iii. [Set Default Value]{.ph .uicontrol}---Select the checkbox and select the corresponding default value. iv. [Override]{.ph .uicontrol}---Allow the user to override the default value. g. If you select the data type as [String]{.ph .uicontrol}, specify the following:\ni. [Minimum]{.ph .uicontrol} and [Maximum Range]{.ph .uicontrol} ii. [Regex]{.ph .uicontrol}---Validates the regular expression when you select [String]{.ph .uicontrol} in the [Type]{.ph .uicontrol} field. iii. [Secure]{.ph .uicontrol}---Indicates that the values of these properties are encrypted and stored in Cisco Intersight. iv. [Object Selector]{.ph .uicontrol}---Enable to configure the Intersight managed object selectors. This attribute is available only when the primitive data is [String]{.ph .uicontrol}. Specify the Intersight API Reference and selector attributes to feed the input from the table selection. Value will be passed according to the configuration set in the Value attribute. h. If you select the data type as [Integer]{.ph .uicontrol} or [Float]{.ph .uicontrol}, specify the following:\ni. [Minimum]{.ph .uicontrol} and [Maximum Range]{.ph .uicontrol} ii. [Set Default Value]{.ph .uicontrol}---Select the checkbox and the corresponding default value. i. If you select the data type as [Target Data Type]{.ph .uicontrol} or [MoReference]{.ph .uicontrol}, specify the following:\ni. [Intersight API Reference]{.ph .uicontrol}---Enter the URL of the Intersight API configured with parameters. ii. [Selector Attribute]{.ph .uicontrol}---Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking [+]{.ph .uicontrol}. j. If you select the data type as [Composite Data Type]{.ph .uicontrol}, you can specify the field mapping for the input field. With field mapping, you can pass the value of workflow input to a composite data field.\nTo pass the value from the parent composite data type to a child composite data type, you must specify the field mapping in the composite data type field. For more information, see [Creating a Data Type](../../../../../../../../help/resources/Data_Types#creating_a_data_type){.xref}. To specify the field mapping, do the following: i. [Key]{.ph .uicontrol}---The input field that you want to hide. ii. [Value Attribute]{.ph .uicontrol}---The value in a template style to be passed dynamically during the execution. If the data type is Object Selector, Enum, or Boolean then the input is referenced as `${workflow.input.InputReferenceName`{.ph .codeph}}. If the data type is MoReference or Target Data Type the input is referenced as `${workflow.input.InputReferenceName.AttributeName}`{.ph .codeph}. The `InputReferenceName`{.ph .codeph} is the Reference Name given to the input field and not the Display Name or Label. Click [Add]{.ph .uicontrol}.\nRepeat this procedure to create multiple inputs.\nTo add a Parameter Set rule, click [Add Rule]{.ph .uicontrol} \u003e [Parameter Set]{.ph .uicontrol}.\nFor more information, see Workflow Workflow Input Parameter Set and Progressive Disclosure Rules{.xref}.\na. [Name]{.ph .uicontrol}—The name of the Parameter Set rule.\nb. [If Field]{.ph .uicontrol}—Select the input field and the properties that will be used to define the Parameter Set rule.\nThe inputs are referenced as *InputName* or *InputName.Properties*. ::: {.note .note} [Note:]{.notetitle} The properties are applicable only if the data type is [MoRefefence]{.ph .uicontrol} or [Target Data Type]{.ph .uicontrol}. For example, for a Target Data Type input field (DeviceRegistrations), you can specify *Hypervisor Manager.IP Address*. ::: c. [Condition]{.ph .uicontrol}—The condition for the rule. The condition can be Equal to, Not equal to, Contains, or Matches Pattern.\nd. [Value]{.ph .uicontrol}—Select or enter the value. The Parameter Set rule uses this value along with the Condition specified to compare the value from the [If Field]{.ph .uicontrol}.\ne. [Field to be shown]{.ph .uicontrol}—Select the input field(s) that should be made available when the Parameter Set rule condition is satisfied.\nf. Click [Save]{.ph .uicontrol}.\nTo add a Progressive Disclosure rule, click [Add Rule]{.ph .uicontrol} \u003e [Progressive Disclosure]{.ph .uicontrol}.\nFor more information, see Workflow Input Parameter Set and Progressive Disclosure Rules{.xref}.\na. [Target Field]{.ph .uicontrol}—The target input field on which the progressive disclosure is applied.\nb. [Attribute ]{.ph .uicontrol}—The inputs are referenced as AttributeName.ParameterName. For example, for an input field, Virtual Manager, you can specify the attribute name as RegisteredDevice.Moid or ConnectionStatus.\nc. [Condition]{.ph .uicontrol}—The rule condition for the rule. The condition can be Equal to, Not equal to, or Contains.\nd. [Value]{.ph .uicontrol}—The inputs are referenced as ${InputReferenceName.Attribute{.ph .codeph}} or ${InputReferenceName.ParameterName}{.ph .codeph}. For example, for a VM input field, you can specify the value as ${HypervisorManager.Moid}{.ph .codeph} or ${Target.ConnectionStatus}{.ph .codeph}.\n::: {.note .note} [Note:]{.notetitle} For a [String]{.ph .uicontrol} input field, if you have selected the Object Selector option then you need not specify the Attribute or Parameter value. ::: In the [General]{.ph .uicontrol} tab, click [Add Workflow Variables]{.ph .uicontrol} in the [Workflow Variables]{.ph .uicontrol} tab. For more information, see Workflow Variables{.xref}.\nIn the [Add Workflow Variable]{.ph .uicontrol} screen, enter the following details:\na. [Reference Name]{.ph .uicontrol}—Enter user-friendly short name.\nb. [Type]{.ph .uicontrol}—Select the data type. For example, String, Integer, Float, Boolean, Json, Enum, MoReference, or Target Data Type.\nThe fields displayed depend on the value you select for the Type field. c. If you select the data type as [String]{.ph .uicontrol}, specify the following:\ni. [Object Selector]{.ph .uicontrol}---Enable to configure the Intersight managed object selectors. The Object Selector field is optional. ii. Specify the Intersight API Reference and selector attributes to feed the input from the table selection. The value will be passed according to the configuration set in the Value attribute. d. If you select the data type as [Enum]{.ph .uicontrol}, specify the following:\ni. [Enum List]{.ph .uicontrol}---Label and value for the Enum list. ii. [Widget type]{.ph .uicontrol}---The widget type as Radio or none. e. If you select the data type as [Target Data Type]{.ph .uicontrol} or [MoReference]{.ph .uicontrol}, specify the following:\ni. [Intersight API Reference]{.ph .uicontrol}---Enter the URL of the Intersight API configured with parameters. ii. [Selector Attribute]{.ph .uicontrol}---Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking [+]{.ph .uicontrol}. f. Select the [Initial Mapping To]{.ph .uicontrol} type and specify the corresponding variable value.\ng. Click [Add]{.ph .uicontrol}.\nClick [Workflow Outputs]{.ph .uicontrol} and click [Add Workflow Output]{.ph .uicontrol}.\nChoose a parameter and click [Add]{.ph .uicontrol}.\nClick [Save]{.ph .uicontrol}. :::\n::: {#id_131513__section_z2q_jns_drb .section}\nWorkflow Input Parameter Set and Progressive Disclosure Rules When you create a workflow, you can specify the inputs for the workflow execution. After you define the workflow inputs, you can set Parameter Set or Progressive Disclosure rules. These rules control the availability of workflow inputs or filter the data based on the preceding selection during the workflow execution.\n::: {.note .note} [Note:]{.notetitle}\nYou can define a Parameter Set or Progressive Disclosure rule only for a workflow that has more than two input fields with the supported data type. :::\nParameter Set Rule\nThe Parameter Set rules control the availability of specific parameters or inputs during the execution. After the first input is specified, the Parameter Set rule controls which subsequent input fields are made available during the workflow execution.\nExample: The following example shows how to create a Parameter Set rule for a workflow with three input fields. The workflow input fields are:\n[Enum]{.ph .uicontrol}—[Type]{.ph .uicontrol} is Enum and [Enum list]{.ph .uicontrol} is VM and HX.\n[Input1]{.ph .uicontrol}—[Type]{.ph .uicontrol} is String.\n[Input2]{.ph .uicontrol}—[Type]{.ph .uicontrol} is String.\nYou can create two workflow input Parameter Set rules. During the workflow execution when the [Enum]{.ph .uicontrol} value is VM only [Input1]{.ph .uicontrol} field is made available. Alternately, when the [Enum]{.ph .uicontrol} value is HX, only [Input2]{.ph .uicontrol} is made available. The details of the Parameter Set rules are:\n[Rule1]{.ph .uicontrol}—[If Field]{.ph .uicontrol} is Enum, [Condition]{.ph .uicontrol} is Equal to, [Value ]{.ph .uicontrol}is VM, and [Fields to be shown ]{.ph .uicontrol}is Input1.\n[Rule2]{.ph .uicontrol}—[If Field]{.ph .uicontrol} is Enum, [Condition]{.ph .uicontrol} is Equal to, [Value ]{.ph .uicontrol}is HX, and [Fields to be shown ]{.ph .uicontrol}is Input2.\nThe following is a sample of the API request.\n\"InputParameterSet\": [ { \"Condition\": \"eq\", \"ControlParameter\": \"Enum\", \"EnableParameters\": [ \"Input1\" ], \"Name\": \"Rule1\", \"ObjectType\": \"workflow.ParameterSet\", \"Value\": \"VM\" }, { \"Condition\": \"eq\", \"ControlParameter\": \"Enum\", \"EnableParameters\": [ \"Input2\" ], \"Name\": \"Rule2\", \"ObjectType\": \"workflow.ParameterSet\", \"Value\": \"HX\" }, The supported data types for Parameter Set rules are:\nBoolean\nEnum\nString Object Selector\nMoReference\nTarget\nProgressive Disclosure Rule\nThe Progressive Disclosure rules filter the data available in an input field based on the preceding selection during a workflow execution. The first input field is populated with broadest options. The subsequent input fields are populated with options based on the previous selection.\nExample 1: The following example shows how to create a Progressive Disclosure rule for a workflow with two input fields. Both these input fields are MoReference data type. The workflow input fields are:\n[Field1]{.ph .uicontrol}—[Type]{.ph .uicontrol} is MoReference, [Intersight API Reference]{.ph .uicontrol} is /api/v1/asset/DeviceRegistrations{.ph .codeph}, and [Selector attribute]{.ph .uicontrol} is ConnectionStatus{.ph .codeph}.\n[Field2]{.ph .uicontrol}—[Type ]{.ph .uicontrol}is MoReference, [Intersight API Reference]{.ph .uicontrol} is /api/v1/asset/DeviceRegistrations{.ph .codeph}, and [Selector attribute]{.ph .uicontrol} is ConnectionStatus{.ph .codeph}.\nYou can create a Progressive Disclosure rule so that during the workflow execution, the data is filtered for [Field2 ]{.ph .uicontrol}fields based on value in the [Field1 ]{.ph .uicontrol}field. The details of the Progressive Disclosure rule are:\n[Field2 Rule]{.ph .uicontrol}—[Target Field]{.ph .uicontrol} is Field2{.ph .codeph}, [Attribute]{.ph .uicontrol} is ConnectionStatus{.ph .codeph}, [Condition]{.ph .uicontrol} is Equal to, and [Value]{.ph .uicontrol} is ${Field1.ConnectionStatus}.{.ph .codeph} Example 2:: The following example shows how to create a Progressive Disclosure rule for a workflow with two input fields. Both these input fields are composite custom data type. The workflow input fields are:\n[Input1]{.ph .uicontrol}—Composite data type with two fields (Field1 and Field2)\n[Field1]{.ph .uicontrol}—[Type]{.ph .uicontrol} is MoReference, [Intersight API Reference]{.ph .uicontrol} is /api/v1/asset/DeviceRegistrations{.ph .codeph}, and [Selector attribute]{.ph .uicontrol} is ConnectionStatus{.ph .codeph}.\n[Field2]{.ph .uicontrol}—[Type ]{.ph .uicontrol}is MoReference, [Intersight API Reference]{.ph .uicontrol} is /api/v1/asset/DeviceRegistrations{.ph .codeph}, and [Selector attribute]{.ph .uicontrol} is ConnectionStatus{.ph .codeph}.\n[Input2]{.ph .uicontrol}—Composite data type with two fields (Field3 and Field4)\n[Field3]{.ph .uicontrol}—[Type]{.ph .uicontrol} is MoReference, [Intersight API Reference]{.ph .uicontrol} is /api/v1/asset/DeviceRegistrations{.ph .codeph}, and [Selector attribute]{.ph .uicontrol} is ConnectionStatus{.ph .codeph}.\n[Field4]{.ph .uicontrol}—[Type ]{.ph .uicontrol}is MoReference, [Intersight API Reference]{.ph .uicontrol} is /api/v1/asset/DeviceRegistrations{.ph .codeph}, and [Selector attribute]{.ph .uicontrol} is ConnectionStatus{.ph .codeph}.\nYou can create two Progressive Disclosure rules. During the workflow execution, the data is filtered for [Input2 ]{.ph .uicontrol}fields based on value in the [Input1]{.ph .uicontrol} fields. The details of the two Progressive Disclosure rules are:\n[Input2.Field3 Rule]{.ph .uicontrol}—[Target Field]{.ph .uicontrol} is Input2.Field3{.ph .codeph}, [Attribute]{.ph .uicontrol} is ConnectionStatus{.ph .codeph}, [Condition]{.ph .uicontrol} is Equal to, and [Value]{.ph .uicontrol} is ${Input1.Field1.ConnectionStatus}.{.ph .codeph}\n[Input2.Field4 Rule]{.ph .uicontrol}—[Target Field]{.ph .uicontrol} is Input2.Field4{.ph .codeph}, [Attribute]{.ph .uicontrol} is ConnectionStatus{.ph .codeph}, [Condition]{.ph .uicontrol} is Equal to, and [Value]{.ph .uicontrol} is ${Input1.Field2.ConnectionStatus}.{.ph .codeph}\nThe following is a sample of the API request.\n\"UiInputFilters\": [ { \"Filters\": [ \"ConnectionStatus eq '${Input1.Field1.ConnectionStatus}'\" ], \"Name\": \"Input2.Field3\", \"ObjectType\": \"workflow.UiInputFilter\", \"UserHelpMessage\": \"\" }, { \"Filters\": [ \"ConnectionStatus eq '${Input1.Field2.ConnectionStatus}'\" ], \"Name\": \"Input2.Field4\", \"ObjectType\": \"workflow.UiInputFilter\", \"UserHelpMessage\": \"\" } ] The supported data types for the Progressive Disclosure rules are:\nMoReference\nTarget\nString Object Selector :::\n::: section\nWorkflow Variables Workflow variables are similar to local variables within functions of a programming language. You define variables for workflows in Workflow Designer, and the scope of the workflow variables lies within the defined workflow. In a workflow, all tasks are bound to the scope of the workflow and have access to the workflow variables that are defined for the workflow. You can use the workflow variable to do the following:\nSimplify complex workflows which have multiple branches based on the conditional operator. Save the output of tasks that get executed in different branches of the workflow into a single variable. This variable can then be mapped in the downstream tasks irrespective of the branch from which it was taken.\nEvaluate the workflow input using a complex expression, save the result as a variable, and reuse the variable in the subsequent tasks.\nTransform the output of a task with the help of template functions and map the value into a workflow variable. The variables can then be used in multiple mappings without having to redo the transformation in every mapping.\nTo define the workflow variable and specify the corresponding value, you can do the following:\nIn the [General]{.ph .uicontrol} tab, click [Add Workflow Variable]{.ph .uicontrol} and define the variable properties.\nIn the [Designer]{.ph .uicontrol} tab, click the task, and then click the [Variables]{.ph .uicontrol} tab.\nTo add a new workflow variable, click [Add Workflow Variable]{.ph .uicontrol} and define the variable properties.\nTo add or edit a mapping to an existing variable, click [Edit Mapping]{.ph .uicontrol} and specify the new value.\n::: {.note .note} [Note:]{.notetitle} To view events for a workflow variable, click the [View]{.ph .uicontrol} icon. :::\nThe workflow variables can be assigned one of the following values:\n[Static value]{.ph .uicontrol}—Either the default value of the variable or the value specified in the workflow tasks.\n[Direct mapping ]{.ph .uicontrol}—Mapped to a workflow input, task output, or another workflow variable.\n[Advanced or Transformational mapping]{.ph .uicontrol}—Evaluate a complex expression and save the result in a variable.\nAfter you define the workflow variable, you can map the workflow variable to task input, workflow output, or as an input for another variable. For more information, see Input, Variable, and Output Mapping{.xref}.\nFollowing is a simple example which explains static mapping for a workflow variable. A workflow has two tasks Task1 and Task2 and a workflow variable Variable1 is defined with a default value as 100. For Task1, in the [Variable]{.ph .uicontrol} tab for the task, you can specify a static mapping for the workflow variable value as 90. Similarly, for Task2, in the [Variable]{.ph .uicontrol} tab for the task, you can specify the workflow variable value as 80 by mapping the Variable1 value.\nWhen you execute the workflow, the start value of Variable1 is the default value 100 . After Task1 is executed, the value of Variable1 is set to 90 based on the static value that is mapped for the task. After Task2 is executed, the value of Variable1 is set to 80 based on the static value that is mapped for the task. :::\n::: {#id_131513__section_ycb_mjr_4sb .section}\nInput, Variable, and Output Mapping Workflows inputs, variables, and task outputs can be used for mapping and they can be used as direct, transformed, or advanced mapping. The syntax to refer to these will depend on the type of mapping.\nWorkflow inputs are referenced as ${workflow.input.InputName}{.ph .codeph} where [InputName]{.ph .uicontrol} is the Reference Name given to the workflow input and not the Display Name or Label.\nWorkflow variables are referenced as ${workflow.variable.InputName}{.ph .codeph} , where [InputName]{.ph .uicontrol} is the Reference Name for the workflow variable.\nTask outputs are referenced as ${TaskName.output.OutputName}{.ph .codeph} where [TaskName]{.ph .uicontrol} is the Instance Name for the task and not the Display Name or Label and [OutputName]{.ph .uicontrol} is the Reference Name for the task output.\nTo specify an input mapping, select a task and click [Edit]{.ph .uicontrol} against a task input parameter.\nTo specify a workflow variable mapping, select a task and click [Map]{.ph .uicontrol} against a workflow variable parameter.\nFollowing are the available options:\n[Static Value]{.ph .uicontrol}—Enter a value that is assigned to the task input or workflow variable field.\n[Direct Mapping]{.ph .uicontrol}—Map an existing input, workflow variable, or task output to the task input.\n[Transformed Mapping]{.ph .uicontrol}—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template. You can then preview the template and test the transformation with sample values.\n::: {.note .note} [Note:]{.notetitle} Transformed mapping is only supported for task inputs of primitive data types, such as string, integer, boolean, and float. :::\n::: p [Advanced Mapping]{.ph .uicontrol}—Map a Golang template to the task input or workflow variable. For example, FindAllString{.ph .codeph} function returns a slice of all substrings that match the given regular expression in the given string.\nFindAllString(s, regex string) ([]string, error) Example: {{(FindAllString .global.task.input.NumberString \\\"([0-9]+)\\\")}} returns array [“123”, “456”] for input string “123 some text 456”. For example, Atoi{.ph .codeph} function converts the given number in string format to integer type.\nAtoi(s string) (int, error) Example: {{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048” ::: :::\n::: section\nOperations - Conditional Task Operations can be used to control the execution path of the workflows. Orchestrator supports Condition tasks which can be used to control the tasks that need to be executed.\nTasks to Control Execution Flow of Workflows\nThe [Conditional Task]{.ph .uicontrol} under [Operations]{.ph .uicontrol} allows you to perform programmatic decisional expressions in a conditional task during a workflow execution. The conditional expression can be simple expression or a combined compound expression.\n::: {.note .note} [Note:]{.notetitle}\nOnly JSON style template is supported with conditional expressions. :::\nConditional expressions support the following operators:\nComparison operators such as === (Equal to), != (Not equal to), \u003e (Greater than), \u003c (Less than), \u003e= (Greater than or equal to), \u003c= (Less than or equal to)\nArithmetic operators such as =, -, * (Multiplication), / (division), % (Modulo), ** (Logical AND)\nLogical operators such as \u0026\u0026 (Logical AND), || (Logical OR), ! ((Logical NOT)\nTernary operator such as condition ? val1 : val2\nThe syntax for workflow input is ${workflow.input.\u003cworkflow input ReferenceName\u003e}{.ph .codeph} and the syntax for task output is ${\u003cTask Name\u003e.output.\u003cTask Output Name\u003e}{.ph .codeph}. You can get the values for the task name and task output name from the Code view.\n::: p Following is an example for conditional expressions:\nif ( (${workflow.input.name} != 'test' || ${workflow.input.name} != 'test123’)) 'bad input'; else if((${workflow.input.id} != null \u0026\u0026 ${workflow.input.id} % 2 == 0)) 'even'; else 'odd'; if ( (${workflow.input.name} != 'test123’ || ${workflow.input.name} != 'test123’)) 'bad input'; else if((${workflow.input.id} != null \u0026\u0026 ${workflow.input.id} % 2 == 0)) 'even'; else 'odd'; if ( (${workflow.input.name}.length === 12 || ${workflow.input.name} !== ‘test’ )) 'even'; else 'odd'; \u003c\u003c fgfgfgfgfgfg , even if ( (${workflow.input.name}.length === 12 || ${workflow.input.name} !== ‘test’ )) 'even'; else 'odd'; \u003c\u003c test , odd if ( (${workflow.input.name} != null \u0026\u0026 'decisionTest'.indexOf(${workflow.input.name}) != -1 )) 'even'; else 'odd'; if ( (${workflow.input.name}.toLowerCase() == ‘testing’)) 'even'; else 'odd'; \u003c\u003c used integers as input name to try odd path if ( (${workflow.input.name}.search(/\\s/g) != -1)) 'even'; else 'odd'; if ( (${workflow.input.name}.match(/\\s/g) != -1)) 'even'; else 'odd'; if ( (${workflow.input.name}.startsWith('Not',0) || ${workflow.input.name}.endsWith('.'))) 'even'; else 'odd'; if ( (${workflow.input.name}.length \u003e= 3 \u0026\u0026 ${workflow.input.name}.length \u003c= 20)) 'even'; else 'odd'; if ( (${workflow.input.name}. === undefined)) ‘odd’; else ‘even’; if ( (${workflow.input.name}.search('Failed') != -1)) 'even'; else 'odd'; if ( (${workflow.input.name}.toLowerCase() != '' || ${workflow.input.name}.toUpperCase() != ‘Not-assigned’ )) 'even'; else 'odd'; :::\nThe expression is executed during runtime and depending on the result, the respective path is chosen. If none of the conditions match, the default path is chosen.\nFor example, you can have a conditional task that follows a path of execution depending on the profile state. You can create a condition in a workflow to check the state of the profile. If the profile is in the [Assigned]{.ph .uicontrol} state then you can deploy the profile, else delete the profile.\nAfter choosing the conditional task, use the [Conditions]{.ph .uicontrol} tab to specify expressions in the [Condition]{.ph .uicontrol} field of the tab. The values for the condition are specified in the [Value]{.ph .uicontrol} field of the [Cases]{.ph .uicontrol} area. Expressions are validated for syntax accuracy when workflow is saved.\nThe following examples return the value of the condition.\n::: p\n${workflow.input.Names}.length ${workflow.input.ArrayOfIds}.length (here ArrayOfIds represent an array) ${workflow.input.Names}.toLowerCase() ${workflow.input.Names}.toUpperCase() :::\nThe following examples return the boolean value 'true' or 'false'.\n::: p\n${workflow.input.Names}.startsWith('Te') ${workflow.input.Names}.endsWith('st') ${workflow.input.Names} == null ${workflow.input.Names} != null :::\nIn addition to workflow, task output can also be used. Here a boolean value is used in a ternary operation. If True, branch1 executes, otherwise branch2 executes ${task1.output.IsValid} ? branch1 : branch2. :::\n::: {#id_131513__section_j5c_qy5_rrb .section}\nOperations - Parallel Loop Task Operations can be used to control the execution path of the workflows. Orchestrator supports the Parallel Loop operation task that can be used to run a single task or sub-workflow, iteratively, based on a specified count input.\nThe iteration count can either be a static value that is specified when the workflow is created or a dynamic value that is derived from a workflow input or task output.\nWhen the task is executed, the count 'N' is determined, and the tasks or sub-workflows are scheduled for execution in parallel. When all the instances of the task or sub-workflow reach a final state, the parallel loop operation completes, and the workflow execution moves on to the next task.\n::: {.note .note} [Note:]{.notetitle}\nIf one of the tasks or sub-workflows fails then the entire parallel loop task fails. :::\nThe dynamic values for the count must be specified as a template function. For example, if a loop must run for a count which matches the length of a workflow input called [StringArray]{.ph .uicontrol}, then the count must be specified using a template function {{ len .global.workflow.input.StringArray }}.\nIn addition, you can use the keyword .iteration in a workflow template input to control the inputs that feed into the task. For example, the task within the loop needs to take one value from the workflow input [StringArray]{.ph .uicontrol}, then the task string input can be mapped to the template HostGroupName{{.iteration}} during the workflow creation.\nUse the Parallel Loop task from the Operations section in the Intersight Orchestrator Workflow Designer UI to build the workflow.\nTo add a task or a sub-workflow to a Parallel Loop task, you must drag and drop the single task or sub-workflow inside the Parallel Loop task in the Workflow Designer UI.\nThe following table explains the Parallel Loop task input properties:\n::: tablenoborder +———-+———————————————————-+ | Property | Description | +==========+==========================================================+ | Count | The iteration count value for the parallel loop. The | | | count can either be a static value defined as a constant | | | or a dynamic value defined as an expression that is | | | evaluated to an integer value at execution time. | | | | | | The dynamic values for the count must be specified as a | | | template function. For example, if a loop must run for a | | | count which matches the length of a workflow input | | | called StringArray{.ph .codeph}, then the count must | | | be specified using a template function | | | {{ len .global.workflow.input.StringArray }}{.ph | | | .codeph}. | | | | | | The count must be less than or equal to 100. | +———-+———————————————————-+ :::\nExample: Create a workflow with the Parallel Loop task to create multiple storage host groups\nThe following example workflow has two tasks—Parallel Loop and New Storage Host Group. The first task runs the Parallel Loop task. In this task, the Count input is a static value and is set to 2. The second task, New Storage Host Group, creates storage host groups with the host group name as a workflow input.\nWhen the workflow is executed, the count 'N' is determined as 2, and two create storage host group tasks are executed in parallel. When all the instances of the task reach a final state, the parallel loop completes.\nThe workflow input field required for this example is as follows:\n::: tablenoborder +—————-+—————————————————-+ | Property | Description | +================+====================================================+ | Storage Device | - [Reference Name]{.ph | | | .uicontrol}—StorageDevice | | | | | | - [Type]{.ph .uicontrol}—Target Data Type | | | | | | - [Intersight API Reference]{.ph | | | .uicontrol}—/api/v1/storage/PureArrays | | | | | | - [Selector Attribute]{.ph .uicontrol}—Name | | | | | | - [Selector Attribute]{.ph | | | .uicontrol}—Vendor | +—————-+—————————————————-+ :::\nThe following table lists the properties for the Parallel Loop task:\n::: tablenoborder Property Description\nCount [Count]{.ph .uicontrol}—2 :::\nThe following table lists the properties for the New Storage Host Group task:\n::: tablenoborder +—————-+—————————————————-+ | Property | Description | +================+====================================================+ | Storage Device | [Workflow Input]{.ph | | | .uicontrol}—${workflow.input.StorageDevice} | +—————-+—————————————————-+ | Host Group | [Custom Value]{.ph | | | .uicontrol}—HostGroupName{{.iteration}} | | | | | | The keyword .iteration in a workflow template | | | input to control the inputs that feed into the | | | task. | +—————-+—————————————————-+ :::\nAfter you execute the workflow, you would see the following output:\n├── New Storage Host Group ├── ... │ ├── Inputs │ │ └── Host Group: HostGroupName0 │ │ └── Storage Device:{ 2 } │ │ ├── Moid: 619efa1d6e64612d317a248a │ │ └── ObjectType: storage.PureArray │ └── Outputs │ ├── ConfigResults:[ 1 ] │ │ └── Object: { 4 } │ │ ├── ConfigResCtx: { 1 } │ │ │ └── EntityData: { 1 } │ │ │ └── task: workflow.ApiTask │ │ ├── Message: Host group created successfully. │ │ ├── State: Ok │ │ └── Type: Config │ └── Host Group: HostGroupName0 ├── New Storage Host Group └── ... ├── Inputs │ └── Host Group: HostGroupName1 │ └── Storage Device:{ 2 } │ ├── Moid: 619efa1d6e64612d317a248a │ └── ObjectType: storage.PureArray └── Outputs ├── ConfigResults:[ 1 ] │ └── Object: { 4 } │ ├── ConfigResCtx: { 1 } │ │ └── EntityData: { 1 } │ │ └── task: workflow.ApiTask │ ├── Message: Host group created successfully. │ ├── State: Ok │ └── Type: Config └── Host Group: HostGroupName1 The following is a sample code view:\n{ \"Catalog\": { \"Moid\": \"5e6109bc696f6e2d31f856e5\", \"ObjectType\": \"workflow.Catalog\", \"link\": \"https://www.intersightcom/api/v1/workflow/Catalogs/5e6109bc696f6e2d31f856e5\" }, \"DefaultVersion\": true, \"Description\": \"\", \"InputDefinition\": [ { \"CustomDataTypeProperties\": { \"CatalogMoid\": \"\", \"CustomDataTypeId\": \"\", \"CustomDataTypeName\": \"\", \"ObjectType\": \"workflow.CustomDataProperty\" }, \"Default\": { \"IsValueSet\": false, \"ObjectType\": \"workflow.DefaultValue\", \"Override\": false, \"Value\": null }, \"Description\": \"\", \"DisplayMeta\": { \"InventorySelector\": true, \"ObjectType\": \"workflow.DisplayMeta\", \"WidgetType\": \"None\" }, \"InputParameters\": null, \"IsArray\": false, \"Label\": \"Storage Device\", \"Max\": 0, \"Min\": 0, \"Name\": \"StorageDevice\", \"ObjectType\": \"workflow.TargetDataType\", \"Properties\": [ { \"ConnectorAttribute\": \"RegisteredDevice.Moid\", \"ConstraintAttributes\": [ \"ObjectType\" ], \"DisplayAttributes\": [ \"Name\", \"Vendor\" ], \"ObjectType\": \"workflow.TargetProperty\", \"Selector\": \"/api/v1/storage/PureArrays\", \"SelectorProperty\": { \"Body\": null, \"Method\": \"GET\", \"ObjectType\": \"workflow.SelectorProperty\" }, \"SupportedObjects\": [ \"storage.PureArray\" ] } ], \"Required\": true } ], \"InputParameterSet\": [], \"Label\": \"Parallel Loop\", \"Name\": \"ParallelLoop\", \"OutputDefinition\": [], \"OutputParameters\": null, \"Properties\": { \"Cloneable\": true, \"EnableDebug\": false, \"ExternalMeta\": true, \"ObjectType\": \"workflow.WorkflowProperties\", \"Retryable\": false, \"SupportStatus\": \"Supported\" }, \"Tags\": [], \"Tasks\": [ { \"Description\": \"\", \"Label\": \"\", \"Name\": \"StartTask\", \"NextTask\": \"parallelLoop1\", \"ObjectType\": \"workflow.StartTask\" }, { \"Description\": \"\", \"Label\": \"\", \"Name\": \"SuccessEndTask\", \"ObjectType\": \"workflow.SuccessEndTask\" }, { \"Description\": \"\", \"Label\": \"\", \"Name\": \"FailureEndTask\", \"ObjectType\": \"workflow.FailureEndTask\" }, { \"Count\": \"2\", \"Description\": \"A Parallel Loop is a control task that runs one task or one sub-workflow multiple times based on a specified count. The count can be a static value that is specified during design time or a dynamic value that is derived from workflow inputs or task outputs. When the loop is executed, the count 'N' is determined, N tasks or sub-workflows are scheduled for execution in parallel. When all N instances of the task or sub-workflow reach a final state the parallel loop will complete and workflow execution will move on to the next task. If any one of the tasks or sub-workflows fails, then the entire loop will fail. Dynamic values for count must be specified as a template. For example, if a loop must run for a count which matches the length of a workflow input called StringArray, then the count must be specified using a template '{{ len .global.workflow.input.StringArray }}'. The iteration of the loop is available using the keyword '.iteration' and it can be used to control inputs that feed into the task. For example, the task inside the loop needs to take one value from the workflow input StringArray, then the task string input can be mapped to the template '{{ index .global.workflow.input.StringArray .iteration}}' during design.\", \"Label\": \"Parallel Loop\", \"LoopStartTask\": \"NewStorageHostGroup1\", \"Name\": \"parallelLoop1\", \"NumberOfBatches\": 1, \"ObjectType\": \"workflow.LoopTask\", \"OnSuccess\": \"SuccessEndTask\", \"Parallel\": true }, { \"CatalogMoid\": \"5c2fc884696f6e2d316c5d59\", \"Description\": \"Create a host group with host group name as input. On successful execution, the newly created host group name is generated as output.\", \"InputParameters\": { \"HostGroupName\": \"HostGroupName{{.iteration}}\", \"StorageDevice\": \"${workflow.input.StorageDevice}\" }, \"Label\": \"New Storage Host Group\", \"Name\": \"NewStorageHostGroup1\", \"ObjectType\": \"workflow.WorkerTask\", \"OnFailure\": \"\", \"OnSuccess\": \"\", \"RollbackDisabled\": false, \"TaskDefinitionId\": \"5f7ed8a2696f6e2d30eb388b\", \"TaskDefinitionName\": \"NewStorageHostGroup\", \"UseDefault\": false, \"Version\": 2 } ], \"UiInputFilters\": [], \"UiRenderingData\": { \"Positions\": [ { \"Name\": \"StartTask\", \"X\": 269.5, \"Y\": 45.5 }, { \"Name\": \"SuccessEndTask\", \"X\": 269.5, \"Y\": 303 }, { \"Name\": \"FailureEndTask\", \"X\": 412.5, \"Y\": 303 }, { \"Name\": \"parallelLoop1\", \"X\": 149.01800537109375, \"Y\": 116.75314331054688 }, { \"Name\": \"NewStorageHostGroup1\", \"X\": 185, \"Y\": 177 } ] }, \"Version\": 1, \"WorkflowMetadata\": null } :::\n::: section\nManaging the Lifecycle of a Workflow Workflow management consists of organizing, creating, updating, and deletion of workflows. The following table describes the set of actions that you can perform with workflows in Cisco Intersight.\n::: tablenoborder +———————————–+———————————–+ | Actions | Description | +===================================+===================================+ | View Workflows | Choosing [Orchestration]{.ph | | | .uicontrol} from the left | | | navigation pane will display all | | | workflows in a tabular format. | | | You can view information such as | | | the workflow name and | | | description, the number of | | | versions available, the number of | | | times the workflow has been | | | executed, the last execution | | | status, validation information | | | and the last update time and | | | date. | +———————————–+———————————–+ | Create a New Workflow | Choose [Orchestration]{.ph | | | .uicontrol} from the left | | | navigation pane and click [Create | | | Workflow]{.ph .uicontrol}. This | | | option opens up the Workflow | | | Designer, using which you can | | | create a new workflow. | +———————————–+———————————–+ | Create a Version for a Workflow | You can create multiple versions | | | for a workflow. In addition, you | | | can set a specific version of the | | | workflow as the default version | | | for the workflow. See [Managing | | | Versions for | | | Workflows | | | ](../../../../../../../../help/re | | | sources/Workflow_Designer#managin | | | g_versions_for_workflows){.xref}. | +———————————–+———————————–+ | Delete a Workflow | From the tabular list of | | | workflows, you can select a | | | workflow and click [Delete]{.ph | | | .uicontrol}. This will remove the | | | workflow and all versions of the | | | workflow. | | | | | | You cannot delete a workflow when | | | : | | | | | | - workflow is used as | | | sub-workflow task in another | | | workflow. | | | | | | - workflow is in running state. | +———————————–+———————————–+ | Execute a Workflow | Select a workflow from the | | | tabular list of workflows and | | | choose [Execute]{.ph .uicontrol}. | | | Alternatively, you can click the | | | workflow name, and then choose | | | [Execute]{.ph .uicontrol} in the | | | Workflow Designer. | | | | | | ::: {.note .important} | | | [Important:]{.importanttitle} | | | | | | Workflow execution includes | | | privilege-based validation for | | | tasks. With the introduction of | | | privilege-based validation for | | | virtualization, compute and | | | storage tasks, a user must have | | | all the required privileges to | | | execute all the domain tasks | | | within a workflow. For example, a | | | user can successfully execute a | | | workflow that includes storage | | | and virtualization tasks only if | | | the user has both Storage and | | | Virtualization Administrator | | | privileges. In the absence of | | | either one of these privileges, | | | the [Execute]{.ph .uicontrol} | | | button will not be displayed and | | | the user cannot execute the | | | workflow. | | | | | | However, an Account Administrator | | | can execute all workflow. | | | ::: | | | | | | While configuring the properties | | | of a workflow, if you selected | | | the [Retryable]{.ph .uicontrol} | | | option, then in the event of a | | | workflow failure, you can either | | | choose to execute the workflow | | | again from the point of failure, | | | or you can execute the entire | | | workflow again. | +———————————–+———————————–+ | Clone a Workflow | From the tabular list of | | | workflows, you can select a | | | workflow and click [Clone]{.ph | | | .uicontrol}. This will clone the | | | selected workflow. | +———————————–+———————————–+ | Save a Workflow as | From the tabular list of | | | workflows, you can choose a | | | workflow and click. By default, | | | the workflow details are | | | displayed in the [Designer]{.ph | | | .uicontrol} tab. You can choose | | | [Save As]{.ph .uicontrol} option | | | from the [Action]{.ph .uicontrol} | | | drop-down list to clone or create | | | a new version of the existing | | | workflow. | | | | | | You can also perform this | | | operation in the [General]{.ph | | | .uicontrol} tab. | | | | | | In the [Save As]{.ph .uicontrol} | | | screen, you can choose one of the | | | following: | | | | | | - [New Version]{.ph | | | .uicontrol}—Specify a new | | | version and related | | | description. Click [Save]{.ph | | | .uicontrol}. | | | | | | This option is not available | | | for a system generated | | | workflow. | | | | | | - [Clone]{.ph | | | .uicontrol}—Specify | | | user-friendly short name, | | | reference name, description, | | | and tag key. Click [Save]{.ph | | | .uicontrol}. For more | | | information, see [Cloning a | | | Workflow](../../../../../../ | | | ../../help/resources/Workflow_Des | | | igner#cloning_a_workflow){.xref}. | +———————————–+———————————–+ ::: :::\n::: {#id_131513__CloningWorkflow .section}\nCloning a Workflow You can clone a workflow. The cloned workflow is identical to the original workflow. You can edit the new workflow immediately. You might do this, for example, to create a workflow that is similar to the source workflow that can be edited based on your requirements. The new workflow has a new, separate version history.\nTo clone a workflow, complete the following steps:\nChoose [Orchestration]{.ph .uicontrol} from the left navigation pane.\nFrom the tabular list of workflows, select a workflow and choose [Clone]{.ph .uicontrol}.\nIn the [Clone Workflow]{.ph .uicontrol} screen, edit the user-friendly short name, reference name, description, and organization details. The organization mappings are displayed only for pre-canned workflows and not for the custom workflows.\nCheck the [Open Clone in Editor]{.ph .uicontrol} check box if you want to open the cloned workflow in the workflow designer and edit the details.\n::: {.note .note} [Note:]{.notetitle} [Open Clone in Editor]{.ph .uicontrol} check box is not displayed when you clone a workflow using the [Save As]{.ph .uicontrol} option. :::\nClick [Clone]{.ph .uicontrol}. :::\n::: {#id_131513__section_azj_mg5_dpb .section}\nManaging Versions for Workflows Cisco Intersight allows you to create and manage versions for workflows. In addition to creating versions, you can also set a specific version as the default version for the workflow. You can create a version of a workflow and execute it only if you are one of the following users:\nAccount Administrator\nUser with Workflow Designer privileges\nRead-Only users can only view versions of a workflow. They cannot create, edit, execute or delete versions. Users with Storage Administrator and Virtualization Administrator privileges can only view and execute specific versions of a workflow.\nTo create a version for a workflow, complete the following steps:\nChoose [Orchestration]{.ph .uicontrol} from the left navigation pane.\nFrom the tabular list of workflows, select a workflow and choose [Manage Versions]{.ph .uicontrol}.\nIn the [Manage Versions]{.keyword .wintitle} screen, you can perform the following tasks:\nCreate a new version for the workflow\nExecute a specific version of the workflow\nDelete a specific version. You cannot directly delete the default version of a workflow. To delete the default version, perform the following:\nMake another version the default.\nChange the workflow version to be deleted as non-default.\nDelete the workflow version that was changes as non-default.\nSet a specific version of the workflow as the default version\nChoose [Create a New Version]{.ph .uicontrol} and enter the following details:\n[Source Version]{.ph .uicontrol}—Choose a specific version that will form the source for the new version that you are creating.\n[Version]{.ph .uicontrol}—Specify a version number for the workflow.\n[Description]{.ph .uicontrol}—Enter a description for the version so that you can identify it.\n[Set as Default Version]{.ph .uicontrol}—Check this check box to set this new version as the default version for the workflow.\nClick [Create]{.ph .uicontrol}.\nAfter creating a version for a workflow, clicking on the version number on the [Manage Versions]{.keyword .wintitle} screen opens the workflow in Workflow Designer.\n::: {.note .note} [Note:]{.notetitle}\nDeleting a workflow will delete all versions created for the workflow. ::: :::\n::: section\nExporting a Workflow Intersight Cloud Orchestrator enables you to export workflows from an account to your system and then import them to another account.\nTo export a workflow, complete the following steps:\nChoose [Orchestration]{.ph .uicontrol} from the left navigation pane.\nClick the [Workflow]{.ph .uicontrol} tab.\nFrom the tabular list of workflows, do one of the following:\nSelect a workflow, click the [Ellipsis (…)]{.ph .uicontrol} icon in the same row, and then choose [Export Workflow]{.ph .uicontrol}.\nSelect multiple workflows, click the [Ellipsis (…)]{.ph .uicontrol} icon from the header or footer of the tabular list, and then choose [Export Workflow]{.ph .uicontrol}.\n::: {.note .note} [Note:]{.notetitle} You can also export workflows from the [Actions]{.ph .uicontrol} menu in the [Workflow Designer]{.keyword .wintitle} window. :::\nIn the [Export Workflow]{.ph .uicontrol} screen:\na. In the [JSON File Name]{.ph .uicontrol} field, use the default filename or enter a filename of your choice for the JSON file that stores the workflow components.\nb. Use the [Export Tags]{.ph .uicontrol} toggle button to include or exclude the user-defined tags. ICO does not export the system-defined tags.\nc. Click [Export]{.ph .uicontrol}.\nd. Save a local copy of the JSON file.\nImporting a Workflow Intersight Cloud Orchestrator enables you to import workflows to your account by importing a JSON file that contains the workflow components. You can create the JSON file by exporting the workflow components from another account.\nTo import a workflow, complete the following steps:\nChoose [Orchestration]{.ph .uicontrol} from the left navigation pane.\nClick [Import]{.ph .uicontrol}.\nThe [Import]{.keyword .wintitle} wizard appears.\nIn the [Select File]{.keyword .wintitle} screen:\na. From the [Organization]{.ph .uicontrol} drop-down list, choose the organization to which you want to import the workflow(s).\nb. Click [Browse]{.ph .uicontrol}, and then select the JSON file that contains the Workflow(s).\n::: {.note .note} [Note:]{.notetitle} Ensure that the file size of the JSON file is not more than 1MB. If the file size is more than 1MB, export the workflow(s) in batches, and then try import. ::: c. Click [Next]{.ph .uicontrol}.\nIntersight Cloud Orchestrator validates the JSON file and displays the workflow(s) in the [Details]{.keyword .wintitle} screen. In the [Details]{.keyword .wintitle} screen:\na. To associate an additional tag to the components listed in the table, enter the tag in the [Set Tags]{.ph .uicontrol} field.\n::: {.note .note} [Note:]{.notetitle} [Set Tags]{.ph .uicontrol} is an optional field. You must enter the tag in the `key:value`{.ph .codeph} format. ::: b. If one or more workflow components are already available in the system, choose a rule to replace or skip the duplicate components.\nc. Click [Import]{.ph .uicontrol}.\nIn the [Import Result]{.keyword .wintitle} screen:\na. Verify the status of the imported workflow.\nb. If you want to view the details of the import request:\n- Click the link displayed above the table. - Alternatively, click the [Requests]{.ph .uicontrol} icon displayed in the menu bar. For more information, see [Requests](../../../../../../../../help/resources/Workflow_Designer#requests){.xref}. c. Click [Close]{.ph .uicontrol}.\nYou can execute the imported workflow from the [Workflows]{.ph .uicontrol} tab. :::\n::: section\nDefining Workflow Input Rules Intersight Cloud Orchestrator allows you to configure input rules that control the display of fields in the workflow execution screen. You can define these input rules for a workflow by using the Intersight API and while creating a composite data type. By default, all input fields for a workflow are displayed in the workflow execution screen. By configuring input rules, the fields in this screen are displayed or hidden based on the value selected for a previous input field.\nAfter configuring input rules in the workflow definition using the Intersight API, you can view the input rules using the [Code]{.ph .uicontrol} tab in the Workflow Designer.\nFollowing is a sample of a simple input rule set for a workflow:\n\"InputParameterSet\":[ { \"ObjectType\": \"workflow.ParameterSet\", \"Name\": \"rule-1\", \"ControlParameter\": \"input-1\", \"Condition\": \"eq\", \"Value\": \"true\", \"EnableParameters\": [ \"input-2\" ] }, { \"ObjectType\": \"workflow.ParameterSet\", \"Name\": \"rule-2\", \"ControlParameter\": \"input-1\", \"Condition\": \"ne\", \"Value\": \"true\", \"EnableParameters\": [ \"input-3\", ] } ] Following is an example for the parameter sets defined at workflow level:\n{ \"Label\": \"Provision VM\", \"Name\": \"ProvisionVM\", \"DefaultVersion\": true, \"Description\": \"\", // Parameter set defintion \"InputParameterSet\": [ { // rule-1 enables 'vmwarehost' input when value of 'vmtype' is 'vmware' \"Name\": \"rule-1\", \"ControlParameter\": \"vmtype\", \"Condition\": \"eq\", \"Value\": \"vmware\", \"EnableParameters\": [ \"vmwarehost\" ] }, { // rule-2 enables 'hxcluster' input when value of 'vmtype' is 'hx' \"Name\": \"rule-2\", \"ControlParameter\": \"vmtype\", \"Condition\": \"eq\", \"Value\": \"hx\", \"EnableParameters\": [ \"hxcluster\" ] } ], \"InputDefinition\": [ { \"ObjectType\": \"workflow.PrimitiveDataType\", \"InputParameters\": null, \"Label\": \"VM Type\", \"Name\": \"vmtype\", \"Required\": false, \"Properties\": { \"ClassId\": \"workflow.PrimitiveDataProperty\", \"ObjectType\": \"workflow.PrimitiveDataProperty\", \"Constraints\": { \"ClassId\": \"workflow.Constraints\", \"ObjectType\": \"workflow.Constraints\", \"EnumList\": [ { \"ClassId\": \"workflow.EnumEntry\", \"ObjectType\": \"workflow.EnumEntry\", \"Label\": \"VMWare\", \"Value\": \"vmware\" }, { \"ClassId\": \"workflow.EnumEntry\", \"ObjectType\": \"workflow.EnumEntry\", \"Label\": \"HX\", \"Value\": \"hx\" } ], \"Max\": 0, \"Min\": 0, \"Regex\": \"\" }, \"InventorySelector\": [], \"Secure\": false, \"Type\": \"enum\" } }, { \"Name\": \"vmname\", \"Label\": \"VM Name\", \"Required\": false, \"Properties\": { \"Type\": \"string\", \"Constraints\": { \"Min\": 0, \"Max\": 0 }, \"Secure\": false }, \"ObjectType\": \"workflow.PrimitiveDataType\" }, { \"Name\": \"vmwarehost\", \"Label\": \"Host\", \"Required\": false, \"Properties\": { \"Type\": \"string\", \"Constraints\": { \"Min\": 0, \"Max\": 0 }, \"Secure\": false }, \"Default\": { \"Override\": false, \"Value\": null }, \"ObjectType\": \"workflow.PrimitiveDataType\" }, { \"Name\": \"hxcluster\", \"Label\": \"Cluster\", \"Required\": false, \"Properties\": { \"Type\": \"string\", \"Constraints\": { \"Min\": 0, \"Max\": 0 }, \"Secure\": false }, \"ObjectType\": \"workflow.PrimitiveDataType\" } ], \"OutputDefinition\": [], \"OutputParameters\": null, \"Tasks\": [ { \"ClassId\": \"workflow.StartTask\", \"Description\": \"\", \"Label\": \"\", \"Name\": \"StartTask\", \"NextTask\": \"NewProfile1596244596840\", \"ObjectType\": \"workflow.StartTask\" }, { \"ClassId\": \"workflow.SuccessEndTask\", \"Description\": \"\", \"Label\": \"\", \"Name\": \"SuccessEndTask\", \"ObjectType\": \"workflow.SuccessEndTask\" }, { \"ClassId\": \"workflow.FailureEndTask\", \"Description\": \"\", \"Label\": \"\", \"Name\": \"FailureEndTask\", \"ObjectType\": \"workflow.FailureEndTask\" }, { \"CatalogMoid\": \"5dd45ab6696f6e2d301e2df6\", \"ClassId\": \"workflow.WorkerTask\", \"Description\": \"Task to create a Profile\", \"InputParameters\": null, \"Label\": \"Provision VM\", \"Name\": \"ProvisionVM1596244596840\", \"ObjectType\": \"workflow.WorkerTask\", \"OnFailure\": \"\", \"OnSuccess\": \"SuccessEndTask\", \"TaskDefinitionId\": \"5efd7c84696f6e2d309e6877\", \"TaskDefinitionName\": \"NewProfile\", \"Version\": 1 } ], \"Version\": 1 } Following is an example for the parameter sets defined at custom data type level:\n{ \"Label\": \"ClusterType\", \"Name\": \"ClusterType\", \"CompositeType\": true, \"Description\": \"Type definition for a cluster information.\", \"TypeDefinition\": [ { \"ObjectType\": \"workflow.PrimitiveDataType\", \"Label\": \"Cluster Type\", \"Name\": \"clustertype\", \"Properties\": { \"ObjectType\": \"workflow.PrimitiveDataProperty\", \"Constraints\": { \"ObjectType\": \"workflow.Constraints\", \"EnumList\": [ { \"ObjectType\": \"workflow.EnumEntry\", \"Label\": \"VM Ware\", \"Value\": \"vmware\" }, { \"ObjectType\": \"workflow.EnumEntry\", \"Label\": \"HX AP\", \"Value\": \"hxap\" } ] }, \"Type\": \"enum\" } }, { \"ObjectType\": \"workflow.PrimitiveDataType\", \"Label\": \"VMware Cluster\", \"Name\": \"vmwarecluster\" }, { \"ObjectType\": \"workflow.PrimitiveDataType\", \"Label\": \"HX Cluster\", \"Name\": \"hxcluster\" }, { \"ObjectType\": \"workflow.PrimitiveDataType\", \"Label\": \"Cluster Description\", \"Name\": \"clusterdescr\" } ], \"ParameterSet\": [ { \"Name\": \"rule-1\", \"Field\": \"clustertype\", \"Condition\": \"eq\", \"Value\": \"vmware\", \"ShowFields\": [ \"vmwarecluster\" ] }, { \"Name\": \"rule-2\", \"Field\": \"clustertype\", \"Condition\": \"eq\", \"Value\": \"hxap\", \"ShowFields\": [ \"hxcluster\" ] } ] } :::\nSupported Workflows for Storage Targets The following table lists workflows supported in the various storage targets available on Intersight:\nList of Storage Workflows Pure Storage NetApp Hitachi New Storage Host Y Y Y New Storage Host Group Y N N New VMFS Datastore Y Y Y New NAS Datastore N Y N Remove NFS Datastore N Y N Remove Storage Host Y Y Y Remove Storage Export Policy N Y N Remove Storage Host Group Y N N Remove VMFS Datastore Y Y N Update Storage Host Y Y Y Update NAS Datastore N Y N Update VMFS Datastore Y N N New Storage Interface N Y N New Storage Export Policy N Y N New Storage Virtual Machine N Y N ","categories":["ICO"],"description":"Intersight Cloud Orchestrator allows workflow designers to run commands over SSH by using the **Invoke SSH Commands** reusable task in the workflows.","excerpt":"Intersight Cloud Orchestrator allows workflow designers to run …","ref":"/docs/ico/executors/samplefile/","tags":["Executors"],"title":"Sample File"},{"body":"Cisco Intersight ICO Cisco Systems, Inc.\nContents\n[Reference a wrapper Chapter topic here 3](#_Refd24e202)\n[Workflow Designer 3](#_Refd24e205)\n[Task Designer 38](#_Refd24e4658)\nData Types 60\n[Executors – Invoke PowerShell Script 66](#_Refd24e10361)\n[Executors – Invoke Ansible Playbook - Embedded Task 97](#_Refd24e12594)\n[Executors – Invoke Ansible Playbook - Reusable Task 116](#_Refd24e14025)\n[Executors – Invoke SSH Commands - Embedded Task 125](#_Refd24e15533)\n[Executors – Invoke SSH Commands - Reusable Task 143](#_Refd24e17342)\n[Executors – Invoke Web API Request 153](#_Refd24e19406)\nUpgrading Connector Packs on UCS Director Instances 177\n[Backup and Restore for UCS Director in Intersight 179](#_Toc105371570)\nReference a wrapper Chapter topic here\nWorkflow Designer\nThe Workflow Designer helps you create new workflows (as well as tasks and data types) and also edit existing workflows to manage targets in Cisco Intersight.\nNote: To execute the new tasks for VMware vCenter networking operations, you should upgrade to Intersight Assist version 1.0.9-278.\nImportant: The Orchestration option is visible in the left panel only if you have installed the Intersight Premier license.\nOnly an Account Administrator or a user with the Workflow Designer privilege can use the Workflow Designer to create and edit workflows.\nThe Orchestration option is visible in the left panel only if you have installed the Intersight Premier license.\nOnly an Account Administrator or a user with the Workflow Designer privilege can use the Workflow Designer to create and edit workflows.\nTo launch the Workflow Designer, choose Orchestration \u003e Workflows. A dashboard displays the following details under these tabs, namely, My Workflows, Sample Workflows, and All Workflows:\nValidation Status\nLast Execution Status\nTop Workflows by Execution Count\nTop Workflow Categories\nNumber of System Defined Workflows\nTop Workflows by Targets\nUsing the dashboard, you can create, edit, clone, or delete a tab. To create your own custom view tab, click + and specify a name and then choose the required parameters that need to be displayed in the columns, tag columns, and widgets. You can rename the tabs if it does not have a Lock icon.\nBelow the dashboard is a tabular list of workflows displaying the following information:\nDisplay Name\nDescription\nSystem Defined\nDefault Version\nExecutions\nLast Execution Status\nValidation Status\nLast Update\nOrganization\nThe Actions column allows you to do the following actions:\nExecute—Executes the workflow.\nHistory—Displays workflow execution history.\nManage Versions—create and manage versions for workflows. See Managing Versions for Workflows later in this document.\nDelete—Delete a workflow.\nRetry—Retry a failed workflow.\nCreating a Workflow Workflow creation can be broken down into the following sequence of steps:\nDefining a workflow—you specify the display name, description, and other important attributes.\nDefining workflow inputs, workflow variables, and workflow outputs—you can specify which input parameters are mandatory for the workflow execution, define variable(s) for workflow, and the output(s) generated on successful execution.\nAdding workflow tasks—you can add one or more workflow tasks in the Workflow Designer that are needed for the workflow to carry out its function.\nValidate the workflow—you can validate a workflow to ensure that there are no errors in connecting task inputs and outputs.\nDefining a Workflow\nChoose Orchestration from the left navigation pane.\nChoose Create Workflow. The Create Workflow screen is categorized into the following areas to help you create a workflow:\nThe following table describes the options available to you while creating a workflow: Workflow Designer Area/Option\rDescription\rDetails\rGeneral Tab\rDisplays workflow details, and also inputs, variables, and outputs of the workflow.\rYou can add a user-friendly short name, reference name, description, and assign an organization to the workflow. You can also specify a version or set a tag to the workflow. In order to categorize your workflow, use the tag key Category and provide an appropriate category value. Use the following checkboxes to:\nSet as Default Version—Sets this version as the default version for the workflow.\nFailed/Terminated Actions—Sets the post execution settings for the workflow.\nEnable Retry—Execute the workflow from the point of a failure or retry the execution of the entire workflow. You can retry the execution of the workflow for up to two weeks after the last update to the workflow.\nEnable Auto Rollback—Rollback workflow will be initiated automatically when this option is enabled. You can select one of the following rollback conditions:\nOn Failure\nOn Cancel\nOn Failure or Cancel.\nEnable Debug Logs—Collects the workflow logs for each tasks. You can analyze and debug the workflow execution.\nWorkflow Inputs—You can click Add Workflow Input and add workflow inputs. Each input has a user-friendly display name, a reference name, description, restrictions, and data type. Also, you can set a default value and encrypt it. For more information, see Defining Workflow Inputs, Variables, and Outputs.\nWorkflow Variable—You can click Add Workflow Variable and add a workflow variable. Each workflow variable has a reference name, data type, and so on. Also, you can set a default value. For more information, see Defining Workflow Inputs, Variables, and Outputs.\nWorkflow Outputs—You can click Add Workflow Output and add workflow outputs. Each output has a user-friendly display name, a reference name, description, restrictions, and data type. Also, you can encrypt a value and map it to task output.\nDesigner Tab\rDisplays the design area where you synthesize your workflow.\rCategorized into the following areas to help you create a workflow:\nTools Area—lists all the tasks, workflows, and operations that are currently available in Intersight. You can drag and drop a task or a workflow to the canvas to create or edit the workflow. You can collapse or expand the Tools area. You can use the Search feature to find a specific task or workflow.\nDesign Area—where you can build your workflow. Drag and drop tasks and workflows from the Tools area to this area of the screen. This area includes the following options that you can use while creating the workflow:\nZoom in and Zoom out—Magnify or reduce the view of the workflow.\nAuto Align Workflow—Automatically align the workflow tasks in the design area.\nAuto Align Selected Workflow Entities—Align selected workflow entities in the design area.\nToggle Task Search—Search for a specific task within the workflow. This is useful when you have several tasks within the workflow.\nAuto Connect Selected Workflow Entity—Add the workflow entity in the design area. You can drag and drop a task in between the tasks. The possible locations where the selected task can be added is denoted with + icon.\nTask Properties Area—where you define the task properties, inputs, outputs, and variables. Click the Task in Designer Area, to view the Task Properties area.\nGeneral—Specify the general details for the task such as name, description, version, and so on.\nNote: The task name should be unique.\nUse the Enable Rollback option to enable or disable rollback for the selected task.:\nNote: The Enable Rollback option is visible only if the task is rollback capable.\nInputs—Specify the task input parameter value that are required to execute the task. You can specify the input as a static value, map it to a workflow input or task output, use transformation or advanced mapping, or map it to a workflow variable.\nOutputs—Displays the task outputs. Click Add Worfklow Output button to map the task output to the workflow output.\nVariables—Specify the workflow variables that can be used across tasks in the workflow. For more information, see Worfklow Variables.\nMapping Tab\rDisplays the relationship between the task inputs and the outputs of the selected workflow.\nInformation on workflow inputs and workflow outputs is also displayed.\nExpand and collapse the Task Inputs and Task Outputs pane.\rCode Tab\rDisplays the code view of the workflow definition\rRead-only view of the workflow. You can copy the code, use this as a sample to create a workflow using Intersight APIs.\rHistory Tab\rStatus of the executed/in-progress workflows. This tab appears after executing a workflow.\rView workflow execution history, retry or clone a previous execution. The system displays a maximum of 100 instances of the workflow execution. The workflow execution is populated for each version of the workflow.\nNote: When a workflow is successfully executed, the options for retrying the workflow are not displayed. You can retry a failed workflow only when the Enable Retry option is enabled in the General tab.\nExecute\rLaunches the Enter Workflow Inputs window.\rChoose the Organization and the Workflow instance name to execute the workflow.\nFor user-created workflows, the organization must match where it was created.\nSave Workflow\rValidates and saves the workflow.\rReview validation errors, if any, and rectify them.\rClose Designer\rCloses the Workflow Designer.\rCloses the Workflow Designer and displays the table view of available workflows.\rRequests\nRequests are closely related to workflows. You create requests by running workflows; a request is generated every time you execute a workflow in Cisco Intersight. A request is a process under the control of Cisco Intersight.\nYou can schedule a workflow for later execution, and Cisco Intersight stores details of completed requests. To view the detailed information of a request, choose a request. The following information is displayed in the Requests screen:\nStatus—Displays the status of a workflow. Request can have one of several states depending on its execution status:\nRunning\nBlocked (for example, awaiting an approval)\nCompleted\nFailed (a request can fail when one of its component tasks fails to execute properly)\nDetails—Displays the request details such as name, request ID, target name and type, source name and type, name of the user who has executed the request along with the start time and end time, and duration of the request.\nInputs—Displays the workflow input details\nOutputs—Displays the workflow output details\nExecution Flow—Enable Show Additional Details to view the logs, input, and output mapping details of the user-defined workflows. Displays the workflow execution history details similar to the details displayed in the History tab.\nDefining Workflow Inputs, Variables, and Outputs\nWorkflows can have any number of tasks, inputs, variables, and outputs.\nAny task or workflow input can be either mandatory or optional. A task or workflow cannot run without all of its mandatory inputs. You define whether an input is mandatory or optional when you create the task or workflow.\nAfter specifying the generic properties for a task or workflow, you define the input parameters and variables required for task or workflow execution. In addition, you can set workflow input Parameter Set or Progressive Disclosure rules. These rules control the availability of workflow inputs or filter the data based on the preceding selection during the workflow execution. The Task Designer uses the same parameters and information types as the workflow designer to validate the mappings of task input and output parameters when a task is used in a workflow along with other tasks. Task designer uses the same form as workflow designer to obtain the parameter and information type so as provide same user experience between workflow designer and task designer.\nChoose Orchestration from the left navigation pane and click Create Workflow.\nIn the General tab, click Add Workflow Input in the Workflow Inputs tab.\nIn the Add Workflow Input screen, enter the following details:\nDisplay Name—Enter user-friendly short name.\nReference Name\nDescription—Detailed description of the input\nValue Restrictions—Choose Required, Collection/Multiple, or can be left blank\nType—Select a data type. For example, String, Integer, Float, Boolean, Json, Enum, MoReference, Target Data Type, or a custom data type.\nThe fields displayed depend on the value you select for the Type\nfield.\nIf you select the data type as Enum, specify the following:\nEnum List—Label for the Enum value.\nWidget type.\nSet Default Value—Select the checkbox and select the corresponding default value.\nOverride—Allow the user to override the default value.\nIf you select the data type as String, specify the following:\nMinimum and Maximum Range\nRegex—Validates the regular expression when you select String in the Type field.\nSecure—Indicates that the values of these properties are encrypted and stored in Cisco Intersight.\nObject Selector—Enable to configure the Intersight managed object selectors. This attribute is available only when the primitive data is String.\nSpecify the Intersight API Reference and selector attributes to feed\nthe input from the table selection. Value will be passed according to the configuration set in the Value attribute.\nIf you select the data type as Integer or Float, specify the following:\nMinimum and Maximum Range\nSet Default Value—Select the checkbox and the corresponding default value.\nIf you select the data type as Target Data Type or MoReference, specify the following:\nIntersight API Reference—Enter the URL of the Intersight API configured with parameters.\nSelector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nIf you select the data type as Composite Data Type, you can specify the field mapping for the input field. With field mapping, you can pass the value of workflow input to a composite data field.\nTo pass the value from the parent composite data type to a child\ncomposite data type, you must specify the field mapping in the composite data type field. For more information, see Creating a Data Type.\nTo specify the field mapping, do the following:\nKey—The input field that you want to hide.\nValue Attribute—The value in a template style to be passed dynamically during the execution.\nIf the data type is Object Selector, Enum, or Boolean then the input\nis referenced as ${workflow.input.InputReferenceName}.\nIf the data type is MoReference or Target Data Type the input is\nreferenced as ${workflow.input.InputReferenceName.AttributeName}.\nThe InputReferenceName is the Reference Name given to the input\nfield and not the Display Name or Label.\nClick Add.\nRepeat this procedure to create multiple inputs.\nTo add a Parameter Set rule, click Add Rule \u003e Parameter Set.\nFor more information, see Workflow Workflow Input Parameter Set and Progressive Disclosure Rules.\nName—The name of the Parameter Set rule.\nIf Field—Select the input field and the properties that will be used to define the Parameter Set rule.\nThe inputs are referenced as InputName or InputName.Properties.\nNote: The properties are applicable only if the data type is MoRefefence or Target Data Type. For example, for a Target Data Type input field (DeviceRegistrations), you can specify Hypervisor Manager.IP Address.\nCondition—The condition for the rule. The condition can be Equal to, Not equal to, Contains, or Matches Pattern.\nValue—Select or enter the value. The Parameter Set rule uses this value along with the Condition specified to compare the value from the If Field.\nField to be shown—Select the input field(s) that should be made available when the Parameter Set rule condition is satisfied.\nClick Save.\nTo add a Progressive Disclosure rule, click Add Rule \u003e Progressive Disclosure. For more information, see Workflow Input Parameter Set and Progressive Disclosure Rules.\nTarget Field—The target input field on which the progressive disclosure is applied.\nAttribute —The inputs are referenced as AttributeName.ParameterName. For example, for an input field, Virtual Manager, you can specify the attribute name as RegisteredDevice.Moid or ConnectionStatus.\nCondition—The rule condition for the rule. The condition can be Equal to, Not equal to, or Contains.\nValue—The inputs are referenced as ${InputReferenceName.Attribute} or ${InputReferenceName.ParameterName}. For example, for a VM input field, you can specify the value as ${HypervisorManager.Moid} or ${Target.ConnectionStatus}.\nNote: For a String input field, if you have selected the Object Selector option then you need not specify the Attribute or Parameter value.\nIn the General tab, click Add Workflow Variables in the Workflow Variables tab. For more information, see Workflow Variables.\nIn the Add Workflow Variable screen, enter the following details:\nReference Name—Enter user-friendly short name.\nType—Select the data type. For example, String, Integer, Float, Boolean, Json, Enum, MoReference, or Target Data Type.\nThe fields displayed depend on the value you select for the Type\nfield.\nIf you select the data type as String, specify the following:\nObject Selector—Enable to configure the Intersight managed object selectors. The Object Selector field is optional.\nSpecify the Intersight API Reference and selector attributes to feed the input from the table selection. The value will be passed according to the configuration set in the Value attribute. If you select the data type as Enum, specify the following:\nEnum List—Label and value for the Enum list.\nWidget type—The widget type as Radio or none.\nIf you select the data type as Target Data Type or MoReference, specify the following:\nIntersight API Reference—Enter the URL of the Intersight API configured with parameters.\nSelector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nSelect the Initial Mapping To type and specify the corresponding variable value.\nClick Add.\nClick Workflow Outputs and click Add Workflow Output.\nChoose a parameter and click Add.\nClick Save.\nWorkflow Input Parameter Set and Progressive Disclosure Rules\nWhen you create a workflow, you can specify the inputs for the workflow execution. After you define the workflow inputs, you can set Parameter Set or Progressive Disclosure rules. These rules control the availability of workflow inputs or filter the data based on the preceding selection during the workflow execution.\nNote: You can define a Parameter Set or Progressive Disclosure rule only for a workflow that has more than two input fields with the supported data type.\nParameter Set Rule\nThe Parameter Set rules control the availability of specific parameters or inputs during the execution. After the first input is specified, the Parameter Set rule controls which subsequent input fields are made available during the workflow execution.\nExample: The following example shows how to create a Parameter Set rule for a workflow with three input fields. The workflow input fields are:\nEnum—Type is Enum and Enum list is VM and HX.\nInput1—Type is String.\nInput2—Type is String.\nYou can create two workflow input Parameter Set rules. During the workflow execution when the Enum value is VM only Input1 field is made available. Alternately, when the Enum value is HX, only Input2 is made available. The details of the Parameter Set rules are:\nRule1—If Field is Enum, Condition is Equal to, Value is VM, and Fields to be shown is Input1.\nRule2—If Field is Enum, Condition is Equal to, Value is HX, and Fields to be shown is Input2.\nThe following is a sample of the API request.\n“InputParameterSet”: [\n{\n“Condition”: “eq”,\n“ControlParameter”: “Enum”,\n“EnableParameters”: [\n“Input1”\n],\n“Name”: “Rule1”,\n“ObjectType”: “workflow.ParameterSet”,\n“Value”: “VM”\n},\n{\n“Condition”: “eq”,\n“ControlParameter”: “Enum”,\n“EnableParameters”: [\n“Input2”\n],\n“Name”: “Rule2”,\n“ObjectType”: “workflow.ParameterSet”,\n“Value”: “HX”\n},\nThe supported data types for Parameter Set rules are:\nBoolean\nEnum\nString Object Selector\nMoReference\nTarget\nProgressive Disclosure Rule\nThe Progressive Disclosure rules filter the data available in an input field based on the preceding selection during a workflow execution. The first input field is populated with broadest options. The subsequent input fields are populated with options based on the previous selection.\nExample 1: The following example shows how to create a Progressive Disclosure rule for a workflow with two input fields. Both these input fields are MoReference data type. The workflow input fields are:\nField1—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nField2—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nYou can create a Progressive Disclosure rule so that during the workflow execution, the data is filtered for Field2 fields based on value in the Field1 field. The details of the Progressive Disclosure rule are:\nField2 Rule—Target Field is Field2, Attribute is ConnectionStatus, Condition is Equal to, and Value is ${Field1.ConnectionStatus}. Example 2:: The following example shows how to create a Progressive Disclosure rule for a workflow with two input fields. Both these input fields are composite custom data type. The workflow input fields are:\nInput1—Composite data type with two fields (Field1 and Field2)\nField1—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nField2—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nInput2—Composite data type with two fields (Field3 and Field4)\nField3—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nField4—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nYou can create two Progressive Disclosure rules. During the workflow execution, the data is filtered for Input2 fields based on value in the Input1 fields. The details of the two Progressive Disclosure rules are:\nInput2.Field3 Rule—Target Field is Input2.Field3, Attribute is ConnectionStatus, Condition is Equal to, and Value is ${Input1.Field1.ConnectionStatus}.\nInput2.Field4 Rule—Target Field is Input2.Field4, Attribute is ConnectionStatus, Condition is Equal to, and Value is ${Input1.Field2.ConnectionStatus}.\nThe following is a sample of the API request.\n“UiInputFilters”: [\n{\n“Filters”: [\n“ConnectionStatus eq ‘${Input1.Field1.ConnectionStatus}’”\n],\n“Name”: “Input2.Field3”,\n“ObjectType”: “workflow.UiInputFilter”,\n“UserHelpMessage”: \"\"\n},\n{\n“Filters”: [\n“ConnectionStatus eq ‘${Input1.Field2.ConnectionStatus}’”\n],\n“Name”: “Input2.Field4”,\n“ObjectType”: “workflow.UiInputFilter”,\n“UserHelpMessage”: \"\"\n}\n]\nThe supported data types for the Progressive Disclosure rules are:\nMoReference\nTarget\nString Object Selector\nWorkflow Variables\nWorkflow variables are similar to local variables within functions of a programming language. You define variables for workflows in Workflow Designer, and the scope of the workflow variables lies within the defined workflow. In a workflow, all tasks are bound to the scope of the workflow and have access to the workflow variables that are defined for the workflow. You can use the workflow variable to do the following:\nSimplify complex workflows which have multiple branches based on the conditional operator. Save the output of tasks that get executed in different branches of the workflow into a single variable. This variable can then be mapped in the downstream tasks irrespective of the branch from which it was taken.\nEvaluate the workflow input using a complex expression, save the result as a variable, and reuse the variable in the subsequent tasks.\nTransform the output of a task with the help of template functions and map the value into a workflow variable. The variables can then be used in multiple mappings without having to redo the transformation in every mapping.\nTo define the workflow variable and specify the corresponding value, you can do the following:\nIn the General tab, click Add Workflow Variable and define the variable properties.\nIn the Designer tab, click the task, and then click the Variables tab.\nTo add a new workflow variable, click Add Workflow Variable and define the variable properties.\nTo add or edit a mapping to an existing variable, click Edit Mapping and specify the new value.\nNote: To view events for a workflow variable, click the View icon.\nThe workflow variables can be assigned one of the following values:\nStatic value—Either the default value of the variable or the value specified in the workflow tasks.\nDirect mapping —Mapped to a workflow input, task output, or another workflow variable.\nAdvanced or Transformational mapping—Evaluate a complex expression and save the result in a variable.\nAfter you define the workflow variable, you can map the workflow variable to task input, workflow output, or as an input for another variable. For more information, see Input, Variable, and Output Mapping.\nFollowing is a simple example which explains static mapping for a workflow variable. A workflow has two tasks Task1 and Task2 and a workflow variable Variable1 is defined with a default value as 100. For Task1, in the Variable tab for the task, you can specify a static mapping for the workflow variable value as 90. Similarly, for Task2, in the Variable tab for the task, you can specify the workflow variable value as 80 by mapping the Variable1 value.\nWhen you execute the workflow, the start value of Variable1 is the default value 100 . After Task1 is executed, the value of Variable1 is set to 90 based on the static value that is mapped for the task. After Task2 is executed, the value of Variable1 is set to 80 based on the static value that is mapped for the task.\nInput, Variable, and Output Mapping\nWorkflows inputs, variables, and task outputs can be used for mapping and they can be used as direct, transformed, or advanced mapping. The syntax to refer to these will depend on the type of mapping.\nWorkflow inputs are referenced as ${workflow.input.InputName} where InputName is the Reference Name given to the workflow input and not the Display Name or Label.\nWorkflow variables are referenced as ${workflow.variable.InputName} , where InputName is the Reference Name for the workflow variable.\nTask outputs are referenced as ${TaskName.output.OutputName} where TaskName is the Instance Name for the task and not the Display Name or Label and OutputName is the Reference Name for the task output.\nTo specify an input mapping, select a task and click Edit against a task input parameter.\nTo specify a workflow variable mapping, select a task and click Map against a workflow variable parameter.\nFollowing are the available options:\nStatic Value—Enter a value that is assigned to the task input or workflow variable field.\nDirect Mapping—Map an existing input, workflow variable, or task output to the task input.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task’s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template. You can then preview the template and test the transformation with sample values.\nNote: Transformed mapping is only supported for task inputs of primitive data types, such as string, integer, boolean, and float.\nAdvanced Mapping—Map a Golang template to the task input or workflow variable. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string. FindAllString(s, regex string) ([]string, error)\nExample: {{(FindAllString .global.task.input.NumberString \\\"([0-9]+)\\\")}} returns array [“123”, “456”] for input string “123 some text 456”.\nFor example, Atoi function converts the given number in string format to integer type.\nAtoi(s string) (int, error)\nExample: {{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”\nOperations - Conditional Task\nOperations can be used to control the execution path of the workflows. Orchestrator supports Condition tasks which can be used to control the tasks that need to be executed.\nTasks to Control Execution Flow of Workflows\nThe Conditional Task under Operations allows you to perform programmatic decisional expressions in a conditional task during a workflow execution. The conditional expression can be simple expression or a combined compound expression.\nNote: Only JSON style template is supported with conditional expressions.\nConditional expressions support the following operators:\nComparison operators such as === (Equal to), != (Not equal to), \u003e (Greater than), \u003c (Less than), \u003e= (Greater than or equal to), \u003c= (Less than or equal to)\nArithmetic operators such as =, -, * (Multiplication), / (division), % (Modulo), ** (Logical AND)\nLogical operators such as \u0026\u0026 (Logical AND), || (Logical OR), ! ((Logical NOT)\nTernary operator such as condition ? val1 : val2\nThe syntax for workflow input is ${workflow.input.\u003cworkflow input ReferenceName\u003e} and the syntax for task output is ${\u003cTask Name\u003e.output.\u003cTask Output Name\u003e}. You can get the values for the task name and task output name from the Code view.\nFollowing is an example for conditional expressions:\nif ( (${workflow.input.name} != ’test’ || ${workflow.input.name} != ’test123’)) ‘bad input’; else if((${workflow.input.id} != null \u0026\u0026 ${workflow.input.id} % 2 == 0)) ’even’; else ‘odd’;\nif ( (${workflow.input.name} != ’test123’ || ${workflow.input.name} != ’test123’)) ‘bad input’; else if((${workflow.input.id} != null \u0026\u0026 ${workflow.input.id} % 2 == 0)) ’even’; else ‘odd’;\nif ( (${workflow.input.name}.length === 12 || ${workflow.input.name} !== ‘test’ )) ’even’; else ‘odd’; \u003c\u003c fgfgfgfgfgfg , even\nif ( (${workflow.input.name}.length === 12 || ${workflow.input.name} !== ‘test’ )) ’even’; else ‘odd’; \u003c\u003c test , odd\nif ( (${workflow.input.name} != null \u0026\u0026 ‘decisionTest’.indexOf(${workflow.input.name}) != -1 )) ’even’; else ‘odd’;\nif ( (${workflow.input.name}.toLowerCase() == ‘testing’)) ’even’; else ‘odd’; \u003c\u003c used integers as input name to try odd path\nif ( (${workflow.input.name}.search(/\\s/g) != -1)) ’even’; else ‘odd’;\nif ( (${workflow.input.name}.match(/\\s/g) != -1)) ’even’; else ‘odd’;\nif ( (${workflow.input.name}.startsWith(‘Not’,0) || ${workflow.input.name}.endsWith(’.’))) ’even’; else ‘odd’;\nif ( (${workflow.input.name}.length \u003e= 3 \u0026\u0026 ${workflow.input.name}.length \u003c= 20)) ’even’; else ‘odd’;\nif ( (${workflow.input.name}. === undefined)) ‘odd’; else ‘even’;\nif ( (${workflow.input.name}.search(‘Failed’) != -1)) ’even’; else ‘odd’;\nif ( (${workflow.input.name}.toLowerCase() != ’’ || ${workflow.input.name}.toUpperCase() != ‘Not-assigned’ )) ’even’; else ‘odd’;\nThe expression is executed during runtime and depending on the result, the respective path is chosen. If none of the conditions match, the default path is chosen.\nFor example, you can have a conditional task that follows a path of execution depending on the profile state. You can create a condition in a workflow to check the state of the profile. If the profile is in the Assigned state then you can deploy the profile, else delete the profile.\nAfter choosing the conditional task, use the Conditions tab to specify expressions in the Condition field of the tab. The values for the condition are specified in the Value field of the Cases area. Expressions are validated for syntax accuracy when workflow is saved.\nThe following examples return the value of the condition.\n${workflow.input.Names}.length\n${workflow.input.ArrayOfIds}.length (here ArrayOfIds represent an array)\n${workflow.input.Names}.toLowerCase()\n${workflow.input.Names}.toUpperCase()\nThe following examples return the boolean value ’true’ or ‘false’.\n${workflow.input.Names}.startsWith(‘Te’)\n${workflow.input.Names}.endsWith(‘st’)\n${workflow.input.Names} == null\n${workflow.input.Names} != null\nIn addition to workflow, task output can also be used. Here a boolean value is used in a ternary operation. If True, branch1 executes, otherwise branch2 executes ${task1.output.IsValid} ? branch1 : branch2.\nOperations - Parallel Loop Task\nOperations can be used to control the execution path of the workflows. Orchestrator supports the Parallel Loop operation task that can be used to run a single task or sub-workflow, iteratively, based on a specified count input.\nThe iteration count can either be a static value that is specified when the workflow is created or a dynamic value that is derived from a workflow input or task output.\nWhen the task is executed, the count ‘N’ is determined, and the tasks or sub-workflows are scheduled for execution in parallel. When all the instances of the task or sub-workflow reach a final state, the parallel loop operation completes, and the workflow execution moves on to the next task.\nNote: If one of the tasks or sub-workflows fails then the entire parallel loop task fails.\nThe dynamic values for the count must be specified as a template function. For example, if a loop must run for a count which matches the length of a workflow input called StringArray, then the count must be specified using a template function {{ len .global.workflow.input.StringArray }}.\nIn addition, you can use the keyword .iteration in a workflow template input to control the inputs that feed into the task. For example, the task within the loop needs to take one value from the workflow input StringArray, then the task string input can be mapped to the template HostGroupName{{.iteration}} during the workflow creation.\nUse the Parallel Loop task from the Operations section in the Intersight Orchestrator Workflow Designer UI to build the workflow.\nTo add a task or a sub-workflow to a Parallel Loop task, you must drag and drop the single task or sub-workflow inside the Parallel Loop task in the Workflow Designer UI.\nThe following table explains the Parallel Loop task input properties:\nProperty\rDescription\rCount\rThe iteration count value for the parallel loop. The count can either be a static value defined as a constant or a dynamic value defined as an expression that is evaluated to an integer value at execution time.\nThe dynamic values for the count must be specified as a template function. For example, if a loop must run for a count which matches the length of a workflow input called StringArray, then the count must be specified using a template function {{ len .global.workflow.input.StringArray }}.\nThe count must be less than or equal to 100.\nExample: Create a workflow with the Parallel Loop task to create multiple storage host groups\nThe following example workflow has two tasks—Parallel Loop and New Storage Host Group. The first task runs the Parallel Loop task. In this task, the Count input is a static value and is set to 2. The second task, New Storage Host Group, creates storage host groups with the host group name as a workflow input.\nWhen the workflow is executed, the count ‘N’ is determined as 2, and two create storage host group tasks are executed in parallel. When all the instances of the task reach a final state, the parallel loop completes.\nThe workflow input field required for this example is as follows:\nProperty\rDescription\rStorage Device\rReference Name—StorageDevice\nType—Target Data Type\nIntersight API Reference—/api/v1/storage/PureArrays\nSelector Attribute—Name\nSelector Attribute—Vendor\nThe following table lists the properties for the Parallel Loop task:\nProperty\rDescription\rCount\rCount—2\rThe following table lists the properties for the New Storage Host Group task:\nProperty\rDescription\rStorage Device\rWorkflow Input—${workflow.input.StorageDevice}\rHost Group\rCustom Value—HostGroupName{{.iteration}}\nThe keyword .iteration in a workflow template input to control the inputs that feed into the task.\nAfter you execute the workflow, you would see the following output:\n├── New Storage Host Group\n├── …\n│ ├── Inputs\n│ │ └── Host Group: HostGroupName0\n│ │ └── Storage Device:{ 2 }\n│ │ ├── Moid: 619efa1d6e64612d317a248a\n│ │ └── ObjectType: storage.PureArray\n│ └── Outputs\n│ ├── ConfigResults:[ 1 ]\n│ │ └── Object: { 4 }\n│ │ ├── ConfigResCtx: { 1 }\n│ │ │ └── EntityData: { 1 }\n│ │ │ └── task: workflow.ApiTask\n│ │ ├── Message: Host group created successfully.\n│ │ ├── State: Ok\n│ │ └── Type: Config\n│ └── Host Group: HostGroupName0\n├── New Storage Host Group\n└── …\n├── Inputs\n│ └── Host Group: HostGroupName1\n│ └── Storage Device:{ 2 }\n│ ├── Moid: 619efa1d6e64612d317a248a\n│ └── ObjectType: storage.PureArray\n└── Outputs\n├── ConfigResults:[ 1 ]\n│ └── Object: { 4 }\n│ ├── ConfigResCtx: { 1 }\n│ │ └── EntityData: { 1 }\n│ │ └── task: workflow.ApiTask\n│ ├── Message: Host group created successfully.\n│ ├── State: Ok\n│ └── Type: Config\n└── Host Group: HostGroupName1\nThe following is a sample code view:\n{\n“Catalog”: {\n“Moid”: “5e6109bc696f6e2d31f856e5”,\n“ObjectType”: “workflow.Catalog”,\n“link”: “https://www.intersightcom/api/v1/workflow/Catalogs/5e6109bc696f6e2d31f856e5\"\n},\n“DefaultVersion”: true,\n“Description”: “”,\n“InputDefinition”: [\n{\n“CustomDataTypeProperties”: {\n“CatalogMoid”: “”,\n“CustomDataTypeId”: “”,\n“CustomDataTypeName”: “”,\n“ObjectType”: “workflow.CustomDataProperty”\n},\n“Default”: {\n“IsValueSet”: false,\n“ObjectType”: “workflow.DefaultValue”,\n“Override”: false,\n“Value”: null\n},\n“Description”: “”,\n“DisplayMeta”: {\n“InventorySelector”: true,\n“ObjectType”: “workflow.DisplayMeta”,\n“WidgetType”: “None”\n},\n“InputParameters”: null,\n“IsArray”: false,\n“Label”: “Storage Device”,\n“Max”: 0,\n“Min”: 0,\n“Name”: “StorageDevice”,\n“ObjectType”: “workflow.TargetDataType”,\n“Properties”: [\n{\n“ConnectorAttribute”: “RegisteredDevice.Moid”,\n“ConstraintAttributes”: [\n“ObjectType”\n],\n“DisplayAttributes”: [\n“Name”,\n“Vendor”\n],\n“ObjectType”: “workflow.TargetProperty”,\n“Selector”: “/api/v1/storage/PureArrays”,\n“SelectorProperty”: {\n“Body”: null,\n“Method”: “GET”,\n“ObjectType”: “workflow.SelectorProperty”\n},\n“SupportedObjects”: [\n“storage.PureArray”\n]\n}\n],\n“Required”: true\n}\n],\n“InputParameterSet”: [],\n“Label”: “Parallel Loop”,\n“Name”: “ParallelLoop”,\n“OutputDefinition”: [],\n“OutputParameters”: null,\n“Properties”: {\n“Cloneable”: true,\n“EnableDebug”: false,\n“ExternalMeta”: true,\n“ObjectType”: “workflow.WorkflowProperties”,\n“Retryable”: false,\n“SupportStatus”: “Supported”\n},\n“Tags”: [],\n“Tasks”: [\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “StartTask”,\n“NextTask”: “parallelLoop1”,\n“ObjectType”: “workflow.StartTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “SuccessEndTask”,\n“ObjectType”: “workflow.SuccessEndTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “FailureEndTask”,\n“ObjectType”: “workflow.FailureEndTask”\n},\n{\n“Count”: “2”,\n“Description”: “A Parallel Loop is a control task that runs one task or one sub-workflow multiple times based on a specified count. The count can be a static value that is specified during design time or a dynamic value that is derived from workflow inputs or task outputs. When the loop is executed, the count ‘N’ is determined, N tasks or sub-workflows are scheduled for execution in parallel. When all N instances of the task or sub-workflow reach a final state the parallel loop will complete and workflow execution will move on to the next task. If any one of the tasks or sub-workflows fails, then the entire loop will fail. Dynamic values for count must be specified as a template. For example, if a loop must run for a count which matches the length of a workflow input called StringArray, then the count must be specified using a template ‘{{ len .global.workflow.input.StringArray }}’. The iteration of the loop is available using the keyword ‘.iteration’ and it can be used to control inputs that feed into the task. For example, the task inside the loop needs to take one value from the workflow input StringArray, then the task string input can be mapped to the template ‘{{ index .global.workflow.input.StringArray .iteration}}’ during design.”,\n“Label”: “Parallel Loop”,\n“LoopStartTask”: “NewStorageHostGroup1”,\n“Name”: “parallelLoop1”,\n“NumberOfBatches”: 1,\n“ObjectType”: “workflow.LoopTask”,\n“OnSuccess”: “SuccessEndTask”,\n“Parallel”: true\n},\n{\n“CatalogMoid”: “5c2fc884696f6e2d316c5d59”,\n“Description”: “Create a host group with host group name as input. On successful execution, the newly created host group name is generated as output.”,\n“InputParameters”: {\n“HostGroupName”: “HostGroupName{{.iteration}}”,\n“StorageDevice”: “${workflow.input.StorageDevice}”\n},\n“Label”: “New Storage Host Group”,\n“Name”: “NewStorageHostGroup1”,\n“ObjectType”: “workflow.WorkerTask”,\n“OnFailure”: “”,\n“OnSuccess”: “”,\n“RollbackDisabled”: false,\n“TaskDefinitionId”: “5f7ed8a2696f6e2d30eb388b”,\n“TaskDefinitionName”: “NewStorageHostGroup”,\n“UseDefault”: false,\n“Version”: 2\n}\n],\n“UiInputFilters”: [],\n“UiRenderingData”: {\n“Positions”: [\n{\n“Name”: “StartTask”,\n“X”: 269.5,\n“Y”: 45.5\n},\n{\n“Name”: “SuccessEndTask”,\n“X”: 269.5,\n“Y”: 303\n},\n{\n“Name”: “FailureEndTask”,\n“X”: 412.5,\n“Y”: 303\n},\n{\n“Name”: “parallelLoop1”,\n“X”: 149.01800537109375,\n“Y”: 116.75314331054688\n},\n{\n“Name”: “NewStorageHostGroup1”,\n“X”: 185,\n“Y”: 177\n}\n]\n},\n“Version”: 1,\n“WorkflowMetadata”: null\n}\nOperations - Serial Loop Task\nOperations can be used to control the execution path of the workflows. Orchestrator supports the Serial Loop operation task that is used to run one or more tasks iteratively, based on a specified count input or a condition.\nIn a Serial Loop task:\nyou can execute one or more tasks within a loop, iteratively, based on a specified count input or condition.\nthe tasks within the loop execute in succession to complete one iteration, and then move on to the next iteration.\nFor example, consider a Serial Loop task that comprises two tasks - Task A and Task B, and a static Iteration Count of 4. When the Serial Loop task is executed, Task A and Task B are executed in succession. After the first iteration is completed, the second iteration begins. This cycle repeats until the iteration count reaches 4.\nNote: The Serial Loop task does not support sub-workflow tasks, conditional tasks, forks or joins and nested loops.\nUse the Serial Loop task from the Operations section in the Intersight Orchestrator Workflow Designer UI to build the workflow. To add tasks to a Serial Loop task, you must drag and drop the tasks inside the Serial Loop task in the Workflow Designer UI.\nThe following table explains the Serial Loop task input properties:\nProperty\rDescription\rIteration Count\rThe iteration count value for the serial loop.\nIteration Count is specified in Loop Mode and the tasks are scheduled for execution in a serial loop. When the instance of the loop reaches the final iteration count, the serial loop operation ends, and the workflow moves on to the next task.\nThe count can either be a static value defined as a constant or a dynamic value defined as an expression that is evaluated to an integer value at execution time. The dynamic values for the count must be specified as a Golang template function.\nExample of a static Iteration Count Value:\nIteration Count Value—3\nThe loop runs for 3 iterations.\nExample for a dynamic Iteration Count Value:\nIteration Count Value—{{ len .global.workflow.input.StringArray }}\nIf a loop must run for a count which matches the length of a workflow input called StringArray you must specify the count using a template function.\nNote: The count must be less than or equal to 100.\nCondition\rThe condition definition for the serial loop execution.\nWhen Condition is selected in Loop Mode, the tasks are scheduled for execution every time the condition holds true. The condition is validated after every iteration. When the instance of the serial loop task does not satisfy the condition anymore, the serial loop operation ends, and the workflow execution moves on to the next task.\nThe condition statement is a simple JavaScript Boolean expression. If it returns a True value, the serial loop executes, or else, the loop terminates.\nFor example, when the condition specified in Loop Mode is:\nif (${InvokeSshCommands1.output.ExtractedParameters.userCreatedState} == \"present\") { true; } else { false; }\nIn this case, the serial loop runs whenever the task output value of (${InvokeSshCommands1.output.ExtractedParameters.userCreatedState} is \"present\" and the loop terminates when the task output is any value other than \"present\".\nThe following are few examples of input values that use JavaScript conditional expressions:\nStatic Value— You can specify a static value within the conditional expression. The serial loop runs until the iteration reaches the defined count.\nNote: Use the expression $.\u003cSerialLoopTaskName\u003e['iteration'] in the conditional expression when the condition is based on comparison of iteration count.\nif ($.serialLoop1['iteration'] \u003c 3) { true; } else { false; }\nIn the above example,\nthe static value defined within the conditional expression is 3.\n$.\u003cSerialLoopTaskName\u003e['iteration'] fetches the running iteration count of the serial loop during execution.\nserialLoop1 is the Serial Loop task name.\nWorkflow Input— The serial loop takes a workflow input, evaluates the condition, and runs until the iteration reaches the count derived from the workflow input. In the given example, loopcount is the workflow input.\nif ($.serialLoop1['iteration'] \u003c ${workflow.input.loopcount}) { true; } else { false; }\nTask Output as an Input— The serial loop takes a task output, evaluates the condition, and runs until the iteration reaches the count derived from the task output. In the given example, countis the task output.\nif ($.serialLoop1['iteration'] \u003c ${taskA.output.count}) { true; } else { false; }\nNote: A maximum of 100 iterations are allowed to prevent infinite looping.\nExample: Create a workflow using Iteration Count in a serial loop task to create storage hosts and assign the host to a newly created host group\nThe following workflow example consists of a task called New Storage Host Group, present outside the serial loop, and two tasks — New Storage Host and Add Host to Storage Host Group, embedded within the serial loop. The serial loop mode is Iteration Count.\nWhen the workflow is executed, the New Storage Host Group task first creates a new storage host group. Then, the New Storage Host and the Add Host to Storage Host Group tasks are implemented in succession within the serial loop. At the end of the first iteration, the newly created storage host is added to the new storage host group, and then, the second iteration begins. The loop repeats until the iteration count, which is the total number of storage hosts created, reaches the specified count.\nThe Workflow Input fields required for this example are as follows:\nProperty\rDescription\rHost Group\rReference Name—Hostgroup\nType—String\nMin—1\nMax—63\nRegex—^[a-zA-Z0-9]+([a-zA-Z0-9-]*[a-zA-Z0-9])*$\nObject Selector— Enable\nIntersight API Reference—/api/v1/search/SearchItems?$filter=(IndexMotypes eq storage.BaseHostGroup)\u0026$orderby=Name\nSelector Attribute—Name\nValue Attribute—Name\nThe following table lists the properties of the Serial Loop task:\nProperty\rDescription\rLoop Mode\rIteration Count\rIteration Count Value\r5\nThis is a static value.\nThe following table lists the input properties of the New Storage Host task:\nProperty\rDescription\rStorage Device\rStatic Value\nSelect the Storage Device.\nHost\rStatic Value—serialLoopHost{{.iteration}}\nThe keyword .iteration is used to append the iteration count, starting from 0, to the input serialLoopHost.\nThe new storage hosts are created in order, for example: serialLoopHost0, serialLoopHost1, serialLoopHost2, serialLoopHost3 and serialLoopHost4. The loop stops when the count reaches 5.\nStorage Vendor Host Identifier\rStatic Value—Pure FlashArray\rStorage Vendor Virtual Machine\rStatic Value—Pure FlashArray\rStorage Vendor Host Options\rStatic Value—Pure FlashArray\rThe following table lists the properties of the Add Host to Storage Host Group task:\nProperty\rDescription\rStorage Device\rStatic Value\nSelect the Storage Device.\nHost Group\rAdvanced Mapping—${NewStorageHostGroup1.output.HostGroupName}\nHostGroupName is the task output of the previous task outside the serial loop, which in this case is the New Storage Host Group task.\nHost Name\rAdvanced Mapping—${NewStorageHost1.output.HostName}\nHostName is the task output of the previous task inside the serial loop.\nPure FlashArray\nExample: Create a workflow using condition loop mode in a serial loop task to run Ansible Playbook on the hosts\nThe following workflow example consists of a Serial Loop task with two embedded tasks- Invoke Ansible Playbook and Invoke SSH Commands. The serial loop mode is Condition.\nWhen the serial loop task is executed , the Ansible Playbook and Invoke SSH Commands tasks run in succession within the loop.\nIn this example, the workflow requires two Ansible Playbooks- one to create a user and the other to delete a user. The Invoke Ansible Playbook task iterates across the playbooks, and a log file is generated. The Invoke SSH Commands task prints the log file. The log may show that the user is present or absent based on the Playbook that is run.\nAt the end of each iteration, the output value parsed as userCreatedState which is present in the log file is evaluated. The serial loop runs another iteration whenever a user is present and there is a “present” value in the capture entity called userCreatedState. The loop exits when there is no value or any value other than “present” in userCreatedState.\nFor example, when the delete user playbook is run, the output value in userCreatedState may be “absent”. In such a case, the condition is not met, and the loop exits.\nThe Workflow Input fields required for this example are as follows:\nProperty\rDescription\rplaybookPaths\rReference Name—playbookPaths\nType—String\nValue Restrictions—Collection/Multiple\nMin—0\nMax—100\nThe following table lists the properties for the Serial Loop task:\nProperty\rDescription\rLoop Mode\rCondition\rCondition Value\rif\n(${InvokeSshCommands1.output.ExtractedParameters.userCreatedState} == \"present\") { true; } else { false; }\nIn this case, the serial loop runs whenever a user is present and there is a value \"present\" in the capture entity called userCreatedState. The loop exits when there is no value or any value other than \"present\" in userCreatedState.\nThe following table lists the input properties for the Invoke Ansible Playbook task:\nProperty\rDescription\rAnsible Controller\rStatic Value\rPlaybook Path\rAdvanced Mapping—{{index .global.workflow.input.playbookPaths .iteration}}\nA Golang expression is used here which iterates over the defined workflow input playbookPaths. In this example, playbookPaths is an array of Ansible playbook paths.\nHost Inventory\rStatic Value\nExample: /home/qali/vspancha/playbooks/33hosts\nThe following table lists the input properties for the Invoke SSH Command task:\nProperty\rDescription\rExternal Target\rStatic Value\rSSH Command\rStatic Value—cat {{.global.InvokeAnsiblePlaybook1.output.ExecutionLogPath}}\nThe SSH command prints the output. ExecutionLogPath is the output of the task InvokeAnsiblePlaybook1 present within the serial loop.\nShow Command Output\rStatic Value\ntrue\nResponse Parser\rStatic Value\nRegular Expression—The regular expression of the line in the command response where the capture value, which is userCreatedState in this example, resides.\\\"state\\\":\\s\\\"$\u003cuserCreatedState\u003e\\\"\nName—Name of the output under which the captured value is saved, userCreatedState.\nType—String\nManaging the Lifecycle of a Workflow\nWorkflow management consists of organizing, creating, updating, and deletion of workflows. The following table describes the set of actions that you can perform with workflows in Cisco Intersight.\nActions\rDescription\rView Workflows\rChoosing Orchestration from the left navigation pane will display all workflows in a tabular format. You can view information such as the workflow name and description, the number of versions available, the number of times the workflow has been executed, the last execution status, validation information and the last update time and date.\rCreate a New Workflow\rChoose Orchestration from the left navigation pane and click Create Workflow. This option opens up the Workflow Designer, using which you can create a new workflow.\rCreate a Version for a Workflow\rYou can create multiple versions for a workflow. In addition, you can set a specific version of the workflow as the default version for the workflow. See Managing Versions for Workflows.\rDelete a Workflow\rFrom the tabular list of workflows, you can select a workflow and click Delete. This will remove the workflow and all versions of the workflow.\nYou cannot delete a workflow when :\nworkflow is used as sub-workflow task in another workflow.\nworkflow is in running state.\nExecute a Workflow\rSelect a workflow from the tabular list of workflows and choose Execute. Alternatively, you can click the workflow name, and then choose Execute in the Workflow Designer.\nImportant: Workflow execution includes privilege-based validation for tasks. With the introduction of privilege-based validation for virtualization, compute and storage tasks, a user must have all the required privileges to execute all the domain tasks within a workflow. For example, a user can successfully execute a workflow that includes storage and virtualization tasks only if the user has both Storage and Virtualization Administrator privileges. In the absence of either one of these privileges, the Execute button will not be displayed and the user cannot execute the workflow.\nHowever, an Account Administrator can execute all workflow.\nWhile configuring the properties of a workflow, if you selected the Enable Retry option, then in the event of a workflow failure, you can either choose to execute the workflow again from the point of failure, or you can execute the entire workflow again.\nClone a Workflow\rFrom the tabular list of workflows, you can select a workflow and click Clone. This will clone the selected workflow.\rSave a Workflow as\rFrom the tabular list of workflows, you can choose a workflow and click. By default, the workflow details are displayed in the Designer tab. You can choose Save As option from the Action drop-down list to clone or create a new version of the existing workflow.\nYou can also perform this operation in the General tab.\nIn the Save As screen, you can choose one of the following:\nNew Version—Specify a new version and related description. Click Save.\nThis option is not available for a system generated workflow.\nClone—Specify user-friendly short name, reference name, description, and tag key. Click Save. For more information, see Cloning a Workflow.\nCloning a Workflow\nYou can clone a workflow. The cloned workflow is identical to the original workflow. You can edit the new workflow immediately. You might do this, for example, to create a workflow that is similar to the source workflow that can be edited based on your requirements. The new workflow has a new, separate version history.\nTo clone a workflow, complete the following steps:\nChoose Orchestration from the left navigation pane.\nFrom the tabular list of workflows, select a workflow and choose Clone.\nIn the Clone Workflow screen, edit the user-friendly short name, reference name, description, and organization details. The organization mappings are displayed only for pre-canned workflows and not for the custom workflows.\nCheck the Open Clone in Editor check box if you want to open the cloned workflow in the workflow designer and edit the details.\nNote: Open Clone in Editor check box is not displayed when you clone a workflow using the Save As option.\nClick Clone. Managing Versions for Workflows\nCisco Intersight allows you to create and manage versions for workflows. In addition to creating versions, you can also set a specific version as the default version for the workflow. You can create a version of a workflow and execute it only if you are one of the following users:\nAccount Administrator\nUser with Workflow Designer privileges\nRead-Only users can only view versions of a workflow. They cannot create, edit, execute or delete versions. Users with Storage Administrator and Virtualization Administrator privileges can only view and execute specific versions of a workflow.\nTo create a version for a workflow, complete the following steps:\nChoose Orchestration from the left navigation pane.\nFrom the tabular list of workflows, select a workflow and choose Manage Versions.\nIn the Manage Versions screen, you can perform the following tasks:\nCreate a new version for the workflow\nExecute a specific version of the workflow\nDelete a specific version. You cannot directly delete the default version of a workflow. To delete the default version, perform the following:\nMake another version the default.\nChange the workflow version to be deleted as non-default.\nDelete the workflow version that was changes as non-default.\nSet a specific version of the workflow as the default version\nChoose Create a New Version and enter the following details: Source Version—Choose a specific version that will form the source for the new version that you are creating.\nVersion—Specify a version number for the workflow.\nDescription—Enter a description for the version so that you can identify it.\nSet as Default Version—Check this check box to set this new version as the default version for the workflow.\nClick Create. After creating a version for a workflow, clicking on the version number on the Manage Versions screen opens the workflow in Workflow Designer. Note: Deleting a workflow will delete all versions created for the workflow.\nExporting a Workflow\nIntersight Cloud Orchestrator enables you to export workflows from an account to your system and then import them to another account.\nTo export a workflow, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick the Workflow tab.\nFrom the tabular list of workflows, do one of the following:\nSelect a workflow, click the Ellipsis (…) icon in the same row, and then choose Export Workflow.\nSelect multiple workflows, click the Ellipsis (…) icon from the header or footer of the tabular list, and then choose Export Workflow.\nNote: You can also export workflows from the Actions menu in the Workflow Designer window.\nIn the Export Workflow screen:\nIn the JSON File Name field, use the default filename or enter a filename of your choice for the JSON file that stores the workflow components.\nUse the Export Tags toggle button to include or exclude the user-defined tags. ICO does not export the system-defined tags.\nClick Export.\nSave a local copy of the JSON file.\nImporting a Workflow\nIntersight Cloud Orchestrator enables you to import workflows to your account by importing a JSON file that contains the workflow components. You can create the JSON file by exporting the workflow components from another account.\nTo import a workflow, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Import.\nThe Import wizard appears. In the Select File screen:\nFrom the Organization drop-down list, choose the organization to which you want to import the workflow(s).\nClick Browse, and then select the JSON file that contains the Workflow(s).\nNote: Ensure that the file size of the JSON file is not more than 1MB. If the file size is more than 1MB, export the workflow(s) in batches, and then try import.\nClick Next. Intersight Cloud Orchestrator validates the JSON file and displays the workflow(s) in the Details screen.\nIn the Details screen:\nTo associate an additional tag to the components listed in the table, enter the tag in the Set Tags field. Note: Set Tags is an optional field. You must enter the tag in the key:value format.\nIf one or more workflow components are already available in the system, choose a rule to replace or skip the duplicate components.\nClick Import.\nIn the Import Result screen:\nVerify the status of the imported workflow.\nIf you want to view the details of the import request:\nClick the link displayed above the table.\nAlternatively, click the Requests icon displayed in the menu bar.\nFor more information, see Requests.\nClick Close. You can execute the imported workflow from the Workflows tab.\nDefining Workflow Input Rules\nIntersight Cloud Orchestrator allows you to configure input rules that control the display of fields in the workflow execution screen. You can define these input rules for a workflow by using the Intersight API and while creating a composite data type. By default, all input fields for a workflow are displayed in the workflow execution screen. By configuring input rules, the fields in this screen are displayed or hidden based on the value selected for a previous input field.\nAfter configuring input rules in the workflow definition using the Intersight API, you can view the input rules using the Code tab in the Workflow Designer.\nFollowing is a sample of a simple input rule set for a workflow:\n“InputParameterSet”:[\n{\n“ObjectType”: “workflow.ParameterSet”,\n“Name”: “rule-1”,\n“ControlParameter”: “input-1”,\n“Condition”: “eq”,\n“Value”: “true”,\n“EnableParameters”: [\n“input-2”\n]\n},\n{\n“ObjectType”: “workflow.ParameterSet”,\n“Name”: “rule-2”,\n“ControlParameter”: “input-1”,\n“Condition”: “ne”,\n“Value”: “true”,\n“EnableParameters”: [\n“input-3”,\n]\n}\n]\nFollowing is an example for the parameter sets defined at workflow level:\n{\n“Label”: “Provision VM”,\n“Name”: “ProvisionVM”,\n“DefaultVersion”: true,\n“Description”: “”,\n// Parameter set defintion “InputParameterSet”: [\n{\n// rule-1 enables ‘vmwarehost’ input when value of ‘vmtype’ is ‘vmware’\n“Name”: “rule-1”,\n“ControlParameter”: “vmtype”,\n“Condition”: “eq”,\n“Value”: “vmware”,\n“EnableParameters”: [\n“vmwarehost”\n]\n},\n{\n// rule-2 enables ‘hxcluster’ input when value of ‘vmtype’ is ‘hx’\n“Name”: “rule-2”,\n“ControlParameter”: “vmtype”,\n“Condition”: “eq”,\n“Value”: “hx”,\n“EnableParameters”: [\n“hxcluster”\n]\n}\n],\n“InputDefinition”: [\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“InputParameters”: null,\n“Label”: “VM Type”,\n“Name”: “vmtype”,\n“Required”: false,\n“Properties”: {\n“ClassId”: “workflow.PrimitiveDataProperty”,\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Constraints”: {\n“ClassId”: “workflow.Constraints”,\n“ObjectType”: “workflow.Constraints”,\n“EnumList”: [\n{\n“ClassId”: “workflow.EnumEntry”,\n“ObjectType”: “workflow.EnumEntry”,\n“Label”: “VMWare”,\n“Value”: “vmware”\n},\n{\n“ClassId”: “workflow.EnumEntry”,\n“ObjectType”: “workflow.EnumEntry”,\n“Label”: “HX”,\n“Value”: “hx”\n}\n],\n“Max”: 0,\n“Min”: 0,\n“Regex”: \"”\n},\n“InventorySelector”: [],\n“Secure”: false,\n“Type”: “enum”\n}\n},\n{\n“Name”: “vmname”,\n“Label”: “VM Name”,\n“Required”: false,\n“Properties”: {\n“Type”: “string”,\n“Constraints”: {\n“Min”: 0,\n“Max”: 0\n},\n“Secure”: false\n},\n“ObjectType”: “workflow.PrimitiveDataType”\n},\n{\n“Name”: “vmwarehost”,\n“Label”: “Host”,\n“Required”: false,\n“Properties”: {\n“Type”: “string”,\n“Constraints”: {\n“Min”: 0,\n“Max”: 0\n},\n“Secure”: false\n},\n“Default”: {\n“Override”: false,\n“Value”: null\n},\n“ObjectType”: “workflow.PrimitiveDataType”\n},\n{\n“Name”: “hxcluster”,\n“Label”: “Cluster”,\n“Required”: false,\n“Properties”: {\n“Type”: “string”,\n“Constraints”: {\n“Min”: 0,\n“Max”: 0\n},\n“Secure”: false\n},\n“ObjectType”: “workflow.PrimitiveDataType”\n}\n],\n“OutputDefinition”: [],\n“OutputParameters”: null,\n“Tasks”: [\n{\n“ClassId”: “workflow.StartTask”,\n“Description”: “”,\n“Label”: “”,\n“Name”: “StartTask”,\n“NextTask”: “NewProfile1596244596840”,\n“ObjectType”: “workflow.StartTask”\n},\n{\n“ClassId”: “workflow.SuccessEndTask”,\n“Description”: “”,\n“Label”: “”,\n“Name”: “SuccessEndTask”,\n“ObjectType”: “workflow.SuccessEndTask”\n},\n{\n“ClassId”: “workflow.FailureEndTask”,\n“Description”: “”,\n“Label”: “”,\n“Name”: “FailureEndTask”,\n“ObjectType”: “workflow.FailureEndTask”\n},\n{\n“CatalogMoid”: “5dd45ab6696f6e2d301e2df6”,\n“ClassId”: “workflow.WorkerTask”,\n“Description”: “Task to create a Profile”,\n“InputParameters”: null,\n“Label”: “Provision VM”,\n“Name”: “ProvisionVM1596244596840”,\n“ObjectType”: “workflow.WorkerTask”,\n“OnFailure”: “”,\n“OnSuccess”: “SuccessEndTask”,\n“TaskDefinitionId”: “5efd7c84696f6e2d309e6877”,\n“TaskDefinitionName”: “NewProfile”,\n“Version”: 1\n}\n],\n“Version”: 1\n}\nFollowing is an example for the parameter sets defined at custom data type level:\n{\n“Label”: “ClusterType”,\n“Name”: “ClusterType”,\n“CompositeType”: true,\n“Description”: “Type definition for a cluster information.”,\n“TypeDefinition”: [\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Label”: “Cluster Type”,\n“Name”: “clustertype”,\n“Properties”: {\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Constraints”: {\n“ObjectType”: “workflow.Constraints”,\n“EnumList”: [\n{\n“ObjectType”: “workflow.EnumEntry”,\n“Label”: “VM Ware”,\n“Value”: “vmware”\n},\n{\n“ObjectType”: “workflow.EnumEntry”,\n“Label”: “HX AP”,\n“Value”: “hxap”\n}\n]\n},\n“Type”: “enum”\n}\n},\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Label”: “VMware Cluster”,\n“Name”: “vmwarecluster”\n},\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Label”: “HX Cluster”,\n“Name”: “hxcluster”\n},\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Label”: “Cluster Description”,\n“Name”: “clusterdescr”\n}\n],\n“ParameterSet”: [\n{\n“Name”: “rule-1”,\n“Field”: “clustertype”,\n“Condition”: “eq”,\n“Value”: “vmware”,\n“ShowFields”: [\n“vmwarecluster”\n]\n},\n{\n“Name”: “rule-2”,\n“Field”: “clustertype”,\n“Condition”: “eq”,\n“Value”: “hxap”,\n“ShowFields”: [\n“hxcluster”\n]\n}\n]\n}\nSupported Workflows for Storage Targets\nThe following table lists workflows supported in the various storage targets available on Intersight:\nList of Storage Workflows\rPure Storage\rNetApp\rHitachi\rNew Storage Host\rY\rY\rY\rNew Storage Host Group\rY\rN\rN\rNew VMFS Datastore\rY\rY\rY\rNew NAS Datastore\rN\rY\rN\rRemove NFS Datastore\rN\rY\rN\rRemove Storage Host\rY\rY\rY\rRemove Storage Export Policy\rN\rY\rN\rRemove Storage Host Group\rY\rN\rN\rRemove VMFS Datastore\rY\rY\rY\rUpdate Storage Host\rY\rY\rY\rUpdate NAS Datastore\rN\rY\rN\rUpdate VMFS Datastore\rY\rY\rY\rNew Storage Interface\rN\rY\rN\rNew Storage Export Policy\rN\rY\rN\rNew Storage Virtual Machine\rN\rY\rN\rTask Designer\nCisco Intersight allows you to create tasks in which API requests can be executed in remote targets that can be reached through Intersight. You create tasks so that they can be used in workflows.\nNote: To execute the new tasks for VMware vCenter networking operations, you should upgrade to Intersight Assist version 1.0.9-278.\nTo launch the Task Designer, choose Orchestration \u003e Task. A dashboard displays the following details under these tabs, namely, My Tasks, System Tasks, and All Tasks:\nTop Task Categories\nNumber of System Defined Tasks\nTop Workflows by Targets\nBelow the dashboard is a tabular list of tasks displaying the following information:\nDisplay Name\nDescription\nValidation Status\nLast Update\nSystem Defined\nOrganization\nFrom this screen, with an account administrator or a Workflow Designer role, you can perform the following actions for an organization:\nCreate a task\nEdit or delete a task\nNote: Tasks created in an organization can be used in workflows created within that organization only.\nSupported Requests\nYou can define and execute one or more API requests in the task definition. You can extract the required values from the API responses and use them in subsequent API requests as task output values. You provide values for different properties in an HTTP API request and use them in subsequent API request or as task output values. You can also provide values for different properties of an HTTP API request, such as, HTTP method, URL, header, cookies, etc.\nThe API requests can be executed on external targets that are reachable by Intersight, either directly or through device connectors. The supported HTTP authentication scheme is Basic Authentication over HTTPS. The external targets with their credentials are defined when specifying the Targets in the Targets screen (see: Target Management). Hence, there is no need to provide credentials or authentication specific headers in the request. The input parameter of type target data type is the source from which the details are automatically collected from.\nResponse Parser\nThe response parser contains information about the required values, their types, and the location in the API responses. You specify the required values along with API request details. These details are used by the response parser to extract values from the API responses. The extracted values are used as task output values and to determine the task execution status and the status message.\nThe supported response type is JSON. The response parser supports extraction of values from JSON responses. The users shall provide the information such as the value parameter name, type and the JSON path of the value location. You can extract multiple values from the API response by providing the above details for each required value.\nOutcomes\nAn outcome is the combination of a condition and task status. You use the extracted values from the API response to determine the task status and set the status with an appropriate message, when the conditions match. You can specify one or more outcomes and the outcomes are evaluated in the specified order. The first outcome condition that matches sets the task status and message. If none of the outcome condition matches, the task shall be marked as successful. The outcomes of a task are as follows:\nSuccess—Marks the API execution as Success if the condition matches\nSkip to Success—Stops further API executions of the task and marks the task as successful when the condition matches\nStatus—Retains a task as work in progress, only updating the status\nError—Marks the API execution as Failed if the condition matches. Task retry will be attempted if the task has any retries left\nTerminal error—Marks the API execution as Failed if the condition matches. This marks a non-recoverable error and no retries are attempted\nSkip Task Execution—Skips execution of task if the condition matches in the API. This will skip execution of all the subsequent APIs in the task\nIf the task status is Terminal Error, there are no retries for that task.\nCreating a Task\nTask creation can be broken down into the following sequence of steps:\nDefining a task—you specify the name of the task and provide a few other generic details.\nDefining task inputs and task outputs—you can specify which input parameters are required to execute the task and the output expected from the execution.\nAdding multiple API requests in the Task Designer.\nDefining a Task\nChoose Orchestration from the left navigation pane.\nClick Tasks tab.\nChoose Create Task.\nDrag and drop a task from the Tools section on the Design area.\nIn the Task Properties area, choose the General tab and enter the following information:\nOrganization—Name of the organization that you are creating the task in\nTask Name—A user-friendly short name for the task\nDescription—A description for the task\nRetry Count—Number of times a task should be tried before it is marked failed\nRetry Delay—Delay, in seconds, after which a task is tried again\nTimeout—Timeout value, in seconds, after which a task is termed as timed out\nSet Tags—Set a tag for the task in the key:value format\nEnable Rollback Task—Enable to rollback a task and choose an appropriate task from the drop-down list. Create the required workflow inputs and map it accordingly\nNote: Rollback operation for Assign IP Address to Virtual Machine Network task is not supported on Windows virtual machines.\nDefining Task Inputs and Outputs\nIn the Task Properties area, choose the Input tab and choose a parameter. For more information about the Input properties, see Workflow Designer.\nClick the Edit icon to open the Create Task Input dialog.\nIn the Add Input screen, enter the following details:\nDisplay Name—Enter user-friendly short name.\nReference Name\nDescription—Detailed description of the input\nValue Restrictions—Choose Required, Collection/Multiple, or can be left blank\nType—Choose a data type for primitive data type. For example, enum\nEnum List—Label for the enum value\nMinimum and Maximum Range\nRegex—Validates the regular expression when you select String in the Type field.\nObject Selector—Enable to configure the Intersight managed object selectors. This attribute is available only when the primitive data is String. Specify the Intersight API Reference and selector attributes to feed the input from the table selection. Value will be passed according to the configuration set in the Value attribute.\nIntersight API Reference—Enter the URL of the Intersight API configured with parameters.\nSelector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nValue Attribute—Enter the value to be passed as an input while executing a task. This value should be any one of the attribute name specified in the Selector Attribute field. This attribute is available only when the primitive data is String.\nSecure—Indicates that the values of these properties are encrypted and stored in Cisco Intersight.\nThe fields displayed depend on the value you select for the Type field. Task designer does not support target date type. Click Add.\nRepeat this procedure to create multiple task inputs.\nIn the Task Properties area, choose the Output tab and choose a parameter. For more information about the output properties, see Input and Output.\nThe created task is available in the General category in Workflow Designer. You can create a workflow by dragging and dropping the task on the Workflow Design area.\nTemplate Engine Syntax\nThe template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements\nThe comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .global.CreateSnapshot.output.HttpStatusCode 400) (lt .global.CreateSnapshot.output.HttpStatusCode 500)}}\nConditional Statements\nThe template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \u003ccomparision_statement\u003e}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else if \u003ccomparision_statement}} Tempalte to be used {{end}}\n{{if (eq .global.CreateSnapshot.output.HttpStatusCode 200)}}\nSnapshot with name {{.global.CreateSnapshot.input.Name}} is created successfully.\n{{end}}\n{{if (eq .global.CreateSnapshot.output.HttpStatusCode 200)}}\nSnapshot with name {{.global.CreateSnapshot.input.Name}} is created successfully.\n{{else}}\nSnapshot creation failed with message {{.global.CreateSnapshot.output.HttpStatusMsg}}.\n{{end}}\n{{if (eq .global.CreateSnapshot.output.HttpStatusCode 200)}}\nSnapshot with name {{.global.CreateSnapshot.input.Name}} is created successfully.\n{{else if (eq .global.CreateSnapshot.output.HttpStatusCode 409)}}\nA Snapshot with name {{.global.CreateSnapshot.input.Name}} already exists.\n{{else}}\nSnapshot creation failed with message {{.global.CreateSnapshot.output.HttpStatusMsg}}.\n{{end}}\nExample Task: Creating a Snapshot of Pure Flash Array\nThis example shows how to create a snapshot of a volume in a Pure Flash Array. Specify the following information in the General tab of the Task Properties area.\nField Name\rValue\rTask Name\rNew Pure Volume Snapshot\rRetry Count\r1\nThe task will be retried once more when the task fails.\nRetry Delay\r10\nThe task will be retried after 10 seconds.\nTimeout\r20\nIf the task does not complete execution in 20 seconds, then it is marked as Failed. If a retry count is configured (which is 1 for this task), the task is retried after the specified retry delay, which is 10 seconds.\nThe snapshot is created using the Pure Flash Array volume API. Below is a sample API request and response from Pure Flash Array API Reference.\nPOST /volume\n{\n“snap”: true,\n“source”: [\n“\u003cVolume Name 1\u003e”,\n“\u003cVolume Name 2\u003e”\n]\n}\nFrom the above API, it can be inferred that the name of the source volume is required, for which the snapshot is created. To do this, add a task input parameter of type string to fetch the volume name as a task input. Assuming the task input parameter is named as VolumeName, the following template can be used to create the above request. This template is populated as value for Body field in the API request’s input panel.\n{\n“snap”: true,\n“source”: [\n“{{.global.task.input.VolumeName}}”\n]\n}\nYou either receive a success or a failure message for the request. The following is a sample of the success message. The success message displays the serial number and the new snapshot name against the Name and Serial properties. This information is extracted as a task output.\n200 OK\n[\n{\n“created”: “2017-12-16T05:12:53Z”,\n“name”: “\u003csnapshot name\u003e”,\n“serial”: “\u003cserial number\u003e”,\n“size”: 5368709120,\n“source”: “\u003cvolume name\u003e”\n}\n]\nIn case of a failure, the response displays an array of errors. Each error contains a message, a code, and a context. In this example, if the specified volume name is not found, the following message is displayed.\n400 BAD REQUEST\n[\n{\n“msg”: “Volume does not exist.”,\n“code”: 6,\n“ctx”: “\u003cVolume Name\u003e”\n}\n]\nIf the msg property is present in the response, the property can be used to determine the task status with HTTP status code 400. The property named msg can be accessed using the JSON path $[0].msg. The details to extract the parameters are provided as value for Response Parser field in API request’s input area. The path is a valid JSON path that locates a required data in the API response.\nResponse Parameter\rDetails\rSnapshotName\rThis parameter contains the extracted snapshot name in the API output.\nName: SnapshotName\nPath: $[0].name\nType: string\nSerial\rThis parameter contains the extracted serial value in the API output.\nName: Serial\nPath: $[0].serial\nType: string\nError\rThis parameter contains the extracted error message in the API output.\nName: Error\nPath: $[0].msg\nType: string\nTo define a task, drag and drop the Invoke Web API Request task into the Task Designer area. Use the Properties area to populate API details. The following is sample information that can be entered the General tab.\nField Name\rValue\rName\rCreate Snapshot\nThe name must be unique. The APIs inside the task cannot be named as Create Snapshot. A name without space, such as CreateSnapshot can be used to refer the API output in subsequent API requests. In this example the following details are referred using API name.\nHTTP Status Code:\n{{.global.CreateSnapshot.output.HttpStatusCode}}\nThe parameters extracted from the response are referred using the API name after extracting the value from the response through the response parser as follows:\n{{.global.CreateSnapshot.output.Serial}}\nSet External Target\rChecked - true\nAs this is the first API and task does not have an input of type Target, a dialog appears that can be used to add a task input of Target type. The claimed Pure Storage Array target is provided as value for this task input during execution.\nThe task input pertains to the API request details and to extract the required values from response. The following is an example of the required input values for the create snapshot API.\nField Name\rValue\rMethod\rPOST\rURL\r/volume\nThe relative URL of the REST API end point is specified. The host part is filled through the information in pure target (Protocol, IPAddress, Port).\nBody\rContent Type: JSON\nText:\n{\n\"snap\": true,\n\"source\": [\n\"{{.global.task.input.VolumeName}}\"\n]\n}\nResponse Parser\rThe following parameters are added:\nSnapshotName: Path: $[0].name, Type: string\nSerial: Path: $[0].serial, Type: string\nError: Path: $[0].msg, Type: string\nThe extracted values from the API responses determine the task status. In this example, the following outcomes are added based on the API response.\nIf the status code is 401, the task encounters terminal failure with Authorization Failed message. The retry also fails. Hence the outcome type is set as Terminal Error. So, the task is not retried despite a retry is being specified. Outcome Property\rValue\rName\rAuthorization Error\nIdentifies an outcome in the outcomes list of task designer. The name is not used for any other purpose.\nCondition\r{{eq .global.CreateSnapshot.output.HttpStatusCode 401}}\nThis condition checks whether the response status code of API named ‘Create Snapshot’ is 401.\nOutcome Type\rTerminal Error\rMessage\rAuthorization Error. Check the target credentials.\rIf the HTTP status code is 400 and the extracted error is Volume does not exist, the task fails terminally. In this case, the retry execution also fails, hence the outcome type is set as Terminal Error. Outcome Property\rValue\rName\rVolume does not exist\nThe name here is to identify an outcome quickly in the outcomes list of task. The name is not used for any other purpose.\nCondition\r{{and (eq .global.CreateSnapshot.output.HttpStatusCode 400)\n(eq .global.CreateSnapshot.output.Error 'Volume does not exist.')}}\nIf we refer the sample response in previous sections, we will get a 400-Bad Request with response containing error msg ‘Volume does not exist.’.\nOutcome Type\rTerminal Error\rMessage\rA volume with name {{.global.task.input.VolumeName}} does not exist. Check the volume name given.\nThis outcome for a given volume name input ‘oracle-db’ will fail the task with message ‘A volume with name oracle-db does not exist. Check the volume name given.\nFor any API failure caused by bad user input, do not retry and fail the task immediately. Outcome Property\rValue\rName\rAny client error\nIdentifies a result in the outcomes list of task designer, and is not used for any other purpose\nCondition\r{{and (ge .global.CreateSnapshot.output.HttpStatusCode 400)\n(lt .global.CreateSnapshot.output.HttpStatusCode 500)}}\nThis condition checks if the HTTP status code is in the range between 400 to 499.\nOutcome Type\rTerminal Error\rMessage\rAPI request failed - {{.global.CreateSnapshot.output.HttpStatusCode}}\n{{if (index .global.CreateSnapshot.output `Error`)}}:\n{{.global.CreateSnapshot.output.Error}}{{else}} {{.global.CreateSnapshot.output.HttpStatusMsg}}{{end}}\nThis message checks that a valid error message is extracted by using an if else block\n{{if (index .global.CreateSnapshot.output `Error`)}}\nIf the error value is ‘Snapshot not supported’, the task status message is ‘API request failed – 405: Snapshot not supported’.\nIf no valid error message is present in the response, the HTTP status message is used. For example, API request failed – 413 Payload Too Large.\nFor errors on the server, the task must be tried again before setting the outcome type as Error instead of Terminal Error. Outcome Property\rValue\rName\rAny server error\nThe name here is to identify an outcome quickly in the outcomes list of task designer. The name is not used for any other purpose.\nCondition\r{{and (ge .global.CreateSnapshot.output.HttpStatusCode 500) (lt .global.CreateSnapshot.output.HttpStatusCode 600)}}\nThis condition checks if the HTTP status code is in the range between 500 to 599.\nOutcome Type\rError\nThe outcome type is set as Error. Hence, the request is retried, if retries are configured.\nMessage\rAPI request failed - {{.global.CreateSnapshot.output.HttpStatusCode}}\n{{if (index .global.CreateSnapshot.output `Error`)}}:\n{{.global.CreateSnapshot.output.Error}}{{else}} {{.global.CreateSnapshot.output.HttpStatusMsg}}{{end}}\nThis is the same message that is used in the client error outcome.\nThis can be termed as the final outcome for a successful completion. Outcome Property\rValue\rName\rAll Good\nThe name identifies an outcome in the outcomes list of task designer. The name is not used for any other purpose.\nCondition\rTrue\n{{eq .global.CreateSnapshot.output.HttpStatusCode 200}}\nTrue can be used as the condition to capture all scenarios or the specific success response status code can be used, which is 200.\nOutcome Type\rSuccess\rMessage\rA snapshot with name\n{{.global.CreateSnapshot.output.SnapshotName}}\nand serial\n{{.global.CreateSnapshot.output.Serial}}\nis created successfully for volume with name\n{{.global.task.input.VolumeName}}\n.\nThe outcome for a given volume name input oracle-db sets the task to success with the message: A snapshot with name oracle-db.8 and serial B3CD9AF2175A4E2800011010 is created successfully for volume with name oracle-db.\nAs part of this task, an inventory refresh request can be sent to pull the new snapshot inventory. This API contains the following details in the request.\nPOST /v1/task/PureScopedInventories\n{\n“Type”: “storage.PureVolumeSnapshot”,\n“NamingProperty”: “Name”,\n“Values”: [\n“\u003cSnapshot_Name\u003e”\n],\n“RegisteredDevice”: {\n“ObjectType”: “asset.DeviceRegistration”,\n“Moid”: “\u003cPure Device Registration Id\u003e”\n}\n}\nThe snapshot name is obtained from previous API output by using the following reference: {{.global.CreateSnapshot.output.SnapshotName}}.\nThe device registration ID is obtained by performing a GET API of the selected target and extracting the MOID from the RegisteredDevice. For more information, see API Docs.\nThis section is realized by sending two Intersight API requests: GET /v1/asset/Targets/\u003cTarget_Moid\u003e and using the extracted registered device Moid in the above request. Having explained the API specific details in the previous section, we will quickly add two API calls to the same task.\nDo not choose the Set External Target option in the General tab. This is because the API calls can be inferred as Intersight API calls.\nThis section captures the details related to the Intersight API call that gets the registered device Moid from the given target task input.\nThe outcomes shall be added for better experience with these Intersight API calls and since the previous section explains the outcomes in detail, this section does not cover them.\nGET is used as the default, if no value is provided for Method field.\nField Name\rValue\rAPI Name\rGet Device Id\rSet External Target\rUnchecked/false\rURL\r/v1/asset/Targets/\n{{.global.task.input.Target.Moid}}\nResponse Parser\rWe will extract the Moid of the ‘RegisteredDevice’ relation.\nDeviceMoid – Path: $.RegisteredDevice.Moid, Type: string\nThe target Moid required in the URL is populated from the task input Target. As part of this API output, the extracted device Moid can be referred in the next API request body with the following reference:\n{{.global.GetDeviceId.output.DeviceMoid}}\nUsing this example, you can also capture details for the Intersight API that requests the inventory refresh for Pure Flash Array snapshots. The snapshot name is extracted from the first API and the device Moid is extracted from the second API to create a request for this API.\nField Name\rValue\rAPI Name\rRequest Inventory Refresh\rSet External Target\rUnchecked or false\rMethod\rPOST\rURL\r/v1/task/PureScopedInventories\rBody\rContent Type: JSON\nText:\n{\n\"Type\": \"storage.PureVolumeSnapshot\",\n\"NamingProperty\": \"Name\",\n\"Values\": [\n\"{{.global.CreateSnapshot.output.SnapshotName}}\"\n],\n\"RegisteredDevice\": {\n\"ObjectType\": \"asset.DeviceRegistration\",\n\"Moid\": \"{{.global.GetDeviceId.output.DeviceMoid}}\"\n}\n}\nThere is no response body for this request. Therefore, the outcomes can be added based on API HTTP status code to set the task status. The outcome is not added her as they have been captured in detail for the first outcome. The extracted values from the API response SnapshotName and Serial are mapped to task output so that they are available as task output that can be referred in subsequent tasks in a workflow. This can be done by creating two task output parameters named ‘SnapshotName’ and ‘Serial’ in ‘Output tab of Properties area. The task output can be mapped to take API response values by using Map to Task Output action. The values extracted using Response Parser in an API can be mapped by selecting Parameters and then the API Name entry in Task Output drop down and providing the actual parameter names in Path field.\nExample: Obtaining Cisco ASA Details\nThe previous example illustrates the need to make API requests to a claimed target in Intersight. This section explains a sample task that obtains simple information from Cisco ASA, while is reachable from Intersight Assist. Intersight does not have a device connector for Cisco ASA.\nAs a first step, Cisco ASA is added as custom target. Cisco ASA uses HTTP basic authentication and has REST API interface. Hence, requests can be made to Cisco ASA as part of Intersight IO tasks. The device must be reachable from Intersight Assist. The device can be added as a Custom Target in Targets screen, by providing IP address, credentials and Intersight Assist from which the device is reachable. Cisco ASA added as custom target must be configured from Intersight tasks. Though, Cisco ASA supports basic authentication and does not need a session token to be created in Intersight, you can use a session token to showcase the Web API support for handling values for request and response headers.\nA session token is created and used in the request header to facilitate in the extraction of response headers. In this example, the task executes two API requests in Cisco ASA, namely create a session token and use the session token to obtain the Cisco ASA version.\nTo obtain a session token, use the Post call /api/tokenservices’ to create a session token. Use the Delete request /api/tokenservices/\u003cToken\u003e to delete the session. Cisco ASA expects a request to create a session token. It must include the basic authentication header that Intersight populates when using the details in the custom target.\nPOST /api/tokenservices\n204 No Content\nResponse Headers\nX-Auth-Token: \u003cNew Session Token\u003e\nThe subsequent API requests must have the X-Auth-Token request header.\nThe following table explains the request details that need to be provided in Task Designer to create session token.\nField Name\rValue\rAPI Name\rGet Session Token\rSet External Target\rChecked\nA task input of target type is added through the Task Designer dialog.\nMethod\rPOST\rURL\r/api/tokenservices\rNote: There is no need to have a request body or response parser given because the API does not generate a response body.\nDetails, such as, response headers, cookies, status code, and status message, can be referred in subsequent API requests using references based on the API name as follows:\nResponse Parameter\rReference Name\rHeaders-—A map of headers with keys being the header name and values being a string array of header values.\r{{.global.GetSessionToken.output.HttpHeaders}}\nA specific response header value can be obtained using two notations: {{.global.GetSessionToken.output.HttpHeaders.\u003cHeaderName\u003e}} or {{index .global.GetSessionToken.output.HttpHeaders `HeaderName`}}\nExamples of above notations are:\n{{.global.GetSessionToken.output.HttpHeaders.Date}}\n{{index .global.GetSessionToken.output.HttpHeaders `X-Auth-Token`}}\nThe above examples get the header value in the form of string array and individual values can be accessed by index template function. The index function can also be used to access a specific header in Headers.\n{{index .global.GetSessionToken.output.HttpHeaders.Date 0}}\n{{index (index .global.GetSessionToken.output.HttpHeaders `X-Auth-Token`) 0}}\nNote: The template engine used by Intersight IO considers hyphens (-) as special characters and does not allow obtaining headers with hyphens using the first dotted notation. Considering the fact that most of the header names are hyphenated, it is recommended to use the second notation only.\nCookies—A map of cookies with keys being cookie names and the values being strings.\r{{.global.GetSessionToken.output.HttpCookies}}\nThe further values of specific cookies can be referred using either the dot notation or with index function. The details are explained in the previous row about Headers.\nHTTP Status Code—Number\r{{.global.GetSessionToken.output.HttpStatusCode}}\rHTTP Status Message—String\r{{.global.GetSessionToken.output.HttpStatusMsg}}\rThe following table explains the various outcomes that the API request can produce.\nOutcome Name\rDetails\rUnauthorized\rCondition—{{eq .global.GetSessionToken.output.HttpStatusCode 401}}\nOutcome Type:—Terminal Error\nMessage: Authorization failed. Check the target credentials.\nSession Limit Breached\rCondition—{{eq .global.GetSessionToken.output.HttpStatusCode 503}}\nOutcome—Type: Error\nMessage—Maximum number of sessions reached.\nAll Well\rCondition—{{eq .global.GetSessionToken.output.HttpStatusCode 204}}\nOutcome Type—Success\nMessage—Session token is Obtained.\nThe auth token obtained from the first API can be used in the second API to obtain the ASA version and other details as follows:\nGET /api/monitoring/device/components/version\nRequest Headers:\nX-Auth-Token: \u003cAuth-Token-Obtained-from-Token-Api\u003e\n200 OK\n{\n“kind”: “object#Version”,\n“selfLink”: “/api/monitoring/device/version”,\n“deviceType”: “ASAv”,\n“upTimeinSeconds”: 208800,\n“totalFlashinMB”: 8192,\n“currentTimeinSeconds”: 1612870500,\n“firewallMode”: “Transparent”,\n“asaVersion”: “9.5(2)”\n} The following table explains the request details that need to be provided in Task Designer API request panel for the ASA version request.\nField Name\rValue\rAPI Name\rGet ASA Version\rSet External Target\rChecked\rURL\r/api/monitoring/device/components/version\rHeaders—JSON with header name mapped to array of header values\r{\n\"X-Auth-Token\": [\n\"{{index (index .global.GetSessionToken.output.HttpHeaders `X-Auth-Token`) 0}}\"\n]\n}\nThe token value is extracted from the previous API response header and used here in this API request header.\nResponse Parser\rVersion—Path: $.asaVersion, Type: string\rA simple outcome checks for status code. If outcome is 200, the task is marked as failed.\nName—Not OK\nCondition—{{ne .global.GetASAVersion.output.HttpStatusCode 200}}\nOutcome Type—Error\nMessage—GET ASA version failed\nThe two API requests have been added to obtain session token and then to obtain the ASA version. The extracted API output can be mapped to the task output.\nTask Input and Executor Output Mapping\nTask inputs and previous executors output can be used for direct mapping or transformed mappings. The syntax to refer to these will depend on the type of mapping. Task inputs are referenced as {{.global.task.input.InputName}} where InputName is the Reference Name given to the Task input and not the Display Name or Label. Similarly, task outputs are referenced as ${TaskName.output.TaskOutput}.\nTo specify an input mapping, select a task and click Edit against a task input parameter.\nThe options available are:\nStatic Value—Enter a value that is assigned to the task input field.\nDirect Mapping—Map an existing task input or previous executors output to the selected task input\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task’s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template. You can then preview the template and test the transformation with sample values.\nNote: Transformed mapping is only supported for task inputs of primitive data types, such as string, integer, boolean, and float.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string. Example 1:\nFindAllString(s, regex string) ([]string, error)\nExample: {{(FindAllString .global.task.input.NumberString \\\"([0-9]+)\\\")}} returns array [“123”, “456”] for input string “123 some text 456”.\nExample 2:\nAtoi function converts the given number in string format to integer type.\nAtoi(s string) (int, error)\nExample: {{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”\nExporting a Task\nIntersight Cloud Orchestrator enables you to export tasks from an account to your system and then import them to another account.\nTo export a task, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Tasks.\nFrom the tabular list of tasks, do one of the following:\nSelect a task, click the Ellipsis (…) icon in the same row, and then choose Export Task.\nSelect multiple tasks, click the Ellipsis (…) icon from the header or footer of the tabular list, and then choose Export Task.\nNote: You can also export tasks from the Actions menu in the Task Designer window.\nIn the Export Task screen:\nIn the JSON File Name field, use the default filename or enter a filename of your choice for the JSON file that stores the task components.\nUse the Export Tags toggle button to include or exclude the user-defined tags. ICO does not export the system-defined tags.\nClick Export.\nSave a local copy of the JSON file.\nImporting a Task\nIntersight Cloud Orchestrator enables you to import tasks to your account by importing a JSON file that contains the task components. You can create the JSON file by exporting the task components from another account.\nTo import a task, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Tasks.\nClick Import.\nThe Import wizard appears. In the Select File screen:\nFrom the Organization drop-down list, choose the organization to which you want to import the task(s).\nClick Browse, and then select the JSON file that contains the task(s).\nNote: Ensure that the file size of the JSON file is not more than 1MB. If the file size is more than 1MB, export the task(s) in batches, and then try import.\nClick Next. Intersight Cloud Orchestrator validates the JSON file and displays the task(s) in the Details screen.\nIn the Details screen:\nTo associate an additional tag to the components listed in the table, enter the tag in the Set Tags field. Note: Set Tags is an optional field. You must enter the tag in the key:value format.\nIf one or more task or task components are already available in the system, choose a rule to replace or skip the duplicate components.\nClick Import.\nIn the Import Result screen:\nVerify the status of the imported task and task components.\nIf you want to view the details of the import request:\nClick the link displayed above the table.\nAlternatively, click the Requests icon displayed in the menu bar.\nFor more information, see Requests.\nClick Close. Managing the Lifecycle of a Task\nTask management consists of organizing, creating, updating, and deletion of tasks. The following table describes the set of actions that you can perform with tasks in Cisco Intersight.\nActions\rDescription\rView Tasks\rChoosing Orchestration from the left navigation pane will display all workflows in a tabular format. Clicking Tasks will display all tasks in a tabular format. You can view information such as the task name and description, the number of versions available, the number of times the task has been executed, the last execution status, validation information and the last update time and date.\rCreate a New Task\rChoose Orchestration from the left navigation pane and click Tasks. Then, click Create Task. This option opens up the Task Designer, using which you can create a new task.\rDelete a Task\rFrom the tabular list of workflows, you can select a task and click Delete. This will remove the task.\rClone a Task\rFrom the tabular list of tasks, you can select a task and click Clone. This will clone the selected task.\rSave a Task as\rFrom the tabular list of tasks, you can choose a task and click. By default, the workflow details are displayed in the Designer tab. You can choose Save As option from the Action drop-down list to clone a task.\nIn the Save As screen, you can specify user-friendly short name, reference name, description, and tag key. Click Save. For more information, see Cloning a Task.\nCloning a Task\nYou can clone only a user-defined task. The cloned task is identical to the original task. You can edit the new task immediately. You might do this, for example, to create a task that is similar to the source task that can be edited based on your requirements.\nTo clone a task, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Tasks.\nFrom the tabular list of tasks, select a task and choose Clone.\nIn the Clone Task screen, edit the user-friendly short name, reference name, and description.\nCheck the Open Clone in Editor check box if you want to open the cloned task and edit the details.\nNote: Open Clone in Editor check box is not displayed when you clone a task using the Save As option\nClick Clone. The cloned task will be created in the same organization the source task belongs to. Supported Target Management Tasks\nThe Target Management tasks contain a subset of tasks that can be used within workflows to perform a range ot operations on the endpoint targets. The Target Management tasks supported in Intersight are:\nNew Target—Claim a new endpoint within a workflow in Intersight. The supported target types are HTTP, SSH, Powershell, or Ansible endpoints.\nGet Target—Get the details of a claimed target within a workflow. The task inputs are name, hostname or IP address, and target type. On successful execution, name, moid, hostname or IP address, port, connection status, and target type are generated as the task outputs.\nThe supported target types are HTTP, SSH, Powershell, or Ansible endpoints. Remove Target—Unclaim the target endpoint from Intersight. When a target is unclaimed, it is immediately detached from the corresponding Intersight account. The target retains any configuration applied before the unclaim operation. Compute Tasks Matrix\nThe following table lists compute tasks supported on UCS C-Series Standalone Server and Intersight Managed Mode (IMM) Server:\nCompute Tasks\rUCS C-Series Standalone Server\rIMM Server\rCopy Server Profile\rY\rY\rDeploy Server Profile\rY\rY\rDismount Server Virtual Media Device\rY\rN\rMount Server Virtual Media Device\rY\rN\rRemove Server from Server Profile\rY\rY\rRemove Server Profile\rY\rY\rRestart IMC\rY\rY\rSet Server One Time Boot Device\rY\rN\rSet Server Power State\rY\rY\rSet Server to Server Profile\rY\rY\rStop Server Operating System\rY\rY\rAdd Server Policies to Profile\rY\rY\rClear Server Storage Controller Configuration\rY\rY\rRemove Server Policies from Profile\rY\rY\rNew Server Profile\rY\rY\rNew Server Profile from Template\rY\rY\rDelete Server Virtual Drives\rY\rY\rClear Server Storage Controller Foreign Configuration\rY\rY\rImport Server Storage Controller Foreign Configuration\rY\rY\rSet Server Physical Drive State\rY\rY\rNew Server Precision Boot Device\rY\rN\rRemove Server Precision Boot Device\rY\rN\rSupported Tasks for Storage Targets\nThe following table lists tasks supported in the various storage targets available on Intersight:\nList of Tasks\rPure Storage\rNetApp\rHitachi\rAdd Storage Export Policy to Volume\rN\rY\rN\rAdd Host to Storage Host Group\rY\rN\rN\rAdd Hosts to Storage Host Group\rY\rN\rN\rCompress Storage Pool\rN\rN\rY\rConnect Initiators to Storage Host\rY\rY\rY\rConnect Volume to Storage Host Group\rY\rN\rN\rCopy Hitachi Volume\rN\rN\rY\rDisconnect Storage Export Policy from Volume\rN\rY\rN\rDisconnect Initiators from Storage Host\rY\rN\rY\rDisconnect Volume from Storage Host Group\rY\rN\rN\rExpand Storage LUN\rN\rY\rN\rEdit Aggregates For Storage Virtual Machine\rN\rY\rN\rEdit Storage Pool\rN\rN\rY\rEdit Storage Snapshot Policy\rN\rY\rN\rEdit Storage Export Policy Rule\rN\rY\rN\rEdit Storage Snapshot Policy Schedule\rN\rY\rN\rExpand Storage Volume\rY\rY\rY\rFind NetApp igroup LUN Map\rN\rY\rN\rExpand Storage Pool\rN\rN\rY\rFind Storage LUN by ID\rN\rY\rN\rFind Storage Volume by ID\rY\rY\rY\rFormat Storage Volume\rN\rN\rY\rNew Storage Export Policy\rN\rY\rN\rNew Storage Fibre Channel Interface\rN\rY\rN\rNew Storage Data IP Interface\rN\rY\rN\rNew Storage Host\rY\rY\rY\rNew Storage Host Group\rY\rN\rN\rNew Storage LUN\rN\rY\rN\rNew Storage LUN ID\rN\rY\rN\rNew Storage Snapshot Policy\rN\rY\rN\rNew Storage Snapshot Policy Schedule\rN\rY\rN\rNew Storage Pool\rN\rN\rY\rNew Storage Volume\rY\rY\rY\rNew Storage Volume Snapshot\rN\rY\rN\rNew Storage Export Policy Rule\rN\rY\rN\rNew Storage Virtual Machine\rN\rY\rN\rRemove Storage export policy\rN\rY\rN\rRemove Host from Storage Host Group\rY\rN\rN\rRemove Hosts from Storage Host Group\rY\rN\rN\rRemove Storage Host\rY\rY\rY\rRemove Storage Host Group\rY\rN\rN\rRemove Storage LUN\rN\rY\rN\rRemove Storage LUN ID\rN\rY\rN\rRemove Storage Pool\rN\rN\rY\rRemove Storage Volume\rY\rY\rY\rRemove Storage Virtual Machine\rN\rY\rN\rRemove Storage IP Interface\rN\rY\rN\rRemove Storage FC Interface\rN\rY\rN\rRename Storage Volume Snapshot\rN\rY\rN\rRemove Storage Snapshot Policy Schedule\rN\rY\rN\rRemove Storage Export Policy Rule\rN\rY\rN\rRemove Storage Snapshot Policy\rN\rY\rN\rRemove Storage Volume Snapshot\rN\rY\rN\rNew NetApp Smart LUN\rN\rY\rN\rNew NetApp NAS Smart Volume\rN\rY\rN\rRemove NetApp Smart LUN\rN\rY\rN\rSupported Tasks for Network Targets\nThe following table lists tasks supported in the various network targets available on Intersight:\nList of Network Tasks\rNexus Switch\rMDS Switch\rAdd Port to Port Channel\rN\rY\rCopy Running to Startup Configuration of Switch\rY\rN\rEdit Spanning Tree Protocol\rY\rNot Applicable\rNew Port Channel\rN\rY\rRemove Port Channel\rN\rY\rRemove Port from Port Channel\rN\rY\rRemove DNS Server\rN\rY\rRemove NTP Server\rN\rY\rSet DNS Server\rN\rY\rSet Feature State\rY\rY\rSet MTU\rY\rNot Applicable\rSet NTP Server\rN\rY\rSet Port Channel State\rN\rY\rSet Port Mode\rY\rNot Applicable\rSet Port Speed\rY\rNot Applicable\rSet Port State\rY\rY\rSet Switch Host Name\rY\rY\rData Types\nIntersight Orchestrator supports the use of data types for workflows and tasks. Data types for input and output defines types and associated constraints on values that can be specified. Data types also specify boundaries for values, and constraints like regular expressions.\nCisco Intersight provides a whole range of system-defined data types that you can use in your workflows. In addition, you can also create a data type in Cisco Intersight. To view all data types that are currently available or configured, choose Orchestration \u003e Data Types. A dashboard displays the following details under these tabs, namely, My Data Types, System Data Types, and All Data Types:\nNumber of Composite Type\nNumber of System Defined Data Type\nYou can view a tabular list of data types with the following information:\nReference Name\nDisplay Name\nComposite Type\nDescription\nLast Updated\nOrganization\nFrom this screen, as an Account Administrator, or as a user with Workflow Designer privileges, you can perform the following actions:\nCreate a new data type\nEdit or delete a custom data type\nClone a data type\nNote: You cannot edit or delete a system-defined data type.\nThere are many input types defined in Cisco Intersight representing a broad selection of categorical, numeric, and text parameters. For example, some existing data types are:\nGeneric Text Input (the least restricted input type)\nIPv4 Address\nOS Type\nMemory Size Selector\nPrimitive data type—Represents primitive data like String, Float, Integer, Boolean, Json, or Enum. Following are the attributes specific to primitive data types:\nType\nSecure\nConstraints (specifies limits and boundaries for values)\nObject Selector (lists the Cisco Intersight managed object selectors). This attribute is available only when the primitive data is String. Following are the attributes specific to Object Selector:\nIntersight API Reference—Enter the URL of the Intersight API configured with parameters.\nSelector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nValue Attribute—Enter the value to be passed as an input while executing a task. This value should be any one of the attribute name specified in the Selector Attribute field.\nArray data type—Represents an array of a given type. It can be an array of primitive data, reference data, or of custom data type. Following are the attributes specific to array data types:\nArrayItemType\nMin\nMax\nMoReference data type—Represents Cisco Intersight Managed object reference. Following are the attributes specific to reference data types:\nIntersight API Reference—Enter the URL of the Intersight API configured with parameters.\nSelector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nTarget data type—Represents a target endpoint or device. Following are the attributes specific to target data types:\nIntersight API Reference—Enter the URL of the Intersight API configured with parameters.\nSelector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nSupport Objects—Enter the object filter used for mentioning the interesting object in the task definition. You can add multiple support objects by clicking +.\nConstraint Attribute—Enter the attribute used for defining decision conditions to choose the right implementation task. You can add multiple constraint attributes by clicking +.\nConnector Attribute—Enter the attribute used for defining what value to be passed as input to the implementation task.\nCustom data type—Allows defining type constraints once and then use them in multiple tasks and workflows. Following are the attributes specific to target data types:\nCustom Data Type Name\nCatalog Moid\nYou choose existing input types from a list that displays a name, type, and category for each variable. The list can be filtered to make finding a given data type manageable.\nIf none of the existing data types serves your need in a particular application, it is possible to create custom data types by defining restrictions on existing data types.\nCreating a Data Type\nTo create a data type, perform the following steps:\nChoose Orchestration from the left navigation pane and click Data Types.\nChoose Create Data Type.\nIn the Create Data Type screen, enter the following information:\nOrganization—Choose an organization from the drop-down list.\nName—Enter a name for the custom data type definition. The name can be alphanumeric and can include a combination of upper case and lower case letters and special characters.\nLabel—Enter a label that helps you identify the data type.\nDescription—Enter a description, if required.\nSet Tags—Enter a tag in the key:value format, if required.\nSelect the parameters for the data type—Choose Simple or Composite. A Simple data type has only a singular value, while a composite data type has multiple properties. For example, a LoginName is a simple data type whereas a MailingAddress would be a Composite data type (with street, city, state, and so on.) Note: Target data type is not supported when you choose Composite as a parameter input.\nTo add additional inputs, click Add Field and click New Definition. Then, enter the following information: Name\nLabel\nDescription\nRequired—Update this field only when you are adding a Composite data type.\nType—Choose a data type for primitive data type. For example, String, Integer, Float, Boolean, Json, Enum, MoReference, Target Data Type, or custom data type.\nThe fields displayed depend on the value you select for the Type field. If you select the data type as Enum, specify the following:\nEnum List—Enum label and value. You can add multiple selector attributes by clicking +.\nWidget type.\nIf you select the data type as String, specify the following:\nMinimum and MaximumRange\nRegex—Validates the regular expression when you select String in the Type field.\nSecure—Indicates that the values of these properties are encrypted and stored in Cisco Intersight.\nObjectSelector—Enable to configure the Intersight managed object selectors. This attribute is available only when the primitive data is String. Specify the Intersight API Reference and selector attributes to feed the input from the table selection. Value will be passed according to the configuration set in the Value attribute.\nIf you select the data type as Integer or Float, specify the following:\nMinimum and MaximumRange. If you select the data type as MoReference, specify the following:\nIntersight API Reference—Enter the URL of the Intersight API configured with parameters.\nSelector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nIf you selected a composite data type, you can specify the field mapping details. With field mapping, you can pass the value from the parent composite data type to a child composite data type.\nTo specify the field mapping, do the following:\nKey—The input field that you want to hide.\nValue Attribute—The value in a template style to be passed dynamically during the execution. The inputs are referenced as ${datatype.type.AttributeName}.\nClick Add.\nTo add a Parameter Set rule, click Add Rule \u003e Parameter Set.\nFor more information, see Error! Reference source not found..\nName—The name of the Parameter Set rule.\nIf Field—Select the input field that will be used for the Parameter Set rule.\nCondition—The condition for the rule. The condition can be Equal to, Not equal to, Contains, or Matches Pattern.\nValue—The value of the input (If Field) that will be used for the Parameter Set rule.\nField to be shown—Select input fields that should be made available when the Parameter Set rule condition is satisfied.\nClick Save.\nClick Preview to validate the definitions that you have added and make corrections, if required.\nClick Add.\nThe data type that you added is displayed in the tabular list on the Data Types screen. You can now create a workflow and use this data type in the workflow input. Similar to workflows, you can define the Parameter Set rules at custom data type level. Data Type Parameter Set Rule\nWhen you create a composite data type, you can specify the fields for the data type. After you define the fields, you can set a Parameter Set rules. The Parameter Set rule control the availability of specific parameters or inputs during the execution. After the first input is specified, the Parameter Set rule controls which subsequent input fields are made available during the execution.\nNote: You can define a Parameter Set rule only for a custom data type that has more than two input fields with the supported data type.\nThe supported data types for the Parameter Set rules are:\nBoolean\nEnum\nString Object Selector\nMoReference\nExample: The following example shows how to create a Parameter Set rule for a composite data type with four fields. The composite data type fields are:\nCluster Type—Type is Enum and Enum list is VM and HX.\nVMware Cluster—Type is String.\nHX Cluster—Type is String.\nCluster Description—Type is String.\nYou can create two Parameter Set rules. During the execution when the Cluster Type value is VM only VMware Cluster field is made available. Alternately, when the Cluster Type value is HX, only HX Cluster is made available. The details of the Parameter Set rules are:\nRule1—If Field is Cluster Type, Condition is Equal to, Value is VM, and Fields to be shown is VMware Cluster.\nRule2—If Field is Cluster Type, Condition is Equal to, Value is HX, and Fields to be shown is HC Cluster.\nCloning a Data Type\nYou can clone a data type. The cloned data type is identical to the original data type. You can edit the new data type immediately. You might do this, for example, to create a data type that is similar to the source data type that can be edited based on your requirements. The new data type has a new, separate version history.\nTo clone a data type, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Data Type.\nFrom the tabular list of data types, select a data type and choose Clone.\nIn the Clone Data Type screen, edit the user-friendly short name, reference name, description, and organization details. The organization mappings are displayed only for pre-canned data types and not for the custom data types.\nCheck the Open Clone in Editor check box if you want to open the cloned data type and edit the details.\nClick Clone.\nExporting a Data Type\nIntersight Cloud Orchestrator enables you to export data types from an account to your system and then import them to another account.\nTo export a data type, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Data Type.\nFrom the tabular list of data types, do one of the following:\nSelect a data type, click the Ellipsis (…) icon in the same row, and then choose Export Data Type.\nSelect multiple data types, click the Ellipsis (…) icon from the header or footer of the tabular list, and then choose Export Data Type.\nIn the Export Data Type screen:\nIn the JSON File Name field, use the default filename or enter a filename of your choice for the JSON file that stores the data type components.\nUse the Export Tags toggle button to include or exclude the user-defined tags. ICO does not export the system-defined tags.\nClick Export.\nSave a local copy of the JSON file.\nImporting a Data Type\nIntersight Cloud Orchestrator enables you to import data types to your account by importing a JSON file that contains the data type components. You can create the JSON file by exporting the data type components from another account.\nTo import a data type, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Data Type.\nClick Import.\nThe Import wizard appears. In the Select File screen:\nFrom the Organization drop-down list, choose the organization to which you want to import the data type(s).\nClick Browse, and then select the JSON file that contains the data type(s).\nNote: Ensure that the file size of the JSON file is not more than 1MB. If the file size is more than 1MB, export the data type(s) in batches, and then try import.\nClick Next. Intersight Cloud Orchestrator validates the JSON file and displays the data type(s) in the Details screen.\nIn the Details screen:\nTo associate an additional tag to the components listed in the table, enter the tag in the Set Tags field. Note: Set Tags is an optional field. You must enter the tag in the key:value format.\nIf one or more data type components are already available in the system, choose a rule to replace or skip the duplicate components.\nClick Import.\nIn the Import Result screen:\nVerify the status of the imported data type(s).\nIf you want to view the details of the import request:\nClick the link displayed above the table.\nAlternatively, click the Requests icon displayed in the menu bar.\nFor more information, see Requests.\nClick Close. Executors – Invoke PowerShell Script\nIntersight Cloud Orchestrator allows workflow designers to run PowerShell Script on a PowerShell target endpoint using the Invoke PowerShell Script embedded task in the workflow. The Invoke PowerShell Script task is an out-of-box solution that allows you to automate PowerShell operations on the PowerShell target that is added as a PowerShell endpoint target in Cisco Intersight. This feature allows a workflow designer to extend the automation capabilities of the workflow engine beyond what is natively available in the task library and interact with the PowerShell target endpoint.\nSupported Targets\nThe Invoke PowerShell Script task can be run only on the targets that are added as a PowerShell endpoint target type in Cisco Intersight.\nTo run the PowerShell Script task on the PowerShell target endpoint from Cisco Intersight, ensure that:\nThe endpoint is reachable through Intersight Assist.\nThe endpoint target is in the Connected state.\nPowerShell Remoting is enabled on the target endpoint to allow the endpoint to receive PowerShell remote commands.\nNote: You can run the Invoke PowerShell Script task only on a Windows system.\nTo enable PowerShell Remoting on a PowerShell endpoint target, execute the following remoting script on the PowerShell target endpoint:\n[CmdletBinding()]\nParam (\n[switch]$EnableBasicAuth = $false,\n[switch]$SKipNetworkProfileCheck = $false,\n[switch]$ForceNewSSLCert = $false,\n[string]$SubjectName = $env:COMPUTERNAME,\n[int]$CertValidityDays = 1095\n)\nFunction New-SelfSignedCert\n{\nParam (\n[string]$SubjectName,\n[int]$ValidDays = 1095\n)\n$hostnonFQDN = $env:computerName\n$hostFQDN = [System.Net.Dns]::GetHostByName(($env:computerName)).Hostname\n$SignatureAlgorithm = “SHA256”\n$name = New-Object -COM “X509Enrollment.CX500DistinguishedName.1”\n$name.Encode(“CN=$SubjectName”, 0)\n$key = New-Object -COM “X509Enrollment.CX509PrivateKey.1”\n$key.ProviderName = “Microsoft Enhanced RSA and AES Cryptographic Provider”\n$key.KeySpec = 1\n$key.Length = 4096\n$key.SecurityDescriptor = “D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)”\n$key.MachineContext = 1\n$key.Create()\n$serverauthoid = New-Object -COM “X509Enrollment.CObjectId.1”\n$serverauthoid.InitializeFromValue(“1.3.6.1.5.5.7.3.1”)\n$ekuoids = New-Object -COM “X509Enrollment.CObjectIds.1”\n$ekuoids.Add($serverauthoid)\n$ekuext = New-Object -COM “X509Enrollment.CX509ExtensionEnhancedKeyUsage.1”\n$ekuext.InitializeEncode($ekuoids)\n$cert = New-Object -COM “X509Enrollment.CX509CertificateRequestCertificate.1”\n$cert.InitializeFromPrivateKey(2, $key, “”)\n$cert.Subject = $name\n$cert.Issuer = $cert.Subject\n$cert.NotBefore = (Get-Date).AddDays(-1)\n$cert.NotAfter = $cert.NotBefore.AddDays($ValidDays)\n$SigOID = New-Object -ComObject X509Enrollment.CObjectId\n$SigOID.InitializeFromValue(([Security.Cryptography.Oid]$SignatureAlgorithm).Value)\n[string[]] $AlternativeName += $hostnonFQDN\n$AlternativeName += $hostFQDN\n$IAlternativeNames = New-Object -ComObject X509Enrollment.CAlternativeNames\nforeach ($AN in $AlternativeName)\n{\n$AltName = New-Object -ComObject X509Enrollment.CAlternativeName\n$AltName.InitializeFromString(0x3,$AN)\n$IAlternativeNames.Add($AltName)\n}\n$SubjectAlternativeName = New-Object -ComObject X509Enrollment.CX509ExtensionAlternativeNames\n$SubjectAlternativeName.InitializeEncode($IAlternativeNames)\n[String[]]$KeyUsage = (“DigitalSignature”, “KeyEncipherment”)\n$KeyUsageObj = New-Object -ComObject X509Enrollment.CX509ExtensionKeyUsage\n$KeyUsageObj.InitializeEncode([int][Security.Cryptography.X509Certificates.X509KeyUsageFlags]($KeyUsage))\n$KeyUsageObj.Critical = $true\n$cert.X509Extensions.Add($KeyUsageObj)\n$cert.X509Extensions.Add($ekuext)\n$cert.SignatureInformation.HashAlgorithm = $SigOID\n$CERT.X509Extensions.Add($SubjectAlternativeName)\n$cert.Encode()\n$enrollment = New-Object -COM “X509Enrollment.CX509Enrollment.1”\n$enrollment.InitializeFromRequest($cert)\n$certdata = $enrollment.CreateRequest(0)\n$enrollment.InstallResponse(2, $certdata, 0, “”)\n# extract/return the thumbprint from the generated cert\n$parsed_cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2\n$parsed_cert.Import([System.Text.Encoding]::UTF8.GetBytes($certdata))\nreturn $parsed_cert.Thumbprint\n}\n# Setup error handling\nTrap\n{\n$_\nExit 1\n}\n# Treat non terminating erros as terminating errors\n$ErrorActionPreference = “Stop”\n# Get the ID and security principal of the current user account\n$myWindowsID=[System.Security.Principal.WindowsIdentity]::GetCurrent()\n$myWindowsPrincipal=new-object System.Security.Principal.WindowsPrincipal($myWindowsID)\n# Get the security principal for the Administrator role\n$adminRole=[System.Security.Principal.WindowsBuiltInRole]::Administrator\n# Check to see if we are currently running “as Administrator”\nif (-Not $myWindowsPrincipal.IsInRole($adminRole))\n{\nWrite-Output “ERROR: You need elevated Administrator privileges in order to run this script.”\nWrite-Output \" Start Windows PowerShell by using the Run as Administrator option.\"\nExit 2\n}\n# Ensure PowerShell version is greater that 3.0\nif ($PSVersionTable.PSVersion.Major -lt 3) {\nThrow “Minimum required PowerShell version is 3.0”\n}\n# Ensure WinRM is present on the machine\nif (!(Get-Service “WinRM” -ErrorAction SilentlyContinue)) {\nThrow “WinRM service is not present on the machine”\n}\n# Ensure WinRM is running on the machine\nif (!(Get-Service “WinRM” -ErrorAction SilentlyContinue | where {$_.Status -eq “Running”})) {\nWrite-Output “WinRM service is not running”\nWrite-Output “Attempting to start WinRM service”\nStart-Service “WinRM”\n}\n# Check if PS Remoting is already enabled, if not enable it\n# WinRM should be running; check that we have a PS session config.\nif (!(Get-PSSessionConfiguration -Verbose:$false) -or (!(Get-ChildItem WSMan:\\localhost\\Listener)))\n{\nif ($SkipNetworkProfileCheck) {\nWrite-Verbose “Enabling PS Remoting without checking Network profile.”\nEnable-PSRemoting -SkipNetworkProfileCheck -Force -ErrorAction Stop\nWrite-Output “Enabled PS Remoting.”\n}\nelse {\nWrite-Verbose “Enabling PS Remoting.”\nEnable-PSRemoting -Force -ErrorAction Stop\nWrite-Output “Enabled PS Remoting.”\n}\n}\nelse\n{\nWrite-Verbose “PS Remoting is already enabled.”\n}\n# Ensure LocalAccountTokenFilterPolicy is set to 1\n# https://github.com/ansible/ansible/issues/42978\n# Needed for NTLM authentication\n$token_path = “HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System”\n$token_prop_name = “LocalAccountTokenFilterPolicy”\n$token_key = Get-Item -Path $token_path\n$token_value = $token_key.GetValue($token_prop_name, $null)\nif ($token_value -ne 1) {\nWrite-Verbose “Setting LocalAccountTOkenFilterPolicy to 1”\nif ($null -ne $token_value) {\nRemove-ItemProperty -Path $token_path -Name $token_prop_name\n}\nNew-ItemProperty -Path $token_path -Name $token_prop_name -Value 1 -PropertyType DWORD \u003e $null\n}\n# Make sure there is a SSL listener.\n$listeners = Get-ChildItem WSMan:\\localhost\\Listener\nif (!($listeners | Where-Object {$_.Keys -like “TRANSPORT=HTTPS”}))\n{\n# We cannot use New-SelfSignedCertificate on 2012R2 and earlier\n$thumbprint = New-SelfSignedCert -SubjectName $SubjectName -ValidDays $CertValidityDays\nWrite-Output “Self-signed SSL certificate generated; thumbprint: $thumbprint”\n# Create the hashtables of settings to be used.\n$valueset = @{\nHostname = $SubjectName\nCertificateThumbprint = $thumbprint\n}\n$selectorset = @{\nTransport = “HTTPS”\nAddress = “*”\n}\nWrite-Verbose “Enabling SSL listener.”\nNew-WSManInstance -ResourceURI ‘winrm/config/Listener’ -SelectorSet $selectorset -ValueSet $valueset\nWrite-Verbose “Enabled SSL listener.”\n}\nelse\n{\nWrite-Verbose “SSL listener is already active.”\n# Force a new SSL cert on Listener if the $ForceNewSSLCert\nif ($ForceNewSSLCert)\n{\n# We cannot use New-SelfSignedCertificate on 2012R2 and earlier\n$thumbprint = New-SelfSignedCert -SubjectName $SubjectName -ValidDays $CertValidityDays\nWrite-Verbose “Self-signed SSL certificate generated; thumbprint: $thumbprint”\n$valueset = @{\nCertificateThumbprint = $thumbprint\nHostname = $SubjectName\n}\n# Delete the listener for SSL\n$selectorset = @{\nAddress = “*”\nTransport = “HTTPS”\n}\nRemove-WSManInstance -ResourceURI ‘winrm/config/Listener’ -SelectorSet $selectorset\n# Add new Listener with new SSL cert\nNew-WSManInstance -ResourceURI ‘winrm/config/Listener’ -SelectorSet $selectorset -ValueSet $valueset\n}\n}\n# Enable/Disable basic authentication as needed\n$basicAuth = Get-Item WSMan:\\localhost\\Service\\Auth\\Basic\nif ($EnableBasicAuth) {\nif ($basicAuth.Value -eq “true”) {\nWrite-Output “Basic authentication is already enabled”\n} else {\nWrite-Output “Basic authentication is currently disabled”\nSet-Item WSMan:\\localhost\\Service\\Auth\\Basic -Value $true\nWrite-Output “Basic authentication has been enabled”\n}\n} else {\nif ($basicAuth.Value -eq “true”) {\nWrite-Output “Basic authentication is currently enabled”\nSet-Item WSMan:\\localhost\\Service\\Auth\\Basic -Value $false\nWrite-Output “Basic authentication has been disabled”\n} else {\nWrite-Output “Basic authentication is already disabled”\n}\n}\n# Check firewall\n$rule = Get-NetFirewallRule | where {$_.DisplayName -eq “Allow WinRM HTTPS”}\nif ($rule) {\nif ($rule.Profile.ToString() -eq “Any”) {\nWrite-Output “Firewall rule already exists for WinRM”\n} else {\nSet-NetFirewallRule -DisplayName “Allow WinRM HTTPS” -Profile Any\n}\n} else {\nWrite-Output “Creating firewall rule for WinRM”\nNew-NetFirewallRule -Profile Any -Name “Allow WinRM HTTPS” -DisplayName “Allow WinRM HTTPS” -Direction Inbound -LocalPort 5986 -Protocol “TCP” -Action Allow -Enabled True | Out-Null\n}\n# Test a remoting connection to localhost, which should work.\n$httpResult = Invoke-Command -ComputerName “localhost” -ScriptBlock {$env:COMPUTERNAME} -ErrorVariable httpError -ErrorAction SilentlyContinue\n$httpsOptions = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck\n$httpsResult = New-PSSession -UseSSL -ComputerName “localhost” -SessionOption $httpsOptions -ErrorVariable httpsError -ErrorAction SilentlyContinue\nif ($httpResult -and $httpsResult)\n{\nWrite-Verbose “HTTP: Enabled | HTTPS: Enabled”\n}\nelseif ($httpsResult -and !$httpResult)\n{\nWrite-Verbose “HTTP: Disabled | HTTPS: Enabled”\n}\nelseif ($httpResult -and !$httpsResult)\n{\nWrite-Verbose “HTTP: Enabled | HTTPS: Disabled”\n}\nelse\n{\nWrite-Output “Unable to establish an HTTP or HTTPS remoting session.”\nThrow “Unable to establish an HTTP or HTTPS remoting session.”\n}\nRemove-PSSession -Session $httpsResult -ErrorAction SilentlyContinue\nWrite-Output “PS Remoting has been successfully configured for Intersight.”\nFor more information on Intersight Target Claim, see Target Claim Using Intersight Assist.\nUsing the Executor PowerShell Script embedded task\nUse the Invoke PowerShell Script from the Executors section in the Intersight Orchestrator Workflow Designer UI to create a task for a PowerShell Script target endpoint.\nThe following table explains the PowerShell Script task properties:\nProperty\rDescription\rExternal Target\rThe PowerShell endpoint on which the PowerShell Script task is run.\nThe PowerShell Script target must be in the connected state.\nStatic Value—Click Select External Target to select the PowerShell endpoint target from the Cisco Intersight target inventory.\nDirect Mapping—Select an existing workflow input or Task output field.\nTo create a new Workflow input, select Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the task input.\nScript\rThe PowerShell script to be executed on the endpoint.\nStatic Value—The PowerShell script.\nDirect Mapping—Select an existing workflow input or Task output field.\nTo create a new Workflow input, select Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nNote: When you specify the PowerShell script statement and enable the Response Parser Type as JSON, at the time of execution of the workflow, Intersight pipes ConvertTo-Json to the script to get the corresponding responses as JSON output. However, PowerShell script statements do not output to the pipe command, and the workflow may fail and return the error \"An empty pipe element is not allowed.\". For example, for a script foreach ($x in 1,2,3,4,5) {$x} with Response Parser Type as JSON, when the workflow is executed the workflow fails and returns the error \"An empty pipe element is not allowed\".\nYou must wrap the PowerShell script statement with the $() operator, such as $(foreach ($x in 1,2,3,4,5) {$x} ) for the PowerShell script to work.\nTimeout\rThe duration in seconds for which the task waits for a response from the PowerShell target endpoint.\nThe field corresponds to the wsman:OperationTimeout field in the WinRM SOAP/XML message.\nStatic Value—The timeout in seconds.\nDirect Mapping—Select the command timeout from the Workflow input or Task output.\nTo create a new Workflow input, select Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input.\nResponse Parser\rThe response parser contains information about the required values, their types, and the location in the API responses. You specify the required values along with API request details. These details are used by the response parser to extract the values from the API responses.\nStatic Value—Select the response type as JSON or Text.\nEnable JSON Parsing—Select enable to parse the script response and extract the data from it.\nDepth—The number of levels of the contained objects that must be included in the JSON representation.\nPath—The content specific path information that identifies the parameter value within the content. The value is usually XPath or JSONPath.\nName—The name of the output under which the captured value is saved.\nType—The response parameter type—String, Integer, Float, or Boolean.\nEnable Text Parsing—Select enable to parse the script response and extract data from it.\nRegular Expression—The regular expression of the line in the command response where the interested capture value resides. The format to specify the capture value in this input is $\u003cName of the parameter\u003e. For example, if the value of the Regular Expression field is $\u003cParameterName\u003e\\@cisco\\.com, then the Name field must be given the value - ParameterName.\nName—The name of the output under which the captured value is saved. This name should be the same that is provided in the Regular Expression—$\u003cName\u003e.\nType—The response parameter type—String, Integer, Float, or Boolean.\nDirect Mapping—Select the command timeout from the Workflow input or Task output.\nTo create a new Workflow input, select Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input.\nThe following table explains the task Output properties:\nProperty\rDescription\rExit Code\rThe exit code after the execution of the PowerShell script against the given endpoint.\rResponse\rThe response returned by the script.\rExtracted Parameters\rThe list of output parameters extracted from the response.\rThe following table explains the task Outcomes properties:\nProperty\rDescription\rOutcomes\rTo use the extracted values from the API response to determine the task status and set the status with an appropriate message, when the conditions match, do the following:\nClick Add Outcome.\nName—The name for the outcome.\nOutcome Type—Select the outcome type as Success, Error, or Skip Task Execution.\nFor more information on Outcomes, see Outcomes\nMessage—The message when the condition is met.\nCondition—The condition for the outcome.\nFor example, {{eq .local.response.ExitCode \"0\"}}.\nThis condition checks whether the response exit code of API is 0.\nUsing the Executor PowerShell Script custom task\nUse the Invoke PowerShell Script from the Executors section in the Intersight Orchestrator Task Designer UI .\nFor more information on custom tasks, see Defining a Task\nThe following table explains the PowerShell Script custom task properties:\nProperty\rDescription\rGeneral\rFor more information, see Defining a Task\n.\nInputs\rExternal Target—The PowerShell endpoint target on which the PowerShell script task is run.\rOutputs\rTo extract the required values from the API responses and map it to task outputs, do the following:\nCreate Task Output—Specify the task output.\nMap to Task Output—Check the check box to map the task output to an API response.\nTask Output—Select the API response to which the task output is mapped. The options available are:\nExit Code | Invoke PowerShell Script\nResponse | Invoke PowerShell Script\nExtracted Parameters | Invoke PowerShell Script\nFor example, if you create a new task output New Exit Code and map it to Exit Code | Invoke PowerShell Script, after the workflow is executed, the output will show:\n.\n└── Outputs/\n├── ConfigResults:[ 1 ]/\n│ └── Object:{ 3 }/\n│ ├── ConfigResCtx:{ 1 }/\n│ │ └── EntityData:{ 1 }/\n│ │ └── task:workflow.PowerShellApiTask\n│ ├── State:Ok\n│ └── Type:Config\n├── Custom_Task_Output:Handles NPM(K) PM(K) WS(K) CPU(s) Id SI ProcessName/\n│ ----- ------ ----- ----- ------ -- -- -----------\n│ 264 16 4880 24808 1.11 2600 2 ApplicationFrameHost\n│ 405 28 109036 5628 85.55 2112 2 chrome\n│ ...\n└── New Exit Code:0\nThe following table explains the PowerShell Script custom task input:\nProperty\rDescription\rScript\rThe PowerShell script to be executed on the target endpoint.\nStatic Value—The PowerShell Script.\nDirect Mapping—Select an existing Task input or Task output field.\nNote: When you use Direct Mapping and select a task input, and then execute the workflow it fails and returns the error map[Text:get-service : The term 'map[Text:get-service' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again..\nYou must prefix .Text to the Direct Mapping input in Advanced Mapping. For example, for a task input Script, the Advanced Mapping input should be{{.global.task.input.Script.Text}}\nAdvanced Mapping—Map a Golang template to the task input.\nTimeout\rThe duration in seconds for which the task waits for a response from the PowerShell target endpoint.\nThe field corresponds to the wsman:OperationTimeout field in the WinRM SOAP/XML message.\nStatic Value—The timeout in seconds.\nDirect Mapping—Select the command timeout from the Task input or Task output.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input.\nResponse Parser\rThe response parser contains information about the required values, their types, and the location in the API responses. You specify the required values along with API request details. These details are used by the response parser to extract the values from the API responses.\nStatic Value—Select the response type as JSON or Text.\nEnable JSON Parsing—Select enable to parse the script response and extract the data from it.\nDepth—The number of levels of the contained objects that must be included in the JSON representation.\nPath—The content specific path information that identifies the parameter value within the content. The value is usually XPath or JSONPath.\nName—The name of the output under which the captured value is saved.\nType—The response parameter type—String, Integer, Float, or Boolean.\nEnable Text Parsing—Select enable to parse the script response and extract data from it.\nRegular Expression—The regular expression of the line in the command response where the interested capture value resides. The format to specify the capture value in this input is $\u003cName of the parameter\u003e. For example, if the value of the Regular Expression field is $\u003cParameterName\u003e\\@cisco\\.com, then the Name field must be given the value - ParameterName.\nName—The name of the output under which the captured value is saved. This name should be the same that is provided in the Regular Expression—$\u003cName\u003e.\nType—The response parameter type—String, Integer, Float, or Boolean.\nDirect Mapping—Select the input from the Task input or Task output.\nNote: When you use Direct Mapping and select a task input, and execute the workflow it fails and returns the error Error in execution: API request cannot be populated: invalid character 'm' looking for beginning of value.\nYou must pipe ToJson to Direct Mapping in Advanced Mapping. For example, for a task input ResponseParser, the Advanced Mapping input should be {{.global.task.input.ResponseParser| ToJson}}.\nAdvanced Mapping—Map a Golang template to the task input.\nThe following table explains the PowerShell Script custom task Outcomes:\nProperty\rDescription\rOutcomes\rTo use the extracted values from the API response to determine the task status and set the status with an appropriate message, when the conditions match, do the following:\nClick Add Outcome.\nName—The name for the outcome.\nOutcome Type—Select the outcome type. The options available are Success, Skip To Success, Error, Terminal Error, Skip Task Execution, or Status.\nFor more information on Outcomes, see Outcomes\nMessage—The message when the condition is met.\nCondition—The condition for the outcome.\nFor example, {{eq .global.InvokePowerShellScript1.output.ExitCode \"0\"}}.\nThis condition checks whether the response exit code of the API named ‘InvokePowerShellScript1’ used in a custom task is 0.\nTemplate Parameters\nThe request body template can refer to values from workflow inputs, previous task outputs, or implicit parameters for Intersight API calls. The following table explains the template parameters.\nPrefix/Format\rDescription\r{{.global.workflow.input.\u003cParameterName\u003e}}\rWorkflow input reference.\r{{.global.\u003cTaskRefName\u003e.output.\nParameters.\u003cParameterName\u003e}}\rPrevious task output reference. TaskRefName is the name of the previous task having output ParameterName.\r{{.security.AccountMoid}}\rImplicit parameter reference to Account MoID under which the workflow is running.\r{{.security.OrganizationMoid}}\rImplicit parameter reference to Organization MoID under which the workflow is running.\rTemplate Functions\nThe template engine has in-built functions to transform values before they are populated in the request templates. The following table explains the functions supported in Invoke Web API Request task.\nFunction\rDescription\rTrimSpace\rReturns a string after removing whitespaces from a the string.\nExample:\n{{TrimSpace .global.workflow.input.HostName}}\nContainsString\rReturns a boolean if a substring is present in a given string.\nExample:\n{{if (ContainsString .global.workflow.input.SizeAsString \\”MB\\”)}}Mega Bytes{{else}}Bytes{{end}}\nFindAllString\rReturns a slice of substrings matching the regular expression in a given string.\nExample:\n{{(FindAllString .global.workflow.input.NumberString \\”([0-9]+)\\”)}}\nThe above example returns array [“123”, “456”] for input string “123 some text 456.”\nToJson\rConverts a value to a JSON format.\nExample:\n{{(FindAllString .global.workflow.input.NumberString \\\"([0-9]+)\\\") | ToJson}}\nThe above example returns JSON array literal [“123”, “456”] for input string “123 some text 456.”\nAsArray\rTakes in an element and returns an array of one element.\nExample:\n{{AsArray .global.workflow.output.serverMo}}\nThe above example returns an array of one server Mo.\nSubstring\rReturns a substring within the given index bounds.\nExample:\n{{Substring .global.workflow.input.StorageId 2 6}}\nThe above example returns “ABCD” for string “12ABCD3456.”\nIpToCidr\rReturns the classless inter-domain routing (CIDR) notation of an IPv4 address and subnet mask.\nExample:\n{{IpToCidr .global.workflow.input.Ip .global.workflow.input.Netmask}}\nThe above example returns “10.10.10.10/24” for the input parameters “10.10.10.10” and “255.255.255.0.”\nLookupInSlice\rChecks if a given value is present in given slice or array and returns true if it exists. This function can be used for any value.\nExample:\n{{LookupInSlice .global.workflow.input.IpAddressList \\”10.10.10.10\\”}}\nThe above example returns true for input [”10.10.10.10”, “20.20.20.20”].\nIndex\rReturns a value from an array when an input index exists.\nExample:\n{{ index .global.workflow.input.nodes .global.workflow.input.idx }} In the above example, if nodes is an array of devices and idx is 2, the index function returns the second device in the array.\nItob\rConverts an integer to a boolean.\nExample:\n{{ Itob global.workflow.input.OnOffFlip }} The above example returns true and false for inputs 1 and 0 respectively.\nItoa\rConverts a given number to a string value.\nExample:\n{{ Itoa global.workflow.input.Port }} The above example returns “12345” for input 12345.\nItof\rConverts a given integer to a float value.\nExample:\n{{ Itof global.workflow.input.Rate }}\nThe above example returns 15.0 for an input 15.\nBtoa\rConverts a given boolean to a string value.\nExample:\n{{ Btoa global.workflow.input.OnOffFlip }}\nThe above example returns “true” for input true.\nBtoi\rConverts a given boolean to a integer value.\nExample:\n{{ Btoi global.workflow.input.OnOffFlip }}\nThe above example returns 1 and 0 for inputs true and false respectively.\nAtob\rConverts the given string into a Boolean value.\nExample:\n{{ Atob global.workflow.input.OnOffFlip }}Returns true for input “true”\nAtoi\rConverts a given number in string format to the integer type.\nExample:\n{{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”\nFtoa\rConverts a given number into the string form based on the given precision.\nExample:\n{{Ftoa .global.task.input.Size 2}} returns the following output: 123.456 =\u003e “123.45”, 1028 =\u003e “1028.00”\nFtoi\rConverts a given float input to a integer value.\nExample:\n{{ Ftoi global.workflow.input.Rate }}\nThe above example returns 15 for an input 15.833.\nEval\rSupports an expression evaluation function. The below example returns 2GB for a input value of 2048. Note that the second argument is passed as ‘.’ in the template, which represents the map of all parameters.\n{{Eval \\\"{{.global.workflow.input.Size}} / 1024\\\" .}}GB\nTemplate Engine Syntax\nThe template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements\nThe comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}}\nConditional Statements\nThe template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \u003ccomparision_statement\u003e}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else if \u003ccomparision_statement}} Tempalte to be used {{end}}\nPowerShell Script Task Examples\nExample 1: Create a workflow to run a PowerShell Script task to get the items and child items on a PowerShell Target endpoint\nThe example below shows the execution of a script to get the items and child items on a PowerShell target endpoint. The response parser of the PowerShell script task is configured to use the Depth parameter to limit the number of levels to recurse to 1.\nThe workflow input field required for this example is as follows:\nWorkflow Input\rInput Fields\rExternal Target\rReference Name—Target\nType—Target Data Type\nIntersight API Reference—/api/v1/asset/Targets?$filter=(TargetType eq PowerShellEndpoint and Status eq Connected)\nName\nTarget Type\nThe following table lists the PowerShell Script task properties:\nProperty\rDescription\rExternal Target\rThe target on which the PowerShell Script task is executed.\n—${workflow.input.Target}\nScript\rStatic Value—get-childitem\rTimeout\rStatic Value—60 sec\rResponse Parser\rResponse Type—JSON\nDepth—1\nEnable JSON Parsing—Enable\nJSON Parser Parameters\nPath—$\nName—Dir\nType—String\nAfter you execute the workflow, the task output is:\n.\n└── ConfigResults:[ 1 ]/\n└── Object:{ 3 }/\n├── ConfigResCtx:{ 1 }/\n│ └── EntityData:{ 1 }/\n│ └── task:workflow.PowerShellApiTask\n├── State:Ok\n├── Type:Config\n├── Response:[/\n│ ├── {\n│ ├── “Name”: “Desktop”,\n│ ├── “Parent”: “Administrator”,\n│ ├── “Exists”: true,\n│ ├── “Root”: “C:\\\\”,\n│ ├── “FullName”: “C:\\\\Users\\\\Administrator\\\\Desktop”,\n│ ├── “Extension”: “”,\n│ ├── “CreationTime”: “\\/Date(1633091610981)\\/”,\n│ ├── “CreationTimeUtc”: “\\/Date(1633091610981)\\/”,\n│ ├── “LastAccessTime”: “\\/Date(1634588500706)\\/”,\n│ ├── “LastAccessTimeUtc”: “\\/Date(1634588500706)\\/”,\n│ ├── “LastWriteTime”: “\\/Date(1634588500706)\\/”,\n│ ├── “LastWriteTimeUtc”: “\\/Date(1634588500706)\\/”,\n│ ├── “Attributes”: 17,\n│ ├── “PSPath”: “Microsoft.PowerShell.Core\\\\FileSystem::C:\\\\Users\\\\Administrator\\\\Desktop”,\n│ ├── “PSParentPath”: “Microsoft.PowerShell.Core\\\\FileSystem::C:\\\\Users\\\\Administrator”,\n│ ├── “PSChildName”: “Desktop”,\n│ ├── “PSDrive”: “C”,\n│ ├── “PSProvider”: “Microsoft.PowerShell.Core\\\\FileSystem”,\n│ ├── “PSIsContainer”: true,\n│ ├── “Mode”: “d-r—”,\n│ ├── “BaseName”: “Desktop”,\n│ ├── “Target”: “”,\n│ ├── “LinkType”: null\n│ ├── },\n│ ├── {\n│ ├── “Name”: “Documents”,\n│ ├── “Parent”: “Administrator”,\n│ ├── “Exists”: true,\n│ ├── “Root”: “C:\\\\”,\n│ ├── “FullName”: “C:\\\\Users\\\\Administrator\\\\Documents”,\n│ ├── “Extension”: “”,\n│ ├── “CreationTime”: “\\/Date(1633091610981)\\/”,\n│ ├── “CreationTimeUtc”: “\\/Date(1633091610981)\\/”,\n│ ├── “LastAccessTime”: “\\/Date(1637588960280)\\/”,\n│ ├── “LastAccessTimeUtc”: “\\/Date(1637588960280)\\/”,\n│ ├── “LastWriteTime”: “\\/Date(1637588960280)\\/”,\n│ ├── “LastWriteTimeUtc”: “\\/Date(1637588960280)\\/”,\n│ ├── “Attributes”: 17,\n│ ├── “PSPath”: “Microsoft.PowerShell.Core\\\\FileSystem::C:\\\\Users\\\\Administrator\\\\Documents”,\n│ ├── “PSParentPath”: “Microsoft.PowerShell.Core\\\\FileSystem::C:\\\\Users\\\\Administrator”,\n│ ├── “PSChildName”: “Documents”,\n│ ├── “PSDrive”: “C”,\n│ ├── “PSProvider”: “Microsoft.PowerShell.Core\\\\FileSystem”,\n│ ├── “PSIsContainer”: true,\n│ ├── “Mode”: “d-r—”,\n│ ├── “BaseName”: “Documents”,\n│ ├── “Target”: “”,\n│ ├── “LinkType”: null\n│ ├── },\n│ └── …\n├── Exit Code:{ 0 }\n└── Extracted Parameters:{ 1 }/\n└── Test:[ 11 ]/\n└── Object:{ 20 }/\n├── Attributes:17\n├── BaseName:Contacts\n├── CreationTime:/Date(1633091626520)/\n├── CreationTimeUtc:/Date(1633091626520)/\n├── Exists:true\n├── FullName:C:\\Users\\Administrator\\Contacts\n├── LastAccessTime:/Date(1633091626520)/\n└── LastAccessTimeUtc:/Date(1633091626520)/\n…\nThe following is a sample code view:\n{\n“Catalog”: {\n“Moid”: “5c350f48696f6e2d3121feec”,\n“ObjectType”: “workflow.Catalog”,\n“link”: “https://www.intersight.com/api/v1/workflow/Catalogs/5c350f48696f6e2d3121feec\"\n},\n“DefaultVersion”: true,\n“Description”: “”,\n“InputDefinition”: [\n{\n“CustomDataTypeProperties”: {\n“CatalogMoid”: “”,\n“CustomDataTypeId”: “”,\n“CustomDataTypeName”: “”,\n“ObjectType”: “workflow.CustomDataProperty”\n},\n“Default”: {\n“IsValueSet”: false,\n“ObjectType”: “workflow.DefaultValue”,\n“Override”: false,\n“Value”: null\n},\n“Description”: “The PowerShell endpoint on which the script is to be executed. PowerShell Remoting must be enabled on the endpoint to allow for scripts to be executed remotely.\\n”,\n“DisplayMeta”: {\n“InventorySelector”: true,\n“ObjectType”: “workflow.DisplayMeta”,\n“WidgetType”: “Dropdown”\n},\n“InputParameters”: null,\n“IsArray”: false,\n“Label”: “External Target”,\n“Max”: 0,\n“Min”: 0,\n“Name”: “Target”,\n“ObjectType”: “workflow.TargetDataType”,\n“Properties”: [\n{\n“ConnectorAttribute”: “”,\n“ConstraintAttributes”: [],\n“DisplayAttributes”: [\n“Name”,\n“TargetType”\n],\n“ObjectType”: “workflow.TargetProperty”,\n“Selector”: “/api/v1/asset/Targets?$filter=(TargetType eq PowerShellEndpoint and Status eq Connected)”,\n“SelectorProperty”: {\n“Body”: null,\n“Method”: “GET”,\n“ObjectType”: “workflow.SelectorProperty”\n},\n“SupportedObjects”: [\n“asset.Target”\n]\n}\n],\n“Required”: true\n}\n],\n“InputParameterSet”: [],\n“Label”: “Example1PowerShell”,\n“Name”: “Example1PowerShell”,\n“OutputDefinition”: [],\n“OutputParameters”: null,\n“Properties”: {\n“Cloneable”: true,\n“EnableDebug”: false,\n“ExternalMeta”: true,\n“ObjectType”: “workflow.WorkflowProperties”,\n“Retryable”: false,\n“SupportStatus”: “Supported”\n},\n“Tags”: [],\n“Tasks”: [\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “StartTask”,\n“NextTask”: “InvokePowerShellScript1”,\n“ObjectType”: “workflow.StartTask”\n},\n{\n“CatalogMoid”: “5c2fc884696f6e2d316c5d59”,\n“Description”: “Executes the given PowerShell script against the given PowerShell endpoint. The endpoint is typically a windows\\nmachine with PowerShell Remoting enabled to allow for scripts to be executed remotely. The task connects to the\\nPowerShell endpoint using the WinRM protocol.\\n”,\n“InputParameters”: {\n“OperationTimeout”: 60,\n“ResponseParser”: {\n“Depth”: 1,\n“EnableJsonParser”: “Enable”,\n“JsonParameters”: [\n{\n“Name”: “Dir”,\n“Path”: “$”,\n“Type”: “string”\n}\n],\n“ResponseType”: “json”\n},\n“Script”: {\n“Text”: “get-childitem”\n},\n“Target”: “${workflow.input.Target}”\n},\n“Label”: “Invoke PowerShell Script”,\n“Name”: “InvokePowerShellScript1”,\n“ObjectType”: “workflow.WorkerTask”,\n“OnFailure”: “”,\n“OnSuccess”: “SuccessEndTask”,\n“RollbackDisabled”: false,\n“TaskDefinitionId”: “617913dd696f6e2d30bf346a”,\n“TaskDefinitionName”: “InvokePowerShellScript”,\n“UseDefault”: false,\n“Version”: 1\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “FailureEndTask”,\n“ObjectType”: “workflow.FailureEndTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “SuccessEndTask”,\n“ObjectType”: “workflow.SuccessEndTask”\n}\n],\n“UiInputFilters”: [],\n“UiRenderingData”: {\n“Positions”: [\n{\n“Name”: “StartTask”,\n“X”: 10,\n“Y”: 18.5\n},\n{\n“Name”: “SuccessEndTask”,\n“X”: 199.33338273233647,\n“Y”: 381.4409231740322\n},\n{\n“Name”: “FailureEndTask”,\n“X”: 462.33337796396506,\n“Y”: 365.6328414754678\n},\n{\n“Name”: “InvokePowerShellScript1”,\n“X”: 178.5,\n“Y”: 117\n}\n]\n},\n“Version”: 1,\n“WorkflowMetadata”: null\n}\nExample 2: Create a workflow to run a PowerShell Script task to install an Internet Information Services (IIS) web server and create a sample website\nThe following example workflow has two PowerShell script tasks. The first task installs the IIS web server on the PowerShell target endpoint. The second task connects to the same PowerShell endpoint target and creates a sample website.\nThe workflow input field required for this example are as follows:\nWorkflow Input\rInput Fields\rExternal Target\rReference Name—Target\nType—Target Data Type\nIntersight API Reference—/api/v1/asset/Targets?$filter=(TargetType eq PowerShellEndpoint and Status eq Connected)\nName\nTarget Type\nRole or Feature Name\rReference Name—RoleorFeatureName\nType—String\nWebsite Name\rReference Name—WebsiteName\nType—String\nThe following table lists the PowerShell Script task properties for installing the IIS web server :\nProperty\rDescription\rExternal Target\rThe target on which the PowerShell Script task is executed.\n${workflow.input.Target}\nScript\r\u003eInstall-WindowsFeature -name Web-Server -IncludeManagementTools\nStatic Value\n#Install role or feature\nWrite-Output 'Installing \"{{.global.workflow.input.RoleorFeatureName}}\" Feature'\nInstall-WindowsFeature -Name \"{{.global.workflow.input.RoleorFeatureName}}\" -IncludeManagementTools\nTimeout\rStatic Value—15060 sec\rResponse Parser\rResponse Type—JSON\nDepth—1\nEnable JSON Parsing—Enable\nJSON Parser Parameters\nPath—$.Success\nName—Installation Succeeded\nType—String\nThe following table lists the PowerShell script task properties for creating a sample website:\nProperty\rDescription\rExternal Target\rThe target on which the PowerShell Script task is executed.\n${workflow.input.Target}\nScript\rStatic Value\n#Create website content\n$site = \"{{.global.workflow.input.WebsiteName}}\"\nNew-Item -ItemType Directory -Name 'MyWebsite' -Path 'C:\\'\nNew-Item -ItemType File -Name 'index.html' -Path 'C:\\MyWebsite\\'\nGet-Service | ConvertTo-Html -As LIST | Out-File C:\\MyWebsite\\index.html\n#Create a new site\nNew-IISSite -Name $site -PhysicalPath 'C:\\MyWebsite\\' -BindingInformation \"*:8088:\"\nGet-IISSite | where Name -Contains $site | Format-Table -Property Name,State\nTimeout\rStatic Value—10060 sec\rResponse Parser\rResponse Type—Text\nDepth—1\nEnable Text Parsing—Enable\nText Parser Parameters\nRegular Expression—^demo+\\s$\u003cSiteState\u003e\nName—SiteState\nType—String\nAfter you execute the workflow, the task output is:\n#Invoke PowerShell Script\n…\n├── Inputs /\n│ ├── Script:{ 1 }/\n│ │ Text:#Install role or feature\n│ │ Write-Output ‘Installing “Web-Server” Feature’\n│ │ Install-WindowsFeature -Name “Web-Server” -IncludeManagementTools\n│ ├── Timeout:150\n│ ├── Response Parser:{ 4 }/\n│ │ ├── Depth: 1\n│ │ └── Enable JSON Parsing:Enable/\n│ │ ├── JSON Parser Parameters:[ 1 ]/\n│ │ │ └── Object:{ 3 }/\n│ │ │ ├── Name:Installation Succeeded\n│ │ │ ├── Path:$.Success\n│ │ │ └── Type:string\n│ │ └── Response Type:json\n│ └── External Target:{ 2 }/\n│ ├── Moid:61a5f99c6f72612d30b1e4bf\n│ └── ObjectType:asset.Target\n└── Outputs/\n├── ConfigResults:[ 1 ]/\n│ ├── Object:{ 3 }/\n│ │ └── ConfigResCtx:{ 1 }/\n│ │ └── EntityData:{ 1 }/\n│ │ └── task:workflow.PowerShellApiTask\n│ ├── State:Ok\n│ └── Type:Config\n├── Response:Installing “Web-Server” Feature/\n│ {\n│ “Success”: true,\n│ “RestartNeeded”: 1,\n│ “FeatureResult”: [\n│ “Common HTTP Features”,\n│ “Default Document”,\n│ “Directory Browsing”,\n│ “Request Filtering”,\n│ “Health and Diagnostics”,\n│ “HTTP Errors”,\n│ “HTTP Logging”,\n│ “IIS Management Console”,\n│ “Management Tools”,\n│ “Performance”,\n│ “Security”,\n│ “Web Server (IIS)”,\n│ “Static Content Compression”,\n│ “Static Content”,\n│ “Web Server”\n│ ],\n│ “ExitCode”: 0\n│ }\n└── Exit Code:{ 0 }\n#Invoke PowerShell Script\n…\n.\n└── Inputs/\n├── Script:{ 1 }/\n│ Text:#Create website content\n│ $site = “demo”\n│ New-Item -ItemType Directory -Name ‘MyWebsite’ -Path ‘C:\\’\n│ New-Item -ItemType File -Name ‘index.html’ -Path ‘C:\\MyWebsite\\’\n│ Get-Service | ConvertTo-Html -As LIST | Out-File C:\\MyWebsite\\index.html\n│ #Create a new site\n│ New-IISSite -Name $site -PhysicalPath ‘C:\\MyWebsite\\’ -BindingInformation “*:8088:”\n│ Get-IISSite | where Name -Contains $site | Format-Table -Property Name,State\n├── Timeout:100\n└── Response Parser:{ 3 }/\n├── Enable Text Parsing:Enable\n├── Response Type:text\n├── Text Parser Parameters:[ 1 ]/\n│ └── Object:{ 3 }/\n│ ├── Name:SiteState\n│ ├── RegexLine:^demo+\\s$\u003cSiteState\u003e\n│ └── Type:string\n├── External Target:{ 2 }/\n│ ├── Moid:61a5f99c6f72612d30b1e4bf\n│ └── ObjectType:asset.Target\n└── Outputs/\n├── ConfigResults:[ 1 ]/\n│ └── Object:{ 3 }/\n│ ├── ConfigResCtx:{ 1 }/\n│ │ └── EntityData:{ 1 }/\n│ │ └── task:workflow.PowerShellApiTask\n│ ├── State:Ok\n│ └── Type:Config\n├── Response:Directory: C:\\/\n│ Mode LastWriteTime Length Name\n│ —- ————- —— —-\n│ d—– 12/1/2021 11:43 AM MyWebsite\n│ Directory: C:\\MyWebsite\n│ Mode LastWriteTime Length Name\n│ —- ————- —— —-\n│ -a—- 12/1/2021 11:43 AM 0 index.html\n│ Name State\n│ —- —–\n│ demo Started\n├── Exit Code:{ 0 }\n└── Extracted Parameters:{ 1 }/\n└── SiteState:Started\nThe following is a sample code view:\n{\n“Catalog”: {\n“Moid”: “6166bf80696f6e2d30f796b7”,\n“ObjectType”: “workflow.Catalog”,\n“link”: “https://www.intersight.com/api/v1/workflow/Catalogs/6166bf80696f6e2d30f796b7\"\n},\n“DefaultVersion”: true,\n“Description”: “”,\n“InputDefinition”: [\n{\n“CustomDataTypeProperties”: {\n“CatalogMoid”: “”,\n“CustomDataTypeId”: “”,\n“CustomDataTypeName”: “”,\n“ObjectType”: “workflow.CustomDataProperty”\n},\n“Default”: {\n“IsValueSet”: false,\n“ObjectType”: “workflow.DefaultValue”,\n“Override”: false,\n“Value”: null\n},\n“Description”: “The PowerShell endpoint on which the script is to be executed. PowerShell Remoting must be enabled on the endpoint to allow for scripts to be executed remotely.\\n”,\n“DisplayMeta”: {\n“InventorySelector”: true,\n“ObjectType”: “workflow.DisplayMeta”,\n“WidgetType”: “Dropdown”\n},\n“InputParameters”: null,\n“IsArray”: false,\n“Label”: “External Target”,\n“Max”: 0,\n“Min”: 0,\n“Name”: “Target”,\n“ObjectType”: “workflow.TargetDataType”,\n“Properties”: [\n{\n“ConnectorAttribute”: “”,\n“ConstraintAttributes”: [],\n“DisplayAttributes”: [\n“Name”,\n“TargetType”\n],\n“ObjectType”: “workflow.TargetProperty”,\n“Selector”: “/api/v1/asset/Targets?$filter=(TargetType eq PowerShellEndpoint and Status eq Connected)”,\n“SelectorProperty”: {\n“Body”: null,\n“Method”: “GET”,\n“ObjectType”: “workflow.SelectorProperty”\n},\n“SupportedObjects”: [\n“asset.Target”\n]\n}\n],\n“Required”: true\n},\n{\n“Default”: {\n“IsValueSet”: false,\n“ObjectType”: “workflow.DefaultValue”,\n“Override”: false,\n“Value”: null\n},\n“Description”: “Role or Feature Name”,\n“DisplayMeta”: {\n“InventorySelector”: true,\n“ObjectType”: “workflow.DisplayMeta”,\n“WidgetType”: “None”\n},\n“InputParameters”: null,\n“Label”: “Role or Feature Name”,\n“Name”: “RoleorFeatureName”,\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Properties”: {\n“Constraints”: {\n“EnumList”: [],\n“Max”: 0,\n“Min”: 0,\n“ObjectType”: “workflow.Constraints”,\n“Regex”: \"”\n},\n“InventorySelector”: [],\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Secure”: false,\n“Type”: “string”\n},\n“Required”: false\n},\n{\n“Default”: {\n“IsValueSet”: false,\n“ObjectType”: “workflow.DefaultValue”,\n“Override”: false,\n“Value”: null\n},\n“Description”: “Website Name”,\n“DisplayMeta”: {\n“InventorySelector”: true,\n“ObjectType”: “workflow.DisplayMeta”,\n“WidgetType”: “None”\n},\n“InputParameters”: null,\n“Label”: “Website Name”,\n“Name”: “WebsiteName”,\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Properties”: {\n“Constraints”: {\n“EnumList”: [],\n“Max”: 0,\n“Min”: 0,\n“ObjectType”: “workflow.Constraints”,\n“Regex”: \"”\n},\n“InventorySelector”: [],\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Secure”: false,\n“Type”: “string”\n},\n“Required”: false\n}\n],\n“InputParameterSet”: [],\n“Label”: “PowerShellExample2”,\n“Name”: “PowerShellExample2”,\n“OutputDefinition”: [],\n“OutputParameters”: null,\n“Properties”: {\n“Cloneable”: true,\n“EnableDebug”: false,\n“ExternalMeta”: true,\n“ObjectType”: “workflow.WorkflowProperties”,\n“Retryable”: false,\n“SupportStatus”: “Supported”\n},\n“Tags”: [],\n“Tasks”: [\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “StartTask”,\n“NextTask”: “InvokePowerShellScript1”,\n“ObjectType”: “workflow.StartTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “SuccessEndTask”,\n“ObjectType”: “workflow.SuccessEndTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “FailureEndTask”,\n“ObjectType”: “workflow.FailureEndTask”\n},\n{\n“CatalogMoid”: “6166bf7f696f6e2d30f796a6”,\n“Description”: “Executes the given PowerShell script against the given PowerShell endpoint. The endpoint is typically a windows\\nmachine with PowerShell Remoting enabled to allow for scripts to be executed remotely. The task connects to the\\nPowerShell endpoint using the WinRM protocol.\\n”,\n“InputParameters”: {\n“OperationTimeout”: 150,\n“ResponseParser”: {\n“Depth”: 1,\n“EnableJsonParser”: “Enable”,\n“JsonParameters”: [\n{\n“Name”: “Installation Succeeded “,\n“Path”: “$.Success”,\n“Type”: “string”\n}\n],\n“ResponseType”: “json”\n},\n“Script”: {\n“Text”: “#Install role or feature\\r\\nWrite-Output ‘Installing \\”{{.global.workflow.input.RoleorFeatureName}}\\” Feature’\\r\\nInstall-WindowsFeature -Name \\”{{.global.workflow.input.RoleorFeatureName}}\\\" -IncludeManagementTools\"\n},\n“Target”: “${workflow.input.Target}”\n},\n“Label”: “Invoke PowerShell Script”,\n“Name”: “InvokePowerShellScript1”,\n“ObjectType”: “workflow.WorkerTask”,\n“OnFailure”: “”,\n“OnSuccess”: “InvokePowerShellScript2”,\n“RollbackDisabled”: false,\n“TaskDefinitionId”: “616e70f8696f6e2d30355005”,\n“TaskDefinitionName”: “InvokePowerShellScript”,\n“UseDefault”: false,\n“Version”: 1\n},\n{\n“CatalogMoid”: “6166bf7f696f6e2d30f796a6”,\n“Description”: “Executes the given PowerShell script against the given PowerShell endpoint. The endpoint is typically a windows\\nmachine with PowerShell Remoting enabled to allow for scripts to be executed remotely. The task connects to the\\nPowerShell endpoint using the WinRM protocol.\\n”,\n“InputParameters”: {\n“OperationTimeout”: 100,\n“ResponseParser”: {\n“EnableTextParser”: “Enable”,\n“ResponseType”: “text”,\n“TextParameters”: [\n{\n“Name”: “SiteState”,\n“RegexLine”: “^demo+\\\\s$\u003cSiteState\u003e”,\n“Type”: “string”\n}\n]\n},\n“Script”: {\n“Text”: “#Create website content\\r\\n$site = \\”{{.global.workflow.input.WebsiteName}}\\\"\\r\\nNew-Item -ItemType Directory -Name ‘MyWebsite’ -Path ‘C:\\\\’\\r\\nNew-Item -ItemType File -Name ‘index.html’ -Path ‘C:\\\\MyWebsite\\\\’\\r\\nGet-Service | ConvertTo-Html -As LIST | Out-File C:\\\\MyWebsite\\\\index.html\\r\\n#Create a new site\\r\\nNew-IISSite -Name $site -PhysicalPath ‘C:\\\\MyWebsite\\\\’ -BindingInformation \\\"*:8088:\\\"\\r\\nGet-IISSite | where Name -Contains $site | Format-Table -Property Name,State\"\n},\n“Target”: “${workflow.input.Target}”\n},\n“Label”: “Invoke PowerShell Script”,\n“Name”: “InvokePowerShellScript2”,\n“ObjectType”: “workflow.WorkerTask”,\n“OnFailure”: “”,\n“OnSuccess”: “SuccessEndTask”,\n“RollbackDisabled”: false,\n“TaskDefinitionId”: “616e70f8696f6e2d30355005”,\n“TaskDefinitionName”: “InvokePowerShellScript”,\n“UseDefault”: false,\n“Version”: 1\n}\n],\n“UiInputFilters”: [],\n“UiRenderingData”: {\n“Positions”: [\n{\n“Name”: “StartTask”,\n“X”: 10,\n“Y”: 18\n},\n{\n“Name”: “SuccessEndTask”,\n“X”: 10,\n“Y”: 692\n},\n{\n“Name”: “FailureEndTask”,\n“X”: 152,\n“Y”: 692\n},\n{\n“Name”: “InvokePowerShellScript1”,\n“X”: 72.5,\n“Y”: 182\n},\n{\n“Name”: “InvokePowerShellScript2”,\n“X”: 116,\n“Y”: 323\n}\n]\n},\n“Version”: 1,\n“WorkflowMetadata”: null\n}\nExecutors – Invoke Ansible Playbook - Embedded Task\nIntersight Cloud Orchestrator allows workflow designers to run Ansible Playbook on the Ansible Controller node using the Invoke Ansible Playbook embedded task in the workflow. The Invoke Ansible Playbook task is an out-of-box solution that allows you to automate Ansible operations on the Ansible Controller node that is added as an Ansible Endpoint target in Cisco Intersight. This feature allows a workflow designer to extend the automation capabilities of the workflow engine beyond what is natively available in the task library and interact with the Ansible Controller node target.\nFor more inforormation on Invoke Ansible Playbook - Reusable Task, see Invoke Ansible Playbook - Reusable Task.\nSupported Targets\nThe Invoke Ansible Playbook task can be run only on the targets that are added as an Ansible Endpoint target type in Cisco Intersight.\nThe Invoke Ansible Playbook task is executed as an orchestrator task and does not include the management of the Ansible Controller node.\nTo run the Ansible Playbook task on the Ansible Controller node from Cisco Intersight, ensure that:\nThe Ansible target is reachable through Intersight Assist when hosted on the customer premises.\nThe Ansible Playbook modules and Ansible Playbook executables required to run the playbooks are already installed on the Ansible Controller node.\nThe Ansible Controller node has password-less SSH access to the hosts.\nThe Ansible Controller node can resolve the endpoint hostnames if the Ansible Host Inventory file specifies the hostnames.\nFor more information on Intersight Target Claim, see Target Claim Using Intersight Assist.\nUsing the Executor Ansible Playbook task\nUse the Invoke Ansible Playbook from the Executors section in the Intersight Orchestrator Workflow Designer UI to create a request for an Ansible Playbook target.\nThe following table explains the task Input properties:\nProperty\rDescription\rAnsible Controller\rThe target on which the Ansible Playbook task is run.\nThe Ansible Playbook target must be in the Connected state.\nStatic Value—Click Select External Target to select an Ansible endpoint target from Cisco Intersight target inventory.\nDirect Mapping—Select an existing workflow input or Task output field.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the task input.\nPlaybook Path\rThe path of the Ansible Playbook file that resides on the Ansible Controller node added as Ansible Endpoint target in Intersight.\nStatic Value—The path of the Ansible Playbook.\nDirect Mapping—Select an existing workflow input or Task output field.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nHost Inventory\rThe path of the host inventory file that resides on the Ansible Controller or a comma-separated list of hosts on which the Ansible Playbook task is run.\nStatic Value—The path of the host inventory file that resides on the Ansible Controller or a comma-separated list of hosts.\nFor example, you can enter the hostname as root@10.10.10.10,\nNote: The hostname must be suffixed with a comma (,).\nDirect Mapping—Select the path from the Workflow input or Task output.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nCommand Timeout\rThe command timeout in seconds for the execution of the Ansible Playbook. The range is 10 to 7200 seconds.\nThe default timeout is 600 seconds.\nStatic Value—The command timeout in seconds.\nDirect Mapping—Select the command timeout from the Workflow input or Task output.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nCommand Line Argument\rThe optional command line arguments required to run the Ansible playbook.\nStatic Value—The command line argument.\nDirect Mapping—Select the input from the Workflow input or Task output.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nEscape character backslash(\\) needs to be used when the command line arguments contain double quotes(\").\nNote: For Invoke Ansible Playbook - Reusable Task, escape character backslash(\\) is not necessary when the command line arguments contain double quotes(\").\nThe following command line options are not supported by the Ansible Playbook task.\n-vvv\n-vvvv\n-k, -K\n-c\n--connection\n--sftp-extra-args\n--scp-extra-args\n--ask-vault-password\n--step\nFor information on the available command line arguments, see https://docs.ansible.com/ansible/latest/cli/ansible-playbook.html.\nThe following table explains the task Output properties:\nProperty\rDescription\rExit Code\rThe exit code after the execution of the Ansible Playbook against the given endpoint.\rExecution Summary\rThe summary after the execution of Ansible Playbook against the given endpoint.\rExecution Log Path\rThe Ansible execution log path on the Ansible Control node after the execution of Ansible Playbook against the given endpoint.\rTemplate Parameters\nThe request body template can refer to values from workflow inputs, previous task outputs, or implicit parameters. The following table explains the template parameters.\nPrefix/Format\rDescription\r{{.global.workflow.input.\u003cParameterName\u003e}}\rWorkflow input reference.\r{{.global.\u003cTaskRefName\u003e.output.\nParameters.\u003cParameterName\u003e}}\rPrevious task output reference. TaskRefName is the name of the previous task having output ParameterName.\r{{.security.AccountMoid}}\rImplicit parameter reference to Account MoID under which the workflow is running.\r{{.security.OrganizationMoid}}\rImplicit parameter reference to Organization MoID under which the workflow is running.\rTemplate Functions\nThe template engine has in-built functions to transform values before they are populated in the request templates. The following table explains the functions supported in Invoke Ansible Playbook task.\nFunction\rDescription\rTrimSpace\rReturns a string after removing whitespaces from a the string.\nExample:\n{{TrimSpace .global.workflow.input.HostName}}\nContainsString\rReturns a boolean if a substring is present in a given string.\nExample:\n{{if (ContainsString .global.workflow.input.SizeAsString \\”MB\\”)}}Mega Bytes{{else}}Bytes{{end}}\nFindAllString\rReturns a slice of substrings matching the regular expression in a given string.\nExample:\n{{(FindAllString .global.workflow.input.NumberString \\”([0-9]+)\\”)}}\nThe above example returns array [“123”, “456”] for input string “123 some text 456.”\nToJson\rConverts a value to a JSON format.\nExample:\n{{(FindAllString .global.workflow.input.NumberString \\\"([0-9]+)\\\") | ToJson}}\nThe above example returns JSON array literal [“123”, “456”] for input string “123 some text 456.”\nAsArray\rTakes in an element and returns an array of one element.\nExample:\n{{AsArray .global.workflow.output.serverMo}}\nThe above example returns an array of one server Mo.\nSubstring\rReturns a substring within the given index bounds.\nExample:\n{{Substring .global.workflow.input.StorageId 2 6}}\nThe above example returns “ABCD” for string “12ABCD3456.”\nIpToCidr\rReturns the classless inter-domain routing (CIDR) notation of an IPv4 address and subnet mask.\nExample:\n{{IpToCidr .global.workflow.input.Ip .global.workflow.input.Netmask}}\nThe above example returns “10.10.10.10/24” for the input parameters “10.10.10.10” and “255.255.255.0.”\nLookupInSlice\rChecks if a given value is present in given slice or array and returns true if it exists. This function can be used for any value.\nExample:\n{{LookupInSlice .global.workflow.input.IpAddressList \\”10.10.10.10\\”}}\nThe above example returns true for input [”10.10.10.10”, “20.20.20.20”].\nIndex\rReturns a value from an array when an input index exists.\nExample:\n{{ index .global.workflow.input.nodes .global.workflow.input.idx }} In the above example, if nodes is an array of devices and idx is 2, the index function returns the second device in the array.\nItob\rConverts an integer to a boolean.\nExample:\n{{ Itob global.workflow.input.OnOffFlip }} The above example returns true and false for inputs 1 and 0 respectively.\nItoa\rConverts a given number to a string value.\nExample:\n{{ Itoa global.workflow.input.Port }} The above example returns “12345” for input 12345.\nItof\rConverts a given integer to a float value.\nExample:\n{{ Itof global.workflow.input.Rate }}\nThe above example returns 15.0 for an input 15.\nBtoa\rConverts a given boolean to a string value.\nExample:\n{{ Btoa global.workflow.input.OnOffFlip }}\nThe above example returns “true” for input true.\nBtoi\rConverts a given boolean to a integer value.\nExample:\n{{ Btoi global.workflow.input.OnOffFlip }}\nThe above example returns 1 and 0 for inputs true and false respectively.\nAtob\rConverts the given string into a Boolean value.\nExample:\n{{ Atob global.workflow.input.OnOffFlip }}Returns true for input “true”\nAtoi\rConverts a given number in string format to the integer type.\nExample:\n{{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”\nFtoa\rConverts a given number into the string form based on the given precision.\nExample:\n{{Ftoa .global.task.input.Size 2}} returns the following output: 123.456 =\u003e “123.45”, 1028 =\u003e “1028.00”\nFtoi\rConverts a given float input to a integer value.\nExample:\n{{ Ftoi global.workflow.input.Rate }}\nThe above example returns 15 for an input 15.833.\nEval\rSupports an expression evaluation function. The below example returns 2GB for a input value of 2048. Note that the second argument is passed as ‘.’ in the template, which represents the map of all parameters.\n{{Eval \\\"{{.global.workflow.input.Size}} / 1024\\\" .}}GB\nTemplate Engine Syntax\nThe template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements\nThe comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}}\nConditional Statements\nThe template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \u003ccomparision_statement\u003e}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else if \u003ccomparision_statement}} Tempalte to be used {{end}}\nAnsible Playbook Task Example\nExample: Create a workflow to run Ansible Playbook task to install Nginx on the hosts\nThe following example workflow has two tasks—Ansible Playbook and SSH Command tasks. The first task runs the Ansible Playbook on a controller and installs Nginx on host nodes. In this task, the Playbook Path, Host Inventory, Sudo Password, and other inputs are provided by the workflow input fields. The second task, SSH Command, connects to the Ansible endpoint target over SSH and verifies the Ansible logs.\nThe workflow input fields required for this example are as follows:\nWorkflow Input\rInput Fields\rInstall Package\rReference Name—InstallPackage\nType—String\nHost Inventory\rReference Name—HostInventory\nType—String\nSudoPassword\rReference Name—SudoPassword\nType—String\nSecure option is selected. The values of these properties are encrypted and stored in Intersight.\nCommand Line Arguments\rReference Name—CommandLineArguments\nType—String\nThe following table lists the Ansible Playbook task properties:\nProperty\rDescription\rAnsible Controller\rThe target on which the Ansible Playbook task is executed.\rPlaybook Path\rStatic Value—${workflow.input.InstallPackage}\rHost Inventory\rStatic Value—${workflow.input.HostInventory}\rCommand Timeout\rDefault value.\rCommand Line Argument\rStatic Value—${workflow.input.CommandLineArguments}\rThe following table displays the SSH command task properties:\nProperty\rDescription\rExternal Target\rThe Ansible Controller VM that is used in the previous task.\rSSH Command\rCommand—cat {{.global.InvokeAnsiblePlaybook1.output.ExecutionLogPath}}\nIn the above example, InvokeAnsiblePlaybook1 is the task reference name of the previous task. To determine the task reference name, navigate to the Code view. For example:\n\"Tasks\": ...\n\"Description\": \"Executes Ansible Playbook against the given endpoint. This task can be executed on targets added as Ansible Endpoint in Intersight.\\n\",\n\"Label\": \"Invoke Ansible Playbook - Install Package\",\n\"Name\": \"InvokeAnsiblePlaybook1\",\n...\nCommand Timeout\rDefault value.\rExpected Exit Codes\rDefault value.\rShow Command Output\rSelect Show Command Option check box.\rResponse Parser\rNode 1\nRegular Expression— 10.106.*?\\\"changed\\\":.*?\\\"stderr\\\":\\s\\\"$\u003cVersionOnNode1\u003e\\\",\nName—VersionOnNode1\nType String\nNode 2\nRegular Expression—10.106.*?\\\"changed\\\":.*?\\\"stderr\\\":\\s\\\"$\u003cVersionOnNode2\u003e\\\",\nName—VersionOnNode2\nType—String\nAfter you execute the workflow, you would see the following output:\n.\n├── ConfigResults: [ 1 ]\n├── Object: { 3 }\n│ └── ConfigResCtx: { 1 }\n│ ├── EntityData: { 1 }\n│ │ └── task: workflow.SshTask\n│ ├── State: Ok\n│ └── Type: Config\n├── Command Output:\n│ ├── 2021-10-30 04:22:59,999 p=512757 u=qali n=ansible | Using /etc/ansible/ansible.cfg as config file\n│ ├── 2021-10-30 04:23:00,224 p=512757 u=qali n=ansible | PLAY [Install nginx] ***********************************************************\n│ ├── 2021-10-30 04:23:00,237 p=512757 u=qali n=ansible | TASK [Gathering Facts] *********************************************************\n│ ├── 2021-10-30 04:23:01,801 p=512757 u=qali n=ansible | ok: [guest@10.10.10.1]\n│ ├── 2021-10-30 04:23:02,033 p=512757 u=qali n=ansible | ok: [root@10.10.10.2]\n│ ├── 2021-10-30 04:23:02,042 p=512757 u=qali n=ansible | TASK [Add epel-release repo] ***************************************************\n│ ├── 2021-10-30 04:23:03,060 p=512757 u=qali n=ansible | ok: [guest@10.10.10.1] =\u003e {“changed”: false, “msg”: “\", “rc”: 0, “results”: [“epel-release-7-12.noarch providing epel-release is already installed”]}\n│ ├── 2021-10-30 04:23:27,036 p=512757 u=qali n=ansible | ok: [root@10.10.10.2] =\u003e {“changed”: false, “msg”: “Nothing to do”, “rc”: 0, “results”: []}\n│ ├── 2021-10-30 04:23:27,042 p=512757 u=qali n=ansible | TASK [Install nginx] ***********************************************************\n│ ├── 2021-10-30 04:23:27,887 p=512757 u=qali n=ansible | ok: [guest@10.10.10.1] =\u003e {“changed”: false, “msg”: “\", “rc”: 0, “results”: [“1:nginx-1.20.1-9.el7.x86_64 providing nginx is already installed”]}\n│ ├── 2021-10-30 04:23:29,534 p=512757 u=qali n=ansible | ok: [root@10.10.10.2] =\u003e {“changed”: false, “msg”: “Nothing to do”, “rc”: 0, “results”: []}\n│ ├── 2021-10-30 04:23:29,541 p=512757 u=qali n=ansible | TASK [Nginx Version] ***********************************************************\n│ ├── 2021-10-30 04:23:30,086 p=512757 u=qali n=ansible | changed: [guest@10.10.10.1] =\u003e {“changed”: true, “cmd”: [“nginx”, “-v”], “delta”: “0:00:00.006230”, “end”: “2021-10-29 05:52:52.465579”, “rc”: 0, “start”: “2021-10-29 05:52:52.459349”, “stderr”: “nginx version: nginx/1.20.1”, “stderr_lines”: [“nginx version: nginx/1.20.1”], “stdout”: “\", “stdout_lines”: []}\n│ ├── 2021-10-30 04:23:30,236 p=512757 u=qali n=ansible | changed: [root@10.10.10.2] =\u003e {“changed”: true, “cmd”: [“nginx”, “-v”], “delta”: “0:00:00.005168”, “end”: “2021-10-29 06:04:28.863644”, “rc”: 0, “start”: “2021-10-29 06:04:28.858476”, “stderr”: “nginx version: nginx/1.14.1”, “stderr_lines”: [“nginx version: nginx/1.14.1”], “stdout”: “\", “stdout_lines”: []}\n│ ├── 2021-10-30 04:23:30,248 p=512757 u=qali n=ansible | TASK [Start NGiNX] *************************************************************\n│ ├── 2021-10-30 04:23:31,043 p=512757 u=qali n=ansible | ok: [guest@10.10.10.1] =\u003e {“changed”: false, “name”: “nginx”, “state”: “started”, “status”: {“ActiveEnterTimestamp”: “Wed 2021-10-27 09:20:15 EDT”, “ActiveEnterTimestampMonotonic”: “24390544004045”, “ActiveExitTimestampMonotonic”: “0”, “ActiveState”: “active”, “After”: “remote-fs.target nss-lookup.target systemd-journald.socket basic.target system.slice -.mount tmp.mount network-online.target”, “AllowIsolate”: “no”, “AmbientCapabilities”: “0”, “AssertResult”: “yes”, “AssertTimestamp”: “Wed 2021-10-27 09:20:15 EDT”, “AssertTimestampMonotonic”: “24390543923354”, “Before”: “shutdown.target”, “BlockIOAccounting”: “no”, “BlockIOWeight”: “18446744073709551615”, “CPUAccounting”: “no”, “CPUQuotaPerSecUSec”: “infinity”, “CPUSchedulingPolicy”: “0”, “CPUSchedulingPriority”: “0”, “CPUSchedulingResetOnFork”: “no”, “CPUShares”: “18446744073709551615”, “CanIsolate”: “no”, “CanReload”: “yes”, “CanStart”: “yes”, “CanStop”: “yes”, “CapabilityBoundingSet”: “18446744073709551615”, “ConditionResult”: “yes”, “ConditionTimestamp”: “Wed 2021-10-27 09:20:15 EDT”, “ConditionTimestampMonotonic”: “24390543923353”, “Conflicts”: “shutdown.target”, “ControlGroup”: “/system.slice/nginx.service”, “ControlPID”: “0”, “DefaultDependencies”: “yes”, “Delegate”: “no”, “Description”: “The nginx HTTP and reverse proxy server”, “DevicePolicy”: “auto”, “ExecMainCode”: “0”, “ExecMainExitTimestampMonotonic”: “0”, “ExecMainPID”: “10910”, “ExecMainStartTimestamp”: “Wed 2021-10-27 09:20:15 EDT”, “ExecMainStartTimestampMonotonic”: “24390544003959”, “ExecMainStatus”: “0”, “ExecReload”: “{ path=/usr/sbin/nginx ; argv[]=/usr/sbin/nginx -s reload ; ignore_errors=no ; start_time=[n/a] ; stop_time=[n/a] ; pid=0 ; code=(null) ; status=0/0 }\", “ExecStart”: “{ path=/usr/sbin/nginx ; argv[]=/usr/sbin/nginx ; ignore_errors=no ; start_time=[Wed 2021-10-27 09:20:15 EDT] ; stop_time=[Wed 2021-10-27 09:20:15 EDT] ; pid=10909 ; code=exited ; status=0 }\", “ExecStartPre”: “{ path=/usr/sbin/nginx ; argv[]=/usr/sbin/nginx -t ; ignore_errors=no ; start_time=[Wed 2021-10-27 09:20:15 EDT] ; stop_time=[Wed 2021-10-27 09:20:15 EDT] ; pid=10905 ; code=exited ; status=0 }\", “FailureAction”: “none”, “FileDescriptorStoreMax”: “0”, “FragmentPath”: “/usr/lib/systemd/system/nginx.service”, “GuessMainPID”: “yes”, “IOScheduling”: “0”, “Id”: “nginx.service”, “IgnoreOnIsolate”: “no”, “IgnoreOnSnapshot”: “no”, “IgnoreSIGPIPE”: “yes”, “InactiveEnterTimestampMonotonic”: “0”, “InactiveExitTimestamp”: “Wed 2021-10-27 09:20:15 EDT”, “InactiveExitTimestampMonotonic”: “24390543931397”, “JobTimeoutAction”: “none”, “JobTimeoutUSec”: “0”, “KillMode”: “process”, “KillSignal”: “3”, “LimitAS”: “18446744073709551615”, “LimitCORE”: “18446744073709551615”, “LimitCPU”: “18446744073709551615”, “LimitDATA”: “18446744073709551615”, “LimitFSIZE”: “18446744073709551615”, “LimitLOCKS”: “18446744073709551615”, “LimitMEMLOCK”: “65536”, “LimitMSGQUEUE”: “819200”, “LimitNICE”: “0”, “LimitNOFILE”: “4096”, “LimitNPROC”: “15066”, “LimitRSS”: “18446744073709551615”, “LimitRTPRIO”: “0”, “LimitRTTIME”: “18446744073709551615”, “LimitSIGPENDING”: “15066”, “LimitSTACK”: “18446744073709551615”, “LoadState”: “loaded”, “MainPID”: “10910”, “MemoryAccounting”: “no”, “MemoryCurrent”: “2322432”, “MemoryLimit”: “18446744073709551615”, “MountFlags”: “0”, “Names”: “nginx.service”, “NeedDaemonReload”: “no”, “Nice”: “0”, “NoNewPrivileges”: “no”, “NonBlocking”: “no”, “NotifyAccess”: “none”, “OOMScoreAdjust”: “0”, “OnFailureJobMode”: “replace”, “PIDFile”: “/run/nginx.pid”, “PermissionsStartOnly”: “no”, “PrivateDevices”: “no”, “PrivateNetwork”: “no”, “PrivateTmp”: “yes”, “ProtectHome”: “no”, “ProtectSystem”: “no”, “RefuseManualStart”: “no”, “RefuseManualStop”: “no”, “RemainAfterExit”: “no”, “Requires”: “-.mount system.slice basic.target”, “RequiresMountsFor”: “/var/tmp”, “Restart”: “no”, “RestartUSec”: “100ms”, “Result”: “success”, “RootDirectoryStartOnly”: “no”, “RuntimeDirectoryMode”: “0755”, “SameProcessGroup”: “no”, “SecureBits”: “0”, “SendSIGHUP”: “no”, “SendSIGKILL”: “yes”, “Slice”: “system.slice”, “StandardError”: “inherit”, “StandardInput”: “null”, “StandardOutput”: “journal”, “StartLimitAction”: “none”, “StartLimitBurst”: “5”, “StartLimitInterval”: “10000000”, “StartupBlockIOWeight”: “18446744073709551615”, “StartupCPUShares”: “18446744073709551615”, “StatusErrno”: “0”, “StopWhenUnneeded”: “no”, “SubState”: “running”, “SyslogLevelPrefix”: “yes”, “SyslogPriority”: “30”, “SystemCallErrorNumber”: “0”, “TTYReset”: “no”, “TTYVHangup”: “no”, “TTYVTDisallocate”: “no”, “TasksAccounting”: “no”, “TasksCurrent”: “3”, “TasksMax”: “18446744073709551615”, “TimeoutStartUSec”: “1min 30s”, “TimeoutStopUSec”: “5s”, “TimerSlackNSec”: “50000”, “Transient”: “no”, “Type”: “forking”, “UMask”: “0022”, “UnitFilePreset”: “disabled”, “UnitFileState”: “disabled”, “Wants”: “network-online.target”, “WatchdogTimestamp”: “Wed 2021-10-27 09:20:15 EDT”, “WatchdogTimestampMonotonic”: “24390544003990”, “WatchdogUSec”: “0”}}\n│ ├── 2021-10-30 04:23:31,244 p=512757 u=qali n=ansible | ok: [root@10.10.10.2] =\u003e {“changed”: false, “name”: “nginx”, “state”: “started”, “status”: {“ActiveEnterTimestamp”: “Wed 2021-10-27 09:31:49 EDT”, “ActiveEnterTimestampMonotonic”: “3803190467261”, “ActiveExitTimestampMonotonic”: “0”, “ActiveState”: “active”, “After”: “-.mount tmp.mount system.slice systemd-journald.socket network.target nss-lookup.target remote-fs.target basic.target sysinit.target systemd-tmpfiles-setup.service”, “AllowIsolate”: “no”, “AllowedCPUs”: “\", “AllowedMemoryNodes”: “\", “AmbientCapabilities”: “\", “AssertResult”: “yes”, “AssertTimestamp”: “Wed 2021-10-27 09:31:49 EDT”, “AssertTimestampMonotonic”: “3803190328406”, “Before”: “shutdown.target”, “BlockIOAccounting”: “no”, “BlockIOWeight”: “[not set]\", “CPUAccounting”: “no”, “CPUAffinity”: “\", “CPUAffinityFromNUMA”: “no”, “CPUQuotaPerSecUSec”: “infinity”, “CPUQuotaPeriodUSec”: “infinity”, “CPUSchedulingPolicy”: “0”, “CPUSchedulingPriority”: “0”, “CPUSchedulingResetOnFork”: “no”, “CPUShares”: “[not set]\", “CPUUsageNSec”: “[not set]\", “CPUWeight”: “[not set]\", “CacheDirectoryMode”: “0755”, “CanFreeze”: “yes”, “CanIsolate”: “no”, “CanReload”: “yes”, “CanStart”: “yes”, “CanStop”: “yes”, “CapabilityBoundingSet”: “cap_chown cap_dac_override cap_dac_read_search cap_fowner cap_fsetid cap_kill cap_setgid cap_setuid cap_setpcap cap_linux_immutable cap_net_bind_service cap_net_broadcast cap_net_admin cap_net_raw cap_ipc_lock cap_ipc_owner cap_sys_module cap_sys_rawio cap_sys_chroot cap_sys_ptrace cap_sys_pacct cap_sys_admin cap_sys_boot cap_sys_nice cap_sys_resource cap_sys_time cap_sys_tty_config cap_mknod cap_lease cap_audit_write cap_audit_control cap_setfcap cap_mac_override cap_mac_admin cap_syslog cap_wake_alarm cap_block_suspend”, “CollectMode”: “inactive”, “ConditionResult”: “yes”, “ConditionTimestamp”: “Wed 2021-10-27 09:31:49 EDT”, “ConditionTimestampMonotonic”: “3803190328406”, “ConfigurationDirectoryMode”: “0755”, “Conflicts”: “shutdown.target”, “ControlGroup”: “/system.slice/nginx.service”, “ControlPID”: “0”, “DefaultDependencies”: “yes”, “DefaultMemoryLow”: “0”, “DefaultMemoryMin”: “0”, “Delegate”: “no”, “Description”: “The nginx HTTP and reverse proxy server”, “DevicePolicy”: “auto”, “DynamicUser”: “no”, “EffectiveCPUs”: “\", “EffectiveMemoryNodes”: “\", “ExecMainCode”: “0”, “ExecMainExitTimestampMonotonic”: “0”, “ExecMainPID”: “2348498”, “ExecMainStartTimestamp”: “Wed 2021-10-27 09:31:49 EDT”, “ExecMainStartTimestampMonotonic”: “3803190463259”, “ExecMainStatus”: “0”, “ExecReload”: “{ path=/bin/kill ; argv[]=/bin/kill -s HUP $MAINPID ; ignore_errors=no ; start_time=[n/a] ; stop_time=[n/a] ; pid=0 ; code=(null) ; status=0/0 }\", “ExecStart”: “{ path=/usr/sbin/nginx ; argv[]=/usr/sbin/nginx ; ignore_errors=no ; start_time=[Wed 2021-10-27 09:31:49 EDT] ; stop_time=[Wed 2021-10-27 09:31:49 EDT] ; pid=2348496 ; code=exited ; status=0 }\", “ExecStartPre”: “{ path=/usr/sbin/nginx ; argv[]=/usr/sbin/nginx -t ; ignore_errors=no ; start_time=[Wed 2021-10-27 09:31:49 EDT] ; stop_time=[Wed 2021-10-27 09:31:49 EDT] ; pid=2348495 ; code=exited ; status=0 }\", “FailureAction”: “none”, “FileDescriptorStoreMax”: “0”, “FragmentPath”: “/usr/lib/systemd/system/nginx.service”, “FreezerState”: “running”, “GID”: “[not set]\", “GuessMainPID”: “yes”, “IOAccounting”: “no”, “IOSchedulingClass”: “0”, “IOSchedulingPriority”: “0”, “IOWeight”: “[not set]\", “IPAccounting”: “no”, “IPEgressBytes”: “18446744073709551615”, “IPEgressPackets”: “18446744073709551615”, “IPIngressBytes”: “18446744073709551615”, “IPIngressPackets”: “18446744073709551615”, “Id”: “nginx.service”, “IgnoreOnIsolate”: “no”, “IgnoreSIGPIPE”: “yes”, “InactiveEnterTimestampMonotonic”: “0”, “InactiveExitTimestamp”: “Wed 2021-10-27 09:31:49 EDT”, “InactiveExitTimestampMonotonic”: “3803190345159”, “InvocationID”: “3ea4654765104d85977c279dbe1f7588”, “JobRunningTimeoutUSec”: “infinity”, “JobTimeoutAction”: “none”, “JobTimeoutUSec”: “infinity”, “KeyringMode”: “private”, “KillMode”: “mixed”, “KillSignal”: “3”, “LimitAS”: “infinity”, “LimitASSoft”: “infinity”, “LimitCORE”: “infinity”, “LimitCORESoft”: “infinity”, “LimitCPU”: “infinity”, “LimitCPUSoft”: “infinity”, “LimitDATA”: “infinity”, “LimitDATASoft”: “infinity”, “LimitFSIZE”: “infinity”, “LimitFSIZESoft”: “infinity”, “LimitLOCKS”: “infinity”, “LimitLOCKSSoft”: “infinity”, “LimitMEMLOCK”: “65536”, “LimitMEMLOCKSoft”: “65536”, “LimitMSGQUEUE”: “819200”, “LimitMSGQUEUESoft”: “819200”, “LimitNICE”: “0”, “LimitNICESoft”: “0”, “LimitNOFILE”: “262144”, “LimitNOFILESoft”: “1024”, “LimitNPROC”: “6751”, “LimitNPROCSoft”: “6751”, “LimitRSS”: “infinity”, “LimitRSSSoft”: “infinity”, “LimitRTPRIO”: “0”, “LimitRTPRIOSoft”: “0”, “LimitRTTIME”: “infinity”, “LimitRTTIMESoft”: “infinity”, “LimitSIGPENDING”: “6751”, “LimitSIGPENDINGSoft”: “6751”, “LimitSTACK”: “infinity”, “LimitSTACKSoft”: “8388608”, “LoadState”: “loaded”, “LockPersonality”: “no”, “LogLevelMax”: “-1”, “LogRateLimitBurst”: “0”, “LogRateLimitIntervalUSec”: “0”, “LogsDirectoryMode”: “0755”, “MainPID”: “2348498”, “MemoryAccounting”: “yes”, “MemoryCurrent”: “6414336”, “MemoryDenyWriteExecute”: “no”, “MemoryHigh”: “infinity”, “MemoryLimit”: “infinity”, “MemoryLow”: “0”, “MemoryMax”: “infinity”, “MemoryMin”: “0”, “MemorySwapMax”: “infinity”, “MountAPIVFS”: “no”, “MountFlags”: “\", “NFileDescriptorStore”: “0”, “NRestarts”: “0”, “NUMAMask”: “\", “NUMAPolicy”: “n/a”, “Names”: “nginx.service”, “NeedDaemonReload”: “no”, “Nice”: “0”, “NoNewPrivileges”: “no”, “NonBlocking”: “no”, “NotifyAccess”: “none”, “OOMScoreAdjust”: “0”, “OnFailureJobMode”: “replace”, “PIDFile”: “/run/nginx.pid”, “PermissionsStartOnly”: “no”, “Perpetual”: “no”, “PrivateDevices”: “no”, “PrivateMounts”: “no”, “PrivateNetwork”: “no”, “PrivateTmp”: “yes”, “PrivateUsers”: “no”, “ProtectControlGroups”: “no”, “ProtectHome”: “no”, “ProtectKernelModules”: “no”, “ProtectKernelTunables”: “no”, “ProtectSystem”: “no”, “RefuseManualStart”: “no”, “RefuseManualStop”: “no”, “RemainAfterExit”: “no”, “RemoveIPC”: “no”, “Requires”: “system.slice sysinit.target -.mount”, “RequiresMountsFor”: “/var/tmp”, “Restart”: “no”, “RestartUSec”: “100ms”, “RestrictNamespaces”: “no”, “RestrictRealtime”: “no”, “RestrictSUIDSGID”: “no”, “Result”: “success”, “RootDirectoryStartOnly”: “no”, “RuntimeDirectoryMode”: “0755”, “RuntimeDirectoryPreserve”: “no”, “RuntimeMaxUSec”: “infinity”, “SameProcessGroup”: “no”, “SecureBits”: “0”, “SendSIGHUP”: “no”, “SendSIGKILL”: “yes”, “Slice”: “system.slice”, “StandardError”: “inherit”, “StandardInput”: “null”, “StandardInputData”: “\", “StandardOutput”: “journal”, “StartLimitAction”: “none”, “StartLimitBurst”: “5”, “StartLimitIntervalUSec”: “10s”, “StartupBlockIOWeight”: “[not set]\", “StartupCPUShares”: “[not set]\", “StartupCPUWeight”: “[not set]\", “StartupIOWeight”: “[not set]\", “StateChangeTimestamp”: “Wed 2021-10-27 09:31:49 EDT”, “StateChangeTimestampMonotonic”: “3803190467261”, “StateDirectoryMode”: “0755”, “StatusErrno”: “0”, “StopWhenUnneeded”: “no”, “SubState”: “running”, “SuccessAction”: “none”, “SyslogFacility”: “3”, “SyslogLevel”: “6”, “SyslogLevelPrefix”: “yes”, “SyslogPriority”: “30”, “SystemCallErrorNumber”: “0”, “TTYReset”: “no”, “TTYVHangup”: “no”, “TTYVTDisallocate”: “no”, “TasksAccounting”: “yes”, “TasksCurrent”: “2”, “TasksMax”: “10802”, “TimeoutStartUSec”: “1min 30s”, “TimeoutStopUSec”: “5s”, “TimerSlackNSec”: “50000”, “Transient”: “no”, “Type”: “forking”, “UID”: “[not set]\", “UMask”: “0022”, “UnitFilePreset”: “disabled”, “UnitFileState”: “disabled”, “UtmpMode”: “init”, “WatchdogTimestampMonotonic”: “0”, “WatchdogUSec”: “0”}}\n│ ├── 2021-10-30 04:23:31,246 p=512757 u=qali n=ansible | PLAY RECAP *********************************************************************\n│ ├── 2021-10-30 04:23:31,246 p=512757 u=qali n=ansible | guest@10.10.10.1 : ok=5 changed=1 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\n│ └── 2021-10-30 04:23:31,246 p=512757 u=qali n=ansible | root@10.10.10.2 : ok=5 changed=1 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\n├── Exit Code: 0\n└── Extracted Parameters: { 2 }\n├── VersionOnNode1: nginx version: nginx/1.14.1\n└── VersionOnNode2: nginx version: nginx/1.20.1\nThe following is a sample code view:\n{\n“Tags”: [],\n“DefaultVersion”: true,\n“Description”: “”,\n“InputDefinition”: [\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Default”: {\n“ObjectType”: “workflow.DefaultValue”,\n“IsValueSet”: true,\n“Override”: true,\n“Value”: “/home/qali/vspancha/playbooks/install_nginx.yml”\n},\n“Description”: “The path of the ansible playbook residing on the Ansible Endpoint target.\\n”,\n“DisplayMeta”: {\n“ObjectType”: “workflow.DisplayMeta”,\n“InventorySelector”: true,\n“WidgetType”: “None”\n},\n“InputParameters”: null,\n“Label”: “Install Package”,\n“Name”: “InstallPackage”,\n“Required”: true,\n“Properties”: {\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Constraints”: {\n“ObjectType”: “workflow.Constraints”,\n“EnumList”: [],\n“Max”: 0,\n“Min”: 0,\n“Regex”: \"”\n},\n“InventorySelector”: [],\n“Secure”: false,\n“Type”: “string”\n}\n},\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Default”: {\n“ObjectType”: “workflow.DefaultValue”,\n“IsValueSet”: true,\n“Override”: true,\n“Value”: “/home/qali/vspancha/playbooks/nginx_hosts”\n},\n“Description”: “The path of the host inventory file residing on the Ansible Endpoint target or comma separated list of hosts on which Ansible playbook execution happens.\\n”,\n“DisplayMeta”: {\n“ObjectType”: “workflow.DisplayMeta”,\n“InventorySelector”: true,\n“WidgetType”: “None”\n},\n“InputParameters”: null,\n“Label”: “Host Inventory”,\n“Name”: “HostInventory”,\n“Required”: true,\n“Properties”: {\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Constraints”: {\n“ObjectType”: “workflow.Constraints”,\n“EnumList”: [],\n“Max”: 0,\n“Min”: 0,\n“Regex”: \"”\n},\n“InventorySelector”: [],\n“Secure”: false,\n“Type”: “string”\n}\n},\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Default”: {\n“ObjectType”: “workflow.DefaultValue”,\n“IsValueSet”: false,\n“Override”: false,\n“Value”: \"”\n},\n“Description”: “”,\n“DisplayMeta”: {\n“ObjectType”: “workflow.DisplayMeta”,\n“InventorySelector”: true,\n“WidgetType”: “None”\n},\n“InputParameters”: null,\n“Label”: “SudoPassword”,\n“Name”: “SudoPassword”,\n“Required”: true,\n“Properties”: {\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Constraints”: {\n“ObjectType”: “workflow.Constraints”,\n“EnumList”: [],\n“Max”: 0,\n“Min”: 0,\n“Regex”: \"”\n},\n“InventorySelector”: [],\n“Secure”: true,\n“Type”: “string”\n}\n},\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Default”: {\n“ObjectType”: “workflow.DefaultValue”,\n“IsValueSet”: true,\n“Override”: true,\n“Value”: “–extra-vars ‘ansible_become_pass={{.global.workflow.input.SudoPassword}}’”\n},\n“Description”: “The command line arguments for the execution of the ansible playbook against the given endpoint. \\nEscape character backslash(\\\\) needs to be used when the command line arguments contain double quotes(\\\") in them.\\n\\nBelow command line options are not supported by the Ansible task.\\n1. -vvv\\n2. -vvvv\\n3. -k, -K\\n4. -c\\n5. –connection\\n6. –sftp-extra-args\\n7. –scp-extra-args\\n8. –ask-vault-password\\n9. –step\\n\\nPlease refer the ansible-playbook documentation here\\nhttps://docs.ansible.com/ansible/latest/cli/ansible-playbook.html for the list of other supported command line options.\\n”,\n“DisplayMeta”: {\n“ObjectType”: “workflow.DisplayMeta”,\n“InventorySelector”: true,\n“WidgetType”: “None”\n},\n“InputParameters”: null,\n“Label”: “Command Line Arguments”,\n“Name”: “CommandLineArguments”,\n“Required”: false,\n“Properties”: {\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Constraints”: {\n“ObjectType”: “workflow.Constraints”,\n“EnumList”: [],\n“Max”: 0,\n“Min”: 0,\n“Regex”: \"”\n},\n“InventorySelector”: [],\n“Secure”: false,\n“Type”: “string”\n}\n}\n],\n“InputParameterSet”: [],\n“Label”: “Chander-Ansible-UserCase”,\n“Name”: “Chander-Ansible-UserCase”,\n“OutputDefinition”: [],\n“OutputParameters”: null,\n“Properties”: {\n“ObjectType”: “workflow.WorkflowProperties”,\n“Cloneable”: true,\n“EnableDebug”: false,\n“ExternalMeta”: true,\n“Retryable”: false,\n“RollbackOnFailure”: false,\n“SupportStatus”: “Supported”\n},\n“Tasks”: [\n{\n“ObjectType”: “workflow.StartTask”,\n“Description”: “”,\n“Label”: “”,\n“Name”: “StartTask”,\n“NextTask”: “InvokeAnsiblePlaybook1”\n},\n{\n“ObjectType”: “workflow.SuccessEndTask”,\n“Description”: “”,\n“Label”: “”,\n“Name”: “SuccessEndTask”\n},\n{\n“ObjectType”: “workflow.FailureEndTask”,\n“Description”: “”,\n“Label”: “”,\n“Name”: “FailureEndTask”\n},\n{\n“ObjectType”: “workflow.WorkerTask”,\n“Description”: “Executes Ansible Playbook against the given endpoint. This task can be executed on targets added as Ansible Endpoint in Intersight.\\n”,\n“Label”: “Invoke Ansible Playbook - Install Package”,\n“Name”: “InvokeAnsiblePlaybook1”,\n“InputParameters”: {\n“AnsibleController”: {\n“Moid”: “6172a1be6f72612d31cd4908”,\n“ObjectType”: “asset.Target”\n},\n“CommandLineArguments”: “${workflow.input.CommandLineArguments}”,\n“HostInventory”: “${workflow.input.HostInventory}”,\n“PlaybookPath”: “${workflow.input.InstallPackage}”\n},\n“OnFailure”: “”,\n“OnSuccess”: “InvokeSshCommands2”,\n“RollbackDisabled”: false,\n“UseDefault”: false,\n“CatalogMoid”: “5c2fc884696f6e2d316c5d59”,\n“TaskDefinitionId”: “617b9248696f6e2d30c2fc95”,\n“TaskDefinitionName”: “InvokeAnsiblePlaybook”,\n“Version”: 1\n},\n{\n“ObjectType”: “workflow.WorkerTask”,\n“Description”: “Executes SSH commands against the given endpoint. This task can be executed on targets added as SSH Endpoint in Intersight.\\n”,\n“Label”: “Invoke SSH Commands - Ansible Play logs 1”,\n“Name”: “InvokeSshCommands2”,\n“InputParameters”: {\n“ResponseParser”: {\n“Parameters”: [\n{\n“Name”: “VersionOnNode1”,\n“RegexLine”: “10.106.*?\\\\\\“changed\\\\\\”:.*?\\\\\\“stderr\\\\\\”:\\\\s\\\\\\\"$\u003cVersionOnNode1\u003e\\\\\\”,”,\n“Type”: “string”\n},\n{\n“Name”: “VersionOnNode2”,\n“RegexLine”: “10.105.*?\\\\\\“changed\\\\\\”:.*?\\\\\\“stderr\\\\\\”:\\\\s\\\\\\\"$\u003cVersionOnNode2\u003e\\\\\\”,”,\n“Type”: “string”\n}\n]\n},\n“ShowCommandOutput”: true,\n“SshCommand”: {\n“Command”: “cat {{.global.InvokeAnsiblePlaybook1.output.ExecutionLogPath}}”,\n“CommandType”: “NonInteractiveCmd”\n},\n“Target”: {\n“Moid”: “617664826f72612d31ce8bae”,\n“ObjectType”: “asset.Target”\n}\n},\n“OnFailure”: “”,\n“OnSuccess”: “SuccessEndTask”,\n“RollbackDisabled”: false,\n“UseDefault”: false,\n“CatalogMoid”: “5c2fc884696f6e2d316c5d59”,\n“TaskDefinitionId”: “6172c602696f6e2d30d270a5”,\n“TaskDefinitionName”: “InvokeSshCommands”,\n“Version”: 1\n}\n],\n“UiInputFilters”: [],\n“UiRenderingData”: {\n“Positions”: [\n{\n“Name”: “StartTask”,\n“X”: 263.5,\n“Y”: 40.5\n},\n{\n“Name”: “SuccessEndTask”,\n“X”: 281.33331298828125,\n“Y”: 398.4323780336132\n},\n{\n“Name”: “FailureEndTask”,\n“X”: 451.833251953125,\n“Y”: 388.4387670304674\n},\n{\n“Name”: “InvokeAnsiblePlaybook1”,\n“X”: 178.5,\n“Y”: 117\n},\n{\n“Name”: “InvokeSshCommands2”,\n“X”: 176.83331298828125,\n“Y”: 215.1672194151248\n}\n]\n},\n“Version”: 1,\n“Catalog”: {\n“ObjectType”: “workflow.Catalog”,\n“Moid”: “5efbdb7e696f6e2d303fda29”,\n“link”: “https://intersight.com/api/v1/workflow/Catalogs/5efbdb7e696f6e2d303fda29\"\n},\n“WorkflowMetadata”: null\n}\nExecutors – Invoke Ansible Playbook - Reusable Task\nIntersight Cloud Orchestrator allows workflow designers to run Ansible Playbook on the Ansible Controller node using the Invoke Ansible Playbook reusable task in the workflow.\nFor more inforormation on Invoke Ansible Playbook - Embedded Task, see Invoke Ansible Playbook - Embedded Task.\nSupported Targets\nThe Invoke Ansible Playbook task can be run only on the targets that are added as an Ansible Endpoint target type in Cisco Intersight.\nThe Invoke Ansible Playbook task is executed as an orchestrator task and does not include the management of the Ansible Controller node.\nTo run the Ansible Playbook task on the Ansible Controller node from Cisco Intersight, ensure that:\nThe Ansible target is reachable through Intersight Assist when hosted on the customer premises.\nThe Ansible Playbook modules and Ansible Playbook executables required to run the playbooks are already installed on the Ansible Controller node.\nThe Ansible Controller node has password-less SSH access to the hosts.\nThe Ansible Controller node can resolve the endpoint hostnames if the Ansible Host Inventory file specifies the hostnames.\nFor more information on Intersight Target Claim, see Target Claim Using Intersight Assist.\nUsing the Executor Ansible Playook Reusable Task\nUse the Invoke Ansible Playbook from the Executors section in the Intersight Orchestrator Task Designer UI to create a Invoke Ansible Playbook reusable task.\nFor more information on tasks, see Defining a Task.\nThe following table explains the Invoke Ansible Playbook task properties:\nProperty\rDescription\rGeneral\rFor more information, see Defining a Task.\rInputs\rAnsible Controller—The target on which the Ansible Playbook task is run. By default, the Ansible Controller task input is created for the task.\nThe Ansible Playbook target must be in the Connected state.\nOutputs\rTo extract the required values from the command responses and map it to task outputs, do the following:\nCreate Task Output—Specify the task output.\nMap to Task Output—Check the check box to map the task output to an command response.\nTask Output—Select the command response to which the task output is mapped. The options available are:\nExit Code | Invoke Ansible Playbook\nExecution Summary | Invoke Ansible Playbook\nExecution Log Path | Invoke Ansible Playbook\nFor example, if you create two task outputs Exitcode and Logapth and map it to Exit Code | Invoke Ansible Playbook and Execution Log Path | Invoke Ansible Playbook respectively, after the workflow is executed, the output will show:\nThe following table explains the Invoke Ansible Playbook executor input:\nProperty\rDescription\rPlaybook Path\rThe path of the Ansible Playbook file that resides on the Ansible Controller node added as Ansible Endpoint target in Intersight.\nStatic Value—The path of the Ansible Playbook.\nDirect Mapping—Select an existing task input or task output field.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nHost Inventory\rThe path of the host inventory file that resides on the Ansible Controller or a comma-separated list of hosts on which the Ansible Playbook task is run.\nStatic Value—The path of the host inventory file that resides on the Ansible Controller or a comma-separated list of hosts.\nFor example, you can enter the hostname as root@10.10.10.10,\nNote: The hostname must be suffixed with a comma (,).\nDirect Mapping—Select the path from the task input or task output.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nCommand Timeout\rThe command timeout in seconds for the execution of the Ansible Playbook. The range is 10 to 7200 seconds.\nThe default timeout is 600 seconds.\nStatic Value—The command timeout in seconds.\nDirect Mapping—Select the command timeout from the task input or task output.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nCommand Line Argument\rThe optional command line arguments required to run the Ansible playbook.\nStatic Value—The command line argument.\nDirect Mapping—Select the input from the task input or task output.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nNote: For Invoke Ansible Playbook - Reusable Task, escape character backslash(\\) is not necessary when the command line arguments contain double quotes(\").\nThe following command line options are not supported by the Ansible Playbook task.\n-vvv\n-vvvv\n-k, -K\n-c\n--connection\n--sftp-extra-args\n--scp-extra-args\n--ask-vault-password\n--step\nFor information on the available command line arguments, see https://docs.ansible.com/ansible/latest/cli/ansible-playbook.html.\nThe following table explains the Ansible Playbook executor Outputs:\nProperty\rDescription\rExit Code\rThe exit code after the execution of the Ansible Playbook against the given endpoint.\rExecution Summary\rThe summary after the execution of Ansible Playbook against the given endpoint.\rExecution Log Path\rThe Ansible execution log path on the Ansible Control node after the execution of Ansible Playbook against the given endpoint.\rThe following table explains the Invoke Ansible Playbook task Outcomes:\nProperty\rDescription\rOutcomes\rTo set the custom execution status and status message based on the obtained outputs, do the following:\nClick Add Outcome.\nName—The name for the outcome.\nOutcome Type—Select the outcome type. The options available are Success, Skip To Success, Error, Terminal Error, Skip Task Execution, or Status.\nFor more information on Outcomes, see Outcomes.\nMessage—The message when the condition is met.\nCondition—The condition for the outcome.\nFor example, {{eq .global.InvokeAnsiblePlaybook1.output.ExitCode \"0\"}}.\nThis condition checks whether the output `ExitCode` of the executor named `InvokeAnsiblePlaybook1` equals to 0. If the condition is true, the task status is set to the value provided in `Outcome Type` and task status message is set to value provided in `Message`.\nTemplate Parameters\nThe request body template can refer to values from task inputs, previous task outputs, or implicit parameters. The following table explains the template parameters.\nPrefix/Format\rDescription\r{{.global.task.input.\u003cParameterName\u003e}}\rTask input reference.\r{{.global.\u003cExecutorRefName\u003e.output.\u003cParameterName\u003e}}\rPrevious executor output reference. ExecutorRefName is the name of the previous executor having output ParameterName.\r{{.security.AccountMoid}}\rImplicit parameter reference to Account MoID under which the workflow is running.\r{{.security.OrganizationMoid}}\rImplicit parameter reference to Organization MoID under which the workflow is running.\rTemplate Functions\nThe template engine has in-built functions to transform values before they are populated in the request templates. The following table explains the functions supported in Invoke SSH Commands task.\nFunction\rDescription\rTrimSpace\rReturns a string after removing white spaces from a the string.\nExample:\n{{TrimSpace .global.task.input.HostName}}\nContainsString\rReturns a boolean if a substring is present in a given string.\nExample:\n{{if (ContainsString .global.task.input.SizeAsString \\”MB\\”)}}Mega Bytes{{else}}Bytes{{end}}\nFindAllString\rReturns a slice of substrings matching the regular expression in a given string.\nExample:\n{{(FindAllString .global.task.input.NumberString \\”([0-9]+)\\”)}}\nThe above example returns array [“123”, “456”] for input string “123 some text 456.”\nToJson\rConverts a value to a JSON format.\nExample:\n{{(FindAllString .global.task.input.NumberString \\\"([0-9]+)\\\") | ToJson}}\nThe above example returns JSON array literal [“123”, “456”] for input string “123 some text 456.”\nAsArray\rTakes in an element and returns an array of one element.\nExample:\n{{AsArray .global.task.output.serverMo}}\nThe above example returns an array of one server Mo.\nSubstring\rReturns a substring within the given index bounds.\nExample:\n{{Substring .global.task.input.StorageId 2 6}}\nThe above example returns “ABCD” for string “12ABCD3456.”\nIpToCidr\rReturns the classless inter-domain routing (CIDR) notation of an IPv4 address and subnet mask.\nExample:\n{{IpToCidr .global.task.input.Ip .global.task.input.Netmask}}\nThe above example returns “10.10.10.10/24” for the input parameters “10.10.10.10” and “255.255.255.0.”\nLookupInSlice\rChecks if a given value is present in given slice or array and returns true if it exists. This function can be used for any value.\nExample:\n{{LookupInSlice .global.task.input.IpAddressList \\”10.10.10.10\\”}}\nThe above example returns true for input [”10.10.10.10”, “20.20.20.20”].\nIndex\rReturns a value from an array when an input index exists.\nExample:\n{{ index .global.task.input.nodes .global.task.input.idx }} In the above example, if nodes is an array of devices and idx is 2, the index function returns the second device in the array.\nItob\rConverts an integer to a boolean.\nExample:\n{{ Itob global.task.input.OnOffFlip }} The above example returns true and false for inputs 1 and 0 respectively.\nItoa\rConverts a given number to a string value.\nExample:\n{{ Itoa global.task.input.Port }} The above example returns “12345” for input 12345.\nItof\rConverts a given integer to a float value.\nExample:\n{{ Itof global.task.input.Rate }}\nThe above example returns 15.0 for an input 15.\nBtoa\rConverts a given boolean to a string value.\nExample:\n{{ Btoa global.task.input.OnOffFlip }}\nThe above example returns “true” for input true.\nBtoi\rConverts a given boolean to a integer value.\nExample:\n{{ Btoi global.task.input.OnOffFlip }}\nThe above example returns 1 and 0 for inputs true and false respectively.\nAtob\rConverts the given string into a boolean value.\nExample:\n{{ Atob global.task.input.OnOffFlip }}Returns true for input “true”\nAtoi\rConverts a given number in string format to the integer type.\nExample:\n{{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”\nFtoa\rConverts a given number into the string form based on the given precision.\nExample:\n{{Ftoa .global.task.input.Size 2}} returns the following output: 123.456 =\u003e “123.45”, 1028 =\u003e “1028.00”\nFtoi\rConverts a given float input to a integer value.\nExample:\n{{ Ftoi global.task.input.Rate }}\nThe above example returns 15 for an input 15.833.\nEval\rSupports an expression evaluation function. The below example returns 2GB for a input value of 2048. Note that the second argument is passed as ‘.’ in the template, which represents the map of all parameters.\n{{Eval \\\"{{.global.task.input.Size}} / 1024\\\" .}}GB\nTemplate Engine Syntax\nThe template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements\nThe comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}}\nConditional Statements\nThe template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \u003ccomparision_statement\u003e}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else if \u003ccomparision_statement}} Tempalte to be used {{end}}\nInvoke Ansible Playbook Reusable Task Example\nExample: Create a reusable task to run Ansible Playbook on the hosts\nThis example task runs on an Intersight Ansible Playbook controller. In this task, the Ansible Playbook path and host inventory list fields are provided by the task input fields.\nThe task properties required for this example are as following:\nProperty\rDescription\rGeneral\rOrganization—The organization that you are creating the task in.\nDisplay Name—A user friendly short name to identify the task definition.\nReference Name—The name of the Task definition.\nInputs\rAnsible Controller—By default, the Ansible Controller task input is created for the task.\nReference Name—AnsibleController\nType—Target Data Type\nPlaybook Path—The user defined task input for the path of the Ansible Playbook.\nReference Name—PlaybookPath\nType—String\nHost Inventory—The user defined task input for the path of the host inventory file.\nReference Name—HostInventory\nType—String\nOutputs\rExitCode—Task output\nReference Name—ExitCode\nType—String\nMap to Task Output—Exit Code | Invoke Ansible Playbook\nSummary—Task output\nReference Name—Summary\nType—String\nMap to Task Output—Execution Summary | Invoke Ansible Playbook\nLogpath—Task output\nReference Name—Logpath\nType—String\nMap to Task Output—Execution Log Path | Invoke Ansible Playbook\nThe following table explains the Invoke Ansible Playbook executor inputs:\nProperty\rDescription\rPlaybook Path\rDirect Mapping—{{.global.task.input.PlaybookPath}}\rHost Inventory\rDirect Mapping—{{.global.task.input.HostInventory}}\rCommand Timeout\rDefault value.\rCommand Line Argument\rStatic—-vv\nCommand line argument --vv is for the Ansible execution log verbosity.\nExecutors – Invoke SSH Commands - Embedded Task\nIntersight Cloud Orchestrator allows workflow designers to run commands over SSH by using the Invoke SSH Commands task in the workflows. The Invoke SSH Commands task is an out-of-box solution that allows you to automate operations on the SSH targets. This feature allows a workflow designer to extend the automation capabilities of the workflow engine beyond what is natively available in the task library and interact with the SSH target.\nThe Invoke SSH Commands task executes SSH commands against the given Intersight SSH endpoint target.\nSupported Targets\nThe Invoke SSH Commands task can be run only on the targets that are added as an SSH or Ansible endpoint target type in Cisco Intersight.\nTo run the SSH Command task on the SSH endpoint target from Cisco Intersight, ensure that:\nThe endpoint is reachable through Intersight Assist.\nThe endpoint target is in the Connected state.\nThe endpoint credentials are valid.\nFor more information on Intersight Target Claim, see Target Claim Using Intersight Assist.\nUsing the Invoke SSH Commands task\nUse the Invoke SSH Commands from the Executors section in the Workflow Designer UI to create a task to invoke SSH commands on a target.\nThe following table explains the task Input properties:\nProperty\rDescription\rExternal Target\rThe external SSH endpoint target on which the SSH commands task is run.\nThe SSH target must be in the Connected state.\nYou can specify the external target as:\nStatic Value—Click Select External Target to select an SSH target from the Intersight target inventory.\nDirect Mapping—Select an existing workflow input or Task output field.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the task input.\nSSH Command\rThe SSH commands that need to be executed on the remote server along with the details of command type.\nCommand— The SSH command string to execute against the given target. You need to specify only the command string.\nYou can specify multiple commands that need to run on the given target. For more information, see Using SSH Commands .\nNote: The command chaining is allowed only when the command type is non-interactive.\nStatic Value—The SSH commands that are to be run on the remote server.\nNon-Interactive Command—The SSH command that does not require user prompts.\nInteractive Command—The SSH commands that require user prompts. For example, the Sudo or install packages command prompts for the user inputs. To specify the user inputs for the command, do the following:\nExpect —The regular expression of the expect prompt of the interactive command. You must provide the complete regular expression of the Expect string and the expression must end with the special character '$' to match the end of the Expect string.\nSend—The answer string to the expect prompt. You can specify a string value or a workflow input.\nEnd prompt—The regular expression of the Shell Prompt of the remote server or target. You must provide the complete regular expression of the Shell Prompt and it must end with special character '$' to match the end of the Shell Prompt string.\nDirect Mapping—Select an existing workflow input or Task output field.\nTo create a new workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nCommand Timeout\rThe command timeout in seconds for the execution of the command against the given endpoint. The range is 10 to 7200 seconds.\nThe default timeout value is 600 seconds.\nStatic Value—The command timeout in seconds for the execution of the command against the given target.\nDirect Mapping——Select an existing workflow input or Task output field.\nTo create a new workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nExpected Exit Codes\rThe list of expected exit codes for the SSH command that is run by the task. Task status is set to Success if the obtained exit code is present in the list of expected exit codes.\nIf this input is not specified, then the default exit code is 0 and is used to determine the status of command execution.\nStatic Value—The exit code for the SSH command that is run by the task.\nDirect Mapping—Select the expected exit codes from the workflow input or Task output.\nTo create a new workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nShow Command Output\rSet this value to True if the entire command response needs to be displayed as part of the task output.\nThis default value is False.\nStatic Value—Select the Show Command Output check box to display the entire command response as a part of the task output.\nDirect Mapping—Select a Workflow input or Task output.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nResponse Parser\rThe response parser specification which is used to extract the values from the command response.\nStatic Value\nRegular Expression—The regular expression of the line in the command response where the interested capture value resides. The format to specify the capture value in this input is '$\u003cName of the parameter\u003e'. For example, if we need to capture 'intersight' in the sample response 'intersight@cisco.com', the regular expression looks like $\u003cName\u003e\\@cisco\\.com where 'Name' is the name given to this captured parameter.\nName—The name of the output under which the captured value is saved. This name should be the same that is provided in the Regular Expression—$\u003cName\u003e.\nType—The response parameter type—String, Integer, Float, or Boolean.\nThe default value is String.\nDirect Mapping—Select a Workflow input or Task output field.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nFor more information, see Response Parser.\nThe following table explains the task Output properties:\nProperty\rDescription\rExit Code\rThe exit code after the execution of the command against the given endpoint.\rCommand Output\rThe complete response after the execution of the command against the given endpoint.\nThe output is displayed only if the task input parameter Show Command Output is set to True.\nCommand Execution Error\rCaptures the error encountered while executing the command.\rExtracted Parameters\rThe response parser extracted outputs from the command execution response.\rUsing SSH Commands\nYou can specify multiple commands that need to run on the given target by chaining the commands with special characters. The following table explains the operators.\nOperators\rFunction\r\u0026\u0026 (Logical AND)\rThe command following this operator will only execute if the command preceding this operator has been successfully executed.\r; (Semi-colon)\rThe command following this operator will execute even if the command preceding this operator is not successfully executed.\r|| ( Logical OR)\rThe command succeeding this operator is only executed if the command preceding it has failed.\r| (Pipe)\rThe output of the first command acts as input to the second command.\r! (NOT)\rNegates an expression within a command. It is much like an “except” statement.\r\u003e,\u003e\u003e, \u003c (Redirection)\rRedirects the output of a command or a group of commands to a file or stream.\rTemplate Parameters\nThe request body template can refer to values from workflow inputs, previous task outputs, or implicit parameters. The following table explains the template parameters.\nPrefix/Format\rDescription\r{{.global.workflow.input.\u003cParameterName\u003e}}\rWorkflow input reference.\r{{.global.\u003cTaskRefName\u003e.output.\nParameters.\u003cParameterName\u003e}}\rPrevious task output reference. TaskRefName is the name of the previous task having output ParameterName.\r{{.security.AccountMoid}}\rImplicit parameter reference to Account MoID under which the workflow is running.\r{{.security.OrganizationMoid}}\rImplicit parameter reference to Organization MoID under which the workflow is running.\rTemplate Functions\nThe template engine has in-built functions to transform values before they are populated in the request templates. The following table explains the functions supported in Invoke SSH Command task.\nFunction\rDescription\rTrimSpace\rReturns a string after removing white spaces from a the string.\nExample:\n{{TrimSpace .global.workflow.input.HostName}}\nContainsString\rReturns a boolean if a substring is present in a given string.\nExample:\n{{if (ContainsString .global.workflow.input.SizeAsString \\”MB\\”)}}Mega Bytes{{else}}Bytes{{end}}\nFindAllString\rReturns a slice of substrings matching the regular expression in a given string.\nExample:\n{{(FindAllString .global.workflow.input.NumberString \\”([0-9]+)\\”)}}\nThe above example returns array [“123”, “456”] for input string “123 some text 456.”\nToJson\rConverts a value to a JSON format.\nExample:\n{{(FindAllString .global.workflow.input.NumberString \\\"([0-9]+)\\\") | ToJson}}\nThe above example returns JSON array literal [“123”, “456”] for input string “123 some text 456.”\nAsArray\rTakes in an element and returns an array of one element.\nExample:\n{{AsArray .global.workflow.output.serverMo}}\nThe above example returns an array of one server Mo.\nSubstring\rReturns a substring within the given index bounds.\nExample:\n{{Substring .global.workflow.input.StorageId 2 6}}\nThe above example returns “ABCD” for string “12ABCD3456.”\nIpToCidr\rReturns the classless inter-domain routing (CIDR) notation of an IPv4 address and subnet mask.\nExample:\n{{IpToCidr .global.workflow.input.Ip .global.workflow.input.Netmask}}\nThe above example returns “10.10.10.10/24” for the input parameters “10.10.10.10” and “255.255.255.0.”\nLookupInSlice\rChecks if a given value is present in given slice or array and returns true if it exists. This function can be used for any value.\nExample:\n{{LookupInSlice .global.workflow.input.IpAddressList \\”10.10.10.10\\”}}\nThe above example returns true for input [”10.10.10.10”, “20.20.20.20”].\nIndex\rReturns a value from an array when an input index exists.\nExample:\n{{ index .global.workflow.input.nodes .global.workflow.input.idx }} In the above example, if nodes is an array of devices and idx is 2, the index function returns the second device in the array.\nItob\rConverts an integer to a boolean.\nExample:\n{{ Itob global.workflow.input.OnOffFlip }} The above example returns true and false for inputs 1 and 0 respectively.\nItoa\rConverts a given number to a string value.\nExample:\n{{ Itoa global.workflow.input.Port }} The above example returns “12345” for input 12345.\nItof\rConverts a given integer to a float value.\nExample:\n{{ Itof global.workflow.input.Rate }}\nThe above example returns 15.0 for an input 15.\nBtoa\rConverts a given boolean to a string value.\nExample:\n{{ Btoa global.workflow.input.OnOffFlip }}\nThe above example returns “true” for input true.\nBtoi\rConverts a given boolean to a integer value.\nExample:\n{{ Btoi global.workflow.input.OnOffFlip }}\nThe above example returns 1 and 0 for inputs true and false respectively.\nAtob\rConverts the given string into a boolean value.\nExample:\n{{ Atob global.workflow.input.OnOffFlip }}Returns true for input “true”\nAtoi\rConverts a given number in string format to the integer type.\nExample:\n{{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”\nFtoa\rConverts a given number into the string form based on the given precision.\nExample:\n{{Ftoa .global.task.input.Size 2}} returns the following output: 123.456 =\u003e “123.45”, 1028 =\u003e “1028.00”\nFtoi\rConverts a given float input to a integer value.\nExample:\n{{ Ftoi global.workflow.input.Rate }}\nThe above example returns 15 for an input 15.833.\nEval\rSupports an expression evaluation function. The below example returns 2GB for a input value of 2048. Note that the second argument is passed as ‘.’ in the template, which represents the map of all parameters.\n{{Eval \\\"{{.global.workflow.input.Size}} / 1024\\\" .}}GB\nTemplate Engine Syntax\nThe template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements\nThe comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}}\nConditional Statements\nThe template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \u003ccomparision_statement\u003e}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else if \u003ccomparision_statement}} Tempalte to be used {{end}}\nResponse Parser\nA response parser is a collection of parameters that model values to be extracted from the SSH command response.\nExample: Create a response parser to get the IP address for a ping command\nTo get the IP address for the host such as www.example.com, you can use the ping command:\nping example.com -4\nPinging example.com [93.184.216.34] with 32 bytes of data:\nReply from 93.184.216.34: bytes=32 time=229ms TTL=53\nReply from 93.184.216.34: bytes=32 time=230ms TTL=53\nReply from 93.184.216.34: bytes=32 time=230ms TTL=53\nReply from 93.184.216.34: bytes=32 time=229ms TTL=53ping example.com\nTo extract the IP address from the command output for an SSH Command task, you can configure the response parser as:\nRegular Expression—Pinging\\s+example.com\\s+\\[$\u003cIP\u003e\\]\\s+.*\nName—IP\nNote: This name should be the same that is provided in the Regular Expression field. In the above example, the Regular Expression uses name $\u003cIP\u003e so the Name specified must be “IP”.\nType—String SSH Command Task Examples\nExample 1: Create a workflow with SSH Command task to install VIM package on a host using interactive SSH commands\nThe example below shows the execution of a script to install the vim package on a host. In this example, the shell prompt qali@automationvm-15:~$ appears. When the sudo ./vimInstall.sh command is run, the user is prompted for the sudo password using the prompt [sudo] password for qali:. The user enters the correct sudo password (Send/Answer string) and the installation process starts.\nqali@automationvm-15:~$ sudo ./vimInstall.sh\n[sudo] password for qali:\nReading package lists… Done\nBuilding dependency tree\nReading state information… Done\nSuggested packages:\nctags vim-doc vim-scripts\nThe following NEW packages will be installed:\nvim\n0 upgraded, 1 newly installed, 0 to remove and 224 not upgraded.\nNeed to get 1238 kB of archives.\nAfter this operation, 3111 kB of additional disk space will be used.\nGet:1 http://in.archive.ubuntu.com/ubuntu focal-updates/main amd64 vim amd64 2:8.1.2269-1ubuntu5.3 [1238 kB]\nFetched 1238 kB in 18s (68.8 kB/s)\nSelecting previously unselected package vim.\n(Reading database … 296388 files and directories currently installed.)\nPreparing to unpack …/vim_2%3a8.1.2269-1ubuntu5.3_amd64.deb …\nUnpacking vim (2:8.1.2269-1ubuntu5.3) …\nSetting up vim (2:8.1.2269-1ubuntu5.3) …\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vim (vim) in auto mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vimdiff (vimdiff) in auto mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/rvim (rvim) in auto mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/rview (rview) in auto mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vi (vi) in auto mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/view (view) in auto mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/ex (ex) in auto mode\nqali@automationvm-15:~$\nTo automate this task, you can create a workflow with a single Executor Invoke SSH Command task. This task runs on an Intersight SSH Command endpoint target. In this task, the Sudo password is provided by the workflow input field, and the VM installation script is available in the SSH endpoint target.\nThis workflow input field required for this example is as follows:\nWorkflow Input\rInput Fields\rSudo Password\rReference Name—SudoPassword\nType—String\nSecure option is selected. The values of these properties are encrypted and stored in Intersight.\nThe following table lists the SSH Command task properties:\nProperty\rDescription\rExternal Target\rThe target on which the SSH commands are executed.\rSSH Command\rCommand—sudo ./vimInstall.sh\nExpect—The Expect string obtained while executing the SSH command is [sudo] password for qali:. You need to specify the Expect input as the regular expression of the Obtained prompt \\[sudo\\]\\spassword\\sfor\\sqali:\\s$.\nSend—{{.global.workflow.input.SudoPassword}}\nShell Prompt—The shell prompt obtained before executing the SSH command is qali@automationvm-15:~$. You need to specify the regular expression of the obtained shell prompt qali\\@automationvm-15:~\\$\\s$\nCommand Timeout\rDefault value.\rExpected Exit Codes\rDefault value.\rShow Command Output\rSelect Show Command Option check box.\rResponse Parser\rWhen you run the sudo ./vimInstall.sh command, you get the following output:\n...\nReading state information... Done\nvim is already the newest version (2:8.1.2269-1ubuntu5.3).\nThe following package was automatically installed and is no longer required:\nlibllvm11\nTo extracts the VM package version and display it, configure the response parser as:\nRegular Expression—vim.*\\($\u003cVimPackageVersion\u003e\\).\nName—VimPackageVersion\nType—String\nThe response parser specified above, extracts the VM package version and displays it under the Extracted Parameters task output.\n├── Extracted Parameters: [ 1 ]/\n│ └── VimPackageVersion:2:8.1.2269-1ubuntu5.3\nAfter you execute the workflow, the task output is:\n.\n├── ConfigResults: [ 1 ]/\n│ └── Object: { 3 }/\n│ └── ConfigResCtx:{ 1 }/\n│ ├── EntityData: { 1 }/\n│ │ └── task: workflow.SshTask\n│ ├── State: Ok\n│ └── Type: Config\n├── Command Output:/\n│ ├── …\n│ vim is already the newest version (2:8.1.2269-1ubuntu5.3).\n│ The following package was automatically installed and is no longer required:\n│ libllvm11\n│ Use ‘sudo apt autoremove’ to remove it.\n│ 0 upgraded, 0 newly installed, 0 to remove and 59 not upgraded.\n├── Exit Code: 0\n└── Extracted Parameters: { 1 }/\n└── VimPackageVersion: 2:8.1.2269-1ubuntu5.3\nThe following is a sample code view.\n{\n“Catalog”: {\n“Moid”: “5efbdb7e696f6e2d303fda29”,\n“ObjectType”: “workflow.Catalog”,\n“link”: “https://intersight.com/api/v1/workflow/Catalogs/5efbdb7e696f6e2d303fda29\"\n},\n“DefaultVersion”: true,\n“Description”: “”,\n“InputDefinition”: [\n{\n“Default”: {\n“IsValueSet”: false,\n“ObjectType”: “workflow.DefaultValue”,\n“Override”: false,\n“Value”: null\n},\n“Description”: “”,\n“DisplayMeta”: {\n“InventorySelector”: true,\n“ObjectType”: “workflow.DisplayMeta”,\n“WidgetType”: “None”\n},\n“InputParameters”: null,\n“Label”: “Sudo Password”,\n“Name”: “SudoPassword”,\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Properties”: {\n“Constraints”: {\n“EnumList”: [],\n“Max”: 0,\n“Min”: 0,\n“ObjectType”: “workflow.Constraints”,\n“Regex”: \"”\n},\n“InventorySelector”: [],\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Secure”: true,\n“Type”: “string”\n},\n“Required”: false\n}\n],\n“InputParameterSet”: [],\n“Label”: “SSH-Command-Task-Interactive”,\n“Name”: “SSH-Command-Task-Interactive”,\n“OutputDefinition”: [],\n“OutputParameters”: null,\n“Properties”: {\n“Cloneable”: true,\n“EnableDebug”: false,\n“ExternalMeta”: true,\n“ObjectType”: “workflow.WorkflowProperties”,\n“Retryable”: false,\n“RollbackOnFailure”: false,\n“SupportStatus”: “Supported”\n},\n“Tags”: [],\n“Tasks”: [\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “StartTask”,\n“NextTask”: “InvokeSshCommands1”,\n“ObjectType”: “workflow.StartTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “SuccessEndTask”,\n“ObjectType”: “workflow.SuccessEndTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “FailureEndTask”,\n“ObjectType”: “workflow.FailureEndTask”\n},\n{\n“CatalogMoid”: “5c2fc884696f6e2d316c5d59”,\n“Description”: “Executes SSH commands against the given target. This task can be executed on targets added as SSH Target in Intersight.\\n”,\n“InputParameters”: {\n“ResponseParser”: {\n“Parameters”: [\n{\n“Name”: “VimPackageVersion”,\n“RegexLine”: “vim.*\\\\($\u003cVimPackageVersion\u003e\\\\).”,\n“Type”: “string”\n}\n]\n},\n“ShowCommandOutput”: true,\n“SshCommand”: {\n“Command”: “sudo ./vimInstall.sh”,\n“CommandType”: “InteractiveCmd”,\n“ExpectPrompts”: [\n{\n“Expect”: “\\\\[sudo\\\\]\\\\spassword\\\\sfor\\\\sqali:\\\\s$”,\n“Send”: “{{.global.workflow.input.SudoPassword}}”\n}\n],\n“ShellPrompt”: “qali\\\\@automationvm-15:~\\\\$\\\\s$”\n},\n“Target”: {\n“Moid”: “6177bcab6f72612d31fb23f5”,\n“ObjectType”: “asset.Target”\n}\n},\n“Label”: “Invoke SSH Commands”,\n“Name”: “InvokeSshCommands1”,\n“ObjectType”: “workflow.WorkerTask”,\n“OnFailure”: “”,\n“OnSuccess”: “SuccessEndTask”,\n“RollbackDisabled”: false,\n“TaskDefinitionId”: “6172c602696f6e2d30d270a5”,\n“TaskDefinitionName”: “InvokeSshCommands”,\n“UseDefault”: false,\n“Version”: 1\n}\n],\n“UiInputFilters”: [],\n“UiRenderingData”: {\n“Positions”: [\n{\n“Name”: “StartTask”,\n“X”: 263,\n“Y”: 35\n},\n{\n“Name”: “SuccessEndTask”,\n“X”: 263,\n“Y”: 194\n},\n{\n“Name”: “FailureEndTask”,\n“X”: 405,\n“Y”: 194\n},\n{\n“Name”: “InvokeSshCommands1”,\n“X”: 178,\n“Y”: 106\n}\n]\n},\n“Version”: 1,\n“WorkflowMetadata”: null\n}\nExample 2: Create a workflow with SSH Command tasks to list the folders and files in the current working directory on the host using output mapping\nThe following example workflow has two SSH command tasks. The first task runs the pwd command on the SSH endpoint target and obtains the current working directory in the output. The second task takes the workflow output from the previous task and runs the ls -lrt command on the extracted path on the endpoint target.\nThe following table lists the properties for the SSH Command Task 1:\nProperty\rDescription\rExternal Target\rThe target on which the SSH commands are executed.\rSSH Command\rStatic | Non-interactive | Command—pwd\rCommand Timeout\rDefault value.\rExpected Exit Codes\rDefault value.\rShow Command Output\rSelect Show Command Option check box.\rResponse Parser\rWhen you run the pwd command, you get the following output:\n$pwd\n/home/user\nTo extracts the path and display it, configure the response parser as:\nRegular Expression—$\u003cPath\u003e\nName—Path\nType—String\nThe response parser specified above, extracts the path and displays it under the Extracted Parameters task output:\n├── Extracted Parameters: [ 1 ]/\n│ └── Path:/home/user\nThe following table lists the properties for the SSH Command Task 2:\nProperty\rDescription\rExternal Target\rThe target on which the SSH commands are executed.\rSSH Command\rThe output for the first task extracts the path and displays it under the Extracted Parameters task output as:\n├── Extracted Parameters: [ 1 ]/\n│ └── Path:/home/user\nTo map the output of the previous task as the input, specify the SSH command as:\nStatic | Non-interactive | Command—ls -lrt {{.global.InvokeSshCommands1.output.ExtractedParameters.Path}}\nIn the above example, InvokeSshCommands1 is the task reference name of the previous task. To determine the task reference name, navigate to the Code view. For example:\n\"Tasks\": ...\n\"Label\": \"Invoke SSH Commands\",\n\"Name\": \"InvokeSshCommands1\",\n\"ObjectType\": \"workflow.WorkerTask\",\n...\nCommand Timeout\rDefault value.\rExpected Exit Codes\rDefault value.\rShow Command Output\rSelect Show Command Option check box.\rResponse Parser\rNone.\rAfter you execute the workflow, the task output is:\n.\n├── ConfigResults: [ 1 ]\n│ └── Object:{ 3 }\n│ ├── ConfigResCtx:{ 1 }\n│ │ ├── EntityData:{ 1 }\n│ │ └── task:workflow.SshTask\n│ ├── State:Ok\n│ └── Type:Config\n└── Command Output:total 62544\n├── -rw-rw-r– 1 qali qali 6549016 Jul 22 2020 intersight_devops_python_sdk_v3_0.0.1.16837.tar.gz\n├── -rw-r–r– 1 qali qali 8980 Apr 5 2021 examples.desktop\n├── drwxr-xr-x 2 qali qali 4096 Apr 5 2021 Videos\n├── drwxr-xr-x 2 qali qali 4096 Apr 5 2021 Templates\n├── drwxr-xr-x 2 qali qali 4096 Apr 5 2021 Public\n├── drwxr-xr-x 2 qali qali 4096 Apr 5 2021 Pictures\n├── drwxr-xr-x 2 qali qali 4096 Apr 5 2021 Music\n├── drwxr-xr-x 2 qali qali 4096 Apr 5 2021 Documents\n├── …\n└── Exit Code:0\nThe following is a sample code view:\n{\n“Catalog”: {\n“Moid”: “5efbdb7e696f6e2d303fda29”,\n“ObjectType”: “workflow.Catalog”,\n“link”: “https://www.intersight.com/api/v1/workflow/Catalogs/5efbdb7e696f6e2d303fda29\"\n},\n“DefaultVersion”: true,\n“Description”: “”,\n“InputDefinition”: [],\n“InputParameterSet”: [],\n“Label”: “NonIntMappingSsh”,\n“Name”: “NonIntMappingSsh”,\n“OutputDefinition”: [],\n“OutputParameters”: null,\n“Properties”: {\n“Cloneable”: true,\n“EnableDebug”: false,\n“ExternalMeta”: true,\n“ObjectType”: “workflow.WorkflowProperties”,\n“Retryable”: false,\n“RollbackOnFailure”: false,\n“SupportStatus”: “Supported”\n},\n“Tags”: [],\n“Tasks”: [\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “StartTask”,\n“NextTask”: “InvokeSshCommands1”,\n“ObjectType”: “workflow.StartTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “SuccessEndTask”,\n“ObjectType”: “workflow.SuccessEndTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “FailureEndTask”,\n“ObjectType”: “workflow.FailureEndTask”\n},\n{\n“CatalogMoid”: “5c2fc884696f6e2d316c5d59”,\n“Description”: “Executes SSH commands against the given endpoint. This task can be executed on targets added as SSH Endpoint in Intersight.\\n”,\n“InputParameters”: {\n“ResponseParser”: {\n“Parameters”: [\n{\n“Name”: “Path”,\n“RegexLine”: “$\u003cPath\u003e”,\n“Type”: “string”\n}\n]\n},\n“ShowCommandOutput”: true,\n“SshCommand”: {\n“Command”: “pwd”,\n“CommandType”: “NonInteractiveCmd”\n},\n“Target”: {\n“Moid”: “618a500a6f72612d31586284”,\n“ObjectType”: “asset.Target”\n}\n},\n“Label”: “Invoke SSH Commands”,\n“Name”: “InvokeSshCommands1”,\n“ObjectType”: “workflow.WorkerTask”,\n“OnFailure”: “”,\n“OnSuccess”: “InvokeSshCommands2”,\n“RollbackDisabled”: false,\n“TaskDefinitionId”: “6172c602696f6e2d30d270a5”,\n“TaskDefinitionName”: “InvokeSshCommands”,\n“UseDefault”: false,\n“Version”: 1\n},\n{\n“CatalogMoid”: “5c2fc884696f6e2d316c5d59”,\n“Description”: “Executes SSH commands against the given endpoint. This task can be executed on targets added as SSH Endpoint in Intersight.\\n”,\n“InputParameters”: {\n“ShowCommandOutput”: true,\n“SshCommand”: {\n“Command”: “ls -lrt {{.global.InvokeSshCommands1.output.ExtractedParameters.Path}}”,\n“CommandType”: “NonInteractiveCmd”\n},\n“Target”: {\n“Moid”: “618a500a6f72612d31586284”,\n“ObjectType”: “asset.Target”\n}\n},\n“Label”: “Invoke SSH Commands1”,\n“Name”: “InvokeSshCommands2”,\n“ObjectType”: “workflow.WorkerTask”,\n“OnFailure”: “”,\n“OnSuccess”: “SuccessEndTask”,\n“RollbackDisabled”: false,\n“TaskDefinitionId”: “6172c602696f6e2d30d270a5”,\n“TaskDefinitionName”: “InvokeSshCommands”,\n“UseDefault”: false,\n“Version”: 1\n}\n],\n“UiInputFilters”: [],\n“UiRenderingData”: {\n“Positions”: [\n{\n“Name”: “StartTask”,\n“X”: 10,\n“Y”: 18\n},\n{\n“Name”: “SuccessEndTask”,\n“X”: 10,\n“Y”: 697\n},\n{\n“Name”: “FailureEndTask”,\n“X”: 152,\n“Y”: 697\n},\n{\n“Name”: “InvokeSshCommands1”,\n“X”: 178.5,\n“Y”: 105.7421875\n},\n{\n“Name”: “InvokeSshCommands2”,\n“X”: 178.25390625,\n“Y”: 204.75390625\n}\n]\n},\n“Version”: 1,\n“WorkflowMetadata”: null\n}\nExecutors – Invoke SSH Commands - Reusable Task\nIntersight Cloud Orchestrator allows workflow designers to run commands over SSH by using the Invoke SSH Commands reusable task in the workflows.\nThe Invoke SSH Commands task executes SSH commands against the given Intersight SSH endpoint target.\nSupported Targets\nThe Invoke SSH Commands task can be run only on the targets that are added as an SSH or Ansible endpoint target type in Cisco Intersight.\nTo run the SSH Command task on the SSH or Ansible endpoint target from Cisco Intersight, ensure that:\nThe endpoint is reachable through Intersight Assist.\nThe endpoint target is in the Connected state.\nThe endpoint credentials are valid.\nFor more information on Intersight Target Claim, see Target Claim Using Intersight Assist.\nUsing the Executor SSH Commands Reusable Task\nUse the Invoke SSH Commands from the Executors section in the Intersight Orchestrator Task Designer UI to create a Invoke SSH Commands reusable task.\nFor more information on tasks, see Defining a Task.\nThe following table explains the Invoke SSH Commands task properties:\nProperty\rDescription\rGeneral\rFor more information, see Defining a Task.\rInputs\rExternal Target—The external target on which the SSH commands are run. By default, the External Target task input is created for the task.\nThe SSH commands can be run only on targets added as SSH or Ansible endpoint target in Intersight and are in the connected state.\nOutputs\rTo extract the required values from the command responses and map it to task outputs, do the following:\nCreate Task Output—Specify the task output.\nMap to Task Output—Check the check box to map the task output to an command response.\nTask Output—Select the command response to which the task output is mapped. The options available are:\nExit Code | Invoke SSH Commands\nCommand Output | Invoke SSH Commands\nCommand Execution Error| Invoke SSH Commands\nExtracted Parameters | Invoke SSH Commands\nFor more information on task outputs, see Executor Output properties.\nThe following table explains the Invoke SSH Commands executor input:\nProperty\rDescription\rSSH Command\rThe SSH commands that need to be executed on the remote server along with the details of command type.\nCommand— The SSH command string to execute against the given target. You need to specify only the command string.\nYou can specify multiple commands that need to run on the given target. For more information, see Using SSH Commands.\nNote: The command chaining is allowed only when the command type is non-interactive.\nStatic Value—The SSH commands that are to be run on the remote server.\nNon-Interactive Command—The SSH command that does not require user prompts.\nInteractive Command—The SSH commands that require user prompts. For example, the Sudo or install packages command prompts for the user inputs. To specify the user inputs for the command, do the following:\nExpect —The regular expression of the expect prompt of the interactive command. You must provide the complete regular expression of the Expect string and the expression must end with the special character '$' to match the end of the Expect string.\nSend—The answer string to the expect prompt. You can specify a string value.\nEnd prompt—The regular expression of the Shell Prompt of the remote server or target. You must provide the complete regular expression of the Shell Prompt and it must end with special character '$' to match the end of the Shell Prompt string.\nDirect Mapping—Select an existing task input or task output field.\nYou can map only a custom data type of type SSH Command.\nNote: Direct mapping of task input or output of string data type is not valid.\nAdvanced Mapping—You can use Go template expressions for advance use cases where data manipulation is required.\nFor example, to use substring of the task input StringInput in the SSH command, the advanced mapping can be:\n{Command: \"{{Substring .global.task.input.StringInput 5 15}}\", CommandType: \"NonInteractiveCmd\"}\nThe CommandType can be `NonInteractiveCmd` and `InteractiveCmd`.\nFollowing is an example for the 'InteractiveCmd':\n{\n\"Command\": \"{{Substring .global.task.input.StringInput 5 15}}\",\n\"CommandType\": \"InteractiveCmd\",\n\"ExpectPrompts\": [\n{\n\"Expect\": \"Password:\\\\s+$\",\n\"Send\": \"dummyValue\"\n}\n],\n\"ShellPrompt\": \"\\\\[root\\\\@onprem-appliance\\\\]\\\\s+$\"\n}\nFor more information on template functions, see Template Functions.\nCommand Timeout\rThe command timeout in seconds for the execution of the command against the given endpoint. The range is 10 to 7200 seconds.\nThe default timeout value is 600 seconds.\nStatic Value—The command timeout in seconds for the execution of the command against the given target.\nDirect Mapping——Select an existing task input or task output field.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nExpected Exit Codes\rThe list of expected exit codes for the SSH command that is run by the task. Task status is set to Success if the obtained exit code is present in the list of expected exit codes.\nIf this input is not specified, then the default exit code is 0 and is used to determine the status of command execution.\nStatic Value—The exit code for the SSH command that is run by the task.\nDirect Mapping—Select the expected exit codes from the task input or task output.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nResponse Parser\rThe response parser specification which is used to extract the values from the command response.\nStatic Value\nRegular Expression—The regular expression of the line in the command response where the interested capture value resides. The format to specify the capture value in this input is '$\u003cName of the parameter\u003e'. For example, if we need to capture 'intersight' in the sample response 'intersight@cisco.com', the regular expression looks like $\u003cName\u003e\\@cisco\\.com where 'Name' is the name given to this captured parameter.\nName—The name of the output under which the captured value is saved. This name should be the same that is provided in the Regular Expression—$\u003cName\u003e.\nType—The response parameter type—String, Integer, Float, or Boolean.\nThe default value is String.\nDirect Mapping—Select a task input or task output field.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nFor more information, see Response Parser.\nThe following table explains the SSH Command executor Outputs :\nProperty\rDescription\rExit Code\rThe exit code after the execution of the command against the given endpoint.\rCommand Output\rThe complete response after the execution of the command against the given endpoint.\rCommand Execution Error\rCaptures the error encountered while executing the command.\rExtracted Parameters\rThe response parser extracted outputs from the command execution response.\rThe following table explains the Invoke SSH Commands task Outcomes:\nProperty\rDescription\rOutcomes\rTo set the custom execution status and status message based on the obtained outputs, do the following:\nClick Add Outcome.\nName—The name for the outcome.\nOutcome Type—Select the outcome type. The options available are Success, Skip To Success, Error, Terminal Error, Skip Task Execution, or Status.\nFor more information on Outcomes, see Outcomes.\nMessage—The message when the condition is met.\nCondition—The condition for the outcome.\nFor example, {{eq .global.InvokeSshCommands1.output.ExitCode \"0\"}}.\nThis condition checks whether the output `ExitCode` of the executor named `InvokeSshCommands1` equals to 0. If the condition is true, the task status is set to the value provided in `Outcome Type` and task status message is set to value provided in `Message`.\nUsing SSH Commands\nYou can specify multiple commands that need to run on the given target by chaining the commands with special characters. The following table explains the operators.\nOperators\rFunction\r\u0026\u0026 (Logical AND)\rThe command following this operator will only execute if the command preceding this operator has been successfully executed.\r; (Semi-colon)\rThe command following this operator will execute even if the command preceding this operator is not successfully executed.\r|| ( Logical OR)\rThe command succeeding this operator is only executed if the command preceding it has failed.\r| (Pipe)\rThe output of the first command acts as input to the second command.\r! (NOT)\rNegates an expression within a command. It is much like an “except” statement.\r\u003e,\u003e\u003e, \u003c (Redirection)\rRedirects the output of a command or a group of commands to a file or stream.\rTemplate Parameters\nThe request body template can refer to values from task inputs, previous task outputs, or implicit parameters. The following table explains the template parameters.\nPrefix/Format\rDescription\r{{.global.task.input.\u003cParameterName\u003e}}\rTask input reference.\r{{.global.\u003cExecutorRefName\u003e.output.\u003cParameterName\u003e}}\rPrevious executor output reference. ExecutorRefName is the name of the previous executor having output ParameterName.\r{{.security.AccountMoid}}\rImplicit parameter reference to Account MoID under which the workflow is running.\r{{.security.OrganizationMoid}}\rImplicit parameter reference to Organization MoID under which the workflow is running.\rTemplate Functions\nThe template engine has in-built functions to transform values before they are populated in the request templates. The following table explains the functions supported in Invoke SSH Commands task.\nFunction\rDescription\rTrimSpace\rReturns a string after removing white spaces from a the string.\nExample:\n{{TrimSpace .global.task.input.HostName}}\nContainsString\rReturns a boolean if a substring is present in a given string.\nExample:\n{{if (ContainsString .global.task.input.SizeAsString \\”MB\\”)}}Mega Bytes{{else}}Bytes{{end}}\nFindAllString\rReturns a slice of substrings matching the regular expression in a given string.\nExample:\n{{(FindAllString .global.task.input.NumberString \\”([0-9]+)\\”)}}\nThe above example returns array [“123”, “456”] for input string “123 some text 456.”\nToJson\rConverts a value to a JSON format.\nExample:\n{{(FindAllString .global.task.input.NumberString \\\"([0-9]+)\\\") | ToJson}}\nThe above example returns JSON array literal [“123”, “456”] for input string “123 some text 456.”\nAsArray\rTakes in an element and returns an array of one element.\nExample:\n{{AsArray .global.task.output.serverMo}}\nThe above example returns an array of one server Mo.\nSubstring\rReturns a substring within the given index bounds.\nExample:\n{{Substring .global.task.input.StorageId 2 6}}\nThe above example returns “ABCD” for string “12ABCD3456.”\nIpToCidr\rReturns the classless inter-domain routing (CIDR) notation of an IPv4 address and subnet mask.\nExample:\n{{IpToCidr .global.task.input.Ip .global.task.input.Netmask}}\nThe above example returns “10.10.10.10/24” for the input parameters “10.10.10.10” and “255.255.255.0.”\nLookupInSlice\rChecks if a given value is present in given slice or array and returns true if it exists. This function can be used for any value.\nExample:\n{{LookupInSlice .global.task.input.IpAddressList \\”10.10.10.10\\”}}\nThe above example returns true for input [”10.10.10.10”, “20.20.20.20”].\nIndex\rReturns a value from an array when an input index exists.\nExample:\n{{ index .global.task.input.nodes .global.task.input.idx }} In the above example, if nodes is an array of devices and idx is 2, the index function returns the second device in the array.\nItob\rConverts an integer to a boolean.\nExample:\n{{ Itob global.task.input.OnOffFlip }} The above example returns true and false for inputs 1 and 0 respectively.\nItoa\rConverts a given number to a string value.\nExample:\n{{ Itoa global.task.input.Port }} The above example returns “12345” for input 12345.\nItof\rConverts a given integer to a float value.\nExample:\n{{ Itof global.task.input.Rate }}\nThe above example returns 15.0 for an input 15.\nBtoa\rConverts a given boolean to a string value.\nExample:\n{{ Btoa global.task.input.OnOffFlip }}\nThe above example returns “true” for input true.\nBtoi\rConverts a given boolean to a integer value.\nExample:\n{{ Btoi global.task.input.OnOffFlip }}\nThe above example returns 1 and 0 for inputs true and false respectively.\nAtob\rConverts the given string into a boolean value.\nExample:\n{{ Atob global.task.input.OnOffFlip }}Returns true for input “true”\nAtoi\rConverts a given number in string format to the integer type.\nExample:\n{{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”\nFtoa\rConverts a given number into the string form based on the given precision.\nExample:\n{{Ftoa .global.task.input.Size 2}} returns the following output: 123.456 =\u003e “123.45”, 1028 =\u003e “1028.00”\nFtoi\rConverts a given float input to a integer value.\nExample:\n{{ Ftoi global.task.input.Rate }}\nThe above example returns 15 for an input 15.833.\nEval\rSupports an expression evaluation function. The below example returns 2GB for a input value of 2048. Note that the second argument is passed as ‘.’ in the template, which represents the map of all parameters.\n{{Eval \\\"{{.global.task.input.Size}} / 1024\\\" .}}GB\nTemplate Engine Syntax\nThe template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements\nThe comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}}\nConditional Statements\nThe template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \u003ccomparision_statement\u003e}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else if \u003ccomparision_statement}} Tempalte to be used {{end}}\nResponse Parser\nA response parser is a collection of parameters that model values to be extracted from the SSH command response.\nExample: Create a response parser to get the IP address for a ping command\nTo get the IP address for the host such as www.example.com, you can use the ping command:\nping example.com -4\nPinging example.com [93.184.216.34] with 32 bytes of data:\nReply from 93.184.216.34: bytes=32 time=229ms TTL=53\nReply from 93.184.216.34: bytes=32 time=230ms TTL=53\nReply from 93.184.216.34: bytes=32 time=230ms TTL=53\nReply from 93.184.216.34: bytes=32 time=229ms TTL=53ping example.com\nTo extract the IP address from the command output for an SSH Command task, you can configure the response parser as:\nRegular Expression—Pinging\\s+example.com\\s+\\[$\u003cIP\u003e\\]\\s+.*\nName—IP\nNote: This name should be the same that is provided in the Regular Expression field. In the above example, the Regular Expression uses name $\u003cIP\u003e so the Name specified must be “IP”.\nType—String Invoke SSH Command Reusable Task Examples\nExample 1: Create a reusable SSH Command task to list the current working directory on the host\nThis example task runs on an Intersight SSH endpoint target. This task runs the pwd command on the SSH endpoint target and obtains the current working directory in the output.\nThe task properties required for this example are as following:\nProperty\rDescription\rGeneral\rOrganization—The organization that you are creating the task in.\nDisplay Name—A user friendly short name to identify the task definition.\nReference Name—The name of the Task definition.\nInputs\rExternal Target—By default, the External Target task input is created for the task.\nReference Name—Target\nType—Target Data Type\nOutputs\rExitCode—Task output\nReference Name—ExitCode\nType—String\nMap to Task Output—Exit Code | Invoke SSH Command\nResponse—Task output\nReference Name—Response\nType—String\nMap to Task Output—Command Output| Invoke SSH Command\nLastline—Task output\nReference Name—Response\nType—String\nMap to Task Output—Extracted Parameters | Invoke SSH Command - WorkingDirectory\nError—Task output\nReference Name—Error\nType—String\nMap to Task Output—Extracted Parameters | Invoke SSH Command - CommandExecutionError\nThe following table explains the Invoke SSH Command executor inputs:\nProperty\rDescription\rSSH Command\rStatic | Non-interactive—Command—pwd\rCommand Timeout\rDefault value.\rExpected Exit Codes\rDefault value.\rResponse Parser\rWhen you run the pwd command, you get the following output:\n$pwd\n/home/user\nTo extracts the path and display it, configure the response parser as:\nRegular Expression—$\u003cWorkingDirectory\u003e\nName—WorkingDirectory\nType—String\nThe configured response parser captures the entire response line.\nExample 2: Create a reusable SSH Command task to install jq Linux command line utility on a host using interactive SSH commands\nThis example task runs on an Intersight SSH endpoint target. In this task, the Sudo password is provided by the command input field, and jq Linux command line utility is installed on the SSH endpoint target.\nThe task properties required for this example are as following:\nProperty\rDescription\rGeneral\rOrganization—The organization that you are creating the task in.\nDisplay Name—A user friendly short name to identify the task definition.\nReference Name—The name of the Task definition.\nInputs\rExternal Target—By default, the External Target task input is created for the task.\nReference Name—Target\nType—Target Data Type\nOutputs\rExitCode—Task output\nReference Name—ExitCode\nType—String\nMap to Task Output—Exit Code | Invoke SSH Command\nResponse—Task output\nReference Name—Response\nType—String\nMap to Task Output—Command Output| Invoke SSH Command\nThe following table explains the Invoke SSH Command executor inputs:\nProperty\rDescription\rSSH Command\rStatic | Interactive—Command—sudo yum install -y jq | Interactive\nExpect—The Expect string obtained while executing the SSH command is [sudo] password for qali:. You need to specify the Expect input as the regular expression of the Obtained prompt \\[sudo\\]\\spassword\\sfor\\sqali:\\s$.\nSend—testPasswd.\nShell Prompt—The shell prompt obtained before executing the SSH command is qali@automationvm-15:~$. You need to specify the regular expression of the obtained shell prompt qali\\@automationvm-15:~\\$\\s?$.\nCommand Timeout\rDefault value.\rExpected Exit Codes\rDefault value.\rResponse Parser\rDefault value.\rExecutors – Invoke Web API Request\nIntersight Orchestrator allows workflow designers to perform web API requests by using the Invoke Web API Request task in workflows. The Web API Request task allows executing web API requests on external targets not managed by Intersight or on the Intersight API endpoints.\nIntersight Orchestrator framework provides predefined reusable tasks that form the basis of workflows to automate customer operations. In some scenarios, predefined tasks are not enough to automate customer operations:\nNew parameters are added to the device specific API to enhance the existing functionality or the device exposes new functionality which is not available in the task library.\nTo orchestrate the device operations for devices that are not currently managed by Intersight.\nThe Web API Request task is an out-of-box solution that allows you to automate operations on the endpoints by invoking web APIs via HTTP or HTTPS. This feature allows a workflow designer to extend the automation capabilities of the workflow engine beyond what is natively available in the task library and interact with any HTTP or HTTPS endpoint.\nSupported Endpoints\nNatively supported Intersight targets on which a Web API Task is tested and verified are Cisco UCS Director, Pure Storage Flash Array, NetApp Active Iq Unified Manager, Hitachi Virtual Storage Platform, VMware vCenter Server, Terraform Cloud, and Cisco Application Policy Infrastructure Controller (APIC).\nNote: The Web API task is supported on Cisco UCS Director 6.8.3.0 or later.\nThe Web API task can also be executed on any HTTP(S) endpoint, which is added as HTTP Endpoint target type in Intersight Targets, provided the endpoint is reachable either directly from Intersight or via Intersight Assist when hosted on customer premises.\nHTTP Endpoints\nThe Invoke Web API Request task allows sending HTTP(S) requests to HTTP Endpoint. HTTP Endpoint is an external entity that can be configured under Intersight Targets and can be accessed in Intersight Orchestrator workflows through the APIs exposed by the endpoint. HTTP Endpoint must be accessed via Intersight Assist if the endpoint resides in customer premises. This can be facilitated by associating the Intersight Assist input while claiming the HTTP Endpoint target. The target entities that are directly reachable from the Intersight Cloud do not need Intersight Assist.\nEndpoints that support the following HTTP Authentication schemes can be added as Targets:\nBasic HTTP Authentication–Requires username and password to authenticate the endpoint.\nBearer Token Authentication–Requires token to authenticate the endpoint.\nNote: Bearer Token Authentication requires a valid access token to invoke the endpoint API. You should refresh the access token if it is expired and update the HTTP Endpoint target with the refreshed token.\nYou can also add HTTP Endpoint target without authentication. This is to facilitate invoking HTTP(S) API on the endpoints that do not require any authentication or on the endpoint that requires an authentication method that is not natively supported. In the later scenario, you should provide the authentication parameters in the required format in the web API task. The Invoke Nexus device API to authenticate using aaaLogin in the web API examples illustrate invoking web API task on Nexus switch that requires aaaLogin authentication mechanism.\nExternal targets not connected to Intersight can be modeled as HTTP Endpoint objects as follows:\nCapture all the required information to connect to and authenticate the target. For example, to invoke HTTP or HTTPS web APIs on the target using the Invoke Web API Request, HTTP Endpoint must have IP address, port number, and the authentication parameters to connect to the endpoint.\nSupports a single HTTP connection parameter set per Target and Target name is mandatory. HTTP Endpoint with different name having the same IP address or hostname cannot be created.\nUsing the Invoke Web API Request\nUse the Invoke Web API Request Task from Executors section in the Intersight Orchestrator UI to create a request for a target. The target can be Intersight API or an external endpoint added as HTTP Endpoint in the Intersight Targets. The following table explains the input properties.\nProperty\rDescription\rExternal Target\rMaps a HTTP Endpoint. An external target not selected indicates that the request will be considered as an Intersight API request.\rMethod\rStandard HTTP method requested for the specified URL.\rURL\rRelative URL of the RestAPI endpoint without hostname and port details. For external targets, this field points to the relative URL path of the RestAPI endpoint. If an external target is empty, this field points to the relative path of the Intersight API endpoint.\rHeaders\rRequest headers that are sent in the key value pairs. The values should be array of type string.\rCookies\rThe key value pairs provided in this input are sent in HTTP 'Cookie' header. The values should be array of type string.\rContent Type\rResponse content type. Currently supports JSON.\rBody\r(Optional) The request body includes two values: The content type of the request body—JSON or Text and the actual request body. The request body is a template if a workflow input or previous task output values are referred in the request body.\rResponse Parser\rStructure of the response parser providing a list of values to be extracted from the API response.\rOutcomes\r(Optional) Allows to define the custom API execution status and/or custom execution message based on the task outputs.\rTemplate Parameters\nThe request body template can refer to values from workflow inputs, previous task outputs, or implicit parameters for Intersight API calls. The following table explains the template parameters.\nPrefix/Format\rDescription\r{{.global.workflow.input.\u003cParameterName\u003e}}\rWorkflow input reference.\r{{.global.\u003cTaskRefName\u003e.output.\nParameters.\u003cParameterName\u003e}}\rPrevious task output reference. TaskRefName is the name of the previous task having output ParameterName.\r{{.security.AccountMoid}}\rImplicit parameter reference to Account MoID under which the workflow is running.\r{{.security.OrganizationMoid}}\rImplicit parameter reference to Organization MoID under which the workflow is running.\rTemplate Functions\nThe template engine has in-built functions to transform values before they are populated in the request templates. The following table explains the functions supported in Invoke Web API Request task.\nFunction\rDescription\rTrimSpace\rReturns a string after removing whitespaces from a the string.\nExample:\n{{TrimSpace .global.workflow.input.HostName}}\nContainsString\rReturns a boolean if a substring is present in a given string.\nExample:\n{{if (ContainsString .global.workflow.input.SizeAsString \\”MB\\”)}}Mega Bytes{{else}}Bytes{{end}}\nFindAllString\rReturns a slice of substrings matching the regular expression in a given string.\nExample:\n{{(FindAllString .global.workflow.input.NumberString \\”([0-9]+)\\”)}}\nThe above example returns array [“123”, “456”] for input string “123 some text 456.”\nToJson\rConverts a value to a JSON format.\nExample:\n{{(FindAllString .global.workflow.input.NumberString \\\"([0-9]+)\\\") | ToJson}}\nThe above example returns JSON array literal [“123”, “456”] for input string “123 some text 456.”\nAsArray\rTakes in an element and returns an array of one element.\nExample:\n{{AsArray .global.workflow.output.serverMo}}\nThe above example returns an array of one server Mo.\nSubstring\rReturns a substring within the given index bounds.\nExample:\n{{Substring .global.workflow.input.StorageId 2 6}}\nThe above example returns “ABCD” for string “12ABCD3456.”\nIpToCidr\rReturns the classless inter-domain routing (CIDR) notation of an IPv4 address and subnet mask.\nExample:\n{{IpToCidr .global.workflow.input.Ip .global.workflow.input.Netmask}}\nThe above example returns “10.10.10.10/24” for the input parameters “10.10.10.10” and “255.255.255.0.”\nLookupInSlice\rChecks if a given value is present in given slice or array and returns true if it exists. This function can be used for any value.\nExample:\n{{LookupInSlice .global.workflow.input.IpAddressList \\”10.10.10.10\\”}}\nThe above example returns true for input [”10.10.10.10”, “20.20.20.20”].\nIndex\rReturns a value from an array when an input index exists.\nExample:\n{{ index .global.workflow.input.nodes .global.workflow.input.idx }} In the above example, if nodes is an array of devices and idx is 2, the index function returns the second device in the array.\nItob\rConverts an integer to a boolean.\nExample:\n{{ Itob global.workflow.input.OnOffFlip }} The above example returns true and false for inputs 1 and 0 respectively.\nItoa\rConverts a given number to a string value.\nExample:\n{{ Itoa global.workflow.input.Port }} The above example returns “12345” for input 12345.\nItof\rConverts a given integer to a float value.\nExample:\n{{ Itof global.workflow.input.Rate }}\nThe above example returns 15.0 for an input 15.\nBtoa\rConverts a given boolean to a string value.\nExample:\n{{ Btoa global.workflow.input.OnOffFlip }}\nThe above example returns “true” for input true.\nBtoi\rConverts a given boolean to a integer value.\nExample:\n{{ Btoi global.workflow.input.OnOffFlip }}\nThe above example returns 1 and 0 for inputs true and false respectively.\nAtob\rConverts the given string into a Boolean value.\nExample:\n{{ Atob global.workflow.input.OnOffFlip }}Returns true for input “true”\nAtoi\rConverts a given number in string format to the integer type.\nExample:\n{{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”\nFtoa\rConverts a given number into the string form based on the given precision.\nExample:\n{{Ftoa .global.task.input.Size 2}} returns the following output: 123.456 =\u003e “123.45”, 1028 =\u003e “1028.00”\nFtoi\rConverts a given float input to a integer value.\nExample:\n{{ Ftoi global.workflow.input.Rate }}\nThe above example returns 15 for an input 15.833.\nEval\rSupports an expression evaluation function. The below example returns 2GB for a input value of 2048. Note that the second argument is passed as ‘.’ in the template, which represents the map of all parameters.\n{{Eval \\\"{{.global.workflow.input.Size}} / 1024\\\" .}}GB\nTemplate Engine Syntax\nThe template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements\nThe comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}}\nConditional Statements\nThe template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \u003ccomparision_statement\u003e}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else if \u003ccomparision_statement}} Tempalte to be used {{end}}\nResponse Parser\nA response parser allows extracting values from API responses. A response parser is a collection of parameters that model values to be extracted from the API response. Each parameter needs to specify the following values:\nPath—Content specific path reference pointing to the location where the value is present in the response. Currently, JSON is supported. The path is JSONPath.\nName—Unique name in the response parser to identify and extract a specific value.\nType—Type of the value extracted from the response.\nNote: The values extracted using the response parser are populated in the task output parameters.\nOutcomes\nAn outcome is the combination of a condition and task status. You use the extracted values from the API response to determine the task status and set the status with an appropriate message, when the condition matches. You can specify one or more outcomes and the outcomes are evaluated in the specified order. The first outcome condition that matches, sets the task status and message. Outcomes is an optional input to web API task and if not specified, task status is set to failed when the HTTP status code is between 400 to 600, else the status is marked as successful.\nThe outcomes of a task are as follows:\nSuccess—Marks the task as Success if the condition matches.\nError—Marks the task as Failed if the condition matches.\nTerminal error—Marks the API execution as Failed if the condition matches. This marks a non-recoverable error and no retries are attempted.\nSkip Task Execution—Skips the execution of a task if the respective condition matches.\nOutcomes feature is illustrated in the example - Fetch details of NetApp volume using volume ID.\nWeb API Responses\nThe web API responses for the requests are sent in the following parameters as described in the following table.\nProperty\rDescription\rHeaders\rResponse headers extracted from the API response. The extracted response headers can be referred to and mapped using the following format:\n{{.global.\u003cTaskRefName\u003e.output.Headers.\u003cHeaderName\u003e}}.\nFor example if the task reference name is InvokeGenericWebApi1, to get ContentLength header, the reference name will be:\n{{.global.InvokeGenericWebApi1.output.Headers.ContentLength}}.\nCookies\rList of cookies obtained from the response in the form of key value pairs.\rStatus Code\rHTTP status code of the web API response.\rStatus Message\rHTTP status message of the web API response.\rParameters\rList of output parameters extracted from the response. The output capture template format is as follows:\n{{.global.[Name of the previous task].output.Parameters.\n[Name of the parameter in response parser of the previous task]}}\nFor example, if the response parser captures a string value as `Moid` from the API response, the corresponding output mapping for `Moid` is as follows:\n{{.global.[TaskRefName].output.Parameters.Moid}}\nIn the above example, TaskRefName refers to a task which has MOID as output parameter.\nNote: TaskRefName for the output mapping must be referred from the corresponding task name in the JSON View tab of Workflow Designer.\nWeb API Request Task Examples\nExample: Create a NetApp Volume and Create Snapshot of the Volume – Illustrates Task Output Mapping\nThe following example workflow has two Invoke Web API tasks. The first task shows how to create a NetApp volume. In this task, the UUID is extracted for the newly created volume from the response. The second task fetches the previously created volume details using the first task’s captured UUID output and Create Snapshot for the same Volume. This example assumes that the workflow inputs names are VolumeName, VolumeSize, StorageVM, and Aggregate already exists.\nThe following is a sample API request sent to NetApp to create a volume.\nPOST /api/storage/volumes?return_timeout=0\u0026return_records=true HTTP/1.1\n{\n“name”: “backup”,\n“size”: “4TB”, “svm”: {\n“name”: “backup-svm”\n},\n“aggregates”: [\n{\n“name”: “backup-aggregate”\n}\n]\n}\nThe following is a sample response received from NetApp.\n{\n“num_records”: 1, “records”: [\n{\n“uuid”: “19d79da1-2e89-11eb-9685-00a0986a3b4f”, “name”: “”,\n“size”:4294967296,\n“aggregates”: [\n{\n“name”: “backup-aggregate”\n}\n],\n“svm”: {\n“name”: “backup-svm”\n}\n}\n],\n“job”: {\n“uuid”: “19db360a-2e89-11eb-9685-00a0986a3b4f”, “_links”: {\n“self”: {\n“href”: “/api/cluster/jobs/19db360a-2e89-11eb-9685-00a0986a3b4f”\n}\n}\n}\n}\nFrom the above response, the JSON path for the uuid value in the records parameter is $.records[0].uuid.\nThe following table displays the required web API request task input and response parser to achieve the above requirements.\nProperty\rDescription\rTarget\rExternal targets can be mapped to Targets either as custom value or workflow input.\rMethod\r\"Method\": \"POST\",\rURL\r\"Url\": \"/api/storage/volumes?\nreturn_records=true\",\rBody\rThe request body has templates with values referred from workflow input as follows:\n\"Body\": {\n\"name\":\n\"{{.global.workflow.input.VolumeName}}\",\n\"size\":\n\"{{.global.workflow.input.VolumeSize}}\",\n\"svm\": {\n\"name\":\n\"{{.global.workflow.input.StorageVm}}\"\n},\n\"aggregates\": [\n{\n\"name\":\n\"{{.global.workflow.input.Aggregate}}\"\n}\n]\n}\nContent Type\r\"ContentType\": \"json\",\rResponse Parser\r\"ResponseParser\": {\n\"Parameters\": [\n{\n\"Name\": \"Uuid\",\n\"Path\": \"$.records[0].uuid\",\n\"Type\": \"string\"\n}\rThe following is a sample API request sent to NetApp to create snapshots using volume UUID:\nPOST /api/storage/volumes/19d79da1-2e89-11eb-9685-00a0986a3b4f/snapshots\n{“name”: “BackupVolume”, “comment”: “backup Data” }\nThe following is a sample response received from NetApp.\n{\n“job”: {\n“uuid”: “13194cda-7d20-11eb-9991-00a0986a3b4f”,\n“_links”: {\n“self”: {\n“href”: “/api/cluster/jobs/13194cda-7d20-11eb-9991-00a0986a3b4f”\n}\n}\n}\n}\nThe web API request task inputs and response parser are captured from the snapshots UUID. The URL input requires previous task’s UUID output. The name of web API tasks within a workflow is named InvokeGenericWebApi\u003cnumber\u003e, irrespective of what the user names it. To get previous task name through workflow designer, click the JSON View button and make a note of the Task Name, for example, InvokeGenericWebApi1.\nThe output mapping template format is as follows:\n{{.global.InvokeGenericWebApi1.output.Parameters.Uuid}}\nThe following table displays the required web API request task input and response parser to achieve the above requirements.\nProperty\rDescription\rTarget\rExternal targets can be mapped to Targets either as custom value or workflow input.\rMethod\r\"Method\": \"POST\",\rURL\r\"Url\": \"/api/storage/volumes/{{.global.InvokeGenericWebApi1.output.Parameters.Uuid}}/snapshots\",\nNote: InvokeGenericWebApi1 is the task reference name of the previous task in the workflow.\nBody\rThe request body has templates with values referred from workflow input as follows:\n\"Body\": {\"name\": \"{{.global.workflow.input.SnapshotName}}\", \"comment\": \"Backup Copy\" }\nContent Type\r\"ContentType\": \"json\",\rResponse Parser\r\"ResponseParser\": { \"Parameters\": [ { \"Name\": \"SUuid\", \"Path\": \"$.job.uuid\", \"Type\": \"string\" }\rExample: Create a Serial over LAN (SOL) Policy\nThe following example shows how to create Serial over LAN (SOL) in Intersight using RestAPI calls.\nThe following is a sample of the API request.\n{\n“Name”: “SolPolicy”,\n“ComPort”: “com0”,\n“Organization”: {\n“ObjectType”: “organization.Organization”,\n“Moid”: “5facccc96972652d305616a7”\n}\n}\nThe following is a sample API response.\n{\n“Moid”: “5fbcdca26275722d31de7519”,\n“ObjectType”: “sol.Policy”,\n“ClassId”: “sol.Policy”,\n“CreateTime”: “2020-11-24T10:12:51.160304663Z”,\n“ModTime”: “2020-11-24T10:12:51.160304663Z”,\n“Tags”: [],\n“Owners”: [\n“5facccc67564612d33a29166”\n],\n“SharedScope”: “”,\n“AccountMoid”: “5facccc67564612d33a29166”,\n“DomainGroupMoid”: “5facccc67564612d33a29167”,\n“Ancestors”: null,\n“PermissionResources”: [{\n“ObjectType”: “organization.Organization”,\n“ClassId”: “mo.MoRef”,\n“Moid”: “5facccc96972652d305616a7”,\n“link”: “https://intersight.com/api/v1/organization/Organizations/5facccc96972652d305616a7\"\n}],\n“Description”: “”,\n“Name”: “SolPolicy”,\n“BaudRate”: 9600,\n“ComPort”: “com0”,\n“Enabled”: true,\n“SshPort”: 2400,\n“Organization”: {\n“ObjectType”: “organization.Organization”,\n“ClassId”: “mo.MoRef”,\n“Moid”: “5facccc96972652d305616a7”,\n“link”: “https://intersight.com/api/v1/organization/Organizations/5facccc96972652d305616a7\"\n},\n“Profiles”: null\n}\nThe following table explains the input properties.\nProperty\rDescription\rMethod\rPOST\rURL\r/v1/sol/Policies\rContent Type\rJSON\rBody\rThe Text field will have the following value:\n{\n\"Name\": \"{{.global.workflow.input.Name}}\",\n\"ComPort\": \"{{.global.workflow.input.ComPort}}\",\n\"Organization\": {\n\"ObjectType\": \"organization.Organization\",\n\"Moid\": \"{{.security.OrganizationMoid}}\"\n}\n}\nThe Content Type must be JSON.\nResponse Parser\rThe Response Parser field will have the following parameter:\nName:\nMOID\nPath:\n$.Moid\nType:\nstring\nNote: The Body input parameter is optional as it would be empty for a GET call method.\nExample: Fetch details of NetApp volume using volume ID\nThe following example shows how to fetch the NetApp volume using Uuid of the volume. It demonstrates the usage of outcomes to set status of API execution and status message based on the API response.\nThe following is a sample URL of the request\n/api/storage/volumes/0049cef7-8a23-11ea-87ab-00a098605c19\nThe following is a sample API response.\n{\n“uuid”: “0049cef7-8a23-11ea-87ab-00a098605c19”,\n“name”: “backup_volume”,\n“size”: 1130258432,\n“state”: “online”,\n“aggregates”: [\n{\n“name”: “aggr01”,\n“uuid”: “8347fd83-34b1-4234-a8ba-6c53bad0fc6a”\n}\n],\n“snapmirror”: {\n“is_protected”: true\n},\n“space”: {\n“size”: 1130258432,\n“available”: 1065709568,\n“used”: 8036352\n}\n}\nThe following table explains the input properties.\nProperty\rDescription\rMethod\rGET\rURL\r/api/storage/volumes/0049cef7-8a23-11ea-87ab-00a098605c19\rContent Type\rJSON\rResponse Parser\r\"ResponseParser\": {\n\"Parameters\": [\n{\n\"Name\": \"Name\",\n\"Path\": \"$.name\",\n\"Type\": \"string\"\n},\n{\n\"Name\": \"State\",\n\"Path\": \"$.state\",\n\"Type\": \"string\"\n},\n{\n\"Name\": \"AvailableSize\",\n\"Path\": \"$.space.available\",\n\"Type\": \"float\"\n},\n{\n\"Name\": \"IsProtected\",\n\"Path\": \"$.snapmirror.is_protected\",\n\"Type\": \"boolean\"\n}\n]\n}\rOutcomes\r\"Outcomes\": [\n{\n\"Condition\": \"{{and (ge .local.response.HttpStatusCode 400)\n(lt .local.response.HttpStatusCode 600)}}\"\n\"Message\" : \"API request failed - {{.local.response.HttpStatusCode}}:{{.local.response.HttpStatusMsg}}\",\n\"Name\" : \"API Invoke Error\",\n\"Type\" : \"Error\"\n},\n{\n\"Condition\": \"{{ne .local.response.State \"online\"}}\",\n\"Message\" : \"Fetched Volume {{.local.response.Name}} is offline\",\n\"Name\" : \"Offline Volume\",\n\"Type\" : \"Error\"\n},\n{\n\"Condition\": \"{{lt .local.response.AvailableSize 100000000}}\",\n\"Message\" : \"Available space in the volume {{.local.response.Name}} is less than 100 MB.\",\n\"Name\" : \"Out of Space\",\n\"Type\" : \"Error\"\n},\n{\n\"Condition\": \"{{eq .local.response.IsProtected false}}\",\n\"Message\" : \"Fetched Volume {{.local.response.Name}} is not protected.\",\n\"Name\" : \"Insecure Volume\",\n\"Type\" : \"Error\"\n},\n{\n\"Condition\": \"true\",\n\"Message\" : \"Volume prerequisite checks succeeded.\",\n\"Name\" : \"All Good\",\n\"Type\" : \"Success\"\n}\n]\rThe response parser specification captures these outputs from the response such as Name, State, AvailableSize, and IsProtected.\nThe extracted values can be used to set the task status using outcomes. The syntax to refer the API outputs in outcomes is .local.response.\u003capi-output-parameter-name\u003e where api-output-parameter-name can refer:\nPredefined API output parameters such as HttpStatusCode, HttpStatusMsg\nOutput parameters captured using Response Parser.\nImportant: If the specified output parameter is not available, the template engine throws validation error message when API is executed. Following syntax can be used to check if output parameter exists in response and then use.\n{{if index .local.response api-param-name }} {{.local.response.\u003capi-output-parameter-name\u003e}} {{end}}\nIn this example, the following outcomes are added based on the API response.\nFor the API invocation error where the HTTP status code is between 400 to 600 indicates. If the condition evaluates to true then an error message is set to show the status code and status message. Outcome Property\rValue\rName\rAPI Invoke Error\nThe name identifies an outcome in the outcomes list. The name is not used for any other purpose.\nCondition\r{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 600)}}\nThis condition checks whether the response status code of API is between 400 and 600.\nOutcome Type\rError\nIf the Condition is true, status of API is set to Failed.\nMessage\rAPI request failed - {{.local.response.HttpStatusCode}}:{{.local.response.HttpStatusMsg}}\nIf the Condition is true, status message of API is set to above.\nAn API error is thrown if the fetched volume is not online. An example for string comparison is the following. Outcome Property\rValue\rName\rOffline Volume\nThe name identifies an outcome in the outcomes list. The name is not used for any other purpose.\nCondition\r{{ne .local.response.State \"online\"}}\nThis condition checks whether the captured output string State is equal to online. Please make sure the string value is enclosed in double quotes.\nOutcome Type\rError\nIf the Condition is true, status of API is set to Failed.\nMessage\rFetched Volume {{.local.response.Name}} is offline If the Condition is true, status message of API is set to above.\nAn API error is thrown if the fetched volume does not have a of minimum 100 MB free space. Outcome Property\rValue\rName\rOut of Space\nThe name identifies an outcome in the outcomes list. The name is not used for any other purpose.\nCondition\r{{lt .local.response.AvailableSize 100000000}}\nThis condition checks whether the available space is less than 100 MB. The fetched AvailableSize is of type float64.\nOutcome Type\rError\nIf the Condition is true, status of API is set to Failed.\nMessage\rAvailable space in the volume {{.local.response.Name}} is less than 100 MB\nIf the Condition is true, status message of API is set to above.\nAn API error is thrown if the fetched volume’s secure property is not set. An example for Boolean comparison is the following. Outcome Property\rValue\rName\rInsecure Volume\nThe name identifies an outcome in the outcomes list. The name is not used for any other purpose.\nCondition\r{{eq .local.response.IsProtected false}} This condition checks whether the captured IsProtected output parameter is not set.\nOutcome Type\rError\nIf the Condition is true, status of API is set to Failed.\nMessage\rFetched Volume {{.local.response.Name}} is not protected.\nIf the Condition is true, status message of API is set to above.\nThis can be termed as the final outcome for a successful completion. Outcome Property\rValue\rName\rAll Good\nThe name identifies an outcome in the outcomes list of task designer. The name is not used for any other purpose.\nCondition\rTrue\n{{eq .local.response.HttpStatusCode 200}}\nTrue can be used as the condition to capture all scenarios or the specific success response status code can be used, which is 200.\nOutcome Type\rSuccess\rMessage\rVolume prerequisite checks succeeded.\nAbove message is set as status message.\nExample: Invoke Nexus device API to authenticate using aaaLogin and create VLAN – Illustrates custom Target authentication in the web API workflow\nThe following example workflow has two Invoke Web API tasks. The first task shows how to authenticate against Nexus switch using aaaLogin and second API creates a VLAN on the switch using the authentication token extracted from the first login API. It is assumed that Nexus switch is added as HTTP Endpoint target without authentication parameters.\nThe following is a sample API request sent to authenticate against Nexus device and fetch the authentication token.\nURL : POST /api/aaaLogin.json\nBody:\n{\n“aaaUser”: {\n“attributes”: {\n“name”: “username”,\n“pwd”: “password”\n}\n}\n}\nThe following is a sample response received from Nexus device, Token key in the response holds the Token which should be used in subsequent API calls to authenticate.\n{\n“totalCount”: “1”,\n“imdata”: [\n{\n“aaaLogin”: {\n“attributes”: {\n“token”: “Token Value”,\n“refreshTimeoutSeconds”: “9600”,\n“maximumLifetimeSeconds”: “86400”,\n“guiIdleTimeoutSeconds”: “9600”,\n“userName”: “username”,\n}\n}\n}\n]\n}\nFrom the above response, the JSON path of the token value is $.imdata[0].aaaLogin.attributes.token.\nThe following table displays the required web API request task input and response parser to achieve the above requirements.\nProperty\rDescription\rTarget\rExternal targets can be mapped to Targets either as custom value or workflow input.\nNote: Nexus switch is added as HTTP Endpoint by disabling Authentication Required input slider.\nMethod\rPOST\rURL\r/api/aaaLogin.json\rBody\rThe request body has templates with values referred from workflow input as follows:\nPassword workflow input should be marked as secure property to make sure the value is hidden and encrypted while data-in-transit and data-at-rest.\n\"Body\": {\n{\n\"aaaUser\": {\n\"attributes\": {\n\"name\": \"{{.global.workflow.input.Username}}\",\n\"pwd\": \"{{.global.workflow.input.Password}}\",\n}\n}\n}\n}\nContent Type\rJSON\rResponse Parser\rThe Response Parser field will have the following parameter:\n\"ResponseParser\": {\n\"Parameters\": [\n{\n\"Name\": \"AuthToken\",\n\"Path\": \"$.imdata[0].aaaLogin.attributes.token\"\n\"Type\": \"string\"\n}\n]\n}\nThe following is a sample API request sent to Nexus switch to create VLAN 501 with authentication token populated in the cookie input.\nURL : POST /api/mo/sys/bd.json\nCookie : APIC-cookie=\u003cToken-Value\u003e\nBody :\n{\n“bdEntity”: {\n“children”: [\n{\n“l2BD”: {\n“attributes”: {\n“fabEncap”: “vlan-501”,\n“pcTag”: “1”\n}\n}\n}\n]\n}\n}\nThe output of first task “AuthToken” needs to be populated in the cookie input of the create VLAN task.\nThe output mapping template format is as follows:{{.global.InvokeGenericWebApi1.output.Parameters.AuthToken}}\nThe following table displays the required web API request task inputs to achieve the above requirements.\nProperty\rDescription\rTarget\rExternal targets can be mapped to Targets either as custom value or workflow input.\nNote: Nexus switch is added as HTTP Endpoint by disabling Authentication Required input slider.\nMethod\rPOST\rURL\r/api/mo/sys/bd.json\rCookie\r{\nAPIC-cookie={{.global.InvokeGenericWebApi1.output.Parameters.AuthToken}}\n}\rBody\r{\n\"bdEntity\": {\n\"children\": [\n{\n\"l2BD\": {\n\"attributes\": {\n\"fabEncap\": \"vlan-501\",\n\"pcTag\": \"1\"\n}\n}\n}\n]\n}\n}\rContent Type\rJSON\rExample: Create a Virtual Machine using Content Library and Attach a SCSI Controller to the created virtual machine–Illustrates Task Output Mapping\nThe following example workflow has two Invoke Web API tasks. The first task shows how to create a virtual machine using content library. In this task, the Virtual machine ID is extracted for the newly created virtual machine. The second task fetches the virtual machine ID of previously created virtual machine and add a SCSI controller to the created virtual machine. This example assumes that the workflow inputs names are libraryID, datastoreID, folderID, hostID, respoolID, and External Targets already exists.\nThe following is a sample API request sent to vCenter endpoint to create a virtual machine using content library.\nPOST /rest/com/vmware/vcenter/ovf/library-item/id:{{.global.workflow.input.libraryID}}?~action=deploy\n{\n{\n“deployment_spec”: {\n“accept_all_EULA”: true,\n“default_datastore_id”: “{{.global.workflow.input.datastoreID}}”\n},\n“target”: {\n“folder_id”: “{{.global.workflow.input.folderID}}”,\n“host_id”: “{{.global.workflow.input.hostID}}”,\n“resource_pool_id”: “{{.global.workflow.input.respoolID}}”\n}\n}\nThe following is a sample response received from NetApp.\n{\n“value”:\n{\n“resource_id”:\n{\n“id”:“vm-52491”\n“type”: “VirtualMachine”\n}\n“succeeded”:“true”\n}\n} From the above response, the JSON path for the id value in the resource_id parameter is $.value.resource_id.id\nThe following table displays the required web API request task input and response parser to achieve the above requirements.\nProperty\rDescription\rTarget\rExternal targets can be mapped to Targets either as custom value or workflow input.\rMethod\r\"Method\": \"POST\",\rURL\r\"Url\": \"/rest/com/vmware/vcenter/ovf/library-item/id:{{.global.workflow.input.libraryID}}?~action=deploy \",\rBody\rThe request body has templates with values referred from workflow input as follows:\n\"Body\": {\n\"deployment_spec\": {\n\"accept_all_EULA\": true,\n\"default_datastore_id\": \"{{.global.workflow.input.datastoreID}}\"\n},\n\"target\": {\n\"folder_id\": \"{{.global.workflow.input.folderID}}\",\n\"host_id\": \"{{.global.workflow.input.hostID}}\",\n\"resource_pool_id\": \"{{.global.workflow.input.respoolID}}\"\n}\n}\nContent Type\r\"ContentType\": \"json\",\rResponse Parser\r\"ResponseParser\": {\n\"Parameters\": [\n{\n\"Name\": \"vmID\",\n\"Path\": \"$.value.resource_id.id \",\n\"Type\": \"string\"\n}\rThe following is a sample API request sent to VMware vCenter endpoint to add SCSI controller using virtual machine ID:\nPOST /rest/vcenter/vm/vm-52491/hardware/adapter/scsi\n{“spec”: {“type”: “LSILOGICSAS”}} The following is a sample response received from VMware vCenter.\n{\n“value”:“1000”\n}\nThe URL input requires previous task’s vmID output. The name of web API tasks within a workflow is named InvokeGenericWebApi\u003cnumber\u003e, irrespective of what the user names it. To get previous task name through workflow designer, click the JSON View button and make a note of the Task Name, for example, InvokeGenericWebApi1.\nThe output mapping template format is as follows:\n{{.global.InvokeGenericWebApi1.output.Parameters.vmID}}\nProperty\rDescription\rTarget\rExternal targets can be mapped to Targets either as custom value or workflow input.\rMethod\r\"Method\": \"POST\",\rURL\r\"Url\": \"/rest/vcenter/vm/{{.global.InvokeGenericWebApi1.output.Parameters.vmID}}/hardware/adapter/scsi \",\nNote: InvokeGenericWebApi1 is the task reference name of the previous task in the workflow.\nBody\rThe request body has templates with values referred from workflow input as follows:\n\"Body\": {\"spec\": {\"type\": \"LSILOGICSAS\"}\nContent Type\r\"ContentType\": \"json\",\rResponse Parser\r\"ResponseParser\": { \"Parameters\": [ { \"Name\": \"value\", \"Path\": \"$.value\", \"Type\": \"string\" }\rUpgrading Connector Packs on UCS Director Instances\nCisco Intersight introduces the ability to update connector pack versions that are installed on claimed UCS Director instances. After claiming a UCS Director instance in Intersight, as an account administrator, you can perform the following actions:\nView a list of updated versions for currently installed connector packs on the UCS Director instance. The list of updated versions available for connector packs is based on the UCS Director software version installed on the instance. Download and install the updated versions of the connector packs on the UCS Director instance. You can either install the updated versions immediately after downloading them or you can install it at a later point in time. From Cisco Intersight, you can view and install updated versions of connector packs only. You cannot download and install updated versions of Cisco UCS Director. To install the latest versions of Cisco UCS Director, you must download it from Cisco.com. For more information, see the Cisco UCS Director Installation and Upgrade Guides.\nPrerequisites and Guidelines\nThis feature is available only with UCS Director version 6.7(4.0) and later versions.\nIn an optimized multi-node configuration, the updated connector pack versions are installed on the primary node.\nInstalling updated versions of connector packs on a UCS Director instance will result in the UCS Director services restarting. All users who are logged in to the UCS Director instance will be automatically logged out.\nPrior to installing the updated versions of the connector packs, take a backup of the data on the UCS Director instance. For more information, see Backup and Restore for Cisco UCS Director Instances.\nFrom Cisco Intersight, you can download and update all connector packs on a UCS Director instance. You cannot download and install specific connector packs. If you want to install specific connector packs, then you must use the UCS Director user interface. For more information, see the Cisco UCS Director Administration Guide.\nFor customers using Intersight Private Virtual Appliance, the connector packs are available in the Intersight Private Virtual Appliance account.\nUpdating Connector Pack Versions on UCS Director Instances\nFrom the table view of the UCS Director instances, select a UCS Director instance and click Update Software.\nIn the Update Software screen, wait for the screen to populate information on the updated versions of connector packs. The following information is displayed:\nConnector Pack Version Information—Displays the names of the connector packs, versions of the connector packs installed on the UCS Director instance and the latest version number for each connector pack. This information is based on the last inventory run on the UCS Director instance. The inventory runs every 12 hours. UCS Director Instance Information—Displays the UCS Director instance name, management IP address, environment in which the instance is deployed, the installed UCS Director software version and the time when the last inventory process was run on the instance. Choose one of the following options: Click Download to Instance to download the new versions of the connector packs to the UCS Director instance. After the connector packs are downloaded, you can either choose to install the updated connector packs right away, or at a later point. If you want to install specific connector pack versions on the UCS Director instance, then you must use the UCS Director user interface. Click Download and Update to download the new versions of the connector packs and install these versions on the UCS Director instance immediately. Note: Installing latest versions of connector packs on the UCS Director instance will result in a restart of the UCS Director services. All logged in users are automatically logged out when the services restart.\nTo view the progress of the installation process, choose Requests on the header pane, and click View All.\nChoose a workflow name to view the details.\nBackup and Restore for UCS Director in Intersight\nOverview\nCisco Intersight introduces the ability to take backups and restore backups for claimed UCS Director instances. After claiming a UCS Director instance in Intersight, as an account administrator, you can perform the following tasks:\nTake a backup of Cisco UCS Director—You can either create a backup policy to run at a scheduled time or you can perform an on-demand backup. For either of these options, you can choose to have the backed up files stored on the local UCS Director instance or you can specify a system on the network.\nView a list of backups—You can view the list of backup processes that have run on all UCS Director instances.\nRestore data from a backup image—You can choose a backup image and restore it on a UCS Director instance.\nDownload Connector Packs—You can download the latest versions of installed connector packs on a UCS Director instance.\nA user with read-only privileges can only view the list of backup processes that have run on all UCS Director instances.\nPrerequisites and Guidelines\nDevice Connector version 1.0.9-1165 or higher must be installed.\nCisco UCS Director Base Platform Pack version 6.7.3.1 or later must be installed on the UCS Director instance to use the backup and restore feature. In an optimized multi-node setup, prior to installing or upgrading the base platform pack to version 6.7.3.1 or later, you must first configure passwordless authentication between the primary node and the database node.\nYou can take backups and restore backups in both, single node and optimized multi-node configurations. However, you cannot take backups of a UCS Director instance in a single node configuration and restore it on an instance in an optimized multi-node configuration.\nIf the versions of the connector packs in the backup image are more recent than the connector pack versions installed on the UCS Director instance that you want to restore the backup to, then the restore process upgrades the connector packs on the UCS Director instance to the latest version.\nIf the file location specified for an on-demand backup process and a scheduled backup process is the same, then the file created by the on-demand backup process is deleted based on the retention copies configured in the backup schedule.\nRunning an Immediate Backup for UCS Director Instances\nAn immediate backup is a point-in-time process and is initiated immediately after you provide the backup details. Prior to initiating this backup, you must specify if the backup file must be stored on the current UCS Director instance or on a specific system in the network.\nFrom the table view of the UCS Director instances, select a UCS Director instance and click Backup.\nIn the General page, review the details of the UCS Director instance that is displayed, and click Next.\nIn the Configure Backup page, specify the location of the backup file.\nSelected Instance—Implies that the backup file must be stored on the current UCS Director instance.\nNetwork Share—Implies that the backup file must be stored in a location external to the current UCS Direct instance.\nIf you chose Selected Instance, provide the following information: Field\rDescription\rBackup Filename Prefix\rA prefix for the name of the backup file. A unique file name is created for the backup image that includes the specified prefix and the timestamp.\rIf you chose Network Share, provide the following information: Field\rDescription\rBackup Filename Prefix\rA prefix for the name of the backup file. A unique file name is created for the backup that includes the specified prefix and the timestamp.\rProtocol\rProtocol to be used to transfer the backup file to the location where the file must be stored. It can be one of the following:\nSCP\nSFTP\nFTP\nImportant: Storing backup files on anonymous FTP servers is currently not supported.\nFile Location\rThe location where the backup file must be stored. You must provide the IP address or the hostname of the location and the complete file system path.\nFor example: 10.10.10.10/var/backup.\nUsername\rUser name for the backup server.\rPassword\rPassword for the user name of the backup server.\rClick Save. The backup process is initiated immediately. You can view the the list of backup files from the Backups tab. Creating a Backup Schedule\nYou can create a backup schedule to ensure that backups run at a stipulated time and backup images are stored at a specific location. You can choose to store the backup files either in the root directory of the UCS Director instance or choose a different location on the network.\nFrom the table view of the UCS Director instances, select a UCS Director instance and click Schedule Backup.\nIn the General page, review the details of the UCS Director instance that is displayed, and click Next.\nIn the Configure Backup page, specify the organization that the UCS Director instance belongs to and the type of schedule you want to create.\nOrganizations—Displays the list of organizations that the UCS Director instance belongs to. By choosing a specific organization from this list, it allows administrators of those specific organizations to view backup images created for this instance, and restore from those images.\nDaily—The backup schedule runs every day, starting with the date and time you select.\nPeriodic—The backup schedule runs periodically, starting with the date and time interval you select. By default, a periodic backup schedule runs every 8 hours. Other options include 4, 12, 16, or 20.\nSpecify the location where the backup file must be stored. It can be one of the following: Selected Instance—Default option. The backup file is stored on the current UCS Director instance.\nNetwork Share—The backup file is stored in a location external to the current UCS Direct instance.\nIf you chose Selected Instance, provide the following information: Field\rDescription\rBackup Filename Prefix\rA prefix for the name of the backup file. A unique file name is created for the backup image that includes the specified prefix and the timestamp.\rRetention Copies\rThe number of backup copies maintained on the server.\rIf you chose Network Share, provide the following information: Field\rDescription\rBackup Filename Prefix\rA prefix for the name of the backup file. A unique file name is created for the backup image that includes the specified prefix and the timestamp.\rProtocol\rProtocol to be used to transfer the backup image to the location where the image must be stored. It can be one of the following:\nSCP\nSFTP\nFTP\nImportant: Storing backup images on anonymous FTP servers is currently not supported.\nFile Location\rThe location where the backup file must be stored. Provide the IP address or the hostname of the location and the complete file system path. For example: 10.10.10.10/var/backup.\rUsername\rUser name for the backup server.\rPassword\rPassword for the user name of the backup server.\rRetention Copies\rThe number of backup copies maintained on the server.\rClick Save. Note: To edit a backup schedule at a later point in time, select the UCS Director instance and click Schedule Backup. In the subsequent panes, edit the values of the fields and click Save.\nViewing Backup Files for UCS Director Instances\nThe Backups tab displays the list of backup files that have been created for all UCS Director instances claimed in Intersight. On this tab, you can view the following information:\nLast Modified—The time when backups were performed on UCS Director instances.\nStatus—The status of backup processes. It can be Failed or Completed.\nBackup Server IP—The IP address of the backup server where the backup files are stored.\nLocation—The complete path to the backup file on the backup server.\nBackup File Name—The name of the backup file created.\nFile Size (MB)—The size of the backup file.\nDuration (minutes)—The duration of the backup process.\nInstance—The IP address of the UCS Director instance.\nOrganizations—The organizations that the UCS Director instance is associated with.\nRestoring a Backup Image for a UCS Director Instance\nYou can restore a backup image that is of the same version that is running on the selected UCS Director instance. While restoring a backup image, if more recent versions of connector packs that are currently installed on the UCS Director instance are available, then the restore process will also upgrade the connector pack versions to the latest versions.\nFrom the table view of the UCS Director instances, select a UCS Director instance and click Restore From Backup.\nIn the Backup Selection page, use the toggle bar to indicate if you want to exclude the licensing information while restoring the backup image.\nReview the list of backup files available for the selected UCS Director instance and select the backup file to restore.\nImportant: The list of backup files displayed is dependent on the platform version of the UCS Director instance that you selected in step 1.\nClick Next.\nIn the Backup Location page, modify the following fields, if required:\nField\rDescription\rProtocol\rProtocol to transfer the backup image to the location where the image must be restored. It can be one of the following:\nSCP\nSFTP\nFTP\nThis value is auto-populated. You cannot modify the protocol if you have chosen to restore from a local backup image.\nFile Location\rThis field is auto-populated based on the backup image that you selected in the Backup Selection page.\rUsername\rUser name of the backup server name.\rPassword\rPassword of the user name of the backup server name.\rClick Next.\nIn the Summary page, review the information that is displayed and click Restore.\nTo view the progress of the restore process, choose Requests on the header pane and click View All.\nClick a workflow name to view the details of the process.\n","categories":["ICO"],"description":"Cisco Intersight ICO","excerpt":"Cisco Intersight ICO","ref":"/docs/ico/ico/","tags":["Workflow"],"title":"Cisco Intersight ICO"},{"body":"\rAbout Goldydocs A sample site using the Docsy Hugo theme.\rGoldydocs is a sample site using the Docsy Hugo theme that shows what\rit can do and provides you with a template site structure. It’s designed for you to clone and edit as much as you\rlike. See the different sections of the documentation and site for more ideas.\rThis is another section\rThis is another section\r","categories":"","description":"","excerpt":"\rAbout Goldydocs A sample site using the Docsy Hugo theme.\rGoldydocs …","ref":"/about/","tags":"","title":"About Goldydocs"},{"body":"The Overview is where your users find out about your project. Depending on the size of your docset, you can have a separate overview page (like this one) or put your overview contents in the Documentation landing page (like in the Docsy User Guide).\nTry answering these questions for your user in this page:\nWhat is it? Introduce your project, including what it does or lets you do, why you would use it, and its primary goal (and how it achieves it). This should be similar to your README description, though you can go into a little more detail here if you want.\nWhy do I want it? Help your user know if your project will help them. Useful information can include:\nWhat is it good for?: What types of problems does your project solve? What are the benefits of using it?\nWhat is it not good for?: For example, point out situations that might intuitively seem suited for your project, but aren’t for some reason. Also mention known limitations, scaling issues, or anything else that might let your users know if the project is not for them.\nWhat is it not yet good for?: Highlight any useful features that are coming soon.\nWhere should I go next? Give your users next steps from the Overview. For example:\nGetting Started: Get started with $project Examples: Check out some example code! ","categories":"","description":"Here's where your user finds out if your project is for them.\n","excerpt":"Here's where your user finds out if your project is for them.\n","ref":"/docs/home/","tags":"","title":"Home"},{"body":"\rدرباره اسناد گلدی یک نمونه برای پوسته‌ی داکسی، قدرت گرفته از هوگو\rاسناد گلدی یک نمونه سایت با استفاده از پوسته‌ی داکسی و قدرت گرفته از هوگو است که به شما نشان می‌دهد چه ویژگی هایی دارد و یک ساختار کامل برای شما ایجاد کرده است. این سایت برای شما ایجاد شده است که دریافت کنید و هرچقد که می‌خواهید آن را تغییر دهید. برای گرفتن ایده های بیشتر می‌توانید از قسمت های مختلف سایت دیدن کنید.\nاین یک قسمت دیگر است.\rاین یک قسمت دیگر است.\r","categories":"","description":"","excerpt":"\rدرباره اسناد گلدی یک نمونه برای پوسته‌ی داکسی، قدرت گرفته از هوگو …","ref":"/fa/about/","tags":"","title":"درباره اسناد گلدی"},{"body":"Workflow Designer The Workflow Designer helps you create new workflows (as well as tasks and data types) and also edit existing workflows to manage targets in Cisco Intersight.\nNote: To execute the new tasks for VMware vCenter networking operations, you should upgrade to Intersight Assist version 1.0.9-278.\nImportant: The Orchestration option is visible in the left panel only if you have installed the Intersight Premier license.\nOnly an Account Administrator or a user with the Workflow Designer privilege can use the Workflow Designer to create and edit workflows.\nThe Orchestration option is visible in the left panel only if you have installed the Intersight Premier license.\nOnly an Account Administrator or a user with the Workflow Designer privilege can use the Workflow Designer to create and edit workflows.\nTo launch the Workflow Designer, choose Orchestration \u003e Workflows. A dashboard displays the following details under these tabs, namely, My Workflows, Sample Workflows, and All Workflows:\nValidation Status\nLast Execution Status\nTop Workflows by Execution Count\nTop Workflow Categories\nNumber of System Defined Workflows\nTop Workflows by Targets\nUsing the dashboard, you can create, edit, clone, or delete a tab. To create your own custom view tab, click + and specify a name and then choose the required parameters that need to be displayed in the columns, tag columns, and widgets. You can rename the tabs if it does not have a Lock icon.\nBelow the dashboard is a tabular list of workflows displaying the following information:\nDisplay Name\nDescription\nSystem Defined\nDefault Version\nExecutions\nLast Execution Status\nValidation Status\nLast Update\nOrganization\nThe Actions column allows you to do the following actions:\nExecute—Executes the workflow.\nHistory—Displays workflow execution history.\nManage Versions—create and manage versions for workflows. See Managing Versions for Workflows later in this document.\nDelete—Delete a workflow.\nRetry—Retry a failed workflow.\nCreating a Workflow Workflow creation can be broken down into the following sequence of steps:\nDefining a workflow—you specify the display name, description, and other important attributes.\nDefining workflow inputs, workflow variables, and workflow outputs—you can specify which input parameters are mandatory for the workflow execution, define variable(s) for workflow, and the output(s) generated on successful execution.\nAdding workflow tasks—you can add one or more workflow tasks in the Workflow Designer that are needed for the workflow to carry out its function.\nValidate the workflow—you can validate a workflow to ensure that there are no errors in connecting task inputs and outputs.\nDefining a Workflow Choose Orchestration from the left navigation pane.\nChoose Create Workflow. The Create Workflow screen is categorized into the following areas to help you create a workflow:\nThe following table describes the options available to you while creating a workflow: Workflow Designer Area/Option\rDescription\rDetails\rGeneral Tab\rDisplays workflow details, and also inputs, variables, and outputs of the workflow.\rYou can add a user-friendly short name, reference name, description, and assign an organization to the workflow. You can also specify a version or set a tag to the workflow. In order to categorize your workflow, use the tag key Category and provide an appropriate category value. Use the following checkboxes to:\nSet as Default Version—Sets this version as the default version for the workflow.\nFailed/Terminated Actions—Sets the post execution settings for the workflow.\nEnable Retry—Execute the workflow from the point of a failure or retry the execution of the entire workflow. You can retry the execution of the workflow for up to two weeks after the last update to the workflow.\nEnable Auto Rollback—Rollback workflow will be initiated automatically when this option is enabled. You can select one of the following rollback conditions:\nOn Failure\nOn Cancel\nOn Failure or Cancel.\nEnable Debug Logs—Collects the workflow logs for each tasks. You can analyze and debug the workflow execution.\nWorkflow Inputs—You can click Add Workflow Input and add workflow inputs. Each input has a user-friendly display name, a reference name, description, restrictions, and data type. Also, you can set a default value and encrypt it. For more information, see [Test](#creating-a-workflow) [Test](#creating-a-workflow).\nWorkflow Variable—You can click Add Workflow Variable and add a workflow variable. Each workflow variable has a reference name, data type, and so on. Also, you can set a default value. For more information, see Defining Workflow Inputs, Variables, and Outputs.\nWorkflow Outputs—You can click Add Workflow Output and add workflow outputs. Each output has a user-friendly display name, a reference name, description, restrictions, and data type. Also, you can encrypt a value and map it to task output.\nDesigner Tab\rDisplays the design area where you synthesize your workflow.\rCategorized into the following areas to help you create a workflow:\nTools Area—lists all the tasks, workflows, and operations that are currently available in Intersight. You can drag and drop a task or a workflow to the canvas to create or edit the workflow. You can collapse or expand the Tools area. You can use the Search feature to find a specific task or workflow.\nDesign Area—where you can build your workflow. Drag and drop tasks and workflows from the Tools area to this area of the screen. This area includes the following options that you can use while creating the workflow:\nZoom in and Zoom out—Magnify or reduce the view of the workflow.\nAuto Align Workflow—Automatically align the workflow tasks in the design area.\nAuto Align Selected Workflow Entities—Align selected workflow entities in the design area.\nToggle Task Search—Search for a specific task within the workflow. This is useful when you have several tasks within the workflow.\nAuto Connect Selected Workflow Entity—Add the workflow entity in the design area. You can drag and drop a task in between the tasks. The possible locations where the selected task can be added is denoted with + icon.\nTask Properties Area—where you define the task properties, inputs, outputs, and variables. Click the Task in Designer Area, to view the Task Properties area.\nGeneral—Specify the general details for the task such as name, description, version, and so on.\nNote: The task name should be unique.\nUse the Enable Rollback option to enable or disable rollback for the selected task.:\nNote: The Enable Rollback option is visible only if the task is rollback capable.\nInputs—Specify the task input parameter value that are required to execute the task. You can specify the input as a static value, map it to a workflow input or task output, use transformation or advanced mapping, or map it to a workflow variable.\nOutputs—Displays the task outputs. Click Add Worfklow Output button to map the task output to the workflow output.\nVariables—Specify the workflow variables that can be used across tasks in the workflow. For more information, see Worfklow Variables.\nMapping Tab\rDisplays the relationship between the task inputs and the outputs of the selected workflow.\nInformation on workflow inputs and workflow outputs is also displayed.\nExpand and collapse the Task Inputs and Task Outputs pane.\rCode Tab\rDisplays the code view of the workflow definition\rRead-only view of the workflow. You can copy the code, use this as a sample to create a workflow using Intersight APIs.\rHistory Tab\rStatus of the executed/in-progress workflows. This tab appears after executing a workflow.\rView workflow execution history, retry or clone a previous execution. The system displays a maximum of 100 instances of the workflow execution. The workflow execution is populated for each version of the workflow.\nNote: When a workflow is successfully executed, the options for retrying the workflow are not displayed. You can retry a failed workflow only when the Enable Retry option is enabled in the General tab.\nExecute\rLaunches the Enter Workflow Inputs window.\rChoose the Organization and the Workflow instance name to execute the workflow.\nFor user-created workflows, the organization must match where it was created.\nSave Workflow\rValidates and saves the workflow.\rReview validation errors, if any, and rectify them.\rClose Designer\rCloses the Workflow Designer.\rCloses the Workflow Designer and displays the table view of available workflows.\rRequests Requests are closely related to workflows. You create requests by running workflows; a request is generated every time you execute a workflow in Cisco Intersight. A request is a process under the control of Cisco Intersight.\nYou can schedule a workflow for later execution, and Cisco Intersight stores details of completed requests. To view the detailed information of a request, choose a request. The following information is displayed in the Requests screen:\nStatus—Displays the status of a workflow. Request can have one of several states depending on its execution status:\nRunning\nBlocked (for example, awaiting an approval)\nCompleted\nFailed (a request can fail when one of its component tasks fails to execute properly)\nDetails—Displays the request details such as name, request ID, target name and type, source name and type, name of the user who has executed the request along with the start time and end time, and duration of the request.\nInputs—Displays the workflow input details\nOutputs—Displays the workflow output details\nExecution Flow—Enable Show Additional Details to view the logs, input, and output mapping details of the user-defined workflows. Displays the workflow execution history details similar to the details displayed in the History tab.\nDefining Workflow Inputs, Variables, and Outputs Workflows can have any number of tasks, inputs, variables, and outputs.\nAny task or workflow input can be either mandatory or optional. A task or workflow cannot run without all of its mandatory inputs. You define whether an input is mandatory or optional when you create the task or workflow.\nAfter specifying the generic properties for a task or workflow, you define the input parameters and variables required for task or workflow execution. In addition, you can set workflow input Parameter Set or Progressive Disclosure rules. These rules control the availability of workflow inputs or filter the data based on the preceding selection during the workflow execution. The Task Designer uses the same parameters and information types as the workflow designer to validate the mappings of task input and output parameters when a task is used in a workflow along with other tasks. Task designer uses the same form as workflow designer to obtain the parameter and information type so as provide same user experience between workflow designer and task designer.\nChoose Orchestration from the left navigation pane and click Create Workflow.\nIn the General tab, click Add Workflow Input in the Workflow Inputs tab.\nIn the Add Workflow Input screen, enter the following details:\nDisplay Name—Enter user-friendly short name.\nReference Name\nDescription—Detailed description of the input\nValue Restrictions—Choose Required, Collection/Multiple, or can be left blank\nType—Select a data type. For example, String, Integer, Float, Boolean, Json, Enum, MoReference, Target Data Type, or a custom data type.\nThe fields displayed depend on the value you select for the Type\nfield.\nIf you select the data type as Enum, specify the following:\nEnum List—Label for the Enum value.\nWidget type.\nSet Default Value—Select the checkbox and select the corresponding default value.\nOverride—Allow the user to override the default value.\nIf you select the data type as String, specify the following:\nMinimum and Maximum Range\nRegex—Validates the regular expression when you select String in the Type field.\nSecure—Indicates that the values of these properties are encrypted and stored in Cisco Intersight.\nObject Selector—Enable to configure the Intersight managed object selectors. This attribute is available only when the primitive data is String.\nSpecify the Intersight API Reference and selector attributes to feed\nthe input from the table selection. Value will be passed according to the configuration set in the Value attribute.\nIf you select the data type as Integer or Float, specify the following:\nMinimum and Maximum Range\nSet Default Value—Select the checkbox and the corresponding default value.\nIf you select the data type as Target Data Type or MoReference, specify the following:\nIntersight API Reference—Enter the URL of the Intersight API configured with parameters.\nSelector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nIf you select the data type as Composite Data Type, you can specify the field mapping for the input field. With field mapping, you can pass the value of workflow input to a composite data field.\nTo pass the value from the parent composite data type to a child\ncomposite data type, you must specify the field mapping in the composite data type field. For more information, see Creating a Data Type.\nTo specify the field mapping, do the following:\nKey—The input field that you want to hide.\nValue Attribute—The value in a template style to be passed dynamically during the execution.\nIf the data type is Object Selector, Enum, or Boolean then the input\nis referenced as ${workflow.input.InputReferenceName}.\nIf the data type is MoReference or Target Data Type the input is\nreferenced as ${workflow.input.InputReferenceName.AttributeName}.\nThe InputReferenceName is the Reference Name given to the input\nfield and not the Display Name or Label.\nClick Add.\nRepeat this procedure to create multiple inputs.\nTo add a Parameter Set rule, click Add Rule \u003e Parameter Set.\nFor more information, see Workflow Workflow Input Parameter Set and Progressive Disclosure Rules.\nName—The name of the Parameter Set rule.\nIf Field—Select the input field and the properties that will be used to define the Parameter Set rule.\nThe inputs are referenced as InputName or InputName.Properties.\nNote: The properties are applicable only if the data type is MoRefefence or Target Data Type. For example, for a Target Data Type input field (DeviceRegistrations), you can specify Hypervisor Manager.IP Address.\nCondition—The condition for the rule. The condition can be Equal to, Not equal to, Contains, or Matches Pattern.\nValue—Select or enter the value. The Parameter Set rule uses this value along with the Condition specified to compare the value from the If Field.\nField to be shown—Select the input field(s) that should be made available when the Parameter Set rule condition is satisfied.\nClick Save.\nTo add a Progressive Disclosure rule, click Add Rule \u003e Progressive Disclosure. For more information, see Workflow Input Parameter Set and Progressive Disclosure Rules.\nTarget Field—The target input field on which the progressive disclosure is applied.\nAttribute —The inputs are referenced as AttributeName.ParameterName. For example, for an input field, Virtual Manager, you can specify the attribute name as RegisteredDevice.Moid or ConnectionStatus.\nCondition—The rule condition for the rule. The condition can be Equal to, Not equal to, or Contains.\nValue—The inputs are referenced as ${InputReferenceName.Attribute} or ${InputReferenceName.ParameterName}. For example, for a VM input field, you can specify the value as ${HypervisorManager.Moid} or ${Target.ConnectionStatus}.\nNote: For a String input field, if you have selected the Object Selector option then you need not specify the Attribute or Parameter value.\nIn the General tab, click Add Workflow Variables in the Workflow Variables tab. For more information, see Workflow Variables.\nIn the Add Workflow Variable screen, enter the following details:\nReference Name—Enter user-friendly short name.\nType—Select the data type. For example, String, Integer, Float, Boolean, Json, Enum, MoReference, or Target Data Type.\nThe fields displayed depend on the value you select for the Type\nfield.\nIf you select the data type as String, specify the following:\nObject Selector—Enable to configure the Intersight managed object selectors. The Object Selector field is optional.\nSpecify the Intersight API Reference and selector attributes to feed the input from the table selection. The value will be passed according to the configuration set in the Value attribute. If you select the data type as Enum, specify the following:\nEnum List—Label and value for the Enum list.\nWidget type—The widget type as Radio or none.\nIf you select the data type as Target Data Type or MoReference, specify the following:\nIntersight API Reference—Enter the URL of the Intersight API configured with parameters.\nSelector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nSelect the Initial Mapping To type and specify the corresponding variable value.\nClick Add.\nClick Workflow Outputs and click Add Workflow Output.\nChoose a parameter and click Add.\nClick Save.\nWorkflow Input Parameter Set and Progressive Disclosure Rules\nWhen you create a workflow, you can specify the inputs for the workflow execution. After you define the workflow inputs, you can set Parameter Set or Progressive Disclosure rules. These rules control the availability of workflow inputs or filter the data based on the preceding selection during the workflow execution.\nNote: You can define a Parameter Set or Progressive Disclosure rule only for a workflow that has more than two input fields with the supported data type.\nParameter Set Rule The Parameter Set rules control the availability of specific parameters or inputs during the execution. After the first input is specified, the Parameter Set rule controls which subsequent input fields are made available during the workflow execution.\nExample: The following example shows how to create a Parameter Set rule for a workflow with three input fields. The workflow input fields are:\nEnum—Type is Enum and Enum list is VM and HX.\nInput1—Type is String.\nInput2—Type is String.\nYou can create two workflow input Parameter Set rules. During the workflow execution when the Enum value is VM only Input1 field is made available. Alternately, when the Enum value is HX, only Input2 is made available. The details of the Parameter Set rules are:\nRule1—If Field is Enum, Condition is Equal to, Value is VM, and Fields to be shown is Input1.\nRule2—If Field is Enum, Condition is Equal to, Value is HX, and Fields to be shown is Input2.\nThe following is a sample of the API request.\n“InputParameterSet”: [\n{\n“Condition”: “eq”,\n“ControlParameter”: “Enum”,\n“EnableParameters”: [\n“Input1”\n],\n“Name”: “Rule1”,\n“ObjectType”: “workflow.ParameterSet”,\n“Value”: “VM”\n},\n{\n“Condition”: “eq”,\n“ControlParameter”: “Enum”,\n“EnableParameters”: [\n“Input2”\n],\n“Name”: “Rule2”,\n“ObjectType”: “workflow.ParameterSet”,\n“Value”: “HX”\n},\nThe supported data types for Parameter Set rules are:\nBoolean\nEnum\nString Object Selector\nMoReference\nTarget\nProgressive Disclosure Rule The Progressive Disclosure rules filter the data available in an input field based on the preceding selection during a workflow execution. The first input field is populated with broadest options. The subsequent input fields are populated with options based on the previous selection.\nExample 1: The following example shows how to create a Progressive Disclosure rule for a workflow with two input fields. Both these input fields are MoReference data type. The workflow input fields are:\nField1—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nField2—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nYou can create a Progressive Disclosure rule so that during the workflow execution, the data is filtered for Field2 fields based on value in the Field1 field. The details of the Progressive Disclosure rule are:\nField2 Rule—Target Field is Field2, Attribute is ConnectionStatus, Condition is Equal to, and Value is ${Field1.ConnectionStatus}. Example 2:: The following example shows how to create a Progressive Disclosure rule for a workflow with two input fields. Both these input fields are composite custom data type. The workflow input fields are:\nInput1—Composite data type with two fields (Field1 and Field2)\nField1—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nField2—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nInput2—Composite data type with two fields (Field3 and Field4)\nField3—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nField4—Type is MoReference, Intersight API Reference is /api/v1/asset/DeviceRegistrations, and Selector attribute is ConnectionStatus.\nYou can create two Progressive Disclosure rules. During the workflow execution, the data is filtered for Input2 fields based on value in the Input1 fields. The details of the two Progressive Disclosure rules are:\nInput2.Field3 Rule—Target Field is Input2.Field3, Attribute is ConnectionStatus, Condition is Equal to, and Value is ${Input1.Field1.ConnectionStatus}.\nInput2.Field4 Rule—Target Field is Input2.Field4, Attribute is ConnectionStatus, Condition is Equal to, and Value is ${Input1.Field2.ConnectionStatus}.\nThe following is a sample of the API request.\n“UiInputFilters”: [\n{\n“Filters”: [\n“ConnectionStatus eq ‘${Input1.Field1.ConnectionStatus}’”\n],\n“Name”: “Input2.Field3”,\n“ObjectType”: “workflow.UiInputFilter”,\n“UserHelpMessage”: \"\"\n},\n{\n“Filters”: [\n“ConnectionStatus eq ‘${Input1.Field2.ConnectionStatus}’”\n],\n“Name”: “Input2.Field4”,\n“ObjectType”: “workflow.UiInputFilter”,\n“UserHelpMessage”: \"\"\n}\n]\nThe supported data types for the Progressive Disclosure rules are:\nMoReference\nTarget\nString Object Selector\nWorkflow Variables Workflow variables are similar to local variables within functions of a programming language. You define variables for workflows in Workflow Designer, and the scope of the workflow variables lies within the defined workflow. In a workflow, all tasks are bound to the scope of the workflow and have access to the workflow variables that are defined for the workflow. You can use the workflow variable to do the following:\nSimplify complex workflows which have multiple branches based on the conditional operator. Save the output of tasks that get executed in different branches of the workflow into a single variable. This variable can then be mapped in the downstream tasks irrespective of the branch from which it was taken.\nEvaluate the workflow input using a complex expression, save the result as a variable, and reuse the variable in the subsequent tasks.\nTransform the output of a task with the help of template functions and map the value into a workflow variable. The variables can then be used in multiple mappings without having to redo the transformation in every mapping.\nTo define the workflow variable and specify the corresponding value, you can do the following:\nIn the General tab, click Add Workflow Variable and define the variable properties.\nIn the Designer tab, click the task, and then click the Variables tab.\nTo add a new workflow variable, click Add Workflow Variable and define the variable properties.\nTo add or edit a mapping to an existing variable, click Edit Mapping and specify the new value.\nNote: To view events for a workflow variable, click the View icon.\nThe workflow variables can be assigned one of the following values:\nStatic value—Either the default value of the variable or the value specified in the workflow tasks.\nDirect mapping —Mapped to a workflow input, task output, or another workflow variable.\nAdvanced or Transformational mapping—Evaluate a complex expression and save the result in a variable.\nAfter you define the workflow variable, you can map the workflow variable to task input, workflow output, or as an input for another variable. For more information, see Input, Variable, and Output Mapping.\nFollowing is a simple example which explains static mapping for a workflow variable. A workflow has two tasks Task1 and Task2 and a workflow variable Variable1 is defined with a default value as 100. For Task1, in the Variable tab for the task, you can specify a static mapping for the workflow variable value as 90. Similarly, for Task2, in the Variable tab for the task, you can specify the workflow variable value as 80 by mapping the Variable1 value.\nWhen you execute the workflow, the start value of Variable1 is the default value 100 . After Task1 is executed, the value of Variable1 is set to 90 based on the static value that is mapped for the task. After Task2 is executed, the value of Variable1 is set to 80 based on the static value that is mapped for the task.\nInput, Variable, and Output Mapping\nWorkflows inputs, variables, and task outputs can be used for mapping and they can be used as direct, transformed, or advanced mapping. The syntax to refer to these will depend on the type of mapping.\nWorkflow inputs are referenced as ${workflow.input.InputName} where InputName is the Reference Name given to the workflow input and not the Display Name or Label.\nWorkflow variables are referenced as ${workflow.variable.InputName} , where InputName is the Reference Name for the workflow variable.\nTask outputs are referenced as ${TaskName.output.OutputName} where TaskName is the Instance Name for the task and not the Display Name or Label and OutputName is the Reference Name for the task output.\nTo specify an input mapping, select a task and click Edit against a task input parameter.\nTo specify a workflow variable mapping, select a task and click Map against a workflow variable parameter.\nFollowing are the available options:\nStatic Value—Enter a value that is assigned to the task input or workflow variable field.\nDirect Mapping—Map an existing input, workflow variable, or task output to the task input.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task’s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template. You can then preview the template and test the transformation with sample values.\nNote: Transformed mapping is only supported for task inputs of primitive data types, such as string, integer, boolean, and float.\nAdvanced Mapping—Map a Golang template to the task input or workflow variable. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string. FindAllString(s, regex string) ([]string, error)\nExample: {{(FindAllString .global.task.input.NumberString \\\"([0-9]+)\\\")}} returns array [“123”, “456”] for input string “123 some text 456”.\nFor example, Atoi function converts the given number in string format to integer type.\nAtoi(s string) (int, error)\nExample: {{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”\nOperations - Conditional Task Operations can be used to control the execution path of the workflows. Orchestrator supports Condition tasks which can be used to control the tasks that need to be executed.\nTasks to Control Execution Flow of Workflows The Conditional Task under Operations allows you to perform programmatic decisional expressions in a conditional task during a workflow execution. The conditional expression can be simple expression or a combined compound expression.\nNote: Only JSON style template is supported with conditional expressions.\nConditional expressions support the following operators:\nComparison operators such as === (Equal to), != (Not equal to), \u003e (Greater than), \u003c (Less than), \u003e= (Greater than or equal to), \u003c= (Less than or equal to)\nArithmetic operators such as =, -, * (Multiplication), / (division), % (Modulo), ** (Logical AND)\nLogical operators such as \u0026\u0026 (Logical AND), || (Logical OR), ! ((Logical NOT)\nTernary operator such as condition ? val1 : val2\nThe syntax for workflow input is ${workflow.input.\u003cworkflow input ReferenceName\u003e} and the syntax for task output is ${\u003cTask Name\u003e.output.\u003cTask Output Name\u003e}. You can get the values for the task name and task output name from the Code view.\nFollowing is an example for conditional expressions:\nif ( (${workflow.input.name} != ’test’ || ${workflow.input.name} != ’test123’)) ‘bad input’; else if((${workflow.input.id} != null \u0026\u0026 ${workflow.input.id} % 2 == 0)) ’even’; else ‘odd’;\nif ( (${workflow.input.name} != ’test123’ || ${workflow.input.name} != ’test123’)) ‘bad input’; else if((${workflow.input.id} != null \u0026\u0026 ${workflow.input.id} % 2 == 0)) ’even’; else ‘odd’;\nif ( (${workflow.input.name}.length === 12 || ${workflow.input.name} !== ‘test’ )) ’even’; else ‘odd’; \u003c\u003c fgfgfgfgfgfg , even\nif ( (${workflow.input.name}.length === 12 || ${workflow.input.name} !== ‘test’ )) ’even’; else ‘odd’; \u003c\u003c test , odd\nif ( (${workflow.input.name} != null \u0026\u0026 ‘decisionTest’.indexOf(${workflow.input.name}) != -1 )) ’even’; else ‘odd’;\nif ( (${workflow.input.name}.toLowerCase() == ‘testing’)) ’even’; else ‘odd’; \u003c\u003c used integers as input name to try odd path\nif ( (${workflow.input.name}.search(/\\s/g) != -1)) ’even’; else ‘odd’;\nif ( (${workflow.input.name}.match(/\\s/g) != -1)) ’even’; else ‘odd’;\nif ( (${workflow.input.name}.startsWith(‘Not’,0) || ${workflow.input.name}.endsWith(’.’))) ’even’; else ‘odd’;\nif ( (${workflow.input.name}.length \u003e= 3 \u0026\u0026 ${workflow.input.name}.length \u003c= 20)) ’even’; else ‘odd’;\nif ( (${workflow.input.name}. === undefined)) ‘odd’; else ‘even’;\nif ( (${workflow.input.name}.search(‘Failed’) != -1)) ’even’; else ‘odd’;\nif ( (${workflow.input.name}.toLowerCase() != ’’ || ${workflow.input.name}.toUpperCase() != ‘Not-assigned’ )) ’even’; else ‘odd’;\nThe expression is executed during runtime and depending on the result, the respective path is chosen. If none of the conditions match, the default path is chosen.\nFor example, you can have a conditional task that follows a path of execution depending on the profile state. You can create a condition in a workflow to check the state of the profile. If the profile is in the Assigned state then you can deploy the profile, else delete the profile.\nAfter choosing the conditional task, use the Conditions tab to specify expressions in the Condition field of the tab. The values for the condition are specified in the Value field of the Cases area. Expressions are validated for syntax accuracy when workflow is saved.\nThe following examples return the value of the condition.\n${workflow.input.Names}.length\n${workflow.input.ArrayOfIds}.length (here ArrayOfIds represent an array)\n${workflow.input.Names}.toLowerCase()\n${workflow.input.Names}.toUpperCase()\nThe following examples return the boolean value ’true’ or ‘false’.\n${workflow.input.Names}.startsWith(‘Te’)\n${workflow.input.Names}.endsWith(‘st’)\n${workflow.input.Names} == null\n${workflow.input.Names} != null\nIn addition to workflow, task output can also be used. Here a boolean value is used in a ternary operation. If True, branch1 executes, otherwise branch2 executes ${task1.output.IsValid} ? branch1 : branch2.\nOperations - Parallel Loop Task Operations can be used to control the execution path of the workflows. Orchestrator supports the Parallel Loop operation task that can be used to run a single task or sub-workflow, iteratively, based on a specified count input.\nThe iteration count can either be a static value that is specified when the workflow is created or a dynamic value that is derived from a workflow input or task output.\nWhen the task is executed, the count ‘N’ is determined, and the tasks or sub-workflows are scheduled for execution in parallel. When all the instances of the task or sub-workflow reach a final state, the parallel loop operation completes, and the workflow execution moves on to the next task.\nNote: If one of the tasks or sub-workflows fails then the entire parallel loop task fails.\nThe dynamic values for the count must be specified as a template function. For example, if a loop must run for a count which matches the length of a workflow input called StringArray, then the count must be specified using a template function {{ len .global.workflow.input.StringArray }}.\nIn addition, you can use the keyword .iteration in a workflow template input to control the inputs that feed into the task. For example, the task within the loop needs to take one value from the workflow input StringArray, then the task string input can be mapped to the template HostGroupName{{.iteration}} during the workflow creation.\nUse the Parallel Loop task from the Operations section in the Intersight Orchestrator Workflow Designer UI to build the workflow.\nTo add a task or a sub-workflow to a Parallel Loop task, you must drag and drop the single task or sub-workflow inside the Parallel Loop task in the Workflow Designer UI.\nThe following table explains the Parallel Loop task input properties:\nProperty\rDescription\rCount\rThe iteration count value for the parallel loop. The count can either be a static value defined as a constant or a dynamic value defined as an expression that is evaluated to an integer value at execution time.\nThe dynamic values for the count must be specified as a template function. For example, if a loop must run for a count which matches the length of a workflow input called StringArray, then the count must be specified using a template function {{ len .global.workflow.input.StringArray }}.\nThe count must be less than or equal to 100.\nExample: Create a workflow with the Parallel Loop task to create multiple storage host groups\nThe following example workflow has two tasks—Parallel Loop and New Storage Host Group. The first task runs the Parallel Loop task. In this task, the Count input is a static value and is set to 2. The second task, New Storage Host Group, creates storage host groups with the host group name as a workflow input.\nWhen the workflow is executed, the count ‘N’ is determined as 2, and two create storage host group tasks are executed in parallel. When all the instances of the task reach a final state, the parallel loop completes.\nThe workflow input field required for this example is as follows:\nProperty\rDescription\rStorage Device\rReference Name—StorageDevice\nType—Target Data Type\nIntersight API Reference—/api/v1/storage/PureArrays\nSelector Attribute—Name\nSelector Attribute—Vendor\nThe following table lists the properties for the Parallel Loop task:\nProperty\rDescription\rCount\rCount—2\rThe following table lists the properties for the New Storage Host Group task:\nProperty\rDescription\rStorage Device\rWorkflow Input—${workflow.input.StorageDevice}\rHost Group\rCustom Value—HostGroupName{{.iteration}}\nThe keyword .iteration in a workflow template input to control the inputs that feed into the task.\nAfter you execute the workflow, you would see the following output:\n├── New Storage Host Group\n├── …\n│ ├── Inputs\n│ │ └── Host Group: HostGroupName0\n│ │ └── Storage Device:{ 2 }\n│ │ ├── Moid: 619efa1d6e64612d317a248a\n│ │ └── ObjectType: storage.PureArray\n│ └── Outputs\n│ ├── ConfigResults:[ 1 ]\n│ │ └── Object: { 4 }\n│ │ ├── ConfigResCtx: { 1 }\n│ │ │ └── EntityData: { 1 }\n│ │ │ └── task: workflow.ApiTask\n│ │ ├── Message: Host group created successfully.\n│ │ ├── State: Ok\n│ │ └── Type: Config\n│ └── Host Group: HostGroupName0\n├── New Storage Host Group\n└── …\n├── Inputs\n│ └── Host Group: HostGroupName1\n│ └── Storage Device:{ 2 }\n│ ├── Moid: 619efa1d6e64612d317a248a\n│ └── ObjectType: storage.PureArray\n└── Outputs\n├── ConfigResults:[ 1 ]\n│ └── Object: { 4 }\n│ ├── ConfigResCtx: { 1 }\n│ │ └── EntityData: { 1 }\n│ │ └── task: workflow.ApiTask\n│ ├── Message: Host group created successfully.\n│ ├── State: Ok\n│ └── Type: Config\n└── Host Group: HostGroupName1\nThe following is a sample code view:\n{\n“Catalog”: {\n“Moid”: “5e6109bc696f6e2d31f856e5”,\n“ObjectType”: “workflow.Catalog”,\n“link”: “https://www.intersightcom/api/v1/workflow/Catalogs/5e6109bc696f6e2d31f856e5\"\n},\n“DefaultVersion”: true,\n“Description”: “”,\n“InputDefinition”: [\n{\n“CustomDataTypeProperties”: {\n“CatalogMoid”: “”,\n“CustomDataTypeId”: “”,\n“CustomDataTypeName”: “”,\n“ObjectType”: “workflow.CustomDataProperty”\n},\n“Default”: {\n“IsValueSet”: false,\n“ObjectType”: “workflow.DefaultValue”,\n“Override”: false,\n“Value”: null\n},\n“Description”: “”,\n“DisplayMeta”: {\n“InventorySelector”: true,\n“ObjectType”: “workflow.DisplayMeta”,\n“WidgetType”: “None”\n},\n“InputParameters”: null,\n“IsArray”: false,\n“Label”: “Storage Device”,\n“Max”: 0,\n“Min”: 0,\n“Name”: “StorageDevice”,\n“ObjectType”: “workflow.TargetDataType”,\n“Properties”: [\n{\n“ConnectorAttribute”: “RegisteredDevice.Moid”,\n“ConstraintAttributes”: [\n“ObjectType”\n],\n“DisplayAttributes”: [\n“Name”,\n“Vendor”\n],\n“ObjectType”: “workflow.TargetProperty”,\n“Selector”: “/api/v1/storage/PureArrays”,\n“SelectorProperty”: {\n“Body”: null,\n“Method”: “GET”,\n“ObjectType”: “workflow.SelectorProperty”\n},\n“SupportedObjects”: [\n“storage.PureArray”\n]\n}\n],\n“Required”: true\n}\n],\n“InputParameterSet”: [],\n“Label”: “Parallel Loop”,\n“Name”: “ParallelLoop”,\n“OutputDefinition”: [],\n“OutputParameters”: null,\n“Properties”: {\n“Cloneable”: true,\n“EnableDebug”: false,\n“ExternalMeta”: true,\n“ObjectType”: “workflow.WorkflowProperties”,\n“Retryable”: false,\n“SupportStatus”: “Supported”\n},\n“Tags”: [],\n“Tasks”: [\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “StartTask”,\n“NextTask”: “parallelLoop1”,\n“ObjectType”: “workflow.StartTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “SuccessEndTask”,\n“ObjectType”: “workflow.SuccessEndTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “FailureEndTask”,\n“ObjectType”: “workflow.FailureEndTask”\n},\n{\n“Count”: “2”,\n“Description”: “A Parallel Loop is a control task that runs one task or one sub-workflow multiple times based on a specified count. The count can be a static value that is specified during design time or a dynamic value that is derived from workflow inputs or task outputs. When the loop is executed, the count ‘N’ is determined, N tasks or sub-workflows are scheduled for execution in parallel. When all N instances of the task or sub-workflow reach a final state the parallel loop will complete and workflow execution will move on to the next task. If any one of the tasks or sub-workflows fails, then the entire loop will fail. Dynamic values for count must be specified as a template. For example, if a loop must run for a count which matches the length of a workflow input called StringArray, then the count must be specified using a template ‘{{ len .global.workflow.input.StringArray }}’. The iteration of the loop is available using the keyword ‘.iteration’ and it can be used to control inputs that feed into the task. For example, the task inside the loop needs to take one value from the workflow input StringArray, then the task string input can be mapped to the template ‘{{ index .global.workflow.input.StringArray .iteration}}’ during design.”,\n“Label”: “Parallel Loop”,\n“LoopStartTask”: “NewStorageHostGroup1”,\n“Name”: “parallelLoop1”,\n“NumberOfBatches”: 1,\n“ObjectType”: “workflow.LoopTask”,\n“OnSuccess”: “SuccessEndTask”,\n“Parallel”: true\n},\n{\n“CatalogMoid”: “5c2fc884696f6e2d316c5d59”,\n“Description”: “Create a host group with host group name as input. On successful execution, the newly created host group name is generated as output.”,\n“InputParameters”: {\n“HostGroupName”: “HostGroupName{{.iteration}}”,\n“StorageDevice”: “${workflow.input.StorageDevice}”\n},\n“Label”: “New Storage Host Group”,\n“Name”: “NewStorageHostGroup1”,\n“ObjectType”: “workflow.WorkerTask”,\n“OnFailure”: “”,\n“OnSuccess”: “”,\n“RollbackDisabled”: false,\n“TaskDefinitionId”: “5f7ed8a2696f6e2d30eb388b”,\n“TaskDefinitionName”: “NewStorageHostGroup”,\n“UseDefault”: false,\n“Version”: 2\n}\n],\n“UiInputFilters”: [],\n“UiRenderingData”: {\n“Positions”: [\n{\n“Name”: “StartTask”,\n“X”: 269.5,\n“Y”: 45.5\n},\n{\n“Name”: “SuccessEndTask”,\n“X”: 269.5,\n“Y”: 303\n},\n{\n“Name”: “FailureEndTask”,\n“X”: 412.5,\n“Y”: 303\n},\n{\n“Name”: “parallelLoop1”,\n“X”: 149.01800537109375,\n“Y”: 116.75314331054688\n},\n{\n“Name”: “NewStorageHostGroup1”,\n“X”: 185,\n“Y”: 177\n}\n]\n},\n“Version”: 1,\n“WorkflowMetadata”: null\n}\nOperations - Serial Loop Task Operations can be used to control the execution path of the workflows. Orchestrator supports the Serial Loop operation task that is used to run one or more tasks iteratively, based on a specified count input or a condition.\nIn a Serial Loop task:\nyou can execute one or more tasks within a loop, iteratively, based on a specified count input or condition.\nthe tasks within the loop execute in succession to complete one iteration, and then move on to the next iteration.\nFor example, consider a Serial Loop task that comprises two tasks - Task A and Task B, and a static Iteration Count of 4. When the Serial Loop task is executed, Task A and Task B are executed in succession. After the first iteration is completed, the second iteration begins. This cycle repeats until the iteration count reaches 4.\nNote: The Serial Loop task does not support sub-workflow tasks, conditional tasks, forks or joins and nested loops.\nUse the Serial Loop task from the Operations section in the Intersight Orchestrator Workflow Designer UI to build the workflow. To add tasks to a Serial Loop task, you must drag and drop the tasks inside the Serial Loop task in the Workflow Designer UI.\nThe following table explains the Serial Loop task input properties:\nProperty\rDescription\rIteration Count\rThe iteration count value for the serial loop.\nIteration Count is specified in Loop Mode and the tasks are scheduled for execution in a serial loop. When the instance of the loop reaches the final iteration count, the serial loop operation ends, and the workflow moves on to the next task.\nThe count can either be a static value defined as a constant or a dynamic value defined as an expression that is evaluated to an integer value at execution time. The dynamic values for the count must be specified as a Golang template function.\nExample of a static Iteration Count Value:\nIteration Count Value—3\nThe loop runs for 3 iterations.\nExample for a dynamic Iteration Count Value:\nIteration Count Value—{{ len .global.workflow.input.StringArray }}\nIf a loop must run for a count which matches the length of a workflow input called StringArray you must specify the count using a template function.\nNote: The count must be less than or equal to 100.\nCondition\rThe condition definition for the serial loop execution.\nWhen Condition is selected in Loop Mode, the tasks are scheduled for execution every time the condition holds true. The condition is validated after every iteration. When the instance of the serial loop task does not satisfy the condition anymore, the serial loop operation ends, and the workflow execution moves on to the next task.\nThe condition statement is a simple JavaScript Boolean expression. If it returns a True value, the serial loop executes, or else, the loop terminates.\nFor example, when the condition specified in Loop Mode is:\nif (${InvokeSshCommands1.output.ExtractedParameters.userCreatedState} == \"present\") { true; } else { false; }\nIn this case, the serial loop runs whenever the task output value of (${InvokeSshCommands1.output.ExtractedParameters.userCreatedState} is \"present\" and the loop terminates when the task output is any value other than \"present\".\nThe following are few examples of input values that use JavaScript conditional expressions:\nStatic Value— You can specify a static value within the conditional expression. The serial loop runs until the iteration reaches the defined count.\nNote: Use the expression $.\u003cSerialLoopTaskName\u003e['iteration'] in the conditional expression when the condition is based on comparison of iteration count.\nif ($.serialLoop1['iteration'] \u003c 3) { true; } else { false; }\nIn the above example,\nthe static value defined within the conditional expression is 3.\n$.\u003cSerialLoopTaskName\u003e['iteration'] fetches the running iteration count of the serial loop during execution.\nserialLoop1 is the Serial Loop task name.\nWorkflow Input— The serial loop takes a workflow input, evaluates the condition, and runs until the iteration reaches the count derived from the workflow input. In the given example, loopcount is the workflow input.\nif ($.serialLoop1['iteration'] \u003c ${workflow.input.loopcount}) { true; } else { false; }\nTask Output as an Input— The serial loop takes a task output, evaluates the condition, and runs until the iteration reaches the count derived from the task output. In the given example, countis the task output.\nif ($.serialLoop1['iteration'] \u003c ${taskA.output.count}) { true; } else { false; }\nNote: A maximum of 100 iterations are allowed to prevent infinite looping.\nExample: Create a workflow using Iteration Count in a serial loop task to create storage hosts and assign the host to a newly created host group\nThe following workflow example consists of a task called New Storage Host Group, present outside the serial loop, and two tasks — New Storage Host and Add Host to Storage Host Group, embedded within the serial loop. The serial loop mode is Iteration Count.\nWhen the workflow is executed, the New Storage Host Group task first creates a new storage host group. Then, the New Storage Host and the Add Host to Storage Host Group tasks are implemented in succession within the serial loop. At the end of the first iteration, the newly created storage host is added to the new storage host group, and then, the second iteration begins. The loop repeats until the iteration count, which is the total number of storage hosts created, reaches the specified count.\nThe Workflow Input fields required for this example are as follows:\nProperty\rDescription\rHost Group\rReference Name—Hostgroup\nType—String\nMin—1\nMax—63\nRegex—^[a-zA-Z0-9]+([a-zA-Z0-9-]*[a-zA-Z0-9])*$\nObject Selector— Enable\nIntersight API Reference—/api/v1/search/SearchItems?$filter=(IndexMotypes eq storage.BaseHostGroup)\u0026$orderby=Name\nSelector Attribute—Name\nValue Attribute—Name\nThe following table lists the properties of the Serial Loop task:\nProperty\rDescription\rLoop Mode\rIteration Count\rIteration Count Value\r5\nThis is a static value.\nThe following table lists the input properties of the New Storage Host task:\nProperty\rDescription\rStorage Device\rStatic Value\nSelect the Storage Device.\nHost\rStatic Value—serialLoopHost{{.iteration}}\nThe keyword .iteration is used to append the iteration count, starting from 0, to the input serialLoopHost.\nThe new storage hosts are created in order, for example: serialLoopHost0, serialLoopHost1, serialLoopHost2, serialLoopHost3 and serialLoopHost4. The loop stops when the count reaches 5.\nStorage Vendor Host Identifier\rStatic Value—Pure FlashArray\rStorage Vendor Virtual Machine\rStatic Value—Pure FlashArray\rStorage Vendor Host Options\rStatic Value—Pure FlashArray\rThe following table lists the properties of the Add Host to Storage Host Group task:\nProperty\rDescription\rStorage Device\rStatic Value\nSelect the Storage Device.\nHost Group\rAdvanced Mapping—${NewStorageHostGroup1.output.HostGroupName}\nHostGroupName is the task output of the previous task outside the serial loop, which in this case is the New Storage Host Group task.\nHost Name\rAdvanced Mapping—${NewStorageHost1.output.HostName}\nHostName is the task output of the previous task inside the serial loop.\nPure FlashArray\nExample: Create a workflow using condition loop mode in a serial loop task to run Ansible Playbook on the hosts\nThe following workflow example consists of a Serial Loop task with two embedded tasks- Invoke Ansible Playbook and Invoke SSH Commands. The serial loop mode is Condition.\nWhen the serial loop task is executed , the Ansible Playbook and Invoke SSH Commands tasks run in succession within the loop.\nIn this example, the workflow requires two Ansible Playbooks- one to create a user and the other to delete a user. The Invoke Ansible Playbook task iterates across the playbooks, and a log file is generated. The Invoke SSH Commands task prints the log file. The log may show that the user is present or absent based on the Playbook that is run.\nAt the end of each iteration, the output value parsed as userCreatedState which is present in the log file is evaluated. The serial loop runs another iteration whenever a user is present and there is a “present” value in the capture entity called userCreatedState. The loop exits when there is no value or any value other than “present” in userCreatedState.\nFor example, when the delete user playbook is run, the output value in userCreatedState may be “absent”. In such a case, the condition is not met, and the loop exits.\nThe Workflow Input fields required for this example are as follows:\nProperty\rDescription\rplaybookPaths\rReference Name—playbookPaths\nType—String\nValue Restrictions—Collection/Multiple\nMin—0\nMax—100\nThe following table lists the properties for the Serial Loop task:\nProperty\rDescription\rLoop Mode\rCondition\rCondition Value\rif\n(${InvokeSshCommands1.output.ExtractedParameters.userCreatedState} == \"present\") { true; } else { false; }\nIn this case, the serial loop runs whenever a user is present and there is a value \"present\" in the capture entity called userCreatedState. The loop exits when there is no value or any value other than \"present\" in userCreatedState.\nThe following table lists the input properties for the Invoke Ansible Playbook task:\nProperty\rDescription\rAnsible Controller\rStatic Value\rPlaybook Path\rAdvanced Mapping—{{index .global.workflow.input.playbookPaths .iteration}}\nA Golang expression is used here which iterates over the defined workflow input playbookPaths. In this example, playbookPaths is an array of Ansible playbook paths.\nHost Inventory\rStatic Value\nExample: /home/qali/vspancha/playbooks/33hosts\nThe following table lists the input properties for the Invoke SSH Command task:\nProperty\rDescription\rExternal Target\rStatic Value\rSSH Command\rStatic Value—cat {{.global.InvokeAnsiblePlaybook1.output.ExecutionLogPath}}\nThe SSH command prints the output. ExecutionLogPath is the output of the task InvokeAnsiblePlaybook1 present within the serial loop.\nShow Command Output\rStatic Value\ntrue\nResponse Parser\rStatic Value\nRegular Expression—The regular expression of the line in the command response where the capture value, which is userCreatedState in this example, resides.\\\"state\\\":\\s\\\"$\u003cuserCreatedState\u003e\\\"\nName—Name of the output under which the captured value is saved, userCreatedState.\nType—String\nManaging the Lifecycle of a Workflow Workflow management consists of organizing, creating, updating, and deletion of workflows. The following table describes the set of actions that you can perform with workflows in Cisco Intersight.\nActions\rDescription\rView Workflows\rChoosing Orchestration from the left navigation pane will display all workflows in a tabular format. You can view information such as the workflow name and description, the number of versions available, the number of times the workflow has been executed, the last execution status, validation information and the last update time and date.\rCreate a New Workflow\rChoose Orchestration from the left navigation pane and click Create Workflow. This option opens up the Workflow Designer, using which you can create a new workflow.\rCreate a Version for a Workflow\rYou can create multiple versions for a workflow. In addition, you can set a specific version of the workflow as the default version for the workflow. See Managing Versions for Workflows.\rDelete a Workflow\rFrom the tabular list of workflows, you can select a workflow and click Delete. This will remove the workflow and all versions of the workflow.\nYou cannot delete a workflow when :\nworkflow is used as sub-workflow task in another workflow.\nworkflow is in running state.\nExecute a Workflow\rSelect a workflow from the tabular list of workflows and choose Execute. Alternatively, you can click the workflow name, and then choose Execute in the Workflow Designer.\nImportant: Workflow execution includes privilege-based validation for tasks. With the introduction of privilege-based validation for virtualization, compute and storage tasks, a user must have all the required privileges to execute all the domain tasks within a workflow. For example, a user can successfully execute a workflow that includes storage and virtualization tasks only if the user has both Storage and Virtualization Administrator privileges. In the absence of either one of these privileges, the Execute button will not be displayed and the user cannot execute the workflow.\nHowever, an Account Administrator can execute all workflow.\nWhile configuring the properties of a workflow, if you selected the Enable Retry option, then in the event of a workflow failure, you can either choose to execute the workflow again from the point of failure, or you can execute the entire workflow again.\nClone a Workflow\rFrom the tabular list of workflows, you can select a workflow and click Clone. This will clone the selected workflow.\rSave a Workflow as\rFrom the tabular list of workflows, you can choose a workflow and click. By default, the workflow details are displayed in the Designer tab. You can choose Save As option from the Action drop-down list to clone or create a new version of the existing workflow.\nYou can also perform this operation in the General tab.\nIn the Save As screen, you can choose one of the following:\nNew Version—Specify a new version and related description. Click Save.\nThis option is not available for a system generated workflow.\nClone—Specify user-friendly short name, reference name, description, and tag key. Click Save. For more information, see Cloning a Workflow.\nCloning a Workflow You can clone a workflow. The cloned workflow is identical to the original workflow. You can edit the new workflow immediately. You might do this, for example, to create a workflow that is similar to the source workflow that can be edited based on your requirements. The new workflow has a new, separate version history.\nTo clone a workflow, complete the following steps:\nChoose Orchestration from the left navigation pane.\nFrom the tabular list of workflows, select a workflow and choose Clone.\nIn the Clone Workflow screen, edit the user-friendly short name, reference name, description, and organization details. The organization mappings are displayed only for pre-canned workflows and not for the custom workflows.\nCheck the Open Clone in Editor check box if you want to open the cloned workflow in the workflow designer and edit the details.\nNote: Open Clone in Editor check box is not displayed when you clone a workflow using the Save As option.\nClick Clone. Managing Versions for Workflows Cisco Intersight allows you to create and manage versions for workflows. In addition to creating versions, you can also set a specific version as the default version for the workflow. You can create a version of a workflow and execute it only if you are one of the following users:\nAccount Administrator\nUser with Workflow Designer privileges\nRead-Only users can only view versions of a workflow. They cannot create, edit, execute or delete versions. Users with Storage Administrator and Virtualization Administrator privileges can only view and execute specific versions of a workflow.\nTo create a version for a workflow, complete the following steps:\nChoose Orchestration from the left navigation pane.\nFrom the tabular list of workflows, select a workflow and choose Manage Versions.\nIn the Manage Versions screen, you can perform the following tasks:\nCreate a new version for the workflow\nExecute a specific version of the workflow\nDelete a specific version. You cannot directly delete the default version of a workflow. To delete the default version, perform the following:\nMake another version the default.\nChange the workflow version to be deleted as non-default.\nDelete the workflow version that was changes as non-default.\nSet a specific version of the workflow as the default version\nChoose Create a New Version and enter the following details: Source Version—Choose a specific version that will form the source for the new version that you are creating.\nVersion—Specify a version number for the workflow.\nDescription—Enter a description for the version so that you can identify it.\nSet as Default Version—Check this check box to set this new version as the default version for the workflow.\nClick Create. After creating a version for a workflow, clicking on the version number on the Manage Versions screen opens the workflow in Workflow Designer. Note: Deleting a workflow will delete all versions created for the workflow.\nExporting a Workflow Intersight Cloud Orchestrator enables you to export workflows from an account to your system and then import them to another account.\nTo export a workflow, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick the Workflow tab.\nFrom the tabular list of workflows, do one of the following:\nSelect a workflow, click the Ellipsis (…) icon in the same row, and then choose Export Workflow.\nSelect multiple workflows, click the Ellipsis (…) icon from the header or footer of the tabular list, and then choose Export Workflow.\nNote: You can also export workflows from the Actions menu in the Workflow Designer window.\nIn the Export Workflow screen:\nIn the JSON File Name field, use the default filename or enter a filename of your choice for the JSON file that stores the workflow components.\nUse the Export Tags toggle button to include or exclude the user-defined tags. ICO does not export the system-defined tags.\nClick Export.\nSave a local copy of the JSON file.\nImporting a Workflow Intersight Cloud Orchestrator enables you to import workflows to your account by importing a JSON file that contains the workflow components. You can create the JSON file by exporting the workflow components from another account.\nTo import a workflow, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Import.\nThe Import wizard appears. In the Select File screen:\nFrom the Organization drop-down list, choose the organization to which you want to import the workflow(s).\nClick Browse, and then select the JSON file that contains the Workflow(s).\nNote: Ensure that the file size of the JSON file is not more than 1MB. If the file size is more than 1MB, export the workflow(s) in batches, and then try import.\nClick Next. Intersight Cloud Orchestrator validates the JSON file and displays the workflow(s) in the Details screen.\nIn the Details screen:\nTo associate an additional tag to the components listed in the table, enter the tag in the Set Tags field. Note: Set Tags is an optional field. You must enter the tag in the key:value format.\nIf one or more workflow components are already available in the system, choose a rule to replace or skip the duplicate components.\nClick Import.\nIn the Import Result screen:\nVerify the status of the imported workflow.\nIf you want to view the details of the import request:\nClick the link displayed above the table.\nAlternatively, click the Requests icon displayed in the menu bar.\nFor more information, see Requests.\nClick Close. You can execute the imported workflow from the Workflows tab.\nDefining Workflow Input Rules Intersight Cloud Orchestrator allows you to configure input rules that control the display of fields in the workflow execution screen. You can define these input rules for a workflow by using the Intersight API and while creating a composite data type. By default, all input fields for a workflow are displayed in the workflow execution screen. By configuring input rules, the fields in this screen are displayed or hidden based on the value selected for a previous input field.\nAfter configuring input rules in the workflow definition using the Intersight API, you can view the input rules using the Code tab in the Workflow Designer.\nFollowing is a sample of a simple input rule set for a workflow:\n“InputParameterSet”:[\n{\n“ObjectType”: “workflow.ParameterSet”,\n“Name”: “rule-1”,\n“ControlParameter”: “input-1”,\n“Condition”: “eq”,\n“Value”: “true”,\n“EnableParameters”: [\n“input-2”\n]\n},\n{\n“ObjectType”: “workflow.ParameterSet”,\n“Name”: “rule-2”,\n“ControlParameter”: “input-1”,\n“Condition”: “ne”,\n“Value”: “true”,\n“EnableParameters”: [\n“input-3”,\n]\n}\n]\nFollowing is an example for the parameter sets defined at workflow level:\n{\n“Label”: “Provision VM”,\n“Name”: “ProvisionVM”,\n“DefaultVersion”: true,\n“Description”: “”,\n// Parameter set defintion “InputParameterSet”: [\n{\n// rule-1 enables ‘vmwarehost’ input when value of ‘vmtype’ is ‘vmware’\n“Name”: “rule-1”,\n“ControlParameter”: “vmtype”,\n“Condition”: “eq”,\n“Value”: “vmware”,\n“EnableParameters”: [\n“vmwarehost”\n]\n},\n{\n// rule-2 enables ‘hxcluster’ input when value of ‘vmtype’ is ‘hx’\n“Name”: “rule-2”,\n“ControlParameter”: “vmtype”,\n“Condition”: “eq”,\n“Value”: “hx”,\n“EnableParameters”: [\n“hxcluster”\n]\n}\n],\n“InputDefinition”: [\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“InputParameters”: null,\n“Label”: “VM Type”,\n“Name”: “vmtype”,\n“Required”: false,\n“Properties”: {\n“ClassId”: “workflow.PrimitiveDataProperty”,\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Constraints”: {\n“ClassId”: “workflow.Constraints”,\n“ObjectType”: “workflow.Constraints”,\n“EnumList”: [\n{\n“ClassId”: “workflow.EnumEntry”,\n“ObjectType”: “workflow.EnumEntry”,\n“Label”: “VMWare”,\n“Value”: “vmware”\n},\n{\n“ClassId”: “workflow.EnumEntry”,\n“ObjectType”: “workflow.EnumEntry”,\n“Label”: “HX”,\n“Value”: “hx”\n}\n],\n“Max”: 0,\n“Min”: 0,\n“Regex”: \"”\n},\n“InventorySelector”: [],\n“Secure”: false,\n“Type”: “enum”\n}\n},\n{\n“Name”: “vmname”,\n“Label”: “VM Name”,\n“Required”: false,\n“Properties”: {\n“Type”: “string”,\n“Constraints”: {\n“Min”: 0,\n“Max”: 0\n},\n“Secure”: false\n},\n“ObjectType”: “workflow.PrimitiveDataType”\n},\n{\n“Name”: “vmwarehost”,\n“Label”: “Host”,\n“Required”: false,\n“Properties”: {\n“Type”: “string”,\n“Constraints”: {\n“Min”: 0,\n“Max”: 0\n},\n“Secure”: false\n},\n“Default”: {\n“Override”: false,\n“Value”: null\n},\n“ObjectType”: “workflow.PrimitiveDataType”\n},\n{\n“Name”: “hxcluster”,\n“Label”: “Cluster”,\n“Required”: false,\n“Properties”: {\n“Type”: “string”,\n“Constraints”: {\n“Min”: 0,\n“Max”: 0\n},\n“Secure”: false\n},\n“ObjectType”: “workflow.PrimitiveDataType”\n}\n],\n“OutputDefinition”: [],\n“OutputParameters”: null,\n“Tasks”: [\n{\n“ClassId”: “workflow.StartTask”,\n“Description”: “”,\n“Label”: “”,\n“Name”: “StartTask”,\n“NextTask”: “NewProfile1596244596840”,\n“ObjectType”: “workflow.StartTask”\n},\n{\n“ClassId”: “workflow.SuccessEndTask”,\n“Description”: “”,\n“Label”: “”,\n“Name”: “SuccessEndTask”,\n“ObjectType”: “workflow.SuccessEndTask”\n},\n{\n“ClassId”: “workflow.FailureEndTask”,\n“Description”: “”,\n“Label”: “”,\n“Name”: “FailureEndTask”,\n“ObjectType”: “workflow.FailureEndTask”\n},\n{\n“CatalogMoid”: “5dd45ab6696f6e2d301e2df6”,\n“ClassId”: “workflow.WorkerTask”,\n“Description”: “Task to create a Profile”,\n“InputParameters”: null,\n“Label”: “Provision VM”,\n“Name”: “ProvisionVM1596244596840”,\n“ObjectType”: “workflow.WorkerTask”,\n“OnFailure”: “”,\n“OnSuccess”: “SuccessEndTask”,\n“TaskDefinitionId”: “5efd7c84696f6e2d309e6877”,\n“TaskDefinitionName”: “NewProfile”,\n“Version”: 1\n}\n],\n“Version”: 1\n}\nFollowing is an example for the parameter sets defined at custom data type level:\n{\n“Label”: “ClusterType”,\n“Name”: “ClusterType”,\n“CompositeType”: true,\n“Description”: “Type definition for a cluster information.”,\n“TypeDefinition”: [\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Label”: “Cluster Type”,\n“Name”: “clustertype”,\n“Properties”: {\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Constraints”: {\n“ObjectType”: “workflow.Constraints”,\n“EnumList”: [\n{\n“ObjectType”: “workflow.EnumEntry”,\n“Label”: “VM Ware”,\n“Value”: “vmware”\n},\n{\n“ObjectType”: “workflow.EnumEntry”,\n“Label”: “HX AP”,\n“Value”: “hxap”\n}\n]\n},\n“Type”: “enum”\n}\n},\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Label”: “VMware Cluster”,\n“Name”: “vmwarecluster”\n},\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Label”: “HX Cluster”,\n“Name”: “hxcluster”\n},\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Label”: “Cluster Description”,\n“Name”: “clusterdescr”\n}\n],\n“ParameterSet”: [\n{\n“Name”: “rule-1”,\n“Field”: “clustertype”,\n“Condition”: “eq”,\n“Value”: “vmware”,\n“ShowFields”: [\n“vmwarecluster”\n]\n},\n{\n“Name”: “rule-2”,\n“Field”: “clustertype”,\n“Condition”: “eq”,\n“Value”: “hxap”,\n“ShowFields”: [\n“hxcluster”\n]\n}\n]\n}\nSupported Workflows for Storage Targets\nThe following table lists workflows supported in the various storage targets available on Intersight:\nList of Storage Workflows\rPure Storage\rNetApp\rHitachi\rNew Storage Host\rY\rY\rY\rNew Storage Host Group\rY\rN\rN\rNew VMFS Datastore\rY\rY\rY\rNew NAS Datastore\rN\rY\rN\rRemove NFS Datastore\rN\rY\rN\rRemove Storage Host\rY\rY\rY\rRemove Storage Export Policy\rN\rY\rN\rRemove Storage Host Group\rY\rN\rN\rRemove VMFS Datastore\rY\rY\rY\rUpdate Storage Host\rY\rY\rY\rUpdate NAS Datastore\rN\rY\rN\rUpdate VMFS Datastore\rY\rY\rY\rNew Storage Interface\rN\rY\rN\rNew Storage Export Policy\rN\rY\rN\rNew Storage Virtual Machine\rN\rY\rN\rTask Designer Cisco Intersight allows you to create tasks in which API requests can be executed in remote targets that can be reached through Intersight. You create tasks so that they can be used in workflows.\nNote: To execute the new tasks for VMware vCenter networking operations, you should upgrade to Intersight Assist version 1.0.9-278.\nTo launch the Task Designer, choose Orchestration \u003e Task. A dashboard displays the following details under these tabs, namely, My Tasks, System Tasks, and All Tasks:\nTop Task Categories\nNumber of System Defined Tasks\nTop Workflows by Targets\nBelow the dashboard is a tabular list of tasks displaying the following information:\nDisplay Name\nDescription\nValidation Status\nLast Update\nSystem Defined\nOrganization\nFrom this screen, with an account administrator or a Workflow Designer role, you can perform the following actions for an organization:\nCreate a task\nEdit or delete a task\nNote: Tasks created in an organization can be used in workflows created within that organization only.\nSupported Requests\nYou can define and execute one or more API requests in the task definition. You can extract the required values from the API responses and use them in subsequent API requests as task output values. You provide values for different properties in an HTTP API request and use them in subsequent API request or as task output values. You can also provide values for different properties of an HTTP API request, such as, HTTP method, URL, header, cookies, etc.\nThe API requests can be executed on external targets that are reachable by Intersight, either directly or through device connectors. The supported HTTP authentication scheme is Basic Authentication over HTTPS. The external targets with their credentials are defined when specifying the Targets in the Targets screen (see: Target Management). Hence, there is no need to provide credentials or authentication specific headers in the request. The input parameter of type target data type is the source from which the details are automatically collected from.\nResponse Parser\nThe response parser contains information about the required values, their types, and the location in the API responses. You specify the required values along with API request details. These details are used by the response parser to extract values from the API responses. The extracted values are used as task output values and to determine the task execution status and the status message.\nThe supported response type is JSON. The response parser supports extraction of values from JSON responses. The users shall provide the information such as the value parameter name, type and the JSON path of the value location. You can extract multiple values from the API response by providing the above details for each required value.\nOutcomes\nAn outcome is the combination of a condition and task status. You use the extracted values from the API response to determine the task status and set the status with an appropriate message, when the conditions match. You can specify one or more outcomes and the outcomes are evaluated in the specified order. The first outcome condition that matches sets the task status and message. If none of the outcome condition matches, the task shall be marked as successful. The outcomes of a task are as follows:\nSuccess—Marks the API execution as Success if the condition matches\nSkip to Success—Stops further API executions of the task and marks the task as successful when the condition matches\nStatus—Retains a task as work in progress, only updating the status\nError—Marks the API execution as Failed if the condition matches. Task retry will be attempted if the task has any retries left\nTerminal error—Marks the API execution as Failed if the condition matches. This marks a non-recoverable error and no retries are attempted\nSkip Task Execution—Skips execution of task if the condition matches in the API. This will skip execution of all the subsequent APIs in the task\nIf the task status is Terminal Error, there are no retries for that task.\nCreating a Task\nTask creation can be broken down into the following sequence of steps:\nDefining a task—you specify the name of the task and provide a few other generic details.\nDefining task inputs and task outputs—you can specify which input parameters are required to execute the task and the output expected from the execution.\nAdding multiple API requests in the Task Designer.\nDefining a Task\nChoose Orchestration from the left navigation pane.\nClick Tasks tab.\nChoose Create Task.\nDrag and drop a task from the Tools section on the Design area.\nIn the Task Properties area, choose the General tab and enter the following information:\nOrganization—Name of the organization that you are creating the task in\nTask Name—A user-friendly short name for the task\nDescription—A description for the task\nRetry Count—Number of times a task should be tried before it is marked failed\nRetry Delay—Delay, in seconds, after which a task is tried again\nTimeout—Timeout value, in seconds, after which a task is termed as timed out\nSet Tags—Set a tag for the task in the key:value format\nEnable Rollback Task—Enable to rollback a task and choose an appropriate task from the drop-down list. Create the required workflow inputs and map it accordingly\nNote: Rollback operation for Assign IP Address to Virtual Machine Network task is not supported on Windows virtual machines.\nDefining Task Inputs and Outputs\nIn the Task Properties area, choose the Input tab and choose a parameter. For more information about the Input properties, see Workflow Designer.\nClick the Edit icon to open the Create Task Input dialog.\nIn the Add Input screen, enter the following details:\nDisplay Name—Enter user-friendly short name.\nReference Name\nDescription—Detailed description of the input\nValue Restrictions—Choose Required, Collection/Multiple, or can be left blank\nType—Choose a data type for primitive data type. For example, enum\nEnum List—Label for the enum value\nMinimum and Maximum Range\nRegex—Validates the regular expression when you select String in the Type field.\nObject Selector—Enable to configure the Intersight managed object selectors. This attribute is available only when the primitive data is String. Specify the Intersight API Reference and selector attributes to feed the input from the table selection. Value will be passed according to the configuration set in the Value attribute.\nIntersight API Reference—Enter the URL of the Intersight API configured with parameters.\nSelector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nValue Attribute—Enter the value to be passed as an input while executing a task. This value should be any one of the attribute name specified in the Selector Attribute field. This attribute is available only when the primitive data is String.\nSecure—Indicates that the values of these properties are encrypted and stored in Cisco Intersight.\nThe fields displayed depend on the value you select for the Type field. Task designer does not support target date type. Click Add.\nRepeat this procedure to create multiple task inputs.\nIn the Task Properties area, choose the Output tab and choose a parameter. For more information about the output properties, see Input and Output.\nThe created task is available in the General category in Workflow Designer. You can create a workflow by dragging and dropping the task on the Workflow Design area.\nTemplate Engine Syntax\nThe template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements\nThe comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .global.CreateSnapshot.output.HttpStatusCode 400) (lt .global.CreateSnapshot.output.HttpStatusCode 500)}}\nConditional Statements\nThe template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \u003ccomparision_statement\u003e}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else if \u003ccomparision_statement}} Tempalte to be used {{end}}\n{{if (eq .global.CreateSnapshot.output.HttpStatusCode 200)}}\nSnapshot with name {{.global.CreateSnapshot.input.Name}} is created successfully.\n{{end}}\n{{if (eq .global.CreateSnapshot.output.HttpStatusCode 200)}}\nSnapshot with name {{.global.CreateSnapshot.input.Name}} is created successfully.\n{{else}}\nSnapshot creation failed with message {{.global.CreateSnapshot.output.HttpStatusMsg}}.\n{{end}}\n{{if (eq .global.CreateSnapshot.output.HttpStatusCode 200)}}\nSnapshot with name {{.global.CreateSnapshot.input.Name}} is created successfully.\n{{else if (eq .global.CreateSnapshot.output.HttpStatusCode 409)}}\nA Snapshot with name {{.global.CreateSnapshot.input.Name}} already exists.\n{{else}}\nSnapshot creation failed with message {{.global.CreateSnapshot.output.HttpStatusMsg}}.\n{{end}}\nExample Task: Creating a Snapshot of Pure Flash Array\nThis example shows how to create a snapshot of a volume in a Pure Flash Array. Specify the following information in the General tab of the Task Properties area.\nField Name\rValue\rTask Name\rNew Pure Volume Snapshot\rRetry Count\r1\nThe task will be retried once more when the task fails.\nRetry Delay\r10\nThe task will be retried after 10 seconds.\nTimeout\r20\nIf the task does not complete execution in 20 seconds, then it is marked as Failed. If a retry count is configured (which is 1 for this task), the task is retried after the specified retry delay, which is 10 seconds.\nThe snapshot is created using the Pure Flash Array volume API. Below is a sample API request and response from Pure Flash Array API Reference.\nPOST /volume\n{\n“snap”: true,\n“source”: [\n“\u003cVolume Name 1\u003e”,\n“\u003cVolume Name 2\u003e”\n]\n}\nFrom the above API, it can be inferred that the name of the source volume is required, for which the snapshot is created. To do this, add a task input parameter of type string to fetch the volume name as a task input. Assuming the task input parameter is named as VolumeName, the following template can be used to create the above request. This template is populated as value for Body field in the API request’s input panel.\n{\n“snap”: true,\n“source”: [\n“{{.global.task.input.VolumeName}}”\n]\n}\nYou either receive a success or a failure message for the request. The following is a sample of the success message. The success message displays the serial number and the new snapshot name against the Name and Serial properties. This information is extracted as a task output.\n200 OK\n[\n{\n“created”: “2017-12-16T05:12:53Z”,\n“name”: “\u003csnapshot name\u003e”,\n“serial”: “\u003cserial number\u003e”,\n“size”: 5368709120,\n“source”: “\u003cvolume name\u003e”\n}\n]\nIn case of a failure, the response displays an array of errors. Each error contains a message, a code, and a context. In this example, if the specified volume name is not found, the following message is displayed.\n400 BAD REQUEST\n[\n{\n“msg”: “Volume does not exist.”,\n“code”: 6,\n“ctx”: “\u003cVolume Name\u003e”\n}\n]\nIf the msg property is present in the response, the property can be used to determine the task status with HTTP status code 400. The property named msg can be accessed using the JSON path $[0].msg. The details to extract the parameters are provided as value for Response Parser field in API request’s input area. The path is a valid JSON path that locates a required data in the API response.\nResponse Parameter\rDetails\rSnapshotName\rThis parameter contains the extracted snapshot name in the API output.\nName: SnapshotName\nPath: $[0].name\nType: string\nSerial\rThis parameter contains the extracted serial value in the API output.\nName: Serial\nPath: $[0].serial\nType: string\nError\rThis parameter contains the extracted error message in the API output.\nName: Error\nPath: $[0].msg\nType: string\nTo define a task, drag and drop the Invoke Web API Request task into the Task Designer area. Use the Properties area to populate API details. The following is sample information that can be entered the General tab.\nField Name\rValue\rName\rCreate Snapshot\nThe name must be unique. The APIs inside the task cannot be named as Create Snapshot. A name without space, such as CreateSnapshot can be used to refer the API output in subsequent API requests. In this example the following details are referred using API name.\nHTTP Status Code:\n{{.global.CreateSnapshot.output.HttpStatusCode}}\nThe parameters extracted from the response are referred using the API name after extracting the value from the response through the response parser as follows:\n{{.global.CreateSnapshot.output.Serial}}\nSet External Target\rChecked - true\nAs this is the first API and task does not have an input of type Target, a dialog appears that can be used to add a task input of Target type. The claimed Pure Storage Array target is provided as value for this task input during execution.\nThe task input pertains to the API request details and to extract the required values from response. The following is an example of the required input values for the create snapshot API.\nField Name\rValue\rMethod\rPOST\rURL\r/volume\nThe relative URL of the REST API end point is specified. The host part is filled through the information in pure target (Protocol, IPAddress, Port).\nBody\rContent Type: JSON\nText:\n{\n\"snap\": true,\n\"source\": [\n\"{{.global.task.input.VolumeName}}\"\n]\n}\nResponse Parser\rThe following parameters are added:\nSnapshotName: Path: $[0].name, Type: string\nSerial: Path: $[0].serial, Type: string\nError: Path: $[0].msg, Type: string\nThe extracted values from the API responses determine the task status. In this example, the following outcomes are added based on the API response.\nIf the status code is 401, the task encounters terminal failure with Authorization Failed message. The retry also fails. Hence the outcome type is set as Terminal Error. So, the task is not retried despite a retry is being specified. Outcome Property\rValue\rName\rAuthorization Error\nIdentifies an outcome in the outcomes list of task designer. The name is not used for any other purpose.\nCondition\r{{eq .global.CreateSnapshot.output.HttpStatusCode 401}}\nThis condition checks whether the response status code of API named ‘Create Snapshot’ is 401.\nOutcome Type\rTerminal Error\rMessage\rAuthorization Error. Check the target credentials.\rIf the HTTP status code is 400 and the extracted error is Volume does not exist, the task fails terminally. In this case, the retry execution also fails, hence the outcome type is set as Terminal Error. Outcome Property\rValue\rName\rVolume does not exist\nThe name here is to identify an outcome quickly in the outcomes list of task. The name is not used for any other purpose.\nCondition\r{{and (eq .global.CreateSnapshot.output.HttpStatusCode 400)\n(eq .global.CreateSnapshot.output.Error 'Volume does not exist.')}}\nIf we refer the sample response in previous sections, we will get a 400-Bad Request with response containing error msg ‘Volume does not exist.’.\nOutcome Type\rTerminal Error\rMessage\rA volume with name {{.global.task.input.VolumeName}} does not exist. Check the volume name given.\nThis outcome for a given volume name input ‘oracle-db’ will fail the task with message ‘A volume with name oracle-db does not exist. Check the volume name given.\nFor any API failure caused by bad user input, do not retry and fail the task immediately. Outcome Property\rValue\rName\rAny client error\nIdentifies a result in the outcomes list of task designer, and is not used for any other purpose\nCondition\r{{and (ge .global.CreateSnapshot.output.HttpStatusCode 400)\n(lt .global.CreateSnapshot.output.HttpStatusCode 500)}}\nThis condition checks if the HTTP status code is in the range between 400 to 499.\nOutcome Type\rTerminal Error\rMessage\rAPI request failed - {{.global.CreateSnapshot.output.HttpStatusCode}}\n{{if (index .global.CreateSnapshot.output `Error`)}}:\n{{.global.CreateSnapshot.output.Error}}{{else}} {{.global.CreateSnapshot.output.HttpStatusMsg}}{{end}}\nThis message checks that a valid error message is extracted by using an if else block\n{{if (index .global.CreateSnapshot.output `Error`)}}\nIf the error value is ‘Snapshot not supported’, the task status message is ‘API request failed – 405: Snapshot not supported’.\nIf no valid error message is present in the response, the HTTP status message is used. For example, API request failed – 413 Payload Too Large.\nFor errors on the server, the task must be tried again before setting the outcome type as Error instead of Terminal Error. Outcome Property\rValue\rName\rAny server error\nThe name here is to identify an outcome quickly in the outcomes list of task designer. The name is not used for any other purpose.\nCondition\r{{and (ge .global.CreateSnapshot.output.HttpStatusCode 500) (lt .global.CreateSnapshot.output.HttpStatusCode 600)}}\nThis condition checks if the HTTP status code is in the range between 500 to 599.\nOutcome Type\rError\nThe outcome type is set as Error. Hence, the request is retried, if retries are configured.\nMessage\rAPI request failed - {{.global.CreateSnapshot.output.HttpStatusCode}}\n{{if (index .global.CreateSnapshot.output `Error`)}}:\n{{.global.CreateSnapshot.output.Error}}{{else}} {{.global.CreateSnapshot.output.HttpStatusMsg}}{{end}}\nThis is the same message that is used in the client error outcome.\nThis can be termed as the final outcome for a successful completion. Outcome Property\rValue\rName\rAll Good\nThe name identifies an outcome in the outcomes list of task designer. The name is not used for any other purpose.\nCondition\rTrue\n{{eq .global.CreateSnapshot.output.HttpStatusCode 200}}\nTrue can be used as the condition to capture all scenarios or the specific success response status code can be used, which is 200.\nOutcome Type\rSuccess\rMessage\rA snapshot with name\n{{.global.CreateSnapshot.output.SnapshotName}}\nand serial\n{{.global.CreateSnapshot.output.Serial}}\nis created successfully for volume with name\n{{.global.task.input.VolumeName}}\n.\nThe outcome for a given volume name input oracle-db sets the task to success with the message: A snapshot with name oracle-db.8 and serial B3CD9AF2175A4E2800011010 is created successfully for volume with name oracle-db.\nAs part of this task, an inventory refresh request can be sent to pull the new snapshot inventory. This API contains the following details in the request.\nPOST /v1/task/PureScopedInventories\n{\n“Type”: “storage.PureVolumeSnapshot”,\n“NamingProperty”: “Name”,\n“Values”: [\n“\u003cSnapshot_Name\u003e”\n],\n“RegisteredDevice”: {\n“ObjectType”: “asset.DeviceRegistration”,\n“Moid”: “\u003cPure Device Registration Id\u003e”\n}\n}\nThe snapshot name is obtained from previous API output by using the following reference: {{.global.CreateSnapshot.output.SnapshotName}}.\nThe device registration ID is obtained by performing a GET API of the selected target and extracting the MOID from the RegisteredDevice. For more information, see API Docs.\nThis section is realized by sending two Intersight API requests: GET /v1/asset/Targets/\u003cTarget_Moid\u003e and using the extracted registered device Moid in the above request. Having explained the API specific details in the previous section, we will quickly add two API calls to the same task.\nDo not choose the Set External Target option in the General tab. This is because the API calls can be inferred as Intersight API calls.\nThis section captures the details related to the Intersight API call that gets the registered device Moid from the given target task input.\nThe outcomes shall be added for better experience with these Intersight API calls and since the previous section explains the outcomes in detail, this section does not cover them.\nGET is used as the default, if no value is provided for Method field.\nField Name\rValue\rAPI Name\rGet Device Id\rSet External Target\rUnchecked/false\rURL\r/v1/asset/Targets/\n{{.global.task.input.Target.Moid}}\nResponse Parser\rWe will extract the Moid of the ‘RegisteredDevice’ relation.\nDeviceMoid – Path: $.RegisteredDevice.Moid, Type: string\nThe target Moid required in the URL is populated from the task input Target. As part of this API output, the extracted device Moid can be referred in the next API request body with the following reference:\n{{.global.GetDeviceId.output.DeviceMoid}}\nUsing this example, you can also capture details for the Intersight API that requests the inventory refresh for Pure Flash Array snapshots. The snapshot name is extracted from the first API and the device Moid is extracted from the second API to create a request for this API.\nField Name\rValue\rAPI Name\rRequest Inventory Refresh\rSet External Target\rUnchecked or false\rMethod\rPOST\rURL\r/v1/task/PureScopedInventories\rBody\rContent Type: JSON\nText:\n{\n\"Type\": \"storage.PureVolumeSnapshot\",\n\"NamingProperty\": \"Name\",\n\"Values\": [\n\"{{.global.CreateSnapshot.output.SnapshotName}}\"\n],\n\"RegisteredDevice\": {\n\"ObjectType\": \"asset.DeviceRegistration\",\n\"Moid\": \"{{.global.GetDeviceId.output.DeviceMoid}}\"\n}\n}\nThere is no response body for this request. Therefore, the outcomes can be added based on API HTTP status code to set the task status. The outcome is not added her as they have been captured in detail for the first outcome. The extracted values from the API response SnapshotName and Serial are mapped to task output so that they are available as task output that can be referred in subsequent tasks in a workflow. This can be done by creating two task output parameters named ‘SnapshotName’ and ‘Serial’ in ‘Output tab of Properties area. The task output can be mapped to take API response values by using Map to Task Output action. The values extracted using Response Parser in an API can be mapped by selecting Parameters and then the API Name entry in Task Output drop down and providing the actual parameter names in Path field.\nExample: Obtaining Cisco ASA Details\nThe previous example illustrates the need to make API requests to a claimed target in Intersight. This section explains a sample task that obtains simple information from Cisco ASA, while is reachable from Intersight Assist. Intersight does not have a device connector for Cisco ASA.\nAs a first step, Cisco ASA is added as custom target. Cisco ASA uses HTTP basic authentication and has REST API interface. Hence, requests can be made to Cisco ASA as part of Intersight IO tasks. The device must be reachable from Intersight Assist. The device can be added as a Custom Target in Targets screen, by providing IP address, credentials and Intersight Assist from which the device is reachable. Cisco ASA added as custom target must be configured from Intersight tasks. Though, Cisco ASA supports basic authentication and does not need a session token to be created in Intersight, you can use a session token to showcase the Web API support for handling values for request and response headers.\nA session token is created and used in the request header to facilitate in the extraction of response headers. In this example, the task executes two API requests in Cisco ASA, namely create a session token and use the session token to obtain the Cisco ASA version.\nTo obtain a session token, use the Post call /api/tokenservices’ to create a session token. Use the Delete request /api/tokenservices/\u003cToken\u003e to delete the session. Cisco ASA expects a request to create a session token. It must include the basic authentication header that Intersight populates when using the details in the custom target.\nPOST /api/tokenservices\n204 No Content\nResponse Headers\nX-Auth-Token: \u003cNew Session Token\u003e\nThe subsequent API requests must have the X-Auth-Token request header.\nThe following table explains the request details that need to be provided in Task Designer to create session token.\nField Name\rValue\rAPI Name\rGet Session Token\rSet External Target\rChecked\nA task input of target type is added through the Task Designer dialog.\nMethod\rPOST\rURL\r/api/tokenservices\rNote: There is no need to have a request body or response parser given because the API does not generate a response body.\nDetails, such as, response headers, cookies, status code, and status message, can be referred in subsequent API requests using references based on the API name as follows:\nResponse Parameter\rReference Name\rHeaders-—A map of headers with keys being the header name and values being a string array of header values.\r{{.global.GetSessionToken.output.HttpHeaders}}\nA specific response header value can be obtained using two notations: {{.global.GetSessionToken.output.HttpHeaders.\u003cHeaderName\u003e}} or {{index .global.GetSessionToken.output.HttpHeaders `HeaderName`}}\nExamples of above notations are:\n{{.global.GetSessionToken.output.HttpHeaders.Date}}\n{{index .global.GetSessionToken.output.HttpHeaders `X-Auth-Token`}}\nThe above examples get the header value in the form of string array and individual values can be accessed by index template function. The index function can also be used to access a specific header in Headers.\n{{index .global.GetSessionToken.output.HttpHeaders.Date 0}}\n{{index (index .global.GetSessionToken.output.HttpHeaders `X-Auth-Token`) 0}}\nNote: The template engine used by Intersight IO considers hyphens (-) as special characters and does not allow obtaining headers with hyphens using the first dotted notation. Considering the fact that most of the header names are hyphenated, it is recommended to use the second notation only.\nCookies—A map of cookies with keys being cookie names and the values being strings.\r{{.global.GetSessionToken.output.HttpCookies}}\nThe further values of specific cookies can be referred using either the dot notation or with index function. The details are explained in the previous row about Headers.\nHTTP Status Code—Number\r{{.global.GetSessionToken.output.HttpStatusCode}}\rHTTP Status Message—String\r{{.global.GetSessionToken.output.HttpStatusMsg}}\rThe following table explains the various outcomes that the API request can produce.\nOutcome Name\rDetails\rUnauthorized\rCondition—{{eq .global.GetSessionToken.output.HttpStatusCode 401}}\nOutcome Type:—Terminal Error\nMessage: Authorization failed. Check the target credentials.\nSession Limit Breached\rCondition—{{eq .global.GetSessionToken.output.HttpStatusCode 503}}\nOutcome—Type: Error\nMessage—Maximum number of sessions reached.\nAll Well\rCondition—{{eq .global.GetSessionToken.output.HttpStatusCode 204}}\nOutcome Type—Success\nMessage—Session token is Obtained.\nThe auth token obtained from the first API can be used in the second API to obtain the ASA version and other details as follows:\nGET /api/monitoring/device/components/version\nRequest Headers:\nX-Auth-Token: \u003cAuth-Token-Obtained-from-Token-Api\u003e\n200 OK\n{\n“kind”: “object#Version”,\n“selfLink”: “/api/monitoring/device/version”,\n“deviceType”: “ASAv”,\n“upTimeinSeconds”: 208800,\n“totalFlashinMB”: 8192,\n“currentTimeinSeconds”: 1612870500,\n“firewallMode”: “Transparent”,\n“asaVersion”: “9.5(2)”\n} The following table explains the request details that need to be provided in Task Designer API request panel for the ASA version request.\nField Name\rValue\rAPI Name\rGet ASA Version\rSet External Target\rChecked\rURL\r/api/monitoring/device/components/version\rHeaders—JSON with header name mapped to array of header values\r{\n\"X-Auth-Token\": [\n\"{{index (index .global.GetSessionToken.output.HttpHeaders `X-Auth-Token`) 0}}\"\n]\n}\nThe token value is extracted from the previous API response header and used here in this API request header.\nResponse Parser\rVersion—Path: $.asaVersion, Type: string\rA simple outcome checks for status code. If outcome is 200, the task is marked as failed.\nName—Not OK\nCondition—{{ne .global.GetASAVersion.output.HttpStatusCode 200}}\nOutcome Type—Error\nMessage—GET ASA version failed\nThe two API requests have been added to obtain session token and then to obtain the ASA version. The extracted API output can be mapped to the task output.\nTask Input and Executor Output Mapping\nTask inputs and previous executors output can be used for direct mapping or transformed mappings. The syntax to refer to these will depend on the type of mapping. Task inputs are referenced as {{.global.task.input.InputName}} where InputName is the Reference Name given to the Task input and not the Display Name or Label. Similarly, task outputs are referenced as ${TaskName.output.TaskOutput}.\nTo specify an input mapping, select a task and click Edit against a task input parameter.\nThe options available are:\nStatic Value—Enter a value that is assigned to the task input field.\nDirect Mapping—Map an existing task input or previous executors output to the selected task input\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task’s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template. You can then preview the template and test the transformation with sample values.\nNote: Transformed mapping is only supported for task inputs of primitive data types, such as string, integer, boolean, and float.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string. Example 1:\nFindAllString(s, regex string) ([]string, error)\nExample: {{(FindAllString .global.task.input.NumberString \\\"([0-9]+)\\\")}} returns array [“123”, “456”] for input string “123 some text 456”.\nExample 2:\nAtoi function converts the given number in string format to integer type.\nAtoi(s string) (int, error)\nExample: {{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”\nExporting a Task\nIntersight Cloud Orchestrator enables you to export tasks from an account to your system and then import them to another account.\nTo export a task, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Tasks.\nFrom the tabular list of tasks, do one of the following:\nSelect a task, click the Ellipsis (…) icon in the same row, and then choose Export Task.\nSelect multiple tasks, click the Ellipsis (…) icon from the header or footer of the tabular list, and then choose Export Task.\nNote: You can also export tasks from the Actions menu in the Task Designer window.\nIn the Export Task screen:\nIn the JSON File Name field, use the default filename or enter a filename of your choice for the JSON file that stores the task components.\nUse the Export Tags toggle button to include or exclude the user-defined tags. ICO does not export the system-defined tags.\nClick Export.\nSave a local copy of the JSON file.\nImporting a Task\nIntersight Cloud Orchestrator enables you to import tasks to your account by importing a JSON file that contains the task components. You can create the JSON file by exporting the task components from another account.\nTo import a task, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Tasks.\nClick Import.\nThe Import wizard appears. In the Select File screen:\nFrom the Organization drop-down list, choose the organization to which you want to import the task(s).\nClick Browse, and then select the JSON file that contains the task(s).\nNote: Ensure that the file size of the JSON file is not more than 1MB. If the file size is more than 1MB, export the task(s) in batches, and then try import.\nClick Next. Intersight Cloud Orchestrator validates the JSON file and displays the task(s) in the Details screen.\nIn the Details screen:\nTo associate an additional tag to the components listed in the table, enter the tag in the Set Tags field. Note: Set Tags is an optional field. You must enter the tag in the key:value format.\nIf one or more task or task components are already available in the system, choose a rule to replace or skip the duplicate components.\nClick Import.\nIn the Import Result screen:\nVerify the status of the imported task and task components.\nIf you want to view the details of the import request:\nClick the link displayed above the table.\nAlternatively, click the Requests icon displayed in the menu bar.\nFor more information, see Requests.\nClick Close. Managing the Lifecycle of a Task\nTask management consists of organizing, creating, updating, and deletion of tasks. The following table describes the set of actions that you can perform with tasks in Cisco Intersight.\nActions\rDescription\rView Tasks\rChoosing Orchestration from the left navigation pane will display all workflows in a tabular format. Clicking Tasks will display all tasks in a tabular format. You can view information such as the task name and description, the number of versions available, the number of times the task has been executed, the last execution status, validation information and the last update time and date.\rCreate a New Task\rChoose Orchestration from the left navigation pane and click Tasks. Then, click Create Task. This option opens up the Task Designer, using which you can create a new task.\rDelete a Task\rFrom the tabular list of workflows, you can select a task and click Delete. This will remove the task.\rClone a Task\rFrom the tabular list of tasks, you can select a task and click Clone. This will clone the selected task.\rSave a Task as\rFrom the tabular list of tasks, you can choose a task and click. By default, the workflow details are displayed in the Designer tab. You can choose Save As option from the Action drop-down list to clone a task.\nIn the Save As screen, you can specify user-friendly short name, reference name, description, and tag key. Click Save. For more information, see Cloning a Task.\nCloning a Task\nYou can clone only a user-defined task. The cloned task is identical to the original task. You can edit the new task immediately. You might do this, for example, to create a task that is similar to the source task that can be edited based on your requirements.\nTo clone a task, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Tasks.\nFrom the tabular list of tasks, select a task and choose Clone.\nIn the Clone Task screen, edit the user-friendly short name, reference name, and description.\nCheck the Open Clone in Editor check box if you want to open the cloned task and edit the details.\nNote: Open Clone in Editor check box is not displayed when you clone a task using the Save As option\nClick Clone. The cloned task will be created in the same organization the source task belongs to. Supported Target Management Tasks\nThe Target Management tasks contain a subset of tasks that can be used within workflows to perform a range ot operations on the endpoint targets. The Target Management tasks supported in Intersight are:\nNew Target—Claim a new endpoint within a workflow in Intersight. The supported target types are HTTP, SSH, Powershell, or Ansible endpoints.\nGet Target—Get the details of a claimed target within a workflow. The task inputs are name, hostname or IP address, and target type. On successful execution, name, moid, hostname or IP address, port, connection status, and target type are generated as the task outputs.\nThe supported target types are HTTP, SSH, Powershell, or Ansible endpoints. Remove Target—Unclaim the target endpoint from Intersight. When a target is unclaimed, it is immediately detached from the corresponding Intersight account. The target retains any configuration applied before the unclaim operation. Compute Tasks Matrix\nThe following table lists compute tasks supported on UCS C-Series Standalone Server and Intersight Managed Mode (IMM) Server:\nCompute Tasks\rUCS C-Series Standalone Server\rIMM Server\rCopy Server Profile\rY\rY\rDeploy Server Profile\rY\rY\rDismount Server Virtual Media Device\rY\rN\rMount Server Virtual Media Device\rY\rN\rRemove Server from Server Profile\rY\rY\rRemove Server Profile\rY\rY\rRestart IMC\rY\rY\rSet Server One Time Boot Device\rY\rN\rSet Server Power State\rY\rY\rSet Server to Server Profile\rY\rY\rStop Server Operating System\rY\rY\rAdd Server Policies to Profile\rY\rY\rClear Server Storage Controller Configuration\rY\rY\rRemove Server Policies from Profile\rY\rY\rNew Server Profile\rY\rY\rNew Server Profile from Template\rY\rY\rDelete Server Virtual Drives\rY\rY\rClear Server Storage Controller Foreign Configuration\rY\rY\rImport Server Storage Controller Foreign Configuration\rY\rY\rSet Server Physical Drive State\rY\rY\rNew Server Precision Boot Device\rY\rN\rRemove Server Precision Boot Device\rY\rN\rSupported Tasks for Storage Targets\nThe following table lists tasks supported in the various storage targets available on Intersight:\nList of Tasks\rPure Storage\rNetApp\rHitachi\rAdd Storage Export Policy to Volume\rN\rY\rN\rAdd Host to Storage Host Group\rY\rN\rN\rAdd Hosts to Storage Host Group\rY\rN\rN\rCompress Storage Pool\rN\rN\rY\rConnect Initiators to Storage Host\rY\rY\rY\rConnect Volume to Storage Host Group\rY\rN\rN\rCopy Hitachi Volume\rN\rN\rY\rDisconnect Storage Export Policy from Volume\rN\rY\rN\rDisconnect Initiators from Storage Host\rY\rN\rY\rDisconnect Volume from Storage Host Group\rY\rN\rN\rExpand Storage LUN\rN\rY\rN\rEdit Aggregates For Storage Virtual Machine\rN\rY\rN\rEdit Storage Pool\rN\rN\rY\rEdit Storage Snapshot Policy\rN\rY\rN\rEdit Storage Export Policy Rule\rN\rY\rN\rEdit Storage Snapshot Policy Schedule\rN\rY\rN\rExpand Storage Volume\rY\rY\rY\rFind NetApp igroup LUN Map\rN\rY\rN\rExpand Storage Pool\rN\rN\rY\rFind Storage LUN by ID\rN\rY\rN\rFind Storage Volume by ID\rY\rY\rY\rFormat Storage Volume\rN\rN\rY\rNew Storage Export Policy\rN\rY\rN\rNew Storage Fibre Channel Interface\rN\rY\rN\rNew Storage Data IP Interface\rN\rY\rN\rNew Storage Host\rY\rY\rY\rNew Storage Host Group\rY\rN\rN\rNew Storage LUN\rN\rY\rN\rNew Storage LUN ID\rN\rY\rN\rNew Storage Snapshot Policy\rN\rY\rN\rNew Storage Snapshot Policy Schedule\rN\rY\rN\rNew Storage Pool\rN\rN\rY\rNew Storage Volume\rY\rY\rY\rNew Storage Volume Snapshot\rN\rY\rN\rNew Storage Export Policy Rule\rN\rY\rN\rNew Storage Virtual Machine\rN\rY\rN\rRemove Storage export policy\rN\rY\rN\rRemove Host from Storage Host Group\rY\rN\rN\rRemove Hosts from Storage Host Group\rY\rN\rN\rRemove Storage Host\rY\rY\rY\rRemove Storage Host Group\rY\rN\rN\rRemove Storage LUN\rN\rY\rN\rRemove Storage LUN ID\rN\rY\rN\rRemove Storage Pool\rN\rN\rY\rRemove Storage Volume\rY\rY\rY\rRemove Storage Virtual Machine\rN\rY\rN\rRemove Storage IP Interface\rN\rY\rN\rRemove Storage FC Interface\rN\rY\rN\rRename Storage Volume Snapshot\rN\rY\rN\rRemove Storage Snapshot Policy Schedule\rN\rY\rN\rRemove Storage Export Policy Rule\rN\rY\rN\rRemove Storage Snapshot Policy\rN\rY\rN\rRemove Storage Volume Snapshot\rN\rY\rN\rNew NetApp Smart LUN\rN\rY\rN\rNew NetApp NAS Smart Volume\rN\rY\rN\rRemove NetApp Smart LUN\rN\rY\rN\rSupported Tasks for Network Targets\nThe following table lists tasks supported in the various network targets available on Intersight:\nList of Network Tasks\rNexus Switch\rMDS Switch\rAdd Port to Port Channel\rN\rY\rCopy Running to Startup Configuration of Switch\rY\rN\rEdit Spanning Tree Protocol\rY\rNot Applicable\rNew Port Channel\rN\rY\rRemove Port Channel\rN\rY\rRemove Port from Port Channel\rN\rY\rRemove DNS Server\rN\rY\rRemove NTP Server\rN\rY\rSet DNS Server\rN\rY\rSet Feature State\rY\rY\rSet MTU\rY\rNot Applicable\rSet NTP Server\rN\rY\rSet Port Channel State\rN\rY\rSet Port Mode\rY\rNot Applicable\rSet Port Speed\rY\rNot Applicable\rSet Port State\rY\rY\rSet Switch Host Name\rY\rY\rData Types\nIntersight Orchestrator supports the use of data types for workflows and tasks. Data types for input and output defines types and associated constraints on values that can be specified. Data types also specify boundaries for values, and constraints like regular expressions.\nCisco Intersight provides a whole range of system-defined data types that you can use in your workflows. In addition, you can also create a data type in Cisco Intersight. To view all data types that are currently available or configured, choose Orchestration \u003e Data Types. A dashboard displays the following details under these tabs, namely, My Data Types, System Data Types, and All Data Types:\nNumber of Composite Type\nNumber of System Defined Data Type\nYou can view a tabular list of data types with the following information:\nReference Name\nDisplay Name\nComposite Type\nDescription\nLast Updated\nOrganization\nFrom this screen, as an Account Administrator, or as a user with Workflow Designer privileges, you can perform the following actions:\nCreate a new data type\nEdit or delete a custom data type\nClone a data type\nNote: You cannot edit or delete a system-defined data type.\nThere are many input types defined in Cisco Intersight representing a broad selection of categorical, numeric, and text parameters. For example, some existing data types are:\nGeneric Text Input (the least restricted input type)\nIPv4 Address\nOS Type\nMemory Size Selector\nPrimitive data type—Represents primitive data like String, Float, Integer, Boolean, Json, or Enum. Following are the attributes specific to primitive data types:\nType\nSecure\nConstraints (specifies limits and boundaries for values)\nObject Selector (lists the Cisco Intersight managed object selectors). This attribute is available only when the primitive data is String. Following are the attributes specific to Object Selector:\nIntersight API Reference—Enter the URL of the Intersight API configured with parameters.\nSelector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nValue Attribute—Enter the value to be passed as an input while executing a task. This value should be any one of the attribute name specified in the Selector Attribute field.\nArray data type—Represents an array of a given type. It can be an array of primitive data, reference data, or of custom data type. Following are the attributes specific to array data types:\nArrayItemType\nMin\nMax\nMoReference data type—Represents Cisco Intersight Managed object reference. Following are the attributes specific to reference data types:\nIntersight API Reference—Enter the URL of the Intersight API configured with parameters.\nSelector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nTarget data type—Represents a target endpoint or device. Following are the attributes specific to target data types:\nIntersight API Reference—Enter the URL of the Intersight API configured with parameters.\nSelector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nSupport Objects—Enter the object filter used for mentioning the interesting object in the task definition. You can add multiple support objects by clicking +.\nConstraint Attribute—Enter the attribute used for defining decision conditions to choose the right implementation task. You can add multiple constraint attributes by clicking +.\nConnector Attribute—Enter the attribute used for defining what value to be passed as input to the implementation task.\nCustom data type—Allows defining type constraints once and then use them in multiple tasks and workflows. Following are the attributes specific to target data types:\nCustom Data Type Name\nCatalog Moid\nYou choose existing input types from a list that displays a name, type, and category for each variable. The list can be filtered to make finding a given data type manageable.\nIf none of the existing data types serves your need in a particular application, it is possible to create custom data types by defining restrictions on existing data types.\nCreating a Data Type\nTo create a data type, perform the following steps:\nChoose Orchestration from the left navigation pane and click Data Types.\nChoose Create Data Type.\nIn the Create Data Type screen, enter the following information:\nOrganization—Choose an organization from the drop-down list.\nName—Enter a name for the custom data type definition. The name can be alphanumeric and can include a combination of upper case and lower case letters and special characters.\nLabel—Enter a label that helps you identify the data type.\nDescription—Enter a description, if required.\nSet Tags—Enter a tag in the key:value format, if required.\nSelect the parameters for the data type—Choose Simple or Composite. A Simple data type has only a singular value, while a composite data type has multiple properties. For example, a LoginName is a simple data type whereas a MailingAddress would be a Composite data type (with street, city, state, and so on.) Note: Target data type is not supported when you choose Composite as a parameter input.\nTo add additional inputs, click Add Field and click New Definition. Then, enter the following information: Name\nLabel\nDescription\nRequired—Update this field only when you are adding a Composite data type.\nType—Choose a data type for primitive data type. For example, String, Integer, Float, Boolean, Json, Enum, MoReference, Target Data Type, or custom data type.\nThe fields displayed depend on the value you select for the Type field. If you select the data type as Enum, specify the following:\nEnum List—Enum label and value. You can add multiple selector attributes by clicking +.\nWidget type.\nIf you select the data type as String, specify the following:\nMinimum and MaximumRange\nRegex—Validates the regular expression when you select String in the Type field.\nSecure—Indicates that the values of these properties are encrypted and stored in Cisco Intersight.\nObjectSelector—Enable to configure the Intersight managed object selectors. This attribute is available only when the primitive data is String. Specify the Intersight API Reference and selector attributes to feed the input from the table selection. Value will be passed according to the configuration set in the Value attribute.\nIf you select the data type as Integer or Float, specify the following:\nMinimum and MaximumRange. If you select the data type as MoReference, specify the following:\nIntersight API Reference—Enter the URL of the Intersight API configured with parameters.\nSelector Attribute—Enter the attribute name(s) that needs to be displayed in the input table column. You can add multiple selector attributes by clicking +.\nIf you selected a composite data type, you can specify the field mapping details. With field mapping, you can pass the value from the parent composite data type to a child composite data type.\nTo specify the field mapping, do the following:\nKey—The input field that you want to hide.\nValue Attribute—The value in a template style to be passed dynamically during the execution. The inputs are referenced as ${datatype.type.AttributeName}.\nClick Add.\nTo add a Parameter Set rule, click Add Rule \u003e Parameter Set.\nFor more information, see Error! Reference source not found..\nName—The name of the Parameter Set rule.\nIf Field—Select the input field that will be used for the Parameter Set rule.\nCondition—The condition for the rule. The condition can be Equal to, Not equal to, Contains, or Matches Pattern.\nValue—The value of the input (If Field) that will be used for the Parameter Set rule.\nField to be shown—Select input fields that should be made available when the Parameter Set rule condition is satisfied.\nClick Save.\nClick Preview to validate the definitions that you have added and make corrections, if required.\nClick Add.\nThe data type that you added is displayed in the tabular list on the Data Types screen. You can now create a workflow and use this data type in the workflow input. Similar to workflows, you can define the Parameter Set rules at custom data type level. Data Type Parameter Set Rule\nWhen you create a composite data type, you can specify the fields for the data type. After you define the fields, you can set a Parameter Set rules. The Parameter Set rule control the availability of specific parameters or inputs during the execution. After the first input is specified, the Parameter Set rule controls which subsequent input fields are made available during the execution.\nNote: You can define a Parameter Set rule only for a custom data type that has more than two input fields with the supported data type.\nThe supported data types for the Parameter Set rules are:\nBoolean\nEnum\nString Object Selector\nMoReference\nExample: The following example shows how to create a Parameter Set rule for a composite data type with four fields. The composite data type fields are:\nCluster Type—Type is Enum and Enum list is VM and HX.\nVMware Cluster—Type is String.\nHX Cluster—Type is String.\nCluster Description—Type is String.\nYou can create two Parameter Set rules. During the execution when the Cluster Type value is VM only VMware Cluster field is made available. Alternately, when the Cluster Type value is HX, only HX Cluster is made available. The details of the Parameter Set rules are:\nRule1—If Field is Cluster Type, Condition is Equal to, Value is VM, and Fields to be shown is VMware Cluster.\nRule2—If Field is Cluster Type, Condition is Equal to, Value is HX, and Fields to be shown is HC Cluster.\nCloning a Data Type\nYou can clone a data type. The cloned data type is identical to the original data type. You can edit the new data type immediately. You might do this, for example, to create a data type that is similar to the source data type that can be edited based on your requirements. The new data type has a new, separate version history.\nTo clone a data type, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Data Type.\nFrom the tabular list of data types, select a data type and choose Clone.\nIn the Clone Data Type screen, edit the user-friendly short name, reference name, description, and organization details. The organization mappings are displayed only for pre-canned data types and not for the custom data types.\nCheck the Open Clone in Editor check box if you want to open the cloned data type and edit the details.\nClick Clone.\nExporting a Data Type\nIntersight Cloud Orchestrator enables you to export data types from an account to your system and then import them to another account.\nTo export a data type, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Data Type.\nFrom the tabular list of data types, do one of the following:\nSelect a data type, click the Ellipsis (…) icon in the same row, and then choose Export Data Type.\nSelect multiple data types, click the Ellipsis (…) icon from the header or footer of the tabular list, and then choose Export Data Type.\nIn the Export Data Type screen:\nIn the JSON File Name field, use the default filename or enter a filename of your choice for the JSON file that stores the data type components.\nUse the Export Tags toggle button to include or exclude the user-defined tags. ICO does not export the system-defined tags.\nClick Export.\nSave a local copy of the JSON file.\nImporting a Data Type\nIntersight Cloud Orchestrator enables you to import data types to your account by importing a JSON file that contains the data type components. You can create the JSON file by exporting the data type components from another account.\nTo import a data type, complete the following steps:\nChoose Orchestration from the left navigation pane.\nClick Data Type.\nClick Import.\nThe Import wizard appears. In the Select File screen:\nFrom the Organization drop-down list, choose the organization to which you want to import the data type(s).\nClick Browse, and then select the JSON file that contains the data type(s).\nNote: Ensure that the file size of the JSON file is not more than 1MB. If the file size is more than 1MB, export the data type(s) in batches, and then try import.\nClick Next. Intersight Cloud Orchestrator validates the JSON file and displays the data type(s) in the Details screen.\nIn the Details screen:\nTo associate an additional tag to the components listed in the table, enter the tag in the Set Tags field. Note: Set Tags is an optional field. You must enter the tag in the key:value format.\nIf one or more data type components are already available in the system, choose a rule to replace or skip the duplicate components.\nClick Import.\nIn the Import Result screen:\nVerify the status of the imported data type(s).\nIf you want to view the details of the import request:\nClick the link displayed above the table.\nAlternatively, click the Requests icon displayed in the menu bar.\nFor more information, see Requests.\nClick Close. Executors – Invoke PowerShell Script\nIntersight Cloud Orchestrator allows workflow designers to run PowerShell Script on a PowerShell target endpoint using the Invoke PowerShell Script embedded task in the workflow. The Invoke PowerShell Script task is an out-of-box solution that allows you to automate PowerShell operations on the PowerShell target that is added as a PowerShell endpoint target in Cisco Intersight. This feature allows a workflow designer to extend the automation capabilities of the workflow engine beyond what is natively available in the task library and interact with the PowerShell target endpoint.\nSupported Targets\nThe Invoke PowerShell Script task can be run only on the targets that are added as a PowerShell endpoint target type in Cisco Intersight.\nTo run the PowerShell Script task on the PowerShell target endpoint from Cisco Intersight, ensure that:\nThe endpoint is reachable through Intersight Assist.\nThe endpoint target is in the Connected state.\nPowerShell Remoting is enabled on the target endpoint to allow the endpoint to receive PowerShell remote commands.\nNote: You can run the Invoke PowerShell Script task only on a Windows system.\nTo enable PowerShell Remoting on a PowerShell endpoint target, execute the following remoting script on the PowerShell target endpoint:\n[CmdletBinding()]\nParam (\n[switch]$EnableBasicAuth = $false,\n[switch]$SKipNetworkProfileCheck = $false,\n[switch]$ForceNewSSLCert = $false,\n[string]$SubjectName = $env:COMPUTERNAME,\n[int]$CertValidityDays = 1095\n)\nFunction New-SelfSignedCert\n{\nParam (\n[string]$SubjectName,\n[int]$ValidDays = 1095\n)\n$hostnonFQDN = $env:computerName\n$hostFQDN = [System.Net.Dns]::GetHostByName(($env:computerName)).Hostname\n$SignatureAlgorithm = “SHA256”\n$name = New-Object -COM “X509Enrollment.CX500DistinguishedName.1”\n$name.Encode(“CN=$SubjectName”, 0)\n$key = New-Object -COM “X509Enrollment.CX509PrivateKey.1”\n$key.ProviderName = “Microsoft Enhanced RSA and AES Cryptographic Provider”\n$key.KeySpec = 1\n$key.Length = 4096\n$key.SecurityDescriptor = “D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)”\n$key.MachineContext = 1\n$key.Create()\n$serverauthoid = New-Object -COM “X509Enrollment.CObjectId.1”\n$serverauthoid.InitializeFromValue(“1.3.6.1.5.5.7.3.1”)\n$ekuoids = New-Object -COM “X509Enrollment.CObjectIds.1”\n$ekuoids.Add($serverauthoid)\n$ekuext = New-Object -COM “X509Enrollment.CX509ExtensionEnhancedKeyUsage.1”\n$ekuext.InitializeEncode($ekuoids)\n$cert = New-Object -COM “X509Enrollment.CX509CertificateRequestCertificate.1”\n$cert.InitializeFromPrivateKey(2, $key, “”)\n$cert.Subject = $name\n$cert.Issuer = $cert.Subject\n$cert.NotBefore = (Get-Date).AddDays(-1)\n$cert.NotAfter = $cert.NotBefore.AddDays($ValidDays)\n$SigOID = New-Object -ComObject X509Enrollment.CObjectId\n$SigOID.InitializeFromValue(([Security.Cryptography.Oid]$SignatureAlgorithm).Value)\n[string[]] $AlternativeName += $hostnonFQDN\n$AlternativeName += $hostFQDN\n$IAlternativeNames = New-Object -ComObject X509Enrollment.CAlternativeNames\nforeach ($AN in $AlternativeName)\n{\n$AltName = New-Object -ComObject X509Enrollment.CAlternativeName\n$AltName.InitializeFromString(0x3,$AN)\n$IAlternativeNames.Add($AltName)\n}\n$SubjectAlternativeName = New-Object -ComObject X509Enrollment.CX509ExtensionAlternativeNames\n$SubjectAlternativeName.InitializeEncode($IAlternativeNames)\n[String[]]$KeyUsage = (“DigitalSignature”, “KeyEncipherment”)\n$KeyUsageObj = New-Object -ComObject X509Enrollment.CX509ExtensionKeyUsage\n$KeyUsageObj.InitializeEncode([int][Security.Cryptography.X509Certificates.X509KeyUsageFlags]($KeyUsage))\n$KeyUsageObj.Critical = $true\n$cert.X509Extensions.Add($KeyUsageObj)\n$cert.X509Extensions.Add($ekuext)\n$cert.SignatureInformation.HashAlgorithm = $SigOID\n$CERT.X509Extensions.Add($SubjectAlternativeName)\n$cert.Encode()\n$enrollment = New-Object -COM “X509Enrollment.CX509Enrollment.1”\n$enrollment.InitializeFromRequest($cert)\n$certdata = $enrollment.CreateRequest(0)\n$enrollment.InstallResponse(2, $certdata, 0, “”)\n# extract/return the thumbprint from the generated cert\n$parsed_cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2\n$parsed_cert.Import([System.Text.Encoding]::UTF8.GetBytes($certdata))\nreturn $parsed_cert.Thumbprint\n}\n# Setup error handling\nTrap\n{\n$_\nExit 1\n}\n# Treat non terminating erros as terminating errors\n$ErrorActionPreference = “Stop”\n# Get the ID and security principal of the current user account\n$myWindowsID=[System.Security.Principal.WindowsIdentity]::GetCurrent()\n$myWindowsPrincipal=new-object System.Security.Principal.WindowsPrincipal($myWindowsID)\n# Get the security principal for the Administrator role\n$adminRole=[System.Security.Principal.WindowsBuiltInRole]::Administrator\n# Check to see if we are currently running “as Administrator”\nif (-Not $myWindowsPrincipal.IsInRole($adminRole))\n{\nWrite-Output “ERROR: You need elevated Administrator privileges in order to run this script.”\nWrite-Output \" Start Windows PowerShell by using the Run as Administrator option.\"\nExit 2\n}\n# Ensure PowerShell version is greater that 3.0\nif ($PSVersionTable.PSVersion.Major -lt 3) {\nThrow “Minimum required PowerShell version is 3.0”\n}\n# Ensure WinRM is present on the machine\nif (!(Get-Service “WinRM” -ErrorAction SilentlyContinue)) {\nThrow “WinRM service is not present on the machine”\n}\n# Ensure WinRM is running on the machine\nif (!(Get-Service “WinRM” -ErrorAction SilentlyContinue | where {$_.Status -eq “Running”})) {\nWrite-Output “WinRM service is not running”\nWrite-Output “Attempting to start WinRM service”\nStart-Service “WinRM”\n}\n# Check if PS Remoting is already enabled, if not enable it\n# WinRM should be running; check that we have a PS session config.\nif (!(Get-PSSessionConfiguration -Verbose:$false) -or (!(Get-ChildItem WSMan:\\localhost\\Listener)))\n{\nif ($SkipNetworkProfileCheck) {\nWrite-Verbose “Enabling PS Remoting without checking Network profile.”\nEnable-PSRemoting -SkipNetworkProfileCheck -Force -ErrorAction Stop\nWrite-Output “Enabled PS Remoting.”\n}\nelse {\nWrite-Verbose “Enabling PS Remoting.”\nEnable-PSRemoting -Force -ErrorAction Stop\nWrite-Output “Enabled PS Remoting.”\n}\n}\nelse\n{\nWrite-Verbose “PS Remoting is already enabled.”\n}\n# Ensure LocalAccountTokenFilterPolicy is set to 1\n# https://github.com/ansible/ansible/issues/42978\n# Needed for NTLM authentication\n$token_path = “HKLM:\\SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Policies\\System”\n$token_prop_name = “LocalAccountTokenFilterPolicy”\n$token_key = Get-Item -Path $token_path\n$token_value = $token_key.GetValue($token_prop_name, $null)\nif ($token_value -ne 1) {\nWrite-Verbose “Setting LocalAccountTOkenFilterPolicy to 1”\nif ($null -ne $token_value) {\nRemove-ItemProperty -Path $token_path -Name $token_prop_name\n}\nNew-ItemProperty -Path $token_path -Name $token_prop_name -Value 1 -PropertyType DWORD \u003e $null\n}\n# Make sure there is a SSL listener.\n$listeners = Get-ChildItem WSMan:\\localhost\\Listener\nif (!($listeners | Where-Object {$_.Keys -like “TRANSPORT=HTTPS”}))\n{\n# We cannot use New-SelfSignedCertificate on 2012R2 and earlier\n$thumbprint = New-SelfSignedCert -SubjectName $SubjectName -ValidDays $CertValidityDays\nWrite-Output “Self-signed SSL certificate generated; thumbprint: $thumbprint”\n# Create the hashtables of settings to be used.\n$valueset = @{\nHostname = $SubjectName\nCertificateThumbprint = $thumbprint\n}\n$selectorset = @{\nTransport = “HTTPS”\nAddress = “*”\n}\nWrite-Verbose “Enabling SSL listener.”\nNew-WSManInstance -ResourceURI ‘winrm/config/Listener’ -SelectorSet $selectorset -ValueSet $valueset\nWrite-Verbose “Enabled SSL listener.”\n}\nelse\n{\nWrite-Verbose “SSL listener is already active.”\n# Force a new SSL cert on Listener if the $ForceNewSSLCert\nif ($ForceNewSSLCert)\n{\n# We cannot use New-SelfSignedCertificate on 2012R2 and earlier\n$thumbprint = New-SelfSignedCert -SubjectName $SubjectName -ValidDays $CertValidityDays\nWrite-Verbose “Self-signed SSL certificate generated; thumbprint: $thumbprint”\n$valueset = @{\nCertificateThumbprint = $thumbprint\nHostname = $SubjectName\n}\n# Delete the listener for SSL\n$selectorset = @{\nAddress = “*”\nTransport = “HTTPS”\n}\nRemove-WSManInstance -ResourceURI ‘winrm/config/Listener’ -SelectorSet $selectorset\n# Add new Listener with new SSL cert\nNew-WSManInstance -ResourceURI ‘winrm/config/Listener’ -SelectorSet $selectorset -ValueSet $valueset\n}\n}\n# Enable/Disable basic authentication as needed\n$basicAuth = Get-Item WSMan:\\localhost\\Service\\Auth\\Basic\nif ($EnableBasicAuth) {\nif ($basicAuth.Value -eq “true”) {\nWrite-Output “Basic authentication is already enabled”\n} else {\nWrite-Output “Basic authentication is currently disabled”\nSet-Item WSMan:\\localhost\\Service\\Auth\\Basic -Value $true\nWrite-Output “Basic authentication has been enabled”\n}\n} else {\nif ($basicAuth.Value -eq “true”) {\nWrite-Output “Basic authentication is currently enabled”\nSet-Item WSMan:\\localhost\\Service\\Auth\\Basic -Value $false\nWrite-Output “Basic authentication has been disabled”\n} else {\nWrite-Output “Basic authentication is already disabled”\n}\n}\n# Check firewall\n$rule = Get-NetFirewallRule | where {$_.DisplayName -eq “Allow WinRM HTTPS”}\nif ($rule) {\nif ($rule.Profile.ToString() -eq “Any”) {\nWrite-Output “Firewall rule already exists for WinRM”\n} else {\nSet-NetFirewallRule -DisplayName “Allow WinRM HTTPS” -Profile Any\n}\n} else {\nWrite-Output “Creating firewall rule for WinRM”\nNew-NetFirewallRule -Profile Any -Name “Allow WinRM HTTPS” -DisplayName “Allow WinRM HTTPS” -Direction Inbound -LocalPort 5986 -Protocol “TCP” -Action Allow -Enabled True | Out-Null\n}\n# Test a remoting connection to localhost, which should work.\n$httpResult = Invoke-Command -ComputerName “localhost” -ScriptBlock {$env:COMPUTERNAME} -ErrorVariable httpError -ErrorAction SilentlyContinue\n$httpsOptions = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck\n$httpsResult = New-PSSession -UseSSL -ComputerName “localhost” -SessionOption $httpsOptions -ErrorVariable httpsError -ErrorAction SilentlyContinue\nif ($httpResult -and $httpsResult)\n{\nWrite-Verbose “HTTP: Enabled | HTTPS: Enabled”\n}\nelseif ($httpsResult -and !$httpResult)\n{\nWrite-Verbose “HTTP: Disabled | HTTPS: Enabled”\n}\nelseif ($httpResult -and !$httpsResult)\n{\nWrite-Verbose “HTTP: Enabled | HTTPS: Disabled”\n}\nelse\n{\nWrite-Output “Unable to establish an HTTP or HTTPS remoting session.”\nThrow “Unable to establish an HTTP or HTTPS remoting session.”\n}\nRemove-PSSession -Session $httpsResult -ErrorAction SilentlyContinue\nWrite-Output “PS Remoting has been successfully configured for Intersight.”\nFor more information on Intersight Target Claim, see Target Claim Using Intersight Assist.\nUsing the Executor PowerShell Script embedded task\nUse the Invoke PowerShell Script from the Executors section in the Intersight Orchestrator Workflow Designer UI to create a task for a PowerShell Script target endpoint.\nThe following table explains the PowerShell Script task properties:\nProperty\rDescription\rExternal Target\rThe PowerShell endpoint on which the PowerShell Script task is run.\nThe PowerShell Script target must be in the connected state.\nStatic Value—Click Select External Target to select the PowerShell endpoint target from the Cisco Intersight target inventory.\nDirect Mapping—Select an existing workflow input or Task output field.\nTo create a new Workflow input, select Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the task input.\nScript\rThe PowerShell script to be executed on the endpoint.\nStatic Value—The PowerShell script.\nDirect Mapping—Select an existing workflow input or Task output field.\nTo create a new Workflow input, select Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nNote: When you specify the PowerShell script statement and enable the Response Parser Type as JSON, at the time of execution of the workflow, Intersight pipes ConvertTo-Json to the script to get the corresponding responses as JSON output. However, PowerShell script statements do not output to the pipe command, and the workflow may fail and return the error \"An empty pipe element is not allowed.\". For example, for a script foreach ($x in 1,2,3,4,5) {$x} with Response Parser Type as JSON, when the workflow is executed the workflow fails and returns the error \"An empty pipe element is not allowed\".\nYou must wrap the PowerShell script statement with the $() operator, such as $(foreach ($x in 1,2,3,4,5) {$x} ) for the PowerShell script to work.\nTimeout\rThe duration in seconds for which the task waits for a response from the PowerShell target endpoint.\nThe field corresponds to the wsman:OperationTimeout field in the WinRM SOAP/XML message.\nStatic Value—The timeout in seconds.\nDirect Mapping—Select the command timeout from the Workflow input or Task output.\nTo create a new Workflow input, select Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input.\nResponse Parser\rThe response parser contains information about the required values, their types, and the location in the API responses. You specify the required values along with API request details. These details are used by the response parser to extract the values from the API responses.\nStatic Value—Select the response type as JSON or Text.\nEnable JSON Parsing—Select enable to parse the script response and extract the data from it.\nDepth—The number of levels of the contained objects that must be included in the JSON representation.\nPath—The content specific path information that identifies the parameter value within the content. The value is usually XPath or JSONPath.\nName—The name of the output under which the captured value is saved.\nType—The response parameter type—String, Integer, Float, or Boolean.\nEnable Text Parsing—Select enable to parse the script response and extract data from it.\nRegular Expression—The regular expression of the line in the command response where the interested capture value resides. The format to specify the capture value in this input is $\u003cName of the parameter\u003e. For example, if the value of the Regular Expression field is $\u003cParameterName\u003e\\@cisco\\.com, then the Name field must be given the value - ParameterName.\nName—The name of the output under which the captured value is saved. This name should be the same that is provided in the Regular Expression—$\u003cName\u003e.\nType—The response parameter type—String, Integer, Float, or Boolean.\nDirect Mapping—Select the command timeout from the Workflow input or Task output.\nTo create a new Workflow input, select Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input.\nThe following table explains the task Output properties:\nProperty\rDescription\rExit Code\rThe exit code after the execution of the PowerShell script against the given endpoint.\rResponse\rThe response returned by the script.\rExtracted Parameters\rThe list of output parameters extracted from the response.\rThe following table explains the task Outcomes properties:\nProperty\rDescription\rOutcomes\rTo use the extracted values from the API response to determine the task status and set the status with an appropriate message, when the conditions match, do the following:\nClick Add Outcome.\nName—The name for the outcome.\nOutcome Type—Select the outcome type as Success, Error, or Skip Task Execution.\nFor more information on Outcomes, see Outcomes\nMessage—The message when the condition is met.\nCondition—The condition for the outcome.\nFor example, {{eq .local.response.ExitCode \"0\"}}.\nThis condition checks whether the response exit code of API is 0.\nUsing the Executor PowerShell Script custom task\nUse the Invoke PowerShell Script from the Executors section in the Intersight Orchestrator Task Designer UI .\nFor more information on custom tasks, see Defining a Task\nThe following table explains the PowerShell Script custom task properties:\nProperty\rDescription\rGeneral\rFor more information, see Defining a Task\n.\nInputs\rExternal Target—The PowerShell endpoint target on which the PowerShell script task is run.\rOutputs\rTo extract the required values from the API responses and map it to task outputs, do the following:\nCreate Task Output—Specify the task output.\nMap to Task Output—Check the check box to map the task output to an API response.\nTask Output—Select the API response to which the task output is mapped. The options available are:\nExit Code | Invoke PowerShell Script\nResponse | Invoke PowerShell Script\nExtracted Parameters | Invoke PowerShell Script\nFor example, if you create a new task output New Exit Code and map it to Exit Code | Invoke PowerShell Script, after the workflow is executed, the output will show:\n.\n└── Outputs/\n├── ConfigResults:[ 1 ]/\n│ └── Object:{ 3 }/\n│ ├── ConfigResCtx:{ 1 }/\n│ │ └── EntityData:{ 1 }/\n│ │ └── task:workflow.PowerShellApiTask\n│ ├── State:Ok\n│ └── Type:Config\n├── Custom_Task_Output:Handles NPM(K) PM(K) WS(K) CPU(s) Id SI ProcessName/\n│ ----- ------ ----- ----- ------ -- -- -----------\n│ 264 16 4880 24808 1.11 2600 2 ApplicationFrameHost\n│ 405 28 109036 5628 85.55 2112 2 chrome\n│ ...\n└── New Exit Code:0\nThe following table explains the PowerShell Script custom task input:\nProperty\rDescription\rScript\rThe PowerShell script to be executed on the target endpoint.\nStatic Value—The PowerShell Script.\nDirect Mapping—Select an existing Task input or Task output field.\nNote: When you use Direct Mapping and select a task input, and then execute the workflow it fails and returns the error map[Text:get-service : The term 'map[Text:get-service' is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again..\nYou must prefix .Text to the Direct Mapping input in Advanced Mapping. For example, for a task input Script, the Advanced Mapping input should be{{.global.task.input.Script.Text}}\nAdvanced Mapping—Map a Golang template to the task input.\nTimeout\rThe duration in seconds for which the task waits for a response from the PowerShell target endpoint.\nThe field corresponds to the wsman:OperationTimeout field in the WinRM SOAP/XML message.\nStatic Value—The timeout in seconds.\nDirect Mapping—Select the command timeout from the Task input or Task output.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input.\nResponse Parser\rThe response parser contains information about the required values, their types, and the location in the API responses. You specify the required values along with API request details. These details are used by the response parser to extract the values from the API responses.\nStatic Value—Select the response type as JSON or Text.\nEnable JSON Parsing—Select enable to parse the script response and extract the data from it.\nDepth—The number of levels of the contained objects that must be included in the JSON representation.\nPath—The content specific path information that identifies the parameter value within the content. The value is usually XPath or JSONPath.\nName—The name of the output under which the captured value is saved.\nType—The response parameter type—String, Integer, Float, or Boolean.\nEnable Text Parsing—Select enable to parse the script response and extract data from it.\nRegular Expression—The regular expression of the line in the command response where the interested capture value resides. The format to specify the capture value in this input is $\u003cName of the parameter\u003e. For example, if the value of the Regular Expression field is $\u003cParameterName\u003e\\@cisco\\.com, then the Name field must be given the value - ParameterName.\nName—The name of the output under which the captured value is saved. This name should be the same that is provided in the Regular Expression—$\u003cName\u003e.\nType—The response parameter type—String, Integer, Float, or Boolean.\nDirect Mapping—Select the input from the Task input or Task output.\nNote: When you use Direct Mapping and select a task input, and execute the workflow it fails and returns the error Error in execution: API request cannot be populated: invalid character 'm' looking for beginning of value.\nYou must pipe ToJson to Direct Mapping in Advanced Mapping. For example, for a task input ResponseParser, the Advanced Mapping input should be {{.global.task.input.ResponseParser| ToJson}}.\nAdvanced Mapping—Map a Golang template to the task input.\nThe following table explains the PowerShell Script custom task Outcomes:\nProperty\rDescription\rOutcomes\rTo use the extracted values from the API response to determine the task status and set the status with an appropriate message, when the conditions match, do the following:\nClick Add Outcome.\nName—The name for the outcome.\nOutcome Type—Select the outcome type. The options available are Success, Skip To Success, Error, Terminal Error, Skip Task Execution, or Status.\nFor more information on Outcomes, see Outcomes\nMessage—The message when the condition is met.\nCondition—The condition for the outcome.\nFor example, {{eq .global.InvokePowerShellScript1.output.ExitCode \"0\"}}.\nThis condition checks whether the response exit code of the API named ‘InvokePowerShellScript1’ used in a custom task is 0.\nTemplate Parameters\nThe request body template can refer to values from workflow inputs, previous task outputs, or implicit parameters for Intersight API calls. The following table explains the template parameters.\nPrefix/Format\rDescription\r{{.global.workflow.input.\u003cParameterName\u003e}}\rWorkflow input reference.\r{{.global.\u003cTaskRefName\u003e.output.\nParameters.\u003cParameterName\u003e}}\rPrevious task output reference. TaskRefName is the name of the previous task having output ParameterName.\r{{.security.AccountMoid}}\rImplicit parameter reference to Account MoID under which the workflow is running.\r{{.security.OrganizationMoid}}\rImplicit parameter reference to Organization MoID under which the workflow is running.\rTemplate Functions\nThe template engine has in-built functions to transform values before they are populated in the request templates. The following table explains the functions supported in Invoke Web API Request task.\nFunction\rDescription\rTrimSpace\rReturns a string after removing whitespaces from a the string.\nExample:\n{{TrimSpace .global.workflow.input.HostName}}\nContainsString\rReturns a boolean if a substring is present in a given string.\nExample:\n{{if (ContainsString .global.workflow.input.SizeAsString \\”MB\\”)}}Mega Bytes{{else}}Bytes{{end}}\nFindAllString\rReturns a slice of substrings matching the regular expression in a given string.\nExample:\n{{(FindAllString .global.workflow.input.NumberString \\”([0-9]+)\\”)}}\nThe above example returns array [“123”, “456”] for input string “123 some text 456.”\nToJson\rConverts a value to a JSON format.\nExample:\n{{(FindAllString .global.workflow.input.NumberString \\\"([0-9]+)\\\") | ToJson}}\nThe above example returns JSON array literal [“123”, “456”] for input string “123 some text 456.”\nAsArray\rTakes in an element and returns an array of one element.\nExample:\n{{AsArray .global.workflow.output.serverMo}}\nThe above example returns an array of one server Mo.\nSubstring\rReturns a substring within the given index bounds.\nExample:\n{{Substring .global.workflow.input.StorageId 2 6}}\nThe above example returns “ABCD” for string “12ABCD3456.”\nIpToCidr\rReturns the classless inter-domain routing (CIDR) notation of an IPv4 address and subnet mask.\nExample:\n{{IpToCidr .global.workflow.input.Ip .global.workflow.input.Netmask}}\nThe above example returns “10.10.10.10/24” for the input parameters “10.10.10.10” and “255.255.255.0.”\nLookupInSlice\rChecks if a given value is present in given slice or array and returns true if it exists. This function can be used for any value.\nExample:\n{{LookupInSlice .global.workflow.input.IpAddressList \\”10.10.10.10\\”}}\nThe above example returns true for input [”10.10.10.10”, “20.20.20.20”].\nIndex\rReturns a value from an array when an input index exists.\nExample:\n{{ index .global.workflow.input.nodes .global.workflow.input.idx }} In the above example, if nodes is an array of devices and idx is 2, the index function returns the second device in the array.\nItob\rConverts an integer to a boolean.\nExample:\n{{ Itob global.workflow.input.OnOffFlip }} The above example returns true and false for inputs 1 and 0 respectively.\nItoa\rConverts a given number to a string value.\nExample:\n{{ Itoa global.workflow.input.Port }} The above example returns “12345” for input 12345.\nItof\rConverts a given integer to a float value.\nExample:\n{{ Itof global.workflow.input.Rate }}\nThe above example returns 15.0 for an input 15.\nBtoa\rConverts a given boolean to a string value.\nExample:\n{{ Btoa global.workflow.input.OnOffFlip }}\nThe above example returns “true” for input true.\nBtoi\rConverts a given boolean to a integer value.\nExample:\n{{ Btoi global.workflow.input.OnOffFlip }}\nThe above example returns 1 and 0 for inputs true and false respectively.\nAtob\rConverts the given string into a Boolean value.\nExample:\n{{ Atob global.workflow.input.OnOffFlip }}Returns true for input “true”\nAtoi\rConverts a given number in string format to the integer type.\nExample:\n{{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”\nFtoa\rConverts a given number into the string form based on the given precision.\nExample:\n{{Ftoa .global.task.input.Size 2}} returns the following output: 123.456 =\u003e “123.45”, 1028 =\u003e “1028.00”\nFtoi\rConverts a given float input to a integer value.\nExample:\n{{ Ftoi global.workflow.input.Rate }}\nThe above example returns 15 for an input 15.833.\nEval\rSupports an expression evaluation function. The below example returns 2GB for a input value of 2048. Note that the second argument is passed as ‘.’ in the template, which represents the map of all parameters.\n{{Eval \\\"{{.global.workflow.input.Size}} / 1024\\\" .}}GB\nTemplate Engine Syntax\nThe template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements\nThe comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}}\nConditional Statements\nThe template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \u003ccomparision_statement\u003e}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else if \u003ccomparision_statement}} Tempalte to be used {{end}}\nPowerShell Script Task Examples\nExample 1: Create a workflow to run a PowerShell Script task to get the items and child items on a PowerShell Target endpoint\nThe example below shows the execution of a script to get the items and child items on a PowerShell target endpoint. The response parser of the PowerShell script task is configured to use the Depth parameter to limit the number of levels to recurse to 1.\nThe workflow input field required for this example is as follows:\nWorkflow Input\rInput Fields\rExternal Target\rReference Name—Target\nType—Target Data Type\nIntersight API Reference—/api/v1/asset/Targets?$filter=(TargetType eq PowerShellEndpoint and Status eq Connected)\nName\nTarget Type\nThe following table lists the PowerShell Script task properties:\nProperty\rDescription\rExternal Target\rThe target on which the PowerShell Script task is executed.\n—${workflow.input.Target}\nScript\rStatic Value—get-childitem\rTimeout\rStatic Value—60 sec\rResponse Parser\rResponse Type—JSON\nDepth—1\nEnable JSON Parsing—Enable\nJSON Parser Parameters\nPath—$\nName—Dir\nType—String\nAfter you execute the workflow, the task output is:\n.\n└── ConfigResults:[ 1 ]/\n└── Object:{ 3 }/\n├── ConfigResCtx:{ 1 }/\n│ └── EntityData:{ 1 }/\n│ └── task:workflow.PowerShellApiTask\n├── State:Ok\n├── Type:Config\n├── Response:[/\n│ ├── {\n│ ├── “Name”: “Desktop”,\n│ ├── “Parent”: “Administrator”,\n│ ├── “Exists”: true,\n│ ├── “Root”: “C:\\\\”,\n│ ├── “FullName”: “C:\\\\Users\\\\Administrator\\\\Desktop”,\n│ ├── “Extension”: “”,\n│ ├── “CreationTime”: “\\/Date(1633091610981)\\/”,\n│ ├── “CreationTimeUtc”: “\\/Date(1633091610981)\\/”,\n│ ├── “LastAccessTime”: “\\/Date(1634588500706)\\/”,\n│ ├── “LastAccessTimeUtc”: “\\/Date(1634588500706)\\/”,\n│ ├── “LastWriteTime”: “\\/Date(1634588500706)\\/”,\n│ ├── “LastWriteTimeUtc”: “\\/Date(1634588500706)\\/”,\n│ ├── “Attributes”: 17,\n│ ├── “PSPath”: “Microsoft.PowerShell.Core\\\\FileSystem::C:\\\\Users\\\\Administrator\\\\Desktop”,\n│ ├── “PSParentPath”: “Microsoft.PowerShell.Core\\\\FileSystem::C:\\\\Users\\\\Administrator”,\n│ ├── “PSChildName”: “Desktop”,\n│ ├── “PSDrive”: “C”,\n│ ├── “PSProvider”: “Microsoft.PowerShell.Core\\\\FileSystem”,\n│ ├── “PSIsContainer”: true,\n│ ├── “Mode”: “d-r—”,\n│ ├── “BaseName”: “Desktop”,\n│ ├── “Target”: “”,\n│ ├── “LinkType”: null\n│ ├── },\n│ ├── {\n│ ├── “Name”: “Documents”,\n│ ├── “Parent”: “Administrator”,\n│ ├── “Exists”: true,\n│ ├── “Root”: “C:\\\\”,\n│ ├── “FullName”: “C:\\\\Users\\\\Administrator\\\\Documents”,\n│ ├── “Extension”: “”,\n│ ├── “CreationTime”: “\\/Date(1633091610981)\\/”,\n│ ├── “CreationTimeUtc”: “\\/Date(1633091610981)\\/”,\n│ ├── “LastAccessTime”: “\\/Date(1637588960280)\\/”,\n│ ├── “LastAccessTimeUtc”: “\\/Date(1637588960280)\\/”,\n│ ├── “LastWriteTime”: “\\/Date(1637588960280)\\/”,\n│ ├── “LastWriteTimeUtc”: “\\/Date(1637588960280)\\/”,\n│ ├── “Attributes”: 17,\n│ ├── “PSPath”: “Microsoft.PowerShell.Core\\\\FileSystem::C:\\\\Users\\\\Administrator\\\\Documents”,\n│ ├── “PSParentPath”: “Microsoft.PowerShell.Core\\\\FileSystem::C:\\\\Users\\\\Administrator”,\n│ ├── “PSChildName”: “Documents”,\n│ ├── “PSDrive”: “C”,\n│ ├── “PSProvider”: “Microsoft.PowerShell.Core\\\\FileSystem”,\n│ ├── “PSIsContainer”: true,\n│ ├── “Mode”: “d-r—”,\n│ ├── “BaseName”: “Documents”,\n│ ├── “Target”: “”,\n│ ├── “LinkType”: null\n│ ├── },\n│ └── …\n├── Exit Code:{ 0 }\n└── Extracted Parameters:{ 1 }/\n└── Test:[ 11 ]/\n└── Object:{ 20 }/\n├── Attributes:17\n├── BaseName:Contacts\n├── CreationTime:/Date(1633091626520)/\n├── CreationTimeUtc:/Date(1633091626520)/\n├── Exists:true\n├── FullName:C:\\Users\\Administrator\\Contacts\n├── LastAccessTime:/Date(1633091626520)/\n└── LastAccessTimeUtc:/Date(1633091626520)/\n…\nThe following is a sample code view:\n{\n“Catalog”: {\n“Moid”: “5c350f48696f6e2d3121feec”,\n“ObjectType”: “workflow.Catalog”,\n“link”: “https://www.intersight.com/api/v1/workflow/Catalogs/5c350f48696f6e2d3121feec\"\n},\n“DefaultVersion”: true,\n“Description”: “”,\n“InputDefinition”: [\n{\n“CustomDataTypeProperties”: {\n“CatalogMoid”: “”,\n“CustomDataTypeId”: “”,\n“CustomDataTypeName”: “”,\n“ObjectType”: “workflow.CustomDataProperty”\n},\n“Default”: {\n“IsValueSet”: false,\n“ObjectType”: “workflow.DefaultValue”,\n“Override”: false,\n“Value”: null\n},\n“Description”: “The PowerShell endpoint on which the script is to be executed. PowerShell Remoting must be enabled on the endpoint to allow for scripts to be executed remotely.\\n”,\n“DisplayMeta”: {\n“InventorySelector”: true,\n“ObjectType”: “workflow.DisplayMeta”,\n“WidgetType”: “Dropdown”\n},\n“InputParameters”: null,\n“IsArray”: false,\n“Label”: “External Target”,\n“Max”: 0,\n“Min”: 0,\n“Name”: “Target”,\n“ObjectType”: “workflow.TargetDataType”,\n“Properties”: [\n{\n“ConnectorAttribute”: “”,\n“ConstraintAttributes”: [],\n“DisplayAttributes”: [\n“Name”,\n“TargetType”\n],\n“ObjectType”: “workflow.TargetProperty”,\n“Selector”: “/api/v1/asset/Targets?$filter=(TargetType eq PowerShellEndpoint and Status eq Connected)”,\n“SelectorProperty”: {\n“Body”: null,\n“Method”: “GET”,\n“ObjectType”: “workflow.SelectorProperty”\n},\n“SupportedObjects”: [\n“asset.Target”\n]\n}\n],\n“Required”: true\n}\n],\n“InputParameterSet”: [],\n“Label”: “Example1PowerShell”,\n“Name”: “Example1PowerShell”,\n“OutputDefinition”: [],\n“OutputParameters”: null,\n“Properties”: {\n“Cloneable”: true,\n“EnableDebug”: false,\n“ExternalMeta”: true,\n“ObjectType”: “workflow.WorkflowProperties”,\n“Retryable”: false,\n“SupportStatus”: “Supported”\n},\n“Tags”: [],\n“Tasks”: [\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “StartTask”,\n“NextTask”: “InvokePowerShellScript1”,\n“ObjectType”: “workflow.StartTask”\n},\n{\n“CatalogMoid”: “5c2fc884696f6e2d316c5d59”,\n“Description”: “Executes the given PowerShell script against the given PowerShell endpoint. The endpoint is typically a windows\\nmachine with PowerShell Remoting enabled to allow for scripts to be executed remotely. The task connects to the\\nPowerShell endpoint using the WinRM protocol.\\n”,\n“InputParameters”: {\n“OperationTimeout”: 60,\n“ResponseParser”: {\n“Depth”: 1,\n“EnableJsonParser”: “Enable”,\n“JsonParameters”: [\n{\n“Name”: “Dir”,\n“Path”: “$”,\n“Type”: “string”\n}\n],\n“ResponseType”: “json”\n},\n“Script”: {\n“Text”: “get-childitem”\n},\n“Target”: “${workflow.input.Target}”\n},\n“Label”: “Invoke PowerShell Script”,\n“Name”: “InvokePowerShellScript1”,\n“ObjectType”: “workflow.WorkerTask”,\n“OnFailure”: “”,\n“OnSuccess”: “SuccessEndTask”,\n“RollbackDisabled”: false,\n“TaskDefinitionId”: “617913dd696f6e2d30bf346a”,\n“TaskDefinitionName”: “InvokePowerShellScript”,\n“UseDefault”: false,\n“Version”: 1\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “FailureEndTask”,\n“ObjectType”: “workflow.FailureEndTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “SuccessEndTask”,\n“ObjectType”: “workflow.SuccessEndTask”\n}\n],\n“UiInputFilters”: [],\n“UiRenderingData”: {\n“Positions”: [\n{\n“Name”: “StartTask”,\n“X”: 10,\n“Y”: 18.5\n},\n{\n“Name”: “SuccessEndTask”,\n“X”: 199.33338273233647,\n“Y”: 381.4409231740322\n},\n{\n“Name”: “FailureEndTask”,\n“X”: 462.33337796396506,\n“Y”: 365.6328414754678\n},\n{\n“Name”: “InvokePowerShellScript1”,\n“X”: 178.5,\n“Y”: 117\n}\n]\n},\n“Version”: 1,\n“WorkflowMetadata”: null\n}\nExample 2: Create a workflow to run a PowerShell Script task to install an Internet Information Services (IIS) web server and create a sample website\nThe following example workflow has two PowerShell script tasks. The first task installs the IIS web server on the PowerShell target endpoint. The second task connects to the same PowerShell endpoint target and creates a sample website.\nThe workflow input field required for this example are as follows:\nWorkflow Input\rInput Fields\rExternal Target\rReference Name—Target\nType—Target Data Type\nIntersight API Reference—/api/v1/asset/Targets?$filter=(TargetType eq PowerShellEndpoint and Status eq Connected)\nName\nTarget Type\nRole or Feature Name\rReference Name—RoleorFeatureName\nType—String\nWebsite Name\rReference Name—WebsiteName\nType—String\nThe following table lists the PowerShell Script task properties for installing the IIS web server :\nProperty\rDescription\rExternal Target\rThe target on which the PowerShell Script task is executed.\n${workflow.input.Target}\nScript\r\u003eInstall-WindowsFeature -name Web-Server -IncludeManagementTools\nStatic Value\n#Install role or feature\nWrite-Output 'Installing \"{{.global.workflow.input.RoleorFeatureName}}\" Feature'\nInstall-WindowsFeature -Name \"{{.global.workflow.input.RoleorFeatureName}}\" -IncludeManagementTools\nTimeout\rStatic Value—15060 sec\rResponse Parser\rResponse Type—JSON\nDepth—1\nEnable JSON Parsing—Enable\nJSON Parser Parameters\nPath—$.Success\nName—Installation Succeeded\nType—String\nThe following table lists the PowerShell script task properties for creating a sample website:\nProperty\rDescription\rExternal Target\rThe target on which the PowerShell Script task is executed.\n${workflow.input.Target}\nScript\rStatic Value\n#Create website content\n$site = \"{{.global.workflow.input.WebsiteName}}\"\nNew-Item -ItemType Directory -Name 'MyWebsite' -Path 'C:\\'\nNew-Item -ItemType File -Name 'index.html' -Path 'C:\\MyWebsite\\'\nGet-Service | ConvertTo-Html -As LIST | Out-File C:\\MyWebsite\\index.html\n#Create a new site\nNew-IISSite -Name $site -PhysicalPath 'C:\\MyWebsite\\' -BindingInformation \"*:8088:\"\nGet-IISSite | where Name -Contains $site | Format-Table -Property Name,State\nTimeout\rStatic Value—10060 sec\rResponse Parser\rResponse Type—Text\nDepth—1\nEnable Text Parsing—Enable\nText Parser Parameters\nRegular Expression—^demo+\\s$\u003cSiteState\u003e\nName—SiteState\nType—String\nAfter you execute the workflow, the task output is:\n#Invoke PowerShell Script\n…\n├── Inputs /\n│ ├── Script:{ 1 }/\n│ │ Text:#Install role or feature\n│ │ Write-Output ‘Installing “Web-Server” Feature’\n│ │ Install-WindowsFeature -Name “Web-Server” -IncludeManagementTools\n│ ├── Timeout:150\n│ ├── Response Parser:{ 4 }/\n│ │ ├── Depth: 1\n│ │ └── Enable JSON Parsing:Enable/\n│ │ ├── JSON Parser Parameters:[ 1 ]/\n│ │ │ └── Object:{ 3 }/\n│ │ │ ├── Name:Installation Succeeded\n│ │ │ ├── Path:$.Success\n│ │ │ └── Type:string\n│ │ └── Response Type:json\n│ └── External Target:{ 2 }/\n│ ├── Moid:61a5f99c6f72612d30b1e4bf\n│ └── ObjectType:asset.Target\n└── Outputs/\n├── ConfigResults:[ 1 ]/\n│ ├── Object:{ 3 }/\n│ │ └── ConfigResCtx:{ 1 }/\n│ │ └── EntityData:{ 1 }/\n│ │ └── task:workflow.PowerShellApiTask\n│ ├── State:Ok\n│ └── Type:Config\n├── Response:Installing “Web-Server” Feature/\n│ {\n│ “Success”: true,\n│ “RestartNeeded”: 1,\n│ “FeatureResult”: [\n│ “Common HTTP Features”,\n│ “Default Document”,\n│ “Directory Browsing”,\n│ “Request Filtering”,\n│ “Health and Diagnostics”,\n│ “HTTP Errors”,\n│ “HTTP Logging”,\n│ “IIS Management Console”,\n│ “Management Tools”,\n│ “Performance”,\n│ “Security”,\n│ “Web Server (IIS)”,\n│ “Static Content Compression”,\n│ “Static Content”,\n│ “Web Server”\n│ ],\n│ “ExitCode”: 0\n│ }\n└── Exit Code:{ 0 }\n#Invoke PowerShell Script\n…\n.\n└── Inputs/\n├── Script:{ 1 }/\n│ Text:#Create website content\n│ $site = “demo”\n│ New-Item -ItemType Directory -Name ‘MyWebsite’ -Path ‘C:\\’\n│ New-Item -ItemType File -Name ‘index.html’ -Path ‘C:\\MyWebsite\\’\n│ Get-Service | ConvertTo-Html -As LIST | Out-File C:\\MyWebsite\\index.html\n│ #Create a new site\n│ New-IISSite -Name $site -PhysicalPath ‘C:\\MyWebsite\\’ -BindingInformation “*:8088:”\n│ Get-IISSite | where Name -Contains $site | Format-Table -Property Name,State\n├── Timeout:100\n└── Response Parser:{ 3 }/\n├── Enable Text Parsing:Enable\n├── Response Type:text\n├── Text Parser Parameters:[ 1 ]/\n│ └── Object:{ 3 }/\n│ ├── Name:SiteState\n│ ├── RegexLine:^demo+\\s$\u003cSiteState\u003e\n│ └── Type:string\n├── External Target:{ 2 }/\n│ ├── Moid:61a5f99c6f72612d30b1e4bf\n│ └── ObjectType:asset.Target\n└── Outputs/\n├── ConfigResults:[ 1 ]/\n│ └── Object:{ 3 }/\n│ ├── ConfigResCtx:{ 1 }/\n│ │ └── EntityData:{ 1 }/\n│ │ └── task:workflow.PowerShellApiTask\n│ ├── State:Ok\n│ └── Type:Config\n├── Response:Directory: C:\\/\n│ Mode LastWriteTime Length Name\n│ —- ————- —— —-\n│ d—– 12/1/2021 11:43 AM MyWebsite\n│ Directory: C:\\MyWebsite\n│ Mode LastWriteTime Length Name\n│ —- ————- —— —-\n│ -a—- 12/1/2021 11:43 AM 0 index.html\n│ Name State\n│ —- —–\n│ demo Started\n├── Exit Code:{ 0 }\n└── Extracted Parameters:{ 1 }/\n└── SiteState:Started\nThe following is a sample code view:\n{\n“Catalog”: {\n“Moid”: “6166bf80696f6e2d30f796b7”,\n“ObjectType”: “workflow.Catalog”,\n“link”: “https://www.intersight.com/api/v1/workflow/Catalogs/6166bf80696f6e2d30f796b7\"\n},\n“DefaultVersion”: true,\n“Description”: “”,\n“InputDefinition”: [\n{\n“CustomDataTypeProperties”: {\n“CatalogMoid”: “”,\n“CustomDataTypeId”: “”,\n“CustomDataTypeName”: “”,\n“ObjectType”: “workflow.CustomDataProperty”\n},\n“Default”: {\n“IsValueSet”: false,\n“ObjectType”: “workflow.DefaultValue”,\n“Override”: false,\n“Value”: null\n},\n“Description”: “The PowerShell endpoint on which the script is to be executed. PowerShell Remoting must be enabled on the endpoint to allow for scripts to be executed remotely.\\n”,\n“DisplayMeta”: {\n“InventorySelector”: true,\n“ObjectType”: “workflow.DisplayMeta”,\n“WidgetType”: “Dropdown”\n},\n“InputParameters”: null,\n“IsArray”: false,\n“Label”: “External Target”,\n“Max”: 0,\n“Min”: 0,\n“Name”: “Target”,\n“ObjectType”: “workflow.TargetDataType”,\n“Properties”: [\n{\n“ConnectorAttribute”: “”,\n“ConstraintAttributes”: [],\n“DisplayAttributes”: [\n“Name”,\n“TargetType”\n],\n“ObjectType”: “workflow.TargetProperty”,\n“Selector”: “/api/v1/asset/Targets?$filter=(TargetType eq PowerShellEndpoint and Status eq Connected)”,\n“SelectorProperty”: {\n“Body”: null,\n“Method”: “GET”,\n“ObjectType”: “workflow.SelectorProperty”\n},\n“SupportedObjects”: [\n“asset.Target”\n]\n}\n],\n“Required”: true\n},\n{\n“Default”: {\n“IsValueSet”: false,\n“ObjectType”: “workflow.DefaultValue”,\n“Override”: false,\n“Value”: null\n},\n“Description”: “Role or Feature Name”,\n“DisplayMeta”: {\n“InventorySelector”: true,\n“ObjectType”: “workflow.DisplayMeta”,\n“WidgetType”: “None”\n},\n“InputParameters”: null,\n“Label”: “Role or Feature Name”,\n“Name”: “RoleorFeatureName”,\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Properties”: {\n“Constraints”: {\n“EnumList”: [],\n“Max”: 0,\n“Min”: 0,\n“ObjectType”: “workflow.Constraints”,\n“Regex”: \"”\n},\n“InventorySelector”: [],\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Secure”: false,\n“Type”: “string”\n},\n“Required”: false\n},\n{\n“Default”: {\n“IsValueSet”: false,\n“ObjectType”: “workflow.DefaultValue”,\n“Override”: false,\n“Value”: null\n},\n“Description”: “Website Name”,\n“DisplayMeta”: {\n“InventorySelector”: true,\n“ObjectType”: “workflow.DisplayMeta”,\n“WidgetType”: “None”\n},\n“InputParameters”: null,\n“Label”: “Website Name”,\n“Name”: “WebsiteName”,\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Properties”: {\n“Constraints”: {\n“EnumList”: [],\n“Max”: 0,\n“Min”: 0,\n“ObjectType”: “workflow.Constraints”,\n“Regex”: \"”\n},\n“InventorySelector”: [],\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Secure”: false,\n“Type”: “string”\n},\n“Required”: false\n}\n],\n“InputParameterSet”: [],\n“Label”: “PowerShellExample2”,\n“Name”: “PowerShellExample2”,\n“OutputDefinition”: [],\n“OutputParameters”: null,\n“Properties”: {\n“Cloneable”: true,\n“EnableDebug”: false,\n“ExternalMeta”: true,\n“ObjectType”: “workflow.WorkflowProperties”,\n“Retryable”: false,\n“SupportStatus”: “Supported”\n},\n“Tags”: [],\n“Tasks”: [\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “StartTask”,\n“NextTask”: “InvokePowerShellScript1”,\n“ObjectType”: “workflow.StartTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “SuccessEndTask”,\n“ObjectType”: “workflow.SuccessEndTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “FailureEndTask”,\n“ObjectType”: “workflow.FailureEndTask”\n},\n{\n“CatalogMoid”: “6166bf7f696f6e2d30f796a6”,\n“Description”: “Executes the given PowerShell script against the given PowerShell endpoint. The endpoint is typically a windows\\nmachine with PowerShell Remoting enabled to allow for scripts to be executed remotely. The task connects to the\\nPowerShell endpoint using the WinRM protocol.\\n”,\n“InputParameters”: {\n“OperationTimeout”: 150,\n“ResponseParser”: {\n“Depth”: 1,\n“EnableJsonParser”: “Enable”,\n“JsonParameters”: [\n{\n“Name”: “Installation Succeeded “,\n“Path”: “$.Success”,\n“Type”: “string”\n}\n],\n“ResponseType”: “json”\n},\n“Script”: {\n“Text”: “#Install role or feature\\r\\nWrite-Output ‘Installing \\”{{.global.workflow.input.RoleorFeatureName}}\\” Feature’\\r\\nInstall-WindowsFeature -Name \\”{{.global.workflow.input.RoleorFeatureName}}\\\" -IncludeManagementTools\"\n},\n“Target”: “${workflow.input.Target}”\n},\n“Label”: “Invoke PowerShell Script”,\n“Name”: “InvokePowerShellScript1”,\n“ObjectType”: “workflow.WorkerTask”,\n“OnFailure”: “”,\n“OnSuccess”: “InvokePowerShellScript2”,\n“RollbackDisabled”: false,\n“TaskDefinitionId”: “616e70f8696f6e2d30355005”,\n“TaskDefinitionName”: “InvokePowerShellScript”,\n“UseDefault”: false,\n“Version”: 1\n},\n{\n“CatalogMoid”: “6166bf7f696f6e2d30f796a6”,\n“Description”: “Executes the given PowerShell script against the given PowerShell endpoint. The endpoint is typically a windows\\nmachine with PowerShell Remoting enabled to allow for scripts to be executed remotely. The task connects to the\\nPowerShell endpoint using the WinRM protocol.\\n”,\n“InputParameters”: {\n“OperationTimeout”: 100,\n“ResponseParser”: {\n“EnableTextParser”: “Enable”,\n“ResponseType”: “text”,\n“TextParameters”: [\n{\n“Name”: “SiteState”,\n“RegexLine”: “^demo+\\\\s$\u003cSiteState\u003e”,\n“Type”: “string”\n}\n]\n},\n“Script”: {\n“Text”: “#Create website content\\r\\n$site = \\”{{.global.workflow.input.WebsiteName}}\\\"\\r\\nNew-Item -ItemType Directory -Name ‘MyWebsite’ -Path ‘C:\\\\’\\r\\nNew-Item -ItemType File -Name ‘index.html’ -Path ‘C:\\\\MyWebsite\\\\’\\r\\nGet-Service | ConvertTo-Html -As LIST | Out-File C:\\\\MyWebsite\\\\index.html\\r\\n#Create a new site\\r\\nNew-IISSite -Name $site -PhysicalPath ‘C:\\\\MyWebsite\\\\’ -BindingInformation \\\"*:8088:\\\"\\r\\nGet-IISSite | where Name -Contains $site | Format-Table -Property Name,State\"\n},\n“Target”: “${workflow.input.Target}”\n},\n“Label”: “Invoke PowerShell Script”,\n“Name”: “InvokePowerShellScript2”,\n“ObjectType”: “workflow.WorkerTask”,\n“OnFailure”: “”,\n“OnSuccess”: “SuccessEndTask”,\n“RollbackDisabled”: false,\n“TaskDefinitionId”: “616e70f8696f6e2d30355005”,\n“TaskDefinitionName”: “InvokePowerShellScript”,\n“UseDefault”: false,\n“Version”: 1\n}\n],\n“UiInputFilters”: [],\n“UiRenderingData”: {\n“Positions”: [\n{\n“Name”: “StartTask”,\n“X”: 10,\n“Y”: 18\n},\n{\n“Name”: “SuccessEndTask”,\n“X”: 10,\n“Y”: 692\n},\n{\n“Name”: “FailureEndTask”,\n“X”: 152,\n“Y”: 692\n},\n{\n“Name”: “InvokePowerShellScript1”,\n“X”: 72.5,\n“Y”: 182\n},\n{\n“Name”: “InvokePowerShellScript2”,\n“X”: 116,\n“Y”: 323\n}\n]\n},\n“Version”: 1,\n“WorkflowMetadata”: null\n}\nExecutors – Invoke Ansible Playbook - Embedded Task\nIntersight Cloud Orchestrator allows workflow designers to run Ansible Playbook on the Ansible Controller node using the Invoke Ansible Playbook embedded task in the workflow. The Invoke Ansible Playbook task is an out-of-box solution that allows you to automate Ansible operations on the Ansible Controller node that is added as an Ansible Endpoint target in Cisco Intersight. This feature allows a workflow designer to extend the automation capabilities of the workflow engine beyond what is natively available in the task library and interact with the Ansible Controller node target.\nFor more inforormation on Invoke Ansible Playbook - Reusable Task, see Invoke Ansible Playbook - Reusable Task.\nSupported Targets\nThe Invoke Ansible Playbook task can be run only on the targets that are added as an Ansible Endpoint target type in Cisco Intersight.\nThe Invoke Ansible Playbook task is executed as an orchestrator task and does not include the management of the Ansible Controller node.\nTo run the Ansible Playbook task on the Ansible Controller node from Cisco Intersight, ensure that:\nThe Ansible target is reachable through Intersight Assist when hosted on the customer premises.\nThe Ansible Playbook modules and Ansible Playbook executables required to run the playbooks are already installed on the Ansible Controller node.\nThe Ansible Controller node has password-less SSH access to the hosts.\nThe Ansible Controller node can resolve the endpoint hostnames if the Ansible Host Inventory file specifies the hostnames.\nFor more information on Intersight Target Claim, see Target Claim Using Intersight Assist.\nUsing the Executor Ansible Playbook task\nUse the Invoke Ansible Playbook from the Executors section in the Intersight Orchestrator Workflow Designer UI to create a request for an Ansible Playbook target.\nThe following table explains the task Input properties:\nProperty\rDescription\rAnsible Controller\rThe target on which the Ansible Playbook task is run.\nThe Ansible Playbook target must be in the Connected state.\nStatic Value—Click Select External Target to select an Ansible endpoint target from Cisco Intersight target inventory.\nDirect Mapping—Select an existing workflow input or Task output field.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the task input.\nPlaybook Path\rThe path of the Ansible Playbook file that resides on the Ansible Controller node added as Ansible Endpoint target in Intersight.\nStatic Value—The path of the Ansible Playbook.\nDirect Mapping—Select an existing workflow input or Task output field.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nHost Inventory\rThe path of the host inventory file that resides on the Ansible Controller or a comma-separated list of hosts on which the Ansible Playbook task is run.\nStatic Value—The path of the host inventory file that resides on the Ansible Controller or a comma-separated list of hosts.\nFor example, you can enter the hostname as root@10.10.10.10,\nNote: The hostname must be suffixed with a comma (,).\nDirect Mapping—Select the path from the Workflow input or Task output.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nCommand Timeout\rThe command timeout in seconds for the execution of the Ansible Playbook. The range is 10 to 7200 seconds.\nThe default timeout is 600 seconds.\nStatic Value—The command timeout in seconds.\nDirect Mapping—Select the command timeout from the Workflow input or Task output.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nCommand Line Argument\rThe optional command line arguments required to run the Ansible playbook.\nStatic Value—The command line argument.\nDirect Mapping—Select the input from the Workflow input or Task output.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nEscape character backslash(\\) needs to be used when the command line arguments contain double quotes(\").\nNote: For Invoke Ansible Playbook - Reusable Task, escape character backslash(\\) is not necessary when the command line arguments contain double quotes(\").\nThe following command line options are not supported by the Ansible Playbook task.\n-vvv\n-vvvv\n-k, -K\n-c\n--connection\n--sftp-extra-args\n--scp-extra-args\n--ask-vault-password\n--step\nFor information on the available command line arguments, see https://docs.ansible.com/ansible/latest/cli/ansible-playbook.html.\nThe following table explains the task Output properties:\nProperty\rDescription\rExit Code\rThe exit code after the execution of the Ansible Playbook against the given endpoint.\rExecution Summary\rThe summary after the execution of Ansible Playbook against the given endpoint.\rExecution Log Path\rThe Ansible execution log path on the Ansible Control node after the execution of Ansible Playbook against the given endpoint.\rTemplate Parameters\nThe request body template can refer to values from workflow inputs, previous task outputs, or implicit parameters. The following table explains the template parameters.\nPrefix/Format\rDescription\r{{.global.workflow.input.\u003cParameterName\u003e}}\rWorkflow input reference.\r{{.global.\u003cTaskRefName\u003e.output.\nParameters.\u003cParameterName\u003e}}\rPrevious task output reference. TaskRefName is the name of the previous task having output ParameterName.\r{{.security.AccountMoid}}\rImplicit parameter reference to Account MoID under which the workflow is running.\r{{.security.OrganizationMoid}}\rImplicit parameter reference to Organization MoID under which the workflow is running.\rTemplate Functions\nThe template engine has in-built functions to transform values before they are populated in the request templates. The following table explains the functions supported in Invoke Ansible Playbook task.\nFunction\rDescription\rTrimSpace\rReturns a string after removing whitespaces from a the string.\nExample:\n{{TrimSpace .global.workflow.input.HostName}}\nContainsString\rReturns a boolean if a substring is present in a given string.\nExample:\n{{if (ContainsString .global.workflow.input.SizeAsString \\”MB\\”)}}Mega Bytes{{else}}Bytes{{end}}\nFindAllString\rReturns a slice of substrings matching the regular expression in a given string.\nExample:\n{{(FindAllString .global.workflow.input.NumberString \\”([0-9]+)\\”)}}\nThe above example returns array [“123”, “456”] for input string “123 some text 456.”\nToJson\rConverts a value to a JSON format.\nExample:\n{{(FindAllString .global.workflow.input.NumberString \\\"([0-9]+)\\\") | ToJson}}\nThe above example returns JSON array literal [“123”, “456”] for input string “123 some text 456.”\nAsArray\rTakes in an element and returns an array of one element.\nExample:\n{{AsArray .global.workflow.output.serverMo}}\nThe above example returns an array of one server Mo.\nSubstring\rReturns a substring within the given index bounds.\nExample:\n{{Substring .global.workflow.input.StorageId 2 6}}\nThe above example returns “ABCD” for string “12ABCD3456.”\nIpToCidr\rReturns the classless inter-domain routing (CIDR) notation of an IPv4 address and subnet mask.\nExample:\n{{IpToCidr .global.workflow.input.Ip .global.workflow.input.Netmask}}\nThe above example returns “10.10.10.10/24” for the input parameters “10.10.10.10” and “255.255.255.0.”\nLookupInSlice\rChecks if a given value is present in given slice or array and returns true if it exists. This function can be used for any value.\nExample:\n{{LookupInSlice .global.workflow.input.IpAddressList \\”10.10.10.10\\”}}\nThe above example returns true for input [”10.10.10.10”, “20.20.20.20”].\nIndex\rReturns a value from an array when an input index exists.\nExample:\n{{ index .global.workflow.input.nodes .global.workflow.input.idx }} In the above example, if nodes is an array of devices and idx is 2, the index function returns the second device in the array.\nItob\rConverts an integer to a boolean.\nExample:\n{{ Itob global.workflow.input.OnOffFlip }} The above example returns true and false for inputs 1 and 0 respectively.\nItoa\rConverts a given number to a string value.\nExample:\n{{ Itoa global.workflow.input.Port }} The above example returns “12345” for input 12345.\nItof\rConverts a given integer to a float value.\nExample:\n{{ Itof global.workflow.input.Rate }}\nThe above example returns 15.0 for an input 15.\nBtoa\rConverts a given boolean to a string value.\nExample:\n{{ Btoa global.workflow.input.OnOffFlip }}\nThe above example returns “true” for input true.\nBtoi\rConverts a given boolean to a integer value.\nExample:\n{{ Btoi global.workflow.input.OnOffFlip }}\nThe above example returns 1 and 0 for inputs true and false respectively.\nAtob\rConverts the given string into a Boolean value.\nExample:\n{{ Atob global.workflow.input.OnOffFlip }}Returns true for input “true”\nAtoi\rConverts a given number in string format to the integer type.\nExample:\n{{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”\nFtoa\rConverts a given number into the string form based on the given precision.\nExample:\n{{Ftoa .global.task.input.Size 2}} returns the following output: 123.456 =\u003e “123.45”, 1028 =\u003e “1028.00”\nFtoi\rConverts a given float input to a integer value.\nExample:\n{{ Ftoi global.workflow.input.Rate }}\nThe above example returns 15 for an input 15.833.\nEval\rSupports an expression evaluation function. The below example returns 2GB for a input value of 2048. Note that the second argument is passed as ‘.’ in the template, which represents the map of all parameters.\n{{Eval \\\"{{.global.workflow.input.Size}} / 1024\\\" .}}GB\nTemplate Engine Syntax\nThe template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements\nThe comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}}\nConditional Statements\nThe template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \u003ccomparision_statement\u003e}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else if \u003ccomparision_statement}} Tempalte to be used {{end}}\nAnsible Playbook Task Example\nExample: Create a workflow to run Ansible Playbook task to install Nginx on the hosts\nThe following example workflow has two tasks—Ansible Playbook and SSH Command tasks. The first task runs the Ansible Playbook on a controller and installs Nginx on host nodes. In this task, the Playbook Path, Host Inventory, Sudo Password, and other inputs are provided by the workflow input fields. The second task, SSH Command, connects to the Ansible endpoint target over SSH and verifies the Ansible logs.\nThe workflow input fields required for this example are as follows:\nWorkflow Input\rInput Fields\rInstall Package\rReference Name—InstallPackage\nType—String\nHost Inventory\rReference Name—HostInventory\nType—String\nSudoPassword\rReference Name—SudoPassword\nType—String\nSecure option is selected. The values of these properties are encrypted and stored in Intersight.\nCommand Line Arguments\rReference Name—CommandLineArguments\nType—String\nThe following table lists the Ansible Playbook task properties:\nProperty\rDescription\rAnsible Controller\rThe target on which the Ansible Playbook task is executed.\rPlaybook Path\rStatic Value—${workflow.input.InstallPackage}\rHost Inventory\rStatic Value—${workflow.input.HostInventory}\rCommand Timeout\rDefault value.\rCommand Line Argument\rStatic Value—${workflow.input.CommandLineArguments}\rThe following table displays the SSH command task properties:\nProperty\rDescription\rExternal Target\rThe Ansible Controller VM that is used in the previous task.\rSSH Command\rCommand—cat {{.global.InvokeAnsiblePlaybook1.output.ExecutionLogPath}}\nIn the above example, InvokeAnsiblePlaybook1 is the task reference name of the previous task. To determine the task reference name, navigate to the Code view. For example:\n\"Tasks\": ...\n\"Description\": \"Executes Ansible Playbook against the given endpoint. This task can be executed on targets added as Ansible Endpoint in Intersight.\\n\",\n\"Label\": \"Invoke Ansible Playbook - Install Package\",\n\"Name\": \"InvokeAnsiblePlaybook1\",\n...\nCommand Timeout\rDefault value.\rExpected Exit Codes\rDefault value.\rShow Command Output\rSelect Show Command Option check box.\rResponse Parser\rNode 1\nRegular Expression— 10.106.*?\\\"changed\\\":.*?\\\"stderr\\\":\\s\\\"$\u003cVersionOnNode1\u003e\\\",\nName—VersionOnNode1\nType String\nNode 2\nRegular Expression—10.106.*?\\\"changed\\\":.*?\\\"stderr\\\":\\s\\\"$\u003cVersionOnNode2\u003e\\\",\nName—VersionOnNode2\nType—String\nAfter you execute the workflow, you would see the following output:\n.\n├── ConfigResults: [ 1 ]\n├── Object: { 3 }\n│ └── ConfigResCtx: { 1 }\n│ ├── EntityData: { 1 }\n│ │ └── task: workflow.SshTask\n│ ├── State: Ok\n│ └── Type: Config\n├── Command Output:\n│ ├── 2021-10-30 04:22:59,999 p=512757 u=qali n=ansible | Using /etc/ansible/ansible.cfg as config file\n│ ├── 2021-10-30 04:23:00,224 p=512757 u=qali n=ansible | PLAY [Install nginx] ***********************************************************\n│ ├── 2021-10-30 04:23:00,237 p=512757 u=qali n=ansible | TASK [Gathering Facts] *********************************************************\n│ ├── 2021-10-30 04:23:01,801 p=512757 u=qali n=ansible | ok: [guest@10.10.10.1]\n│ ├── 2021-10-30 04:23:02,033 p=512757 u=qali n=ansible | ok: [root@10.10.10.2]\n│ ├── 2021-10-30 04:23:02,042 p=512757 u=qali n=ansible | TASK [Add epel-release repo] ***************************************************\n│ ├── 2021-10-30 04:23:03,060 p=512757 u=qali n=ansible | ok: [guest@10.10.10.1] =\u003e {“changed”: false, “msg”: “\", “rc”: 0, “results”: [“epel-release-7-12.noarch providing epel-release is already installed”]}\n│ ├── 2021-10-30 04:23:27,036 p=512757 u=qali n=ansible | ok: [root@10.10.10.2] =\u003e {“changed”: false, “msg”: “Nothing to do”, “rc”: 0, “results”: []}\n│ ├── 2021-10-30 04:23:27,042 p=512757 u=qali n=ansible | TASK [Install nginx] ***********************************************************\n│ ├── 2021-10-30 04:23:27,887 p=512757 u=qali n=ansible | ok: [guest@10.10.10.1] =\u003e {“changed”: false, “msg”: “\", “rc”: 0, “results”: [“1:nginx-1.20.1-9.el7.x86_64 providing nginx is already installed”]}\n│ ├── 2021-10-30 04:23:29,534 p=512757 u=qali n=ansible | ok: [root@10.10.10.2] =\u003e {“changed”: false, “msg”: “Nothing to do”, “rc”: 0, “results”: []}\n│ ├── 2021-10-30 04:23:29,541 p=512757 u=qali n=ansible | TASK [Nginx Version] ***********************************************************\n│ ├── 2021-10-30 04:23:30,086 p=512757 u=qali n=ansible | changed: [guest@10.10.10.1] =\u003e {“changed”: true, “cmd”: [“nginx”, “-v”], “delta”: “0:00:00.006230”, “end”: “2021-10-29 05:52:52.465579”, “rc”: 0, “start”: “2021-10-29 05:52:52.459349”, “stderr”: “nginx version: nginx/1.20.1”, “stderr_lines”: [“nginx version: nginx/1.20.1”], “stdout”: “\", “stdout_lines”: []}\n│ ├── 2021-10-30 04:23:30,236 p=512757 u=qali n=ansible | changed: [root@10.10.10.2] =\u003e {“changed”: true, “cmd”: [“nginx”, “-v”], “delta”: “0:00:00.005168”, “end”: “2021-10-29 06:04:28.863644”, “rc”: 0, “start”: “2021-10-29 06:04:28.858476”, “stderr”: “nginx version: nginx/1.14.1”, “stderr_lines”: [“nginx version: nginx/1.14.1”], “stdout”: “\", “stdout_lines”: []}\n│ ├── 2021-10-30 04:23:30,248 p=512757 u=qali n=ansible | TASK [Start NGiNX] *************************************************************\n│ ├── 2021-10-30 04:23:31,043 p=512757 u=qali n=ansible | ok: [guest@10.10.10.1] =\u003e {“changed”: false, “name”: “nginx”, “state”: “started”, “status”: {“ActiveEnterTimestamp”: “Wed 2021-10-27 09:20:15 EDT”, “ActiveEnterTimestampMonotonic”: “24390544004045”, “ActiveExitTimestampMonotonic”: “0”, “ActiveState”: “active”, “After”: “remote-fs.target nss-lookup.target systemd-journald.socket basic.target system.slice -.mount tmp.mount network-online.target”, “AllowIsolate”: “no”, “AmbientCapabilities”: “0”, “AssertResult”: “yes”, “AssertTimestamp”: “Wed 2021-10-27 09:20:15 EDT”, “AssertTimestampMonotonic”: “24390543923354”, “Before”: “shutdown.target”, “BlockIOAccounting”: “no”, “BlockIOWeight”: “18446744073709551615”, “CPUAccounting”: “no”, “CPUQuotaPerSecUSec”: “infinity”, “CPUSchedulingPolicy”: “0”, “CPUSchedulingPriority”: “0”, “CPUSchedulingResetOnFork”: “no”, “CPUShares”: “18446744073709551615”, “CanIsolate”: “no”, “CanReload”: “yes”, “CanStart”: “yes”, “CanStop”: “yes”, “CapabilityBoundingSet”: “18446744073709551615”, “ConditionResult”: “yes”, “ConditionTimestamp”: “Wed 2021-10-27 09:20:15 EDT”, “ConditionTimestampMonotonic”: “24390543923353”, “Conflicts”: “shutdown.target”, “ControlGroup”: “/system.slice/nginx.service”, “ControlPID”: “0”, “DefaultDependencies”: “yes”, “Delegate”: “no”, “Description”: “The nginx HTTP and reverse proxy server”, “DevicePolicy”: “auto”, “ExecMainCode”: “0”, “ExecMainExitTimestampMonotonic”: “0”, “ExecMainPID”: “10910”, “ExecMainStartTimestamp”: “Wed 2021-10-27 09:20:15 EDT”, “ExecMainStartTimestampMonotonic”: “24390544003959”, “ExecMainStatus”: “0”, “ExecReload”: “{ path=/usr/sbin/nginx ; argv[]=/usr/sbin/nginx -s reload ; ignore_errors=no ; start_time=[n/a] ; stop_time=[n/a] ; pid=0 ; code=(null) ; status=0/0 }\", “ExecStart”: “{ path=/usr/sbin/nginx ; argv[]=/usr/sbin/nginx ; ignore_errors=no ; start_time=[Wed 2021-10-27 09:20:15 EDT] ; stop_time=[Wed 2021-10-27 09:20:15 EDT] ; pid=10909 ; code=exited ; status=0 }\", “ExecStartPre”: “{ path=/usr/sbin/nginx ; argv[]=/usr/sbin/nginx -t ; ignore_errors=no ; start_time=[Wed 2021-10-27 09:20:15 EDT] ; stop_time=[Wed 2021-10-27 09:20:15 EDT] ; pid=10905 ; code=exited ; status=0 }\", “FailureAction”: “none”, “FileDescriptorStoreMax”: “0”, “FragmentPath”: “/usr/lib/systemd/system/nginx.service”, “GuessMainPID”: “yes”, “IOScheduling”: “0”, “Id”: “nginx.service”, “IgnoreOnIsolate”: “no”, “IgnoreOnSnapshot”: “no”, “IgnoreSIGPIPE”: “yes”, “InactiveEnterTimestampMonotonic”: “0”, “InactiveExitTimestamp”: “Wed 2021-10-27 09:20:15 EDT”, “InactiveExitTimestampMonotonic”: “24390543931397”, “JobTimeoutAction”: “none”, “JobTimeoutUSec”: “0”, “KillMode”: “process”, “KillSignal”: “3”, “LimitAS”: “18446744073709551615”, “LimitCORE”: “18446744073709551615”, “LimitCPU”: “18446744073709551615”, “LimitDATA”: “18446744073709551615”, “LimitFSIZE”: “18446744073709551615”, “LimitLOCKS”: “18446744073709551615”, “LimitMEMLOCK”: “65536”, “LimitMSGQUEUE”: “819200”, “LimitNICE”: “0”, “LimitNOFILE”: “4096”, “LimitNPROC”: “15066”, “LimitRSS”: “18446744073709551615”, “LimitRTPRIO”: “0”, “LimitRTTIME”: “18446744073709551615”, “LimitSIGPENDING”: “15066”, “LimitSTACK”: “18446744073709551615”, “LoadState”: “loaded”, “MainPID”: “10910”, “MemoryAccounting”: “no”, “MemoryCurrent”: “2322432”, “MemoryLimit”: “18446744073709551615”, “MountFlags”: “0”, “Names”: “nginx.service”, “NeedDaemonReload”: “no”, “Nice”: “0”, “NoNewPrivileges”: “no”, “NonBlocking”: “no”, “NotifyAccess”: “none”, “OOMScoreAdjust”: “0”, “OnFailureJobMode”: “replace”, “PIDFile”: “/run/nginx.pid”, “PermissionsStartOnly”: “no”, “PrivateDevices”: “no”, “PrivateNetwork”: “no”, “PrivateTmp”: “yes”, “ProtectHome”: “no”, “ProtectSystem”: “no”, “RefuseManualStart”: “no”, “RefuseManualStop”: “no”, “RemainAfterExit”: “no”, “Requires”: “-.mount system.slice basic.target”, “RequiresMountsFor”: “/var/tmp”, “Restart”: “no”, “RestartUSec”: “100ms”, “Result”: “success”, “RootDirectoryStartOnly”: “no”, “RuntimeDirectoryMode”: “0755”, “SameProcessGroup”: “no”, “SecureBits”: “0”, “SendSIGHUP”: “no”, “SendSIGKILL”: “yes”, “Slice”: “system.slice”, “StandardError”: “inherit”, “StandardInput”: “null”, “StandardOutput”: “journal”, “StartLimitAction”: “none”, “StartLimitBurst”: “5”, “StartLimitInterval”: “10000000”, “StartupBlockIOWeight”: “18446744073709551615”, “StartupCPUShares”: “18446744073709551615”, “StatusErrno”: “0”, “StopWhenUnneeded”: “no”, “SubState”: “running”, “SyslogLevelPrefix”: “yes”, “SyslogPriority”: “30”, “SystemCallErrorNumber”: “0”, “TTYReset”: “no”, “TTYVHangup”: “no”, “TTYVTDisallocate”: “no”, “TasksAccounting”: “no”, “TasksCurrent”: “3”, “TasksMax”: “18446744073709551615”, “TimeoutStartUSec”: “1min 30s”, “TimeoutStopUSec”: “5s”, “TimerSlackNSec”: “50000”, “Transient”: “no”, “Type”: “forking”, “UMask”: “0022”, “UnitFilePreset”: “disabled”, “UnitFileState”: “disabled”, “Wants”: “network-online.target”, “WatchdogTimestamp”: “Wed 2021-10-27 09:20:15 EDT”, “WatchdogTimestampMonotonic”: “24390544003990”, “WatchdogUSec”: “0”}}\n│ ├── 2021-10-30 04:23:31,244 p=512757 u=qali n=ansible | ok: [root@10.10.10.2] =\u003e {“changed”: false, “name”: “nginx”, “state”: “started”, “status”: {“ActiveEnterTimestamp”: “Wed 2021-10-27 09:31:49 EDT”, “ActiveEnterTimestampMonotonic”: “3803190467261”, “ActiveExitTimestampMonotonic”: “0”, “ActiveState”: “active”, “After”: “-.mount tmp.mount system.slice systemd-journald.socket network.target nss-lookup.target remote-fs.target basic.target sysinit.target systemd-tmpfiles-setup.service”, “AllowIsolate”: “no”, “AllowedCPUs”: “\", “AllowedMemoryNodes”: “\", “AmbientCapabilities”: “\", “AssertResult”: “yes”, “AssertTimestamp”: “Wed 2021-10-27 09:31:49 EDT”, “AssertTimestampMonotonic”: “3803190328406”, “Before”: “shutdown.target”, “BlockIOAccounting”: “no”, “BlockIOWeight”: “[not set]\", “CPUAccounting”: “no”, “CPUAffinity”: “\", “CPUAffinityFromNUMA”: “no”, “CPUQuotaPerSecUSec”: “infinity”, “CPUQuotaPeriodUSec”: “infinity”, “CPUSchedulingPolicy”: “0”, “CPUSchedulingPriority”: “0”, “CPUSchedulingResetOnFork”: “no”, “CPUShares”: “[not set]\", “CPUUsageNSec”: “[not set]\", “CPUWeight”: “[not set]\", “CacheDirectoryMode”: “0755”, “CanFreeze”: “yes”, “CanIsolate”: “no”, “CanReload”: “yes”, “CanStart”: “yes”, “CanStop”: “yes”, “CapabilityBoundingSet”: “cap_chown cap_dac_override cap_dac_read_search cap_fowner cap_fsetid cap_kill cap_setgid cap_setuid cap_setpcap cap_linux_immutable cap_net_bind_service cap_net_broadcast cap_net_admin cap_net_raw cap_ipc_lock cap_ipc_owner cap_sys_module cap_sys_rawio cap_sys_chroot cap_sys_ptrace cap_sys_pacct cap_sys_admin cap_sys_boot cap_sys_nice cap_sys_resource cap_sys_time cap_sys_tty_config cap_mknod cap_lease cap_audit_write cap_audit_control cap_setfcap cap_mac_override cap_mac_admin cap_syslog cap_wake_alarm cap_block_suspend”, “CollectMode”: “inactive”, “ConditionResult”: “yes”, “ConditionTimestamp”: “Wed 2021-10-27 09:31:49 EDT”, “ConditionTimestampMonotonic”: “3803190328406”, “ConfigurationDirectoryMode”: “0755”, “Conflicts”: “shutdown.target”, “ControlGroup”: “/system.slice/nginx.service”, “ControlPID”: “0”, “DefaultDependencies”: “yes”, “DefaultMemoryLow”: “0”, “DefaultMemoryMin”: “0”, “Delegate”: “no”, “Description”: “The nginx HTTP and reverse proxy server”, “DevicePolicy”: “auto”, “DynamicUser”: “no”, “EffectiveCPUs”: “\", “EffectiveMemoryNodes”: “\", “ExecMainCode”: “0”, “ExecMainExitTimestampMonotonic”: “0”, “ExecMainPID”: “2348498”, “ExecMainStartTimestamp”: “Wed 2021-10-27 09:31:49 EDT”, “ExecMainStartTimestampMonotonic”: “3803190463259”, “ExecMainStatus”: “0”, “ExecReload”: “{ path=/bin/kill ; argv[]=/bin/kill -s HUP $MAINPID ; ignore_errors=no ; start_time=[n/a] ; stop_time=[n/a] ; pid=0 ; code=(null) ; status=0/0 }\", “ExecStart”: “{ path=/usr/sbin/nginx ; argv[]=/usr/sbin/nginx ; ignore_errors=no ; start_time=[Wed 2021-10-27 09:31:49 EDT] ; stop_time=[Wed 2021-10-27 09:31:49 EDT] ; pid=2348496 ; code=exited ; status=0 }\", “ExecStartPre”: “{ path=/usr/sbin/nginx ; argv[]=/usr/sbin/nginx -t ; ignore_errors=no ; start_time=[Wed 2021-10-27 09:31:49 EDT] ; stop_time=[Wed 2021-10-27 09:31:49 EDT] ; pid=2348495 ; code=exited ; status=0 }\", “FailureAction”: “none”, “FileDescriptorStoreMax”: “0”, “FragmentPath”: “/usr/lib/systemd/system/nginx.service”, “FreezerState”: “running”, “GID”: “[not set]\", “GuessMainPID”: “yes”, “IOAccounting”: “no”, “IOSchedulingClass”: “0”, “IOSchedulingPriority”: “0”, “IOWeight”: “[not set]\", “IPAccounting”: “no”, “IPEgressBytes”: “18446744073709551615”, “IPEgressPackets”: “18446744073709551615”, “IPIngressBytes”: “18446744073709551615”, “IPIngressPackets”: “18446744073709551615”, “Id”: “nginx.service”, “IgnoreOnIsolate”: “no”, “IgnoreSIGPIPE”: “yes”, “InactiveEnterTimestampMonotonic”: “0”, “InactiveExitTimestamp”: “Wed 2021-10-27 09:31:49 EDT”, “InactiveExitTimestampMonotonic”: “3803190345159”, “InvocationID”: “3ea4654765104d85977c279dbe1f7588”, “JobRunningTimeoutUSec”: “infinity”, “JobTimeoutAction”: “none”, “JobTimeoutUSec”: “infinity”, “KeyringMode”: “private”, “KillMode”: “mixed”, “KillSignal”: “3”, “LimitAS”: “infinity”, “LimitASSoft”: “infinity”, “LimitCORE”: “infinity”, “LimitCORESoft”: “infinity”, “LimitCPU”: “infinity”, “LimitCPUSoft”: “infinity”, “LimitDATA”: “infinity”, “LimitDATASoft”: “infinity”, “LimitFSIZE”: “infinity”, “LimitFSIZESoft”: “infinity”, “LimitLOCKS”: “infinity”, “LimitLOCKSSoft”: “infinity”, “LimitMEMLOCK”: “65536”, “LimitMEMLOCKSoft”: “65536”, “LimitMSGQUEUE”: “819200”, “LimitMSGQUEUESoft”: “819200”, “LimitNICE”: “0”, “LimitNICESoft”: “0”, “LimitNOFILE”: “262144”, “LimitNOFILESoft”: “1024”, “LimitNPROC”: “6751”, “LimitNPROCSoft”: “6751”, “LimitRSS”: “infinity”, “LimitRSSSoft”: “infinity”, “LimitRTPRIO”: “0”, “LimitRTPRIOSoft”: “0”, “LimitRTTIME”: “infinity”, “LimitRTTIMESoft”: “infinity”, “LimitSIGPENDING”: “6751”, “LimitSIGPENDINGSoft”: “6751”, “LimitSTACK”: “infinity”, “LimitSTACKSoft”: “8388608”, “LoadState”: “loaded”, “LockPersonality”: “no”, “LogLevelMax”: “-1”, “LogRateLimitBurst”: “0”, “LogRateLimitIntervalUSec”: “0”, “LogsDirectoryMode”: “0755”, “MainPID”: “2348498”, “MemoryAccounting”: “yes”, “MemoryCurrent”: “6414336”, “MemoryDenyWriteExecute”: “no”, “MemoryHigh”: “infinity”, “MemoryLimit”: “infinity”, “MemoryLow”: “0”, “MemoryMax”: “infinity”, “MemoryMin”: “0”, “MemorySwapMax”: “infinity”, “MountAPIVFS”: “no”, “MountFlags”: “\", “NFileDescriptorStore”: “0”, “NRestarts”: “0”, “NUMAMask”: “\", “NUMAPolicy”: “n/a”, “Names”: “nginx.service”, “NeedDaemonReload”: “no”, “Nice”: “0”, “NoNewPrivileges”: “no”, “NonBlocking”: “no”, “NotifyAccess”: “none”, “OOMScoreAdjust”: “0”, “OnFailureJobMode”: “replace”, “PIDFile”: “/run/nginx.pid”, “PermissionsStartOnly”: “no”, “Perpetual”: “no”, “PrivateDevices”: “no”, “PrivateMounts”: “no”, “PrivateNetwork”: “no”, “PrivateTmp”: “yes”, “PrivateUsers”: “no”, “ProtectControlGroups”: “no”, “ProtectHome”: “no”, “ProtectKernelModules”: “no”, “ProtectKernelTunables”: “no”, “ProtectSystem”: “no”, “RefuseManualStart”: “no”, “RefuseManualStop”: “no”, “RemainAfterExit”: “no”, “RemoveIPC”: “no”, “Requires”: “system.slice sysinit.target -.mount”, “RequiresMountsFor”: “/var/tmp”, “Restart”: “no”, “RestartUSec”: “100ms”, “RestrictNamespaces”: “no”, “RestrictRealtime”: “no”, “RestrictSUIDSGID”: “no”, “Result”: “success”, “RootDirectoryStartOnly”: “no”, “RuntimeDirectoryMode”: “0755”, “RuntimeDirectoryPreserve”: “no”, “RuntimeMaxUSec”: “infinity”, “SameProcessGroup”: “no”, “SecureBits”: “0”, “SendSIGHUP”: “no”, “SendSIGKILL”: “yes”, “Slice”: “system.slice”, “StandardError”: “inherit”, “StandardInput”: “null”, “StandardInputData”: “\", “StandardOutput”: “journal”, “StartLimitAction”: “none”, “StartLimitBurst”: “5”, “StartLimitIntervalUSec”: “10s”, “StartupBlockIOWeight”: “[not set]\", “StartupCPUShares”: “[not set]\", “StartupCPUWeight”: “[not set]\", “StartupIOWeight”: “[not set]\", “StateChangeTimestamp”: “Wed 2021-10-27 09:31:49 EDT”, “StateChangeTimestampMonotonic”: “3803190467261”, “StateDirectoryMode”: “0755”, “StatusErrno”: “0”, “StopWhenUnneeded”: “no”, “SubState”: “running”, “SuccessAction”: “none”, “SyslogFacility”: “3”, “SyslogLevel”: “6”, “SyslogLevelPrefix”: “yes”, “SyslogPriority”: “30”, “SystemCallErrorNumber”: “0”, “TTYReset”: “no”, “TTYVHangup”: “no”, “TTYVTDisallocate”: “no”, “TasksAccounting”: “yes”, “TasksCurrent”: “2”, “TasksMax”: “10802”, “TimeoutStartUSec”: “1min 30s”, “TimeoutStopUSec”: “5s”, “TimerSlackNSec”: “50000”, “Transient”: “no”, “Type”: “forking”, “UID”: “[not set]\", “UMask”: “0022”, “UnitFilePreset”: “disabled”, “UnitFileState”: “disabled”, “UtmpMode”: “init”, “WatchdogTimestampMonotonic”: “0”, “WatchdogUSec”: “0”}}\n│ ├── 2021-10-30 04:23:31,246 p=512757 u=qali n=ansible | PLAY RECAP *********************************************************************\n│ ├── 2021-10-30 04:23:31,246 p=512757 u=qali n=ansible | guest@10.10.10.1 : ok=5 changed=1 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\n│ └── 2021-10-30 04:23:31,246 p=512757 u=qali n=ansible | root@10.10.10.2 : ok=5 changed=1 unreachable=0 failed=0 skipped=0 rescued=0 ignored=0\n├── Exit Code: 0\n└── Extracted Parameters: { 2 }\n├── VersionOnNode1: nginx version: nginx/1.14.1\n└── VersionOnNode2: nginx version: nginx/1.20.1\nThe following is a sample code view:\n{\n“Tags”: [],\n“DefaultVersion”: true,\n“Description”: “”,\n“InputDefinition”: [\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Default”: {\n“ObjectType”: “workflow.DefaultValue”,\n“IsValueSet”: true,\n“Override”: true,\n“Value”: “/home/qali/vspancha/playbooks/install_nginx.yml”\n},\n“Description”: “The path of the ansible playbook residing on the Ansible Endpoint target.\\n”,\n“DisplayMeta”: {\n“ObjectType”: “workflow.DisplayMeta”,\n“InventorySelector”: true,\n“WidgetType”: “None”\n},\n“InputParameters”: null,\n“Label”: “Install Package”,\n“Name”: “InstallPackage”,\n“Required”: true,\n“Properties”: {\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Constraints”: {\n“ObjectType”: “workflow.Constraints”,\n“EnumList”: [],\n“Max”: 0,\n“Min”: 0,\n“Regex”: \"”\n},\n“InventorySelector”: [],\n“Secure”: false,\n“Type”: “string”\n}\n},\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Default”: {\n“ObjectType”: “workflow.DefaultValue”,\n“IsValueSet”: true,\n“Override”: true,\n“Value”: “/home/qali/vspancha/playbooks/nginx_hosts”\n},\n“Description”: “The path of the host inventory file residing on the Ansible Endpoint target or comma separated list of hosts on which Ansible playbook execution happens.\\n”,\n“DisplayMeta”: {\n“ObjectType”: “workflow.DisplayMeta”,\n“InventorySelector”: true,\n“WidgetType”: “None”\n},\n“InputParameters”: null,\n“Label”: “Host Inventory”,\n“Name”: “HostInventory”,\n“Required”: true,\n“Properties”: {\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Constraints”: {\n“ObjectType”: “workflow.Constraints”,\n“EnumList”: [],\n“Max”: 0,\n“Min”: 0,\n“Regex”: \"”\n},\n“InventorySelector”: [],\n“Secure”: false,\n“Type”: “string”\n}\n},\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Default”: {\n“ObjectType”: “workflow.DefaultValue”,\n“IsValueSet”: false,\n“Override”: false,\n“Value”: \"”\n},\n“Description”: “”,\n“DisplayMeta”: {\n“ObjectType”: “workflow.DisplayMeta”,\n“InventorySelector”: true,\n“WidgetType”: “None”\n},\n“InputParameters”: null,\n“Label”: “SudoPassword”,\n“Name”: “SudoPassword”,\n“Required”: true,\n“Properties”: {\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Constraints”: {\n“ObjectType”: “workflow.Constraints”,\n“EnumList”: [],\n“Max”: 0,\n“Min”: 0,\n“Regex”: \"”\n},\n“InventorySelector”: [],\n“Secure”: true,\n“Type”: “string”\n}\n},\n{\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Default”: {\n“ObjectType”: “workflow.DefaultValue”,\n“IsValueSet”: true,\n“Override”: true,\n“Value”: “–extra-vars ‘ansible_become_pass={{.global.workflow.input.SudoPassword}}’”\n},\n“Description”: “The command line arguments for the execution of the ansible playbook against the given endpoint. \\nEscape character backslash(\\\\) needs to be used when the command line arguments contain double quotes(\\\") in them.\\n\\nBelow command line options are not supported by the Ansible task.\\n1. -vvv\\n2. -vvvv\\n3. -k, -K\\n4. -c\\n5. –connection\\n6. –sftp-extra-args\\n7. –scp-extra-args\\n8. –ask-vault-password\\n9. –step\\n\\nPlease refer the ansible-playbook documentation here\\nhttps://docs.ansible.com/ansible/latest/cli/ansible-playbook.html for the list of other supported command line options.\\n”,\n“DisplayMeta”: {\n“ObjectType”: “workflow.DisplayMeta”,\n“InventorySelector”: true,\n“WidgetType”: “None”\n},\n“InputParameters”: null,\n“Label”: “Command Line Arguments”,\n“Name”: “CommandLineArguments”,\n“Required”: false,\n“Properties”: {\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Constraints”: {\n“ObjectType”: “workflow.Constraints”,\n“EnumList”: [],\n“Max”: 0,\n“Min”: 0,\n“Regex”: \"”\n},\n“InventorySelector”: [],\n“Secure”: false,\n“Type”: “string”\n}\n}\n],\n“InputParameterSet”: [],\n“Label”: “Chander-Ansible-UserCase”,\n“Name”: “Chander-Ansible-UserCase”,\n“OutputDefinition”: [],\n“OutputParameters”: null,\n“Properties”: {\n“ObjectType”: “workflow.WorkflowProperties”,\n“Cloneable”: true,\n“EnableDebug”: false,\n“ExternalMeta”: true,\n“Retryable”: false,\n“RollbackOnFailure”: false,\n“SupportStatus”: “Supported”\n},\n“Tasks”: [\n{\n“ObjectType”: “workflow.StartTask”,\n“Description”: “”,\n“Label”: “”,\n“Name”: “StartTask”,\n“NextTask”: “InvokeAnsiblePlaybook1”\n},\n{\n“ObjectType”: “workflow.SuccessEndTask”,\n“Description”: “”,\n“Label”: “”,\n“Name”: “SuccessEndTask”\n},\n{\n“ObjectType”: “workflow.FailureEndTask”,\n“Description”: “”,\n“Label”: “”,\n“Name”: “FailureEndTask”\n},\n{\n“ObjectType”: “workflow.WorkerTask”,\n“Description”: “Executes Ansible Playbook against the given endpoint. This task can be executed on targets added as Ansible Endpoint in Intersight.\\n”,\n“Label”: “Invoke Ansible Playbook - Install Package”,\n“Name”: “InvokeAnsiblePlaybook1”,\n“InputParameters”: {\n“AnsibleController”: {\n“Moid”: “6172a1be6f72612d31cd4908”,\n“ObjectType”: “asset.Target”\n},\n“CommandLineArguments”: “${workflow.input.CommandLineArguments}”,\n“HostInventory”: “${workflow.input.HostInventory}”,\n“PlaybookPath”: “${workflow.input.InstallPackage}”\n},\n“OnFailure”: “”,\n“OnSuccess”: “InvokeSshCommands2”,\n“RollbackDisabled”: false,\n“UseDefault”: false,\n“CatalogMoid”: “5c2fc884696f6e2d316c5d59”,\n“TaskDefinitionId”: “617b9248696f6e2d30c2fc95”,\n“TaskDefinitionName”: “InvokeAnsiblePlaybook”,\n“Version”: 1\n},\n{\n“ObjectType”: “workflow.WorkerTask”,\n“Description”: “Executes SSH commands against the given endpoint. This task can be executed on targets added as SSH Endpoint in Intersight.\\n”,\n“Label”: “Invoke SSH Commands - Ansible Play logs 1”,\n“Name”: “InvokeSshCommands2”,\n“InputParameters”: {\n“ResponseParser”: {\n“Parameters”: [\n{\n“Name”: “VersionOnNode1”,\n“RegexLine”: “10.106.*?\\\\\\“changed\\\\\\”:.*?\\\\\\“stderr\\\\\\”:\\\\s\\\\\\\"$\u003cVersionOnNode1\u003e\\\\\\”,”,\n“Type”: “string”\n},\n{\n“Name”: “VersionOnNode2”,\n“RegexLine”: “10.105.*?\\\\\\“changed\\\\\\”:.*?\\\\\\“stderr\\\\\\”:\\\\s\\\\\\\"$\u003cVersionOnNode2\u003e\\\\\\”,”,\n“Type”: “string”\n}\n]\n},\n“ShowCommandOutput”: true,\n“SshCommand”: {\n“Command”: “cat {{.global.InvokeAnsiblePlaybook1.output.ExecutionLogPath}}”,\n“CommandType”: “NonInteractiveCmd”\n},\n“Target”: {\n“Moid”: “617664826f72612d31ce8bae”,\n“ObjectType”: “asset.Target”\n}\n},\n“OnFailure”: “”,\n“OnSuccess”: “SuccessEndTask”,\n“RollbackDisabled”: false,\n“UseDefault”: false,\n“CatalogMoid”: “5c2fc884696f6e2d316c5d59”,\n“TaskDefinitionId”: “6172c602696f6e2d30d270a5”,\n“TaskDefinitionName”: “InvokeSshCommands”,\n“Version”: 1\n}\n],\n“UiInputFilters”: [],\n“UiRenderingData”: {\n“Positions”: [\n{\n“Name”: “StartTask”,\n“X”: 263.5,\n“Y”: 40.5\n},\n{\n“Name”: “SuccessEndTask”,\n“X”: 281.33331298828125,\n“Y”: 398.4323780336132\n},\n{\n“Name”: “FailureEndTask”,\n“X”: 451.833251953125,\n“Y”: 388.4387670304674\n},\n{\n“Name”: “InvokeAnsiblePlaybook1”,\n“X”: 178.5,\n“Y”: 117\n},\n{\n“Name”: “InvokeSshCommands2”,\n“X”: 176.83331298828125,\n“Y”: 215.1672194151248\n}\n]\n},\n“Version”: 1,\n“Catalog”: {\n“ObjectType”: “workflow.Catalog”,\n“Moid”: “5efbdb7e696f6e2d303fda29”,\n“link”: “https://intersight.com/api/v1/workflow/Catalogs/5efbdb7e696f6e2d303fda29\"\n},\n“WorkflowMetadata”: null\n}\nExecutors – Invoke Ansible Playbook - Reusable Task\nIntersight Cloud Orchestrator allows workflow designers to run Ansible Playbook on the Ansible Controller node using the Invoke Ansible Playbook reusable task in the workflow.\nFor more inforormation on Invoke Ansible Playbook - Embedded Task, see Invoke Ansible Playbook - Embedded Task.\nSupported Targets\nThe Invoke Ansible Playbook task can be run only on the targets that are added as an Ansible Endpoint target type in Cisco Intersight.\nThe Invoke Ansible Playbook task is executed as an orchestrator task and does not include the management of the Ansible Controller node.\nTo run the Ansible Playbook task on the Ansible Controller node from Cisco Intersight, ensure that:\nThe Ansible target is reachable through Intersight Assist when hosted on the customer premises.\nThe Ansible Playbook modules and Ansible Playbook executables required to run the playbooks are already installed on the Ansible Controller node.\nThe Ansible Controller node has password-less SSH access to the hosts.\nThe Ansible Controller node can resolve the endpoint hostnames if the Ansible Host Inventory file specifies the hostnames.\nFor more information on Intersight Target Claim, see Target Claim Using Intersight Assist.\nUsing the Executor Ansible Playook Reusable Task\nUse the Invoke Ansible Playbook from the Executors section in the Intersight Orchestrator Task Designer UI to create a Invoke Ansible Playbook reusable task.\nFor more information on tasks, see Defining a Task.\nThe following table explains the Invoke Ansible Playbook task properties:\nProperty\rDescription\rGeneral\rFor more information, see Defining a Task.\rInputs\rAnsible Controller—The target on which the Ansible Playbook task is run. By default, the Ansible Controller task input is created for the task.\nThe Ansible Playbook target must be in the Connected state.\nOutputs\rTo extract the required values from the command responses and map it to task outputs, do the following:\nCreate Task Output—Specify the task output.\nMap to Task Output—Check the check box to map the task output to an command response.\nTask Output—Select the command response to which the task output is mapped. The options available are:\nExit Code | Invoke Ansible Playbook\nExecution Summary | Invoke Ansible Playbook\nExecution Log Path | Invoke Ansible Playbook\nFor example, if you create two task outputs Exitcode and Logapth and map it to Exit Code | Invoke Ansible Playbook and Execution Log Path | Invoke Ansible Playbook respectively, after the workflow is executed, the output will show:\nThe following table explains the Invoke Ansible Playbook executor input:\nProperty\rDescription\rPlaybook Path\rThe path of the Ansible Playbook file that resides on the Ansible Controller node added as Ansible Endpoint target in Intersight.\nStatic Value—The path of the Ansible Playbook.\nDirect Mapping—Select an existing task input or task output field.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nHost Inventory\rThe path of the host inventory file that resides on the Ansible Controller or a comma-separated list of hosts on which the Ansible Playbook task is run.\nStatic Value—The path of the host inventory file that resides on the Ansible Controller or a comma-separated list of hosts.\nFor example, you can enter the hostname as root@10.10.10.10,\nNote: The hostname must be suffixed with a comma (,).\nDirect Mapping—Select the path from the task input or task output.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nCommand Timeout\rThe command timeout in seconds for the execution of the Ansible Playbook. The range is 10 to 7200 seconds.\nThe default timeout is 600 seconds.\nStatic Value—The command timeout in seconds.\nDirect Mapping—Select the command timeout from the task input or task output.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nCommand Line Argument\rThe optional command line arguments required to run the Ansible playbook.\nStatic Value—The command line argument.\nDirect Mapping—Select the input from the task input or task output.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nNote: For Invoke Ansible Playbook - Reusable Task, escape character backslash(\\) is not necessary when the command line arguments contain double quotes(\").\nThe following command line options are not supported by the Ansible Playbook task.\n-vvv\n-vvvv\n-k, -K\n-c\n--connection\n--sftp-extra-args\n--scp-extra-args\n--ask-vault-password\n--step\nFor information on the available command line arguments, see https://docs.ansible.com/ansible/latest/cli/ansible-playbook.html.\nThe following table explains the Ansible Playbook executor Outputs:\nProperty\rDescription\rExit Code\rThe exit code after the execution of the Ansible Playbook against the given endpoint.\rExecution Summary\rThe summary after the execution of Ansible Playbook against the given endpoint.\rExecution Log Path\rThe Ansible execution log path on the Ansible Control node after the execution of Ansible Playbook against the given endpoint.\rThe following table explains the Invoke Ansible Playbook task Outcomes:\nProperty\rDescription\rOutcomes\rTo set the custom execution status and status message based on the obtained outputs, do the following:\nClick Add Outcome.\nName—The name for the outcome.\nOutcome Type—Select the outcome type. The options available are Success, Skip To Success, Error, Terminal Error, Skip Task Execution, or Status.\nFor more information on Outcomes, see Outcomes.\nMessage—The message when the condition is met.\nCondition—The condition for the outcome.\nFor example, {{eq .global.InvokeAnsiblePlaybook1.output.ExitCode \"0\"}}.\nThis condition checks whether the output `ExitCode` of the executor named `InvokeAnsiblePlaybook1` equals to 0. If the condition is true, the task status is set to the value provided in `Outcome Type` and task status message is set to value provided in `Message`.\nTemplate Parameters\nThe request body template can refer to values from task inputs, previous task outputs, or implicit parameters. The following table explains the template parameters.\nPrefix/Format\rDescription\r{{.global.task.input.\u003cParameterName\u003e}}\rTask input reference.\r{{.global.\u003cExecutorRefName\u003e.output.\u003cParameterName\u003e}}\rPrevious executor output reference. ExecutorRefName is the name of the previous executor having output ParameterName.\r{{.security.AccountMoid}}\rImplicit parameter reference to Account MoID under which the workflow is running.\r{{.security.OrganizationMoid}}\rImplicit parameter reference to Organization MoID under which the workflow is running.\rTemplate Functions\nThe template engine has in-built functions to transform values before they are populated in the request templates. The following table explains the functions supported in Invoke SSH Commands task.\nFunction\rDescription\rTrimSpace\rReturns a string after removing white spaces from a the string.\nExample:\n{{TrimSpace .global.task.input.HostName}}\nContainsString\rReturns a boolean if a substring is present in a given string.\nExample:\n{{if (ContainsString .global.task.input.SizeAsString \\”MB\\”)}}Mega Bytes{{else}}Bytes{{end}}\nFindAllString\rReturns a slice of substrings matching the regular expression in a given string.\nExample:\n{{(FindAllString .global.task.input.NumberString \\”([0-9]+)\\”)}}\nThe above example returns array [“123”, “456”] for input string “123 some text 456.”\nToJson\rConverts a value to a JSON format.\nExample:\n{{(FindAllString .global.task.input.NumberString \\\"([0-9]+)\\\") | ToJson}}\nThe above example returns JSON array literal [“123”, “456”] for input string “123 some text 456.”\nAsArray\rTakes in an element and returns an array of one element.\nExample:\n{{AsArray .global.task.output.serverMo}}\nThe above example returns an array of one server Mo.\nSubstring\rReturns a substring within the given index bounds.\nExample:\n{{Substring .global.task.input.StorageId 2 6}}\nThe above example returns “ABCD” for string “12ABCD3456.”\nIpToCidr\rReturns the classless inter-domain routing (CIDR) notation of an IPv4 address and subnet mask.\nExample:\n{{IpToCidr .global.task.input.Ip .global.task.input.Netmask}}\nThe above example returns “10.10.10.10/24” for the input parameters “10.10.10.10” and “255.255.255.0.”\nLookupInSlice\rChecks if a given value is present in given slice or array and returns true if it exists. This function can be used for any value.\nExample:\n{{LookupInSlice .global.task.input.IpAddressList \\”10.10.10.10\\”}}\nThe above example returns true for input [”10.10.10.10”, “20.20.20.20”].\nIndex\rReturns a value from an array when an input index exists.\nExample:\n{{ index .global.task.input.nodes .global.task.input.idx }} In the above example, if nodes is an array of devices and idx is 2, the index function returns the second device in the array.\nItob\rConverts an integer to a boolean.\nExample:\n{{ Itob global.task.input.OnOffFlip }} The above example returns true and false for inputs 1 and 0 respectively.\nItoa\rConverts a given number to a string value.\nExample:\n{{ Itoa global.task.input.Port }} The above example returns “12345” for input 12345.\nItof\rConverts a given integer to a float value.\nExample:\n{{ Itof global.task.input.Rate }}\nThe above example returns 15.0 for an input 15.\nBtoa\rConverts a given boolean to a string value.\nExample:\n{{ Btoa global.task.input.OnOffFlip }}\nThe above example returns “true” for input true.\nBtoi\rConverts a given boolean to a integer value.\nExample:\n{{ Btoi global.task.input.OnOffFlip }}\nThe above example returns 1 and 0 for inputs true and false respectively.\nAtob\rConverts the given string into a boolean value.\nExample:\n{{ Atob global.task.input.OnOffFlip }}Returns true for input “true”\nAtoi\rConverts a given number in string format to the integer type.\nExample:\n{{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”\nFtoa\rConverts a given number into the string form based on the given precision.\nExample:\n{{Ftoa .global.task.input.Size 2}} returns the following output: 123.456 =\u003e “123.45”, 1028 =\u003e “1028.00”\nFtoi\rConverts a given float input to a integer value.\nExample:\n{{ Ftoi global.task.input.Rate }}\nThe above example returns 15 for an input 15.833.\nEval\rSupports an expression evaluation function. The below example returns 2GB for a input value of 2048. Note that the second argument is passed as ‘.’ in the template, which represents the map of all parameters.\n{{Eval \\\"{{.global.task.input.Size}} / 1024\\\" .}}GB\nTemplate Engine Syntax\nThe template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements\nThe comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}}\nConditional Statements\nThe template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \u003ccomparision_statement\u003e}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else if \u003ccomparision_statement}} Tempalte to be used {{end}}\nInvoke Ansible Playbook Reusable Task Example\nExample: Create a reusable task to run Ansible Playbook on the hosts\nThis example task runs on an Intersight Ansible Playbook controller. In this task, the Ansible Playbook path and host inventory list fields are provided by the task input fields.\nThe task properties required for this example are as following:\nProperty\rDescription\rGeneral\rOrganization—The organization that you are creating the task in.\nDisplay Name—A user friendly short name to identify the task definition.\nReference Name—The name of the Task definition.\nInputs\rAnsible Controller—By default, the Ansible Controller task input is created for the task.\nReference Name—AnsibleController\nType—Target Data Type\nPlaybook Path—The user defined task input for the path of the Ansible Playbook.\nReference Name—PlaybookPath\nType—String\nHost Inventory—The user defined task input for the path of the host inventory file.\nReference Name—HostInventory\nType—String\nOutputs\rExitCode—Task output\nReference Name—ExitCode\nType—String\nMap to Task Output—Exit Code | Invoke Ansible Playbook\nSummary—Task output\nReference Name—Summary\nType—String\nMap to Task Output—Execution Summary | Invoke Ansible Playbook\nLogpath—Task output\nReference Name—Logpath\nType—String\nMap to Task Output—Execution Log Path | Invoke Ansible Playbook\nThe following table explains the Invoke Ansible Playbook executor inputs:\nProperty\rDescription\rPlaybook Path\rDirect Mapping—{{.global.task.input.PlaybookPath}}\rHost Inventory\rDirect Mapping—{{.global.task.input.HostInventory}}\rCommand Timeout\rDefault value.\rCommand Line Argument\rStatic—-vv\nCommand line argument --vv is for the Ansible execution log verbosity.\nExecutors – Invoke SSH Commands - Embedded Task\nIntersight Cloud Orchestrator allows workflow designers to run commands over SSH by using the Invoke SSH Commands task in the workflows. The Invoke SSH Commands task is an out-of-box solution that allows you to automate operations on the SSH targets. This feature allows a workflow designer to extend the automation capabilities of the workflow engine beyond what is natively available in the task library and interact with the SSH target.\nThe Invoke SSH Commands task executes SSH commands against the given Intersight SSH endpoint target.\nSupported Targets\nThe Invoke SSH Commands task can be run only on the targets that are added as an SSH or Ansible endpoint target type in Cisco Intersight.\nTo run the SSH Command task on the SSH endpoint target from Cisco Intersight, ensure that:\nThe endpoint is reachable through Intersight Assist.\nThe endpoint target is in the Connected state.\nThe endpoint credentials are valid.\nFor more information on Intersight Target Claim, see Target Claim Using Intersight Assist.\nUsing the Invoke SSH Commands task\nUse the Invoke SSH Commands from the Executors section in the Workflow Designer UI to create a task to invoke SSH commands on a target.\nThe following table explains the task Input properties:\nProperty\rDescription\rExternal Target\rThe external SSH endpoint target on which the SSH commands task is run.\nThe SSH target must be in the Connected state.\nYou can specify the external target as:\nStatic Value—Click Select External Target to select an SSH target from the Intersight target inventory.\nDirect Mapping—Select an existing workflow input or Task output field.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the task input.\nSSH Command\rThe SSH commands that need to be executed on the remote server along with the details of command type.\nCommand— The SSH command string to execute against the given target. You need to specify only the command string.\nYou can specify multiple commands that need to run on the given target. For more information, see Using SSH Commands .\nNote: The command chaining is allowed only when the command type is non-interactive.\nStatic Value—The SSH commands that are to be run on the remote server.\nNon-Interactive Command—The SSH command that does not require user prompts.\nInteractive Command—The SSH commands that require user prompts. For example, the Sudo or install packages command prompts for the user inputs. To specify the user inputs for the command, do the following:\nExpect —The regular expression of the expect prompt of the interactive command. You must provide the complete regular expression of the Expect string and the expression must end with the special character '$' to match the end of the Expect string.\nSend—The answer string to the expect prompt. You can specify a string value or a workflow input.\nEnd prompt—The regular expression of the Shell Prompt of the remote server or target. You must provide the complete regular expression of the Shell Prompt and it must end with special character '$' to match the end of the Shell Prompt string.\nDirect Mapping—Select an existing workflow input or Task output field.\nTo create a new workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nCommand Timeout\rThe command timeout in seconds for the execution of the command against the given endpoint. The range is 10 to 7200 seconds.\nThe default timeout value is 600 seconds.\nStatic Value—The command timeout in seconds for the execution of the command against the given target.\nDirect Mapping——Select an existing workflow input or Task output field.\nTo create a new workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nExpected Exit Codes\rThe list of expected exit codes for the SSH command that is run by the task. Task status is set to Success if the obtained exit code is present in the list of expected exit codes.\nIf this input is not specified, then the default exit code is 0 and is used to determine the status of command execution.\nStatic Value—The exit code for the SSH command that is run by the task.\nDirect Mapping—Select the expected exit codes from the workflow input or Task output.\nTo create a new workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nShow Command Output\rSet this value to True if the entire command response needs to be displayed as part of the task output.\nThis default value is False.\nStatic Value—Select the Show Command Output check box to display the entire command response as a part of the task output.\nDirect Mapping—Select a Workflow input or Task output.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nResponse Parser\rThe response parser specification which is used to extract the values from the command response.\nStatic Value\nRegular Expression—The regular expression of the line in the command response where the interested capture value resides. The format to specify the capture value in this input is '$\u003cName of the parameter\u003e'. For example, if we need to capture 'intersight' in the sample response 'intersight@cisco.com', the regular expression looks like $\u003cName\u003e\\@cisco\\.com where 'Name' is the name given to this captured parameter.\nName—The name of the output under which the captured value is saved. This name should be the same that is provided in the Regular Expression—$\u003cName\u003e.\nType—The response parameter type—String, Integer, Float, or Boolean.\nThe default value is String.\nDirect Mapping—Select a Workflow input or Task output field.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nFor more information, see Response Parser.\nThe following table explains the task Output properties:\nProperty\rDescription\rExit Code\rThe exit code after the execution of the command against the given endpoint.\rCommand Output\rThe complete response after the execution of the command against the given endpoint.\nThe output is displayed only if the task input parameter Show Command Output is set to True.\nCommand Execution Error\rCaptures the error encountered while executing the command.\rExtracted Parameters\rThe response parser extracted outputs from the command execution response.\rUsing SSH Commands\nYou can specify multiple commands that need to run on the given target by chaining the commands with special characters. The following table explains the operators.\nOperators\rFunction\r\u0026\u0026 (Logical AND)\rThe command following this operator will only execute if the command preceding this operator has been successfully executed.\r; (Semi-colon)\rThe command following this operator will execute even if the command preceding this operator is not successfully executed.\r|| ( Logical OR)\rThe command succeeding this operator is only executed if the command preceding it has failed.\r| (Pipe)\rThe output of the first command acts as input to the second command.\r! (NOT)\rNegates an expression within a command. It is much like an “except” statement.\r\u003e,\u003e\u003e, \u003c (Redirection)\rRedirects the output of a command or a group of commands to a file or stream.\rTemplate Parameters\nThe request body template can refer to values from workflow inputs, previous task outputs, or implicit parameters. The following table explains the template parameters.\nPrefix/Format\rDescription\r{{.global.workflow.input.\u003cParameterName\u003e}}\rWorkflow input reference.\r{{.global.\u003cTaskRefName\u003e.output.\nParameters.\u003cParameterName\u003e}}\rPrevious task output reference. TaskRefName is the name of the previous task having output ParameterName.\r{{.security.AccountMoid}}\rImplicit parameter reference to Account MoID under which the workflow is running.\r{{.security.OrganizationMoid}}\rImplicit parameter reference to Organization MoID under which the workflow is running.\rTemplate Functions\nThe template engine has in-built functions to transform values before they are populated in the request templates. The following table explains the functions supported in Invoke SSH Command task.\nFunction\rDescription\rTrimSpace\rReturns a string after removing white spaces from a the string.\nExample:\n{{TrimSpace .global.workflow.input.HostName}}\nContainsString\rReturns a boolean if a substring is present in a given string.\nExample:\n{{if (ContainsString .global.workflow.input.SizeAsString \\”MB\\”)}}Mega Bytes{{else}}Bytes{{end}}\nFindAllString\rReturns a slice of substrings matching the regular expression in a given string.\nExample:\n{{(FindAllString .global.workflow.input.NumberString \\”([0-9]+)\\”)}}\nThe above example returns array [“123”, “456”] for input string “123 some text 456.”\nToJson\rConverts a value to a JSON format.\nExample:\n{{(FindAllString .global.workflow.input.NumberString \\\"([0-9]+)\\\") | ToJson}}\nThe above example returns JSON array literal [“123”, “456”] for input string “123 some text 456.”\nAsArray\rTakes in an element and returns an array of one element.\nExample:\n{{AsArray .global.workflow.output.serverMo}}\nThe above example returns an array of one server Mo.\nSubstring\rReturns a substring within the given index bounds.\nExample:\n{{Substring .global.workflow.input.StorageId 2 6}}\nThe above example returns “ABCD” for string “12ABCD3456.”\nIpToCidr\rReturns the classless inter-domain routing (CIDR) notation of an IPv4 address and subnet mask.\nExample:\n{{IpToCidr .global.workflow.input.Ip .global.workflow.input.Netmask}}\nThe above example returns “10.10.10.10/24” for the input parameters “10.10.10.10” and “255.255.255.0.”\nLookupInSlice\rChecks if a given value is present in given slice or array and returns true if it exists. This function can be used for any value.\nExample:\n{{LookupInSlice .global.workflow.input.IpAddressList \\”10.10.10.10\\”}}\nThe above example returns true for input [”10.10.10.10”, “20.20.20.20”].\nIndex\rReturns a value from an array when an input index exists.\nExample:\n{{ index .global.workflow.input.nodes .global.workflow.input.idx }} In the above example, if nodes is an array of devices and idx is 2, the index function returns the second device in the array.\nItob\rConverts an integer to a boolean.\nExample:\n{{ Itob global.workflow.input.OnOffFlip }} The above example returns true and false for inputs 1 and 0 respectively.\nItoa\rConverts a given number to a string value.\nExample:\n{{ Itoa global.workflow.input.Port }} The above example returns “12345” for input 12345.\nItof\rConverts a given integer to a float value.\nExample:\n{{ Itof global.workflow.input.Rate }}\nThe above example returns 15.0 for an input 15.\nBtoa\rConverts a given boolean to a string value.\nExample:\n{{ Btoa global.workflow.input.OnOffFlip }}\nThe above example returns “true” for input true.\nBtoi\rConverts a given boolean to a integer value.\nExample:\n{{ Btoi global.workflow.input.OnOffFlip }}\nThe above example returns 1 and 0 for inputs true and false respectively.\nAtob\rConverts the given string into a boolean value.\nExample:\n{{ Atob global.workflow.input.OnOffFlip }}Returns true for input “true”\nAtoi\rConverts a given number in string format to the integer type.\nExample:\n{{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”\nFtoa\rConverts a given number into the string form based on the given precision.\nExample:\n{{Ftoa .global.task.input.Size 2}} returns the following output: 123.456 =\u003e “123.45”, 1028 =\u003e “1028.00”\nFtoi\rConverts a given float input to a integer value.\nExample:\n{{ Ftoi global.workflow.input.Rate }}\nThe above example returns 15 for an input 15.833.\nEval\rSupports an expression evaluation function. The below example returns 2GB for a input value of 2048. Note that the second argument is passed as ‘.’ in the template, which represents the map of all parameters.\n{{Eval \\\"{{.global.workflow.input.Size}} / 1024\\\" .}}GB\nTemplate Engine Syntax\nThe template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements\nThe comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}}\nConditional Statements\nThe template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \u003ccomparision_statement\u003e}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else if \u003ccomparision_statement}} Tempalte to be used {{end}}\nResponse Parser\nA response parser is a collection of parameters that model values to be extracted from the SSH command response.\nExample: Create a response parser to get the IP address for a ping command\nTo get the IP address for the host such as www.example.com, you can use the ping command:\nping example.com -4\nPinging example.com [93.184.216.34] with 32 bytes of data:\nReply from 93.184.216.34: bytes=32 time=229ms TTL=53\nReply from 93.184.216.34: bytes=32 time=230ms TTL=53\nReply from 93.184.216.34: bytes=32 time=230ms TTL=53\nReply from 93.184.216.34: bytes=32 time=229ms TTL=53ping example.com\nTo extract the IP address from the command output for an SSH Command task, you can configure the response parser as:\nRegular Expression—Pinging\\s+example.com\\s+\\[$\u003cIP\u003e\\]\\s+.*\nName—IP\nNote: This name should be the same that is provided in the Regular Expression field. In the above example, the Regular Expression uses name $\u003cIP\u003e so the Name specified must be “IP”.\nType—String SSH Command Task Examples\nExample 1: Create a workflow with SSH Command task to install VIM package on a host using interactive SSH commands\nThe example below shows the execution of a script to install the vim package on a host. In this example, the shell prompt qali@automationvm-15:~$ appears. When the sudo ./vimInstall.sh command is run, the user is prompted for the sudo password using the prompt [sudo] password for qali:. The user enters the correct sudo password (Send/Answer string) and the installation process starts.\nqali@automationvm-15:~$ sudo ./vimInstall.sh\n[sudo] password for qali:\nReading package lists… Done\nBuilding dependency tree\nReading state information… Done\nSuggested packages:\nctags vim-doc vim-scripts\nThe following NEW packages will be installed:\nvim\n0 upgraded, 1 newly installed, 0 to remove and 224 not upgraded.\nNeed to get 1238 kB of archives.\nAfter this operation, 3111 kB of additional disk space will be used.\nGet:1 http://in.archive.ubuntu.com/ubuntu focal-updates/main amd64 vim amd64 2:8.1.2269-1ubuntu5.3 [1238 kB]\nFetched 1238 kB in 18s (68.8 kB/s)\nSelecting previously unselected package vim.\n(Reading database … 296388 files and directories currently installed.)\nPreparing to unpack …/vim_2%3a8.1.2269-1ubuntu5.3_amd64.deb …\nUnpacking vim (2:8.1.2269-1ubuntu5.3) …\nSetting up vim (2:8.1.2269-1ubuntu5.3) …\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vim (vim) in auto mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vimdiff (vimdiff) in auto mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/rvim (rvim) in auto mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/rview (rview) in auto mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/vi (vi) in auto mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/view (view) in auto mode\nupdate-alternatives: using /usr/bin/vim.basic to provide /usr/bin/ex (ex) in auto mode\nqali@automationvm-15:~$\nTo automate this task, you can create a workflow with a single Executor Invoke SSH Command task. This task runs on an Intersight SSH Command endpoint target. In this task, the Sudo password is provided by the workflow input field, and the VM installation script is available in the SSH endpoint target.\nThis workflow input field required for this example is as follows:\nWorkflow Input\rInput Fields\rSudo Password\rReference Name—SudoPassword\nType—String\nSecure option is selected. The values of these properties are encrypted and stored in Intersight.\nThe following table lists the SSH Command task properties:\nProperty\rDescription\rExternal Target\rThe target on which the SSH commands are executed.\rSSH Command\rCommand—sudo ./vimInstall.sh\nExpect—The Expect string obtained while executing the SSH command is [sudo] password for qali:. You need to specify the Expect input as the regular expression of the Obtained prompt \\[sudo\\]\\spassword\\sfor\\sqali:\\s$.\nSend—{{.global.workflow.input.SudoPassword}}\nShell Prompt—The shell prompt obtained before executing the SSH command is qali@automationvm-15:~$. You need to specify the regular expression of the obtained shell prompt qali\\@automationvm-15:~\\$\\s$\nCommand Timeout\rDefault value.\rExpected Exit Codes\rDefault value.\rShow Command Output\rSelect Show Command Option check box.\rResponse Parser\rWhen you run the sudo ./vimInstall.sh command, you get the following output:\n...\nReading state information... Done\nvim is already the newest version (2:8.1.2269-1ubuntu5.3).\nThe following package was automatically installed and is no longer required:\nlibllvm11\nTo extracts the VM package version and display it, configure the response parser as:\nRegular Expression—vim.*\\($\u003cVimPackageVersion\u003e\\).\nName—VimPackageVersion\nType—String\nThe response parser specified above, extracts the VM package version and displays it under the Extracted Parameters task output.\n├── Extracted Parameters: [ 1 ]/\n│ └── VimPackageVersion:2:8.1.2269-1ubuntu5.3\nAfter you execute the workflow, the task output is:\n.\n├── ConfigResults: [ 1 ]/\n│ └── Object: { 3 }/\n│ └── ConfigResCtx:{ 1 }/\n│ ├── EntityData: { 1 }/\n│ │ └── task: workflow.SshTask\n│ ├── State: Ok\n│ └── Type: Config\n├── Command Output:/\n│ ├── …\n│ vim is already the newest version (2:8.1.2269-1ubuntu5.3).\n│ The following package was automatically installed and is no longer required:\n│ libllvm11\n│ Use ‘sudo apt autoremove’ to remove it.\n│ 0 upgraded, 0 newly installed, 0 to remove and 59 not upgraded.\n├── Exit Code: 0\n└── Extracted Parameters: { 1 }/\n└── VimPackageVersion: 2:8.1.2269-1ubuntu5.3\nThe following is a sample code view.\n{\n“Catalog”: {\n“Moid”: “5efbdb7e696f6e2d303fda29”,\n“ObjectType”: “workflow.Catalog”,\n“link”: “https://intersight.com/api/v1/workflow/Catalogs/5efbdb7e696f6e2d303fda29\"\n},\n“DefaultVersion”: true,\n“Description”: “”,\n“InputDefinition”: [\n{\n“Default”: {\n“IsValueSet”: false,\n“ObjectType”: “workflow.DefaultValue”,\n“Override”: false,\n“Value”: null\n},\n“Description”: “”,\n“DisplayMeta”: {\n“InventorySelector”: true,\n“ObjectType”: “workflow.DisplayMeta”,\n“WidgetType”: “None”\n},\n“InputParameters”: null,\n“Label”: “Sudo Password”,\n“Name”: “SudoPassword”,\n“ObjectType”: “workflow.PrimitiveDataType”,\n“Properties”: {\n“Constraints”: {\n“EnumList”: [],\n“Max”: 0,\n“Min”: 0,\n“ObjectType”: “workflow.Constraints”,\n“Regex”: \"”\n},\n“InventorySelector”: [],\n“ObjectType”: “workflow.PrimitiveDataProperty”,\n“Secure”: true,\n“Type”: “string”\n},\n“Required”: false\n}\n],\n“InputParameterSet”: [],\n“Label”: “SSH-Command-Task-Interactive”,\n“Name”: “SSH-Command-Task-Interactive”,\n“OutputDefinition”: [],\n“OutputParameters”: null,\n“Properties”: {\n“Cloneable”: true,\n“EnableDebug”: false,\n“ExternalMeta”: true,\n“ObjectType”: “workflow.WorkflowProperties”,\n“Retryable”: false,\n“RollbackOnFailure”: false,\n“SupportStatus”: “Supported”\n},\n“Tags”: [],\n“Tasks”: [\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “StartTask”,\n“NextTask”: “InvokeSshCommands1”,\n“ObjectType”: “workflow.StartTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “SuccessEndTask”,\n“ObjectType”: “workflow.SuccessEndTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “FailureEndTask”,\n“ObjectType”: “workflow.FailureEndTask”\n},\n{\n“CatalogMoid”: “5c2fc884696f6e2d316c5d59”,\n“Description”: “Executes SSH commands against the given target. This task can be executed on targets added as SSH Target in Intersight.\\n”,\n“InputParameters”: {\n“ResponseParser”: {\n“Parameters”: [\n{\n“Name”: “VimPackageVersion”,\n“RegexLine”: “vim.*\\\\($\u003cVimPackageVersion\u003e\\\\).”,\n“Type”: “string”\n}\n]\n},\n“ShowCommandOutput”: true,\n“SshCommand”: {\n“Command”: “sudo ./vimInstall.sh”,\n“CommandType”: “InteractiveCmd”,\n“ExpectPrompts”: [\n{\n“Expect”: “\\\\[sudo\\\\]\\\\spassword\\\\sfor\\\\sqali:\\\\s$”,\n“Send”: “{{.global.workflow.input.SudoPassword}}”\n}\n],\n“ShellPrompt”: “qali\\\\@automationvm-15:~\\\\$\\\\s$”\n},\n“Target”: {\n“Moid”: “6177bcab6f72612d31fb23f5”,\n“ObjectType”: “asset.Target”\n}\n},\n“Label”: “Invoke SSH Commands”,\n“Name”: “InvokeSshCommands1”,\n“ObjectType”: “workflow.WorkerTask”,\n“OnFailure”: “”,\n“OnSuccess”: “SuccessEndTask”,\n“RollbackDisabled”: false,\n“TaskDefinitionId”: “6172c602696f6e2d30d270a5”,\n“TaskDefinitionName”: “InvokeSshCommands”,\n“UseDefault”: false,\n“Version”: 1\n}\n],\n“UiInputFilters”: [],\n“UiRenderingData”: {\n“Positions”: [\n{\n“Name”: “StartTask”,\n“X”: 263,\n“Y”: 35\n},\n{\n“Name”: “SuccessEndTask”,\n“X”: 263,\n“Y”: 194\n},\n{\n“Name”: “FailureEndTask”,\n“X”: 405,\n“Y”: 194\n},\n{\n“Name”: “InvokeSshCommands1”,\n“X”: 178,\n“Y”: 106\n}\n]\n},\n“Version”: 1,\n“WorkflowMetadata”: null\n}\nExample 2: Create a workflow with SSH Command tasks to list the folders and files in the current working directory on the host using output mapping\nThe following example workflow has two SSH command tasks. The first task runs the pwd command on the SSH endpoint target and obtains the current working directory in the output. The second task takes the workflow output from the previous task and runs the ls -lrt command on the extracted path on the endpoint target.\nThe following table lists the properties for the SSH Command Task 1:\nProperty\rDescription\rExternal Target\rThe target on which the SSH commands are executed.\rSSH Command\rStatic | Non-interactive | Command—pwd\rCommand Timeout\rDefault value.\rExpected Exit Codes\rDefault value.\rShow Command Output\rSelect Show Command Option check box.\rResponse Parser\rWhen you run the pwd command, you get the following output:\n$pwd\n/home/user\nTo extracts the path and display it, configure the response parser as:\nRegular Expression—$\u003cPath\u003e\nName—Path\nType—String\nThe response parser specified above, extracts the path and displays it under the Extracted Parameters task output:\n├── Extracted Parameters: [ 1 ]/\n│ └── Path:/home/user\nThe following table lists the properties for the SSH Command Task 2:\nProperty\rDescription\rExternal Target\rThe target on which the SSH commands are executed.\rSSH Command\rThe output for the first task extracts the path and displays it under the Extracted Parameters task output as:\n├── Extracted Parameters: [ 1 ]/\n│ └── Path:/home/user\nTo map the output of the previous task as the input, specify the SSH command as:\nStatic | Non-interactive | Command—ls -lrt {{.global.InvokeSshCommands1.output.ExtractedParameters.Path}}\nIn the above example, InvokeSshCommands1 is the task reference name of the previous task. To determine the task reference name, navigate to the Code view. For example:\n\"Tasks\": ...\n\"Label\": \"Invoke SSH Commands\",\n\"Name\": \"InvokeSshCommands1\",\n\"ObjectType\": \"workflow.WorkerTask\",\n...\nCommand Timeout\rDefault value.\rExpected Exit Codes\rDefault value.\rShow Command Output\rSelect Show Command Option check box.\rResponse Parser\rNone.\rAfter you execute the workflow, the task output is:\n.\n├── ConfigResults: [ 1 ]\n│ └── Object:{ 3 }\n│ ├── ConfigResCtx:{ 1 }\n│ │ ├── EntityData:{ 1 }\n│ │ └── task:workflow.SshTask\n│ ├── State:Ok\n│ └── Type:Config\n└── Command Output:total 62544\n├── -rw-rw-r– 1 qali qali 6549016 Jul 22 2020 intersight_devops_python_sdk_v3_0.0.1.16837.tar.gz\n├── -rw-r–r– 1 qali qali 8980 Apr 5 2021 examples.desktop\n├── drwxr-xr-x 2 qali qali 4096 Apr 5 2021 Videos\n├── drwxr-xr-x 2 qali qali 4096 Apr 5 2021 Templates\n├── drwxr-xr-x 2 qali qali 4096 Apr 5 2021 Public\n├── drwxr-xr-x 2 qali qali 4096 Apr 5 2021 Pictures\n├── drwxr-xr-x 2 qali qali 4096 Apr 5 2021 Music\n├── drwxr-xr-x 2 qali qali 4096 Apr 5 2021 Documents\n├── …\n└── Exit Code:0\nThe following is a sample code view:\n{\n“Catalog”: {\n“Moid”: “5efbdb7e696f6e2d303fda29”,\n“ObjectType”: “workflow.Catalog”,\n“link”: “https://www.intersight.com/api/v1/workflow/Catalogs/5efbdb7e696f6e2d303fda29\"\n},\n“DefaultVersion”: true,\n“Description”: “”,\n“InputDefinition”: [],\n“InputParameterSet”: [],\n“Label”: “NonIntMappingSsh”,\n“Name”: “NonIntMappingSsh”,\n“OutputDefinition”: [],\n“OutputParameters”: null,\n“Properties”: {\n“Cloneable”: true,\n“EnableDebug”: false,\n“ExternalMeta”: true,\n“ObjectType”: “workflow.WorkflowProperties”,\n“Retryable”: false,\n“RollbackOnFailure”: false,\n“SupportStatus”: “Supported”\n},\n“Tags”: [],\n“Tasks”: [\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “StartTask”,\n“NextTask”: “InvokeSshCommands1”,\n“ObjectType”: “workflow.StartTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “SuccessEndTask”,\n“ObjectType”: “workflow.SuccessEndTask”\n},\n{\n“Description”: “”,\n“Label”: “”,\n“Name”: “FailureEndTask”,\n“ObjectType”: “workflow.FailureEndTask”\n},\n{\n“CatalogMoid”: “5c2fc884696f6e2d316c5d59”,\n“Description”: “Executes SSH commands against the given endpoint. This task can be executed on targets added as SSH Endpoint in Intersight.\\n”,\n“InputParameters”: {\n“ResponseParser”: {\n“Parameters”: [\n{\n“Name”: “Path”,\n“RegexLine”: “$\u003cPath\u003e”,\n“Type”: “string”\n}\n]\n},\n“ShowCommandOutput”: true,\n“SshCommand”: {\n“Command”: “pwd”,\n“CommandType”: “NonInteractiveCmd”\n},\n“Target”: {\n“Moid”: “618a500a6f72612d31586284”,\n“ObjectType”: “asset.Target”\n}\n},\n“Label”: “Invoke SSH Commands”,\n“Name”: “InvokeSshCommands1”,\n“ObjectType”: “workflow.WorkerTask”,\n“OnFailure”: “”,\n“OnSuccess”: “InvokeSshCommands2”,\n“RollbackDisabled”: false,\n“TaskDefinitionId”: “6172c602696f6e2d30d270a5”,\n“TaskDefinitionName”: “InvokeSshCommands”,\n“UseDefault”: false,\n“Version”: 1\n},\n{\n“CatalogMoid”: “5c2fc884696f6e2d316c5d59”,\n“Description”: “Executes SSH commands against the given endpoint. This task can be executed on targets added as SSH Endpoint in Intersight.\\n”,\n“InputParameters”: {\n“ShowCommandOutput”: true,\n“SshCommand”: {\n“Command”: “ls -lrt {{.global.InvokeSshCommands1.output.ExtractedParameters.Path}}”,\n“CommandType”: “NonInteractiveCmd”\n},\n“Target”: {\n“Moid”: “618a500a6f72612d31586284”,\n“ObjectType”: “asset.Target”\n}\n},\n“Label”: “Invoke SSH Commands1”,\n“Name”: “InvokeSshCommands2”,\n“ObjectType”: “workflow.WorkerTask”,\n“OnFailure”: “”,\n“OnSuccess”: “SuccessEndTask”,\n“RollbackDisabled”: false,\n“TaskDefinitionId”: “6172c602696f6e2d30d270a5”,\n“TaskDefinitionName”: “InvokeSshCommands”,\n“UseDefault”: false,\n“Version”: 1\n}\n],\n“UiInputFilters”: [],\n“UiRenderingData”: {\n“Positions”: [\n{\n“Name”: “StartTask”,\n“X”: 10,\n“Y”: 18\n},\n{\n“Name”: “SuccessEndTask”,\n“X”: 10,\n“Y”: 697\n},\n{\n“Name”: “FailureEndTask”,\n“X”: 152,\n“Y”: 697\n},\n{\n“Name”: “InvokeSshCommands1”,\n“X”: 178.5,\n“Y”: 105.7421875\n},\n{\n“Name”: “InvokeSshCommands2”,\n“X”: 178.25390625,\n“Y”: 204.75390625\n}\n]\n},\n“Version”: 1,\n“WorkflowMetadata”: null\n}\nExecutors – Invoke SSH Commands - Reusable Task\nIntersight Cloud Orchestrator allows workflow designers to run commands over SSH by using the Invoke SSH Commands reusable task in the workflows.\nThe Invoke SSH Commands task executes SSH commands against the given Intersight SSH endpoint target.\nSupported Targets\nThe Invoke SSH Commands task can be run only on the targets that are added as an SSH or Ansible endpoint target type in Cisco Intersight.\nTo run the SSH Command task on the SSH or Ansible endpoint target from Cisco Intersight, ensure that:\nThe endpoint is reachable through Intersight Assist.\nThe endpoint target is in the Connected state.\nThe endpoint credentials are valid.\nFor more information on Intersight Target Claim, see Target Claim Using Intersight Assist.\nUsing the Executor SSH Commands Reusable Task\nUse the Invoke SSH Commands from the Executors section in the Intersight Orchestrator Task Designer UI to create a Invoke SSH Commands reusable task.\nFor more information on tasks, see Defining a Task.\nThe following table explains the Invoke SSH Commands task properties:\nProperty\rDescription\rGeneral\rFor more information, see Defining a Task.\rInputs\rExternal Target—The external target on which the SSH commands are run. By default, the External Target task input is created for the task.\nThe SSH commands can be run only on targets added as SSH or Ansible endpoint target in Intersight and are in the connected state.\nOutputs\rTo extract the required values from the command responses and map it to task outputs, do the following:\nCreate Task Output—Specify the task output.\nMap to Task Output—Check the check box to map the task output to an command response.\nTask Output—Select the command response to which the task output is mapped. The options available are:\nExit Code | Invoke SSH Commands\nCommand Output | Invoke SSH Commands\nCommand Execution Error| Invoke SSH Commands\nExtracted Parameters | Invoke SSH Commands\nFor more information on task outputs, see Executor Output properties.\nThe following table explains the Invoke SSH Commands executor input:\nProperty\rDescription\rSSH Command\rThe SSH commands that need to be executed on the remote server along with the details of command type.\nCommand— The SSH command string to execute against the given target. You need to specify only the command string.\nYou can specify multiple commands that need to run on the given target. For more information, see Using SSH Commands.\nNote: The command chaining is allowed only when the command type is non-interactive.\nStatic Value—The SSH commands that are to be run on the remote server.\nNon-Interactive Command—The SSH command that does not require user prompts.\nInteractive Command—The SSH commands that require user prompts. For example, the Sudo or install packages command prompts for the user inputs. To specify the user inputs for the command, do the following:\nExpect —The regular expression of the expect prompt of the interactive command. You must provide the complete regular expression of the Expect string and the expression must end with the special character '$' to match the end of the Expect string.\nSend—The answer string to the expect prompt. You can specify a string value.\nEnd prompt—The regular expression of the Shell Prompt of the remote server or target. You must provide the complete regular expression of the Shell Prompt and it must end with special character '$' to match the end of the Shell Prompt string.\nDirect Mapping—Select an existing task input or task output field.\nYou can map only a custom data type of type SSH Command.\nNote: Direct mapping of task input or output of string data type is not valid.\nAdvanced Mapping—You can use Go template expressions for advance use cases where data manipulation is required.\nFor example, to use substring of the task input StringInput in the SSH command, the advanced mapping can be:\n{Command: \"{{Substring .global.task.input.StringInput 5 15}}\", CommandType: \"NonInteractiveCmd\"}\nThe CommandType can be `NonInteractiveCmd` and `InteractiveCmd`.\nFollowing is an example for the 'InteractiveCmd':\n{\n\"Command\": \"{{Substring .global.task.input.StringInput 5 15}}\",\n\"CommandType\": \"InteractiveCmd\",\n\"ExpectPrompts\": [\n{\n\"Expect\": \"Password:\\\\s+$\",\n\"Send\": \"dummyValue\"\n}\n],\n\"ShellPrompt\": \"\\\\[root\\\\@onprem-appliance\\\\]\\\\s+$\"\n}\nFor more information on template functions, see Template Functions.\nCommand Timeout\rThe command timeout in seconds for the execution of the command against the given endpoint. The range is 10 to 7200 seconds.\nThe default timeout value is 600 seconds.\nStatic Value—The command timeout in seconds for the execution of the command against the given target.\nDirect Mapping——Select an existing task input or task output field.\nTransformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task's input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nExpected Exit Codes\rThe list of expected exit codes for the SSH command that is run by the task. Task status is set to Success if the obtained exit code is present in the list of expected exit codes.\nIf this input is not specified, then the default exit code is 0 and is used to determine the status of command execution.\nStatic Value—The exit code for the SSH command that is run by the task.\nDirect Mapping—Select the expected exit codes from the task input or task output.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nResponse Parser\rThe response parser specification which is used to extract the values from the command response.\nStatic Value\nRegular Expression—The regular expression of the line in the command response where the interested capture value resides. The format to specify the capture value in this input is '$\u003cName of the parameter\u003e'. For example, if we need to capture 'intersight' in the sample response 'intersight@cisco.com', the regular expression looks like $\u003cName\u003e\\@cisco\\.com where 'Name' is the name given to this captured parameter.\nName—The name of the output under which the captured value is saved. This name should be the same that is provided in the Regular Expression—$\u003cName\u003e.\nType—The response parameter type—String, Integer, Float, or Boolean.\nThe default value is String.\nDirect Mapping—Select a task input or task output field.\nTo create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.\nAdvanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.\nFor more information, see Response Parser.\nThe following table explains the SSH Command executor Outputs :\nProperty\rDescription\rExit Code\rThe exit code after the execution of the command against the given endpoint.\rCommand Output\rThe complete response after the execution of the command against the given endpoint.\rCommand Execution Error\rCaptures the error encountered while executing the command.\rExtracted Parameters\rThe response parser extracted outputs from the command execution response.\rThe following table explains the Invoke SSH Commands task Outcomes:\nProperty\rDescription\rOutcomes\rTo set the custom execution status and status message based on the obtained outputs, do the following:\nClick Add Outcome.\nName—The name for the outcome.\nOutcome Type—Select the outcome type. The options available are Success, Skip To Success, Error, Terminal Error, Skip Task Execution, or Status.\nFor more information on Outcomes, see Outcomes.\nMessage—The message when the condition is met.\nCondition—The condition for the outcome.\nFor example, {{eq .global.InvokeSshCommands1.output.ExitCode \"0\"}}.\nThis condition checks whether the output `ExitCode` of the executor named `InvokeSshCommands1` equals to 0. If the condition is true, the task status is set to the value provided in `Outcome Type` and task status message is set to value provided in `Message`.\nUsing SSH Commands\nYou can specify multiple commands that need to run on the given target by chaining the commands with special characters. The following table explains the operators.\nOperators\rFunction\r\u0026\u0026 (Logical AND)\rThe command following this operator will only execute if the command preceding this operator has been successfully executed.\r; (Semi-colon)\rThe command following this operator will execute even if the command preceding this operator is not successfully executed.\r|| ( Logical OR)\rThe command succeeding this operator is only executed if the command preceding it has failed.\r| (Pipe)\rThe output of the first command acts as input to the second command.\r! (NOT)\rNegates an expression within a command. It is much like an “except” statement.\r\u003e,\u003e\u003e, \u003c (Redirection)\rRedirects the output of a command or a group of commands to a file or stream.\rTemplate Parameters\nThe request body template can refer to values from task inputs, previous task outputs, or implicit parameters. The following table explains the template parameters.\nPrefix/Format\rDescription\r{{.global.task.input.\u003cParameterName\u003e}}\rTask input reference.\r{{.global.\u003cExecutorRefName\u003e.output.\u003cParameterName\u003e}}\rPrevious executor output reference. ExecutorRefName is the name of the previous executor having output ParameterName.\r{{.security.AccountMoid}}\rImplicit parameter reference to Account MoID under which the workflow is running.\r{{.security.OrganizationMoid}}\rImplicit parameter reference to Organization MoID under which the workflow is running.\rTemplate Functions\nThe template engine has in-built functions to transform values before they are populated in the request templates. The following table explains the functions supported in Invoke SSH Commands task.\nFunction\rDescription\rTrimSpace\rReturns a string after removing white spaces from a the string.\nExample:\n{{TrimSpace .global.task.input.HostName}}\nContainsString\rReturns a boolean if a substring is present in a given string.\nExample:\n{{if (ContainsString .global.task.input.SizeAsString \\”MB\\”)}}Mega Bytes{{else}}Bytes{{end}}\nFindAllString\rReturns a slice of substrings matching the regular expression in a given string.\nExample:\n{{(FindAllString .global.task.input.NumberString \\”([0-9]+)\\”)}}\nThe above example returns array [“123”, “456”] for input string “123 some text 456.”\nToJson\rConverts a value to a JSON format.\nExample:\n{{(FindAllString .global.task.input.NumberString \\\"([0-9]+)\\\") | ToJson}}\nThe above example returns JSON array literal [“123”, “456”] for input string “123 some text 456.”\nAsArray\rTakes in an element and returns an array of one element.\nExample:\n{{AsArray .global.task.output.serverMo}}\nThe above example returns an array of one server Mo.\nSubstring\rReturns a substring within the given index bounds.\nExample:\n{{Substring .global.task.input.StorageId 2 6}}\nThe above example returns “ABCD” for string “12ABCD3456.”\nIpToCidr\rReturns the classless inter-domain routing (CIDR) notation of an IPv4 address and subnet mask.\nExample:\n{{IpToCidr .global.task.input.Ip .global.task.input.Netmask}}\nThe above example returns “10.10.10.10/24” for the input parameters “10.10.10.10” and “255.255.255.0.”\nLookupInSlice\rChecks if a given value is present in given slice or array and returns true if it exists. This function can be used for any value.\nExample:\n{{LookupInSlice .global.task.input.IpAddressList \\”10.10.10.10\\”}}\nThe above example returns true for input [”10.10.10.10”, “20.20.20.20”].\nIndex\rReturns a value from an array when an input index exists.\nExample:\n{{ index .global.task.input.nodes .global.task.input.idx }} In the above example, if nodes is an array of devices and idx is 2, the index function returns the second device in the array.\nItob\rConverts an integer to a boolean.\nExample:\n{{ Itob global.task.input.OnOffFlip }} The above example returns true and false for inputs 1 and 0 respectively.\nItoa\rConverts a given number to a string value.\nExample:\n{{ Itoa global.task.input.Port }} The above example returns “12345” for input 12345.\nItof\rConverts a given integer to a float value.\nExample:\n{{ Itof global.task.input.Rate }}\nThe above example returns 15.0 for an input 15.\nBtoa\rConverts a given boolean to a string value.\nExample:\n{{ Btoa global.task.input.OnOffFlip }}\nThe above example returns “true” for input true.\nBtoi\rConverts a given boolean to a integer value.\nExample:\n{{ Btoi global.task.input.OnOffFlip }}\nThe above example returns 1 and 0 for inputs true and false respectively.\nAtob\rConverts the given string into a boolean value.\nExample:\n{{ Atob global.task.input.OnOffFlip }}Returns true for input “true”\nAtoi\rConverts a given number in string format to the integer type.\nExample:\n{{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”\nFtoa\rConverts a given number into the string form based on the given precision.\nExample:\n{{Ftoa .global.task.input.Size 2}} returns the following output: 123.456 =\u003e “123.45”, 1028 =\u003e “1028.00”\nFtoi\rConverts a given float input to a integer value.\nExample:\n{{ Ftoi global.task.input.Rate }}\nThe above example returns 15 for an input 15.833.\nEval\rSupports an expression evaluation function. The below example returns 2GB for a input value of 2048. Note that the second argument is passed as ‘.’ in the template, which represents the map of all parameters.\n{{Eval \\\"{{.global.task.input.Size}} / 1024\\\" .}}GB\nTemplate Engine Syntax\nThe template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements\nThe comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}}\nConditional Statements\nThe template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \u003ccomparision_statement\u003e}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else if \u003ccomparision_statement}} Tempalte to be used {{end}}\nResponse Parser\nA response parser is a collection of parameters that model values to be extracted from the SSH command response.\nExample: Create a response parser to get the IP address for a ping command\nTo get the IP address for the host such as www.example.com, you can use the ping command:\nping example.com -4\nPinging example.com [93.184.216.34] with 32 bytes of data:\nReply from 93.184.216.34: bytes=32 time=229ms TTL=53\nReply from 93.184.216.34: bytes=32 time=230ms TTL=53\nReply from 93.184.216.34: bytes=32 time=230ms TTL=53\nReply from 93.184.216.34: bytes=32 time=229ms TTL=53ping example.com\nTo extract the IP address from the command output for an SSH Command task, you can configure the response parser as:\nRegular Expression—Pinging\\s+example.com\\s+\\[$\u003cIP\u003e\\]\\s+.*\nName—IP\nNote: This name should be the same that is provided in the Regular Expression field. In the above example, the Regular Expression uses name $\u003cIP\u003e so the Name specified must be “IP”.\nType—String Invoke SSH Command Reusable Task Examples\nExample 1: Create a reusable SSH Command task to list the current working directory on the host\nThis example task runs on an Intersight SSH endpoint target. This task runs the pwd command on the SSH endpoint target and obtains the current working directory in the output.\nThe task properties required for this example are as following:\nProperty\rDescription\rGeneral\rOrganization—The organization that you are creating the task in.\nDisplay Name—A user friendly short name to identify the task definition.\nReference Name—The name of the Task definition.\nInputs\rExternal Target—By default, the External Target task input is created for the task.\nReference Name—Target\nType—Target Data Type\nOutputs\rExitCode—Task output\nReference Name—ExitCode\nType—String\nMap to Task Output—Exit Code | Invoke SSH Command\nResponse—Task output\nReference Name—Response\nType—String\nMap to Task Output—Command Output| Invoke SSH Command\nLastline—Task output\nReference Name—Response\nType—String\nMap to Task Output—Extracted Parameters | Invoke SSH Command - WorkingDirectory\nError—Task output\nReference Name—Error\nType—String\nMap to Task Output—Extracted Parameters | Invoke SSH Command - CommandExecutionError\nThe following table explains the Invoke SSH Command executor inputs:\nProperty\rDescription\rSSH Command\rStatic | Non-interactive—Command—pwd\rCommand Timeout\rDefault value.\rExpected Exit Codes\rDefault value.\rResponse Parser\rWhen you run the pwd command, you get the following output:\n$pwd\n/home/user\nTo extracts the path and display it, configure the response parser as:\nRegular Expression—$\u003cWorkingDirectory\u003e\nName—WorkingDirectory\nType—String\nThe configured response parser captures the entire response line.\nExample 2: Create a reusable SSH Command task to install jq Linux command line utility on a host using interactive SSH commands\nThis example task runs on an Intersight SSH endpoint target. In this task, the Sudo password is provided by the command input field, and jq Linux command line utility is installed on the SSH endpoint target.\nThe task properties required for this example are as following:\nProperty\rDescription\rGeneral\rOrganization—The organization that you are creating the task in.\nDisplay Name—A user friendly short name to identify the task definition.\nReference Name—The name of the Task definition.\nInputs\rExternal Target—By default, the External Target task input is created for the task.\nReference Name—Target\nType—Target Data Type\nOutputs\rExitCode—Task output\nReference Name—ExitCode\nType—String\nMap to Task Output—Exit Code | Invoke SSH Command\nResponse—Task output\nReference Name—Response\nType—String\nMap to Task Output—Command Output| Invoke SSH Command\nThe following table explains the Invoke SSH Command executor inputs:\nProperty\rDescription\rSSH Command\rStatic | Interactive—Command—sudo yum install -y jq | Interactive\nExpect—The Expect string obtained while executing the SSH command is [sudo] password for qali:. You need to specify the Expect input as the regular expression of the Obtained prompt \\[sudo\\]\\spassword\\sfor\\sqali:\\s$.\nSend—testPasswd.\nShell Prompt—The shell prompt obtained before executing the SSH command is qali@automationvm-15:~$. You need to specify the regular expression of the obtained shell prompt qali\\@automationvm-15:~\\$\\s?$.\nCommand Timeout\rDefault value.\rExpected Exit Codes\rDefault value.\rResponse Parser\rDefault value.\rExecutors – Invoke Web API Request\nIntersight Orchestrator allows workflow designers to perform web API requests by using the Invoke Web API Request task in workflows. The Web API Request task allows executing web API requests on external targets not managed by Intersight or on the Intersight API endpoints.\nIntersight Orchestrator framework provides predefined reusable tasks that form the basis of workflows to automate customer operations. In some scenarios, predefined tasks are not enough to automate customer operations:\nNew parameters are added to the device specific API to enhance the existing functionality or the device exposes new functionality which is not available in the task library.\nTo orchestrate the device operations for devices that are not currently managed by Intersight.\nThe Web API Request task is an out-of-box solution that allows you to automate operations on the endpoints by invoking web APIs via HTTP or HTTPS. This feature allows a workflow designer to extend the automation capabilities of the workflow engine beyond what is natively available in the task library and interact with any HTTP or HTTPS endpoint.\nSupported Endpoints\nNatively supported Intersight targets on which a Web API Task is tested and verified are Cisco UCS Director, Pure Storage Flash Array, NetApp Active Iq Unified Manager, Hitachi Virtual Storage Platform, VMware vCenter Server, Terraform Cloud, and Cisco Application Policy Infrastructure Controller (APIC).\nNote: The Web API task is supported on Cisco UCS Director 6.8.3.0 or later.\nThe Web API task can also be executed on any HTTP(S) endpoint, which is added as HTTP Endpoint target type in Intersight Targets, provided the endpoint is reachable either directly from Intersight or via Intersight Assist when hosted on customer premises.\nHTTP Endpoints\nThe Invoke Web API Request task allows sending HTTP(S) requests to HTTP Endpoint. HTTP Endpoint is an external entity that can be configured under Intersight Targets and can be accessed in Intersight Orchestrator workflows through the APIs exposed by the endpoint. HTTP Endpoint must be accessed via Intersight Assist if the endpoint resides in customer premises. This can be facilitated by associating the Intersight Assist input while claiming the HTTP Endpoint target. The target entities that are directly reachable from the Intersight Cloud do not need Intersight Assist.\nEndpoints that support the following HTTP Authentication schemes can be added as Targets:\nBasic HTTP Authentication–Requires username and password to authenticate the endpoint.\nBearer Token Authentication–Requires token to authenticate the endpoint.\nNote: Bearer Token Authentication requires a valid access token to invoke the endpoint API. You should refresh the access token if it is expired and update the HTTP Endpoint target with the refreshed token.\nYou can also add HTTP Endpoint target without authentication. This is to facilitate invoking HTTP(S) API on the endpoints that do not require any authentication or on the endpoint that requires an authentication method that is not natively supported. In the later scenario, you should provide the authentication parameters in the required format in the web API task. The Invoke Nexus device API to authenticate using aaaLogin in the web API examples illustrate invoking web API task on Nexus switch that requires aaaLogin authentication mechanism.\nExternal targets not connected to Intersight can be modeled as HTTP Endpoint objects as follows:\nCapture all the required information to connect to and authenticate the target. For example, to invoke HTTP or HTTPS web APIs on the target using the Invoke Web API Request, HTTP Endpoint must have IP address, port number, and the authentication parameters to connect to the endpoint.\nSupports a single HTTP connection parameter set per Target and Target name is mandatory. HTTP Endpoint with different name having the same IP address or hostname cannot be created.\nUsing the Invoke Web API Request\nUse the Invoke Web API Request Task from Executors section in the Intersight Orchestrator UI to create a request for a target. The target can be Intersight API or an external endpoint added as HTTP Endpoint in the Intersight Targets. The following table explains the input properties.\nProperty\rDescription\rExternal Target\rMaps a HTTP Endpoint. An external target not selected indicates that the request will be considered as an Intersight API request.\rMethod\rStandard HTTP method requested for the specified URL.\rURL\rRelative URL of the RestAPI endpoint without hostname and port details. For external targets, this field points to the relative URL path of the RestAPI endpoint. If an external target is empty, this field points to the relative path of the Intersight API endpoint.\rHeaders\rRequest headers that are sent in the key value pairs. The values should be array of type string.\rCookies\rThe key value pairs provided in this input are sent in HTTP 'Cookie' header. The values should be array of type string.\rContent Type\rResponse content type. Currently supports JSON.\rBody\r(Optional) The request body includes two values: The content type of the request body—JSON or Text and the actual request body. The request body is a template if a workflow input or previous task output values are referred in the request body.\rResponse Parser\rStructure of the response parser providing a list of values to be extracted from the API response.\rOutcomes\r(Optional) Allows to define the custom API execution status and/or custom execution message based on the task outputs.\rTemplate Parameters\nThe request body template can refer to values from workflow inputs, previous task outputs, or implicit parameters for Intersight API calls. The following table explains the template parameters.\nPrefix/Format\rDescription\r{{.global.workflow.input.\u003cParameterName\u003e}}\rWorkflow input reference.\r{{.global.\u003cTaskRefName\u003e.output.\nParameters.\u003cParameterName\u003e}}\rPrevious task output reference. TaskRefName is the name of the previous task having output ParameterName.\r{{.security.AccountMoid}}\rImplicit parameter reference to Account MoID under which the workflow is running.\r{{.security.OrganizationMoid}}\rImplicit parameter reference to Organization MoID under which the workflow is running.\rTemplate Functions\nThe template engine has in-built functions to transform values before they are populated in the request templates. The following table explains the functions supported in Invoke Web API Request task.\nFunction\rDescription\rTrimSpace\rReturns a string after removing whitespaces from a the string.\nExample:\n{{TrimSpace .global.workflow.input.HostName}}\nContainsString\rReturns a boolean if a substring is present in a given string.\nExample:\n{{if (ContainsString .global.workflow.input.SizeAsString \\”MB\\”)}}Mega Bytes{{else}}Bytes{{end}}\nFindAllString\rReturns a slice of substrings matching the regular expression in a given string.\nExample:\n{{(FindAllString .global.workflow.input.NumberString \\”([0-9]+)\\”)}}\nThe above example returns array [“123”, “456”] for input string “123 some text 456.”\nToJson\rConverts a value to a JSON format.\nExample:\n{{(FindAllString .global.workflow.input.NumberString \\\"([0-9]+)\\\") | ToJson}}\nThe above example returns JSON array literal [“123”, “456”] for input string “123 some text 456.”\nAsArray\rTakes in an element and returns an array of one element.\nExample:\n{{AsArray .global.workflow.output.serverMo}}\nThe above example returns an array of one server Mo.\nSubstring\rReturns a substring within the given index bounds.\nExample:\n{{Substring .global.workflow.input.StorageId 2 6}}\nThe above example returns “ABCD” for string “12ABCD3456.”\nIpToCidr\rReturns the classless inter-domain routing (CIDR) notation of an IPv4 address and subnet mask.\nExample:\n{{IpToCidr .global.workflow.input.Ip .global.workflow.input.Netmask}}\nThe above example returns “10.10.10.10/24” for the input parameters “10.10.10.10” and “255.255.255.0.”\nLookupInSlice\rChecks if a given value is present in given slice or array and returns true if it exists. This function can be used for any value.\nExample:\n{{LookupInSlice .global.workflow.input.IpAddressList \\”10.10.10.10\\”}}\nThe above example returns true for input [”10.10.10.10”, “20.20.20.20”].\nIndex\rReturns a value from an array when an input index exists.\nExample:\n{{ index .global.workflow.input.nodes .global.workflow.input.idx }} In the above example, if nodes is an array of devices and idx is 2, the index function returns the second device in the array.\nItob\rConverts an integer to a boolean.\nExample:\n{{ Itob global.workflow.input.OnOffFlip }} The above example returns true and false for inputs 1 and 0 respectively.\nItoa\rConverts a given number to a string value.\nExample:\n{{ Itoa global.workflow.input.Port }} The above example returns “12345” for input 12345.\nItof\rConverts a given integer to a float value.\nExample:\n{{ Itof global.workflow.input.Rate }}\nThe above example returns 15.0 for an input 15.\nBtoa\rConverts a given boolean to a string value.\nExample:\n{{ Btoa global.workflow.input.OnOffFlip }}\nThe above example returns “true” for input true.\nBtoi\rConverts a given boolean to a integer value.\nExample:\n{{ Btoi global.workflow.input.OnOffFlip }}\nThe above example returns 1 and 0 for inputs true and false respectively.\nAtob\rConverts the given string into a Boolean value.\nExample:\n{{ Atob global.workflow.input.OnOffFlip }}Returns true for input “true”\nAtoi\rConverts a given number in string format to the integer type.\nExample:\n{{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”\nFtoa\rConverts a given number into the string form based on the given precision.\nExample:\n{{Ftoa .global.task.input.Size 2}} returns the following output: 123.456 =\u003e “123.45”, 1028 =\u003e “1028.00”\nFtoi\rConverts a given float input to a integer value.\nExample:\n{{ Ftoi global.workflow.input.Rate }}\nThe above example returns 15 for an input 15.833.\nEval\rSupports an expression evaluation function. The below example returns 2GB for a input value of 2048. Note that the second argument is passed as ‘.’ in the template, which represents the map of all parameters.\n{{Eval \\\"{{.global.workflow.input.Size}} / 1024\\\" .}}GB\nTemplate Engine Syntax\nThe template engine uses prefix notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.\nComparison Statements\nThe comparison statements can be written using eq (equal check), ne (not equal check), lt (less than check), le (less than or equal check), gt (greater than check), and ge (greater than or equal check).\nHere is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators and, ge, and lt are specified before their operands.\n{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}}\nConditional Statements\nThe template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.\n{{if \u003ccomparision_statement\u003e}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else}} Template to be used {{end}}\n{{if \u003ccomparision_statement\u003e}} Template to be used {{else if \u003ccomparision_statement}} Tempalte to be used {{end}}\nResponse Parser\nA response parser allows extracting values from API responses. A response parser is a collection of parameters that model values to be extracted from the API response. Each parameter needs to specify the following values:\nPath—Content specific path reference pointing to the location where the value is present in the response. Currently, JSON is supported. The path is JSONPath.\nName—Unique name in the response parser to identify and extract a specific value.\nType—Type of the value extracted from the response.\nNote: The values extracted using the response parser are populated in the task output parameters.\nOutcomes\nAn outcome is the combination of a condition and task status. You use the extracted values from the API response to determine the task status and set the status with an appropriate message, when the condition matches. You can specify one or more outcomes and the outcomes are evaluated in the specified order. The first outcome condition that matches, sets the task status and message. Outcomes is an optional input to web API task and if not specified, task status is set to failed when the HTTP status code is between 400 to 600, else the status is marked as successful.\nThe outcomes of a task are as follows:\nSuccess—Marks the task as Success if the condition matches.\nError—Marks the task as Failed if the condition matches.\nTerminal error—Marks the API execution as Failed if the condition matches. This marks a non-recoverable error and no retries are attempted.\nSkip Task Execution—Skips the execution of a task if the respective condition matches.\nOutcomes feature is illustrated in the example - Fetch details of NetApp volume using volume ID.\nWeb API Responses\nThe web API responses for the requests are sent in the following parameters as described in the following table.\nProperty\rDescription\rHeaders\rResponse headers extracted from the API response. The extracted response headers can be referred to and mapped using the following format:\n{{.global.\u003cTaskRefName\u003e.output.Headers.\u003cHeaderName\u003e}}.\nFor example if the task reference name is InvokeGenericWebApi1, to get ContentLength header, the reference name will be:\n{{.global.InvokeGenericWebApi1.output.Headers.ContentLength}}.\nCookies\rList of cookies obtained from the response in the form of key value pairs.\rStatus Code\rHTTP status code of the web API response.\rStatus Message\rHTTP status message of the web API response.\rParameters\rList of output parameters extracted from the response. The output capture template format is as follows:\n{{.global.[Name of the previous task].output.Parameters.\n[Name of the parameter in response parser of the previous task]}}\nFor example, if the response parser captures a string value as `Moid` from the API response, the corresponding output mapping for `Moid` is as follows:\n{{.global.[TaskRefName].output.Parameters.Moid}}\nIn the above example, TaskRefName refers to a task which has MOID as output parameter.\nNote: TaskRefName for the output mapping must be referred from the corresponding task name in the JSON View tab of Workflow Designer.\nWeb API Request Task Examples\nExample: Create a NetApp Volume and Create Snapshot of the Volume – Illustrates Task Output Mapping\nThe following example workflow has two Invoke Web API tasks. The first task shows how to create a NetApp volume. In this task, the UUID is extracted for the newly created volume from the response. The second task fetches the previously created volume details using the first task’s captured UUID output and Create Snapshot for the same Volume. This example assumes that the workflow inputs names are VolumeName, VolumeSize, StorageVM, and Aggregate already exists.\nThe following is a sample API request sent to NetApp to create a volume.\nPOST /api/storage/volumes?return_timeout=0\u0026return_records=true HTTP/1.1\n{\n“name”: “backup”,\n“size”: “4TB”, “svm”: {\n“name”: “backup-svm”\n},\n“aggregates”: [\n{\n“name”: “backup-aggregate”\n}\n]\n}\nThe following is a sample response received from NetApp.\n{\n“num_records”: 1, “records”: [\n{\n“uuid”: “19d79da1-2e89-11eb-9685-00a0986a3b4f”, “name”: “”,\n“size”:4294967296,\n“aggregates”: [\n{\n“name”: “backup-aggregate”\n}\n],\n“svm”: {\n“name”: “backup-svm”\n}\n}\n],\n“job”: {\n“uuid”: “19db360a-2e89-11eb-9685-00a0986a3b4f”, “_links”: {\n“self”: {\n“href”: “/api/cluster/jobs/19db360a-2e89-11eb-9685-00a0986a3b4f”\n}\n}\n}\n}\nFrom the above response, the JSON path for the uuid value in the records parameter is $.records[0].uuid.\nThe following table displays the required web API request task input and response parser to achieve the above requirements.\nProperty\rDescription\rTarget\rExternal targets can be mapped to Targets either as custom value or workflow input.\rMethod\r\"Method\": \"POST\",\rURL\r\"Url\": \"/api/storage/volumes?\nreturn_records=true\",\rBody\rThe request body has templates with values referred from workflow input as follows:\n\"Body\": {\n\"name\":\n\"{{.global.workflow.input.VolumeName}}\",\n\"size\":\n\"{{.global.workflow.input.VolumeSize}}\",\n\"svm\": {\n\"name\":\n\"{{.global.workflow.input.StorageVm}}\"\n},\n\"aggregates\": [\n{\n\"name\":\n\"{{.global.workflow.input.Aggregate}}\"\n}\n]\n}\nContent Type\r\"ContentType\": \"json\",\rResponse Parser\r\"ResponseParser\": {\n\"Parameters\": [\n{\n\"Name\": \"Uuid\",\n\"Path\": \"$.records[0].uuid\",\n\"Type\": \"string\"\n}\rThe following is a sample API request sent to NetApp to create snapshots using volume UUID:\nPOST /api/storage/volumes/19d79da1-2e89-11eb-9685-00a0986a3b4f/snapshots\n{“name”: “BackupVolume”, “comment”: “backup Data” }\nThe following is a sample response received from NetApp.\n{\n“job”: {\n“uuid”: “13194cda-7d20-11eb-9991-00a0986a3b4f”,\n“_links”: {\n“self”: {\n“href”: “/api/cluster/jobs/13194cda-7d20-11eb-9991-00a0986a3b4f”\n}\n}\n}\n}\nThe web API request task inputs and response parser are captured from the snapshots UUID. The URL input requires previous task’s UUID output. The name of web API tasks within a workflow is named InvokeGenericWebApi\u003cnumber\u003e, irrespective of what the user names it. To get previous task name through workflow designer, click the JSON View button and make a note of the Task Name, for example, InvokeGenericWebApi1.\nThe output mapping template format is as follows:\n{{.global.InvokeGenericWebApi1.output.Parameters.Uuid}}\nThe following table displays the required web API request task input and response parser to achieve the above requirements.\nProperty\rDescription\rTarget\rExternal targets can be mapped to Targets either as custom value or workflow input.\rMethod\r\"Method\": \"POST\",\rURL\r\"Url\": \"/api/storage/volumes/{{.global.InvokeGenericWebApi1.output.Parameters.Uuid}}/snapshots\",\nNote: InvokeGenericWebApi1 is the task reference name of the previous task in the workflow.\nBody\rThe request body has templates with values referred from workflow input as follows:\n\"Body\": {\"name\": \"{{.global.workflow.input.SnapshotName}}\", \"comment\": \"Backup Copy\" }\nContent Type\r\"ContentType\": \"json\",\rResponse Parser\r\"ResponseParser\": { \"Parameters\": [ { \"Name\": \"SUuid\", \"Path\": \"$.job.uuid\", \"Type\": \"string\" }\rExample: Create a Serial over LAN (SOL) Policy\nThe following example shows how to create Serial over LAN (SOL) in Intersight using RestAPI calls.\nThe following is a sample of the API request.\n{\n“Name”: “SolPolicy”,\n“ComPort”: “com0”,\n“Organization”: {\n“ObjectType”: “organization.Organization”,\n“Moid”: “5facccc96972652d305616a7”\n}\n}\nThe following is a sample API response.\n{\n“Moid”: “5fbcdca26275722d31de7519”,\n“ObjectType”: “sol.Policy”,\n“ClassId”: “sol.Policy”,\n“CreateTime”: “2020-11-24T10:12:51.160304663Z”,\n“ModTime”: “2020-11-24T10:12:51.160304663Z”,\n“Tags”: [],\n“Owners”: [\n“5facccc67564612d33a29166”\n],\n“SharedScope”: “”,\n“AccountMoid”: “5facccc67564612d33a29166”,\n“DomainGroupMoid”: “5facccc67564612d33a29167”,\n“Ancestors”: null,\n“PermissionResources”: [{\n“ObjectType”: “organization.Organization”,\n“ClassId”: “mo.MoRef”,\n“Moid”: “5facccc96972652d305616a7”,\n“link”: “https://intersight.com/api/v1/organization/Organizations/5facccc96972652d305616a7\"\n}],\n“Description”: “”,\n“Name”: “SolPolicy”,\n“BaudRate”: 9600,\n“ComPort”: “com0”,\n“Enabled”: true,\n“SshPort”: 2400,\n“Organization”: {\n“ObjectType”: “organization.Organization”,\n“ClassId”: “mo.MoRef”,\n“Moid”: “5facccc96972652d305616a7”,\n“link”: “https://intersight.com/api/v1/organization/Organizations/5facccc96972652d305616a7\"\n},\n“Profiles”: null\n}\nThe following table explains the input properties.\nProperty\rDescription\rMethod\rPOST\rURL\r/v1/sol/Policies\rContent Type\rJSON\rBody\rThe Text field will have the following value:\n{\n\"Name\": \"{{.global.workflow.input.Name}}\",\n\"ComPort\": \"{{.global.workflow.input.ComPort}}\",\n\"Organization\": {\n\"ObjectType\": \"organization.Organization\",\n\"Moid\": \"{{.security.OrganizationMoid}}\"\n}\n}\nThe Content Type must be JSON.\nResponse Parser\rThe Response Parser field will have the following parameter:\nName:\nMOID\nPath:\n$.Moid\nType:\nstring\nNote: The Body input parameter is optional as it would be empty for a GET call method.\nExample: Fetch details of NetApp volume using volume ID\nThe following example shows how to fetch the NetApp volume using Uuid of the volume. It demonstrates the usage of outcomes to set status of API execution and status message based on the API response.\nThe following is a sample URL of the request\n/api/storage/volumes/0049cef7-8a23-11ea-87ab-00a098605c19\nThe following is a sample API response.\n{\n“uuid”: “0049cef7-8a23-11ea-87ab-00a098605c19”,\n“name”: “backup_volume”,\n“size”: 1130258432,\n“state”: “online”,\n“aggregates”: [\n{\n“name”: “aggr01”,\n“uuid”: “8347fd83-34b1-4234-a8ba-6c53bad0fc6a”\n}\n],\n“snapmirror”: {\n“is_protected”: true\n},\n“space”: {\n“size”: 1130258432,\n“available”: 1065709568,\n“used”: 8036352\n}\n}\nThe following table explains the input properties.\nProperty\rDescription\rMethod\rGET\rURL\r/api/storage/volumes/0049cef7-8a23-11ea-87ab-00a098605c19\rContent Type\rJSON\rResponse Parser\r\"ResponseParser\": {\n\"Parameters\": [\n{\n\"Name\": \"Name\",\n\"Path\": \"$.name\",\n\"Type\": \"string\"\n},\n{\n\"Name\": \"State\",\n\"Path\": \"$.state\",\n\"Type\": \"string\"\n},\n{\n\"Name\": \"AvailableSize\",\n\"Path\": \"$.space.available\",\n\"Type\": \"float\"\n},\n{\n\"Name\": \"IsProtected\",\n\"Path\": \"$.snapmirror.is_protected\",\n\"Type\": \"boolean\"\n}\n]\n}\rOutcomes\r\"Outcomes\": [\n{\n\"Condition\": \"{{and (ge .local.response.HttpStatusCode 400)\n(lt .local.response.HttpStatusCode 600)}}\"\n\"Message\" : \"API request failed - {{.local.response.HttpStatusCode}}:{{.local.response.HttpStatusMsg}}\",\n\"Name\" : \"API Invoke Error\",\n\"Type\" : \"Error\"\n},\n{\n\"Condition\": \"{{ne .local.response.State \"online\"}}\",\n\"Message\" : \"Fetched Volume {{.local.response.Name}} is offline\",\n\"Name\" : \"Offline Volume\",\n\"Type\" : \"Error\"\n},\n{\n\"Condition\": \"{{lt .local.response.AvailableSize 100000000}}\",\n\"Message\" : \"Available space in the volume {{.local.response.Name}} is less than 100 MB.\",\n\"Name\" : \"Out of Space\",\n\"Type\" : \"Error\"\n},\n{\n\"Condition\": \"{{eq .local.response.IsProtected false}}\",\n\"Message\" : \"Fetched Volume {{.local.response.Name}} is not protected.\",\n\"Name\" : \"Insecure Volume\",\n\"Type\" : \"Error\"\n},\n{\n\"Condition\": \"true\",\n\"Message\" : \"Volume prerequisite checks succeeded.\",\n\"Name\" : \"All Good\",\n\"Type\" : \"Success\"\n}\n]\rThe response parser specification captures these outputs from the response such as Name, State, AvailableSize, and IsProtected.\nThe extracted values can be used to set the task status using outcomes. The syntax to refer the API outputs in outcomes is .local.response.\u003capi-output-parameter-name\u003e where api-output-parameter-name can refer:\nPredefined API output parameters such as HttpStatusCode, HttpStatusMsg\nOutput parameters captured using Response Parser.\nImportant: If the specified output parameter is not available, the template engine throws validation error message when API is executed. Following syntax can be used to check if output parameter exists in response and then use.\n{{if index .local.response api-param-name }} {{.local.response.\u003capi-output-parameter-name\u003e}} {{end}}\nIn this example, the following outcomes are added based on the API response.\nFor the API invocation error where the HTTP status code is between 400 to 600 indicates. If the condition evaluates to true then an error message is set to show the status code and status message. Outcome Property\rValue\rName\rAPI Invoke Error\nThe name identifies an outcome in the outcomes list. The name is not used for any other purpose.\nCondition\r{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 600)}}\nThis condition checks whether the response status code of API is between 400 and 600.\nOutcome Type\rError\nIf the Condition is true, status of API is set to Failed.\nMessage\rAPI request failed - {{.local.response.HttpStatusCode}}:{{.local.response.HttpStatusMsg}}\nIf the Condition is true, status message of API is set to above.\nAn API error is thrown if the fetched volume is not online. An example for string comparison is the following. Outcome Property\rValue\rName\rOffline Volume\nThe name identifies an outcome in the outcomes list. The name is not used for any other purpose.\nCondition\r{{ne .local.response.State \"online\"}}\nThis condition checks whether the captured output string State is equal to online. Please make sure the string value is enclosed in double quotes.\nOutcome Type\rError\nIf the Condition is true, status of API is set to Failed.\nMessage\rFetched Volume {{.local.response.Name}} is offline If the Condition is true, status message of API is set to above.\nAn API error is thrown if the fetched volume does not have a of minimum 100 MB free space. Outcome Property\rValue\rName\rOut of Space\nThe name identifies an outcome in the outcomes list. The name is not used for any other purpose.\nCondition\r{{lt .local.response.AvailableSize 100000000}}\nThis condition checks whether the available space is less than 100 MB. The fetched AvailableSize is of type float64.\nOutcome Type\rError\nIf the Condition is true, status of API is set to Failed.\nMessage\rAvailable space in the volume {{.local.response.Name}} is less than 100 MB\nIf the Condition is true, status message of API is set to above.\nAn API error is thrown if the fetched volume’s secure property is not set. An example for Boolean comparison is the following. Outcome Property\rValue\rName\rInsecure Volume\nThe name identifies an outcome in the outcomes list. The name is not used for any other purpose.\nCondition\r{{eq .local.response.IsProtected false}} This condition checks whether the captured IsProtected output parameter is not set.\nOutcome Type\rError\nIf the Condition is true, status of API is set to Failed.\nMessage\rFetched Volume {{.local.response.Name}} is not protected.\nIf the Condition is true, status message of API is set to above.\nThis can be termed as the final outcome for a successful completion. Outcome Property\rValue\rName\rAll Good\nThe name identifies an outcome in the outcomes list of task designer. The name is not used for any other purpose.\nCondition\rTrue\n{{eq .local.response.HttpStatusCode 200}}\nTrue can be used as the condition to capture all scenarios or the specific success response status code can be used, which is 200.\nOutcome Type\rSuccess\rMessage\rVolume prerequisite checks succeeded.\nAbove message is set as status message.\nExample: Invoke Nexus device API to authenticate using aaaLogin and create VLAN – Illustrates custom Target authentication in the web API workflow\nThe following example workflow has two Invoke Web API tasks. The first task shows how to authenticate against Nexus switch using aaaLogin and second API creates a VLAN on the switch using the authentication token extracted from the first login API. It is assumed that Nexus switch is added as HTTP Endpoint target without authentication parameters.\nThe following is a sample API request sent to authenticate against Nexus device and fetch the authentication token.\nURL : POST /api/aaaLogin.json\nBody:\n{\n“aaaUser”: {\n“attributes”: {\n“name”: “username”,\n“pwd”: “password”\n}\n}\n}\nThe following is a sample response received from Nexus device, Token key in the response holds the Token which should be used in subsequent API calls to authenticate.\n{\n“totalCount”: “1”,\n“imdata”: [\n{\n“aaaLogin”: {\n“attributes”: {\n“token”: “Token Value”,\n“refreshTimeoutSeconds”: “9600”,\n“maximumLifetimeSeconds”: “86400”,\n“guiIdleTimeoutSeconds”: “9600”,\n“userName”: “username”,\n}\n}\n}\n]\n}\nFrom the above response, the JSON path of the token value is $.imdata[0].aaaLogin.attributes.token.\nThe following table displays the required web API request task input and response parser to achieve the above requirements.\nProperty\rDescription\rTarget\rExternal targets can be mapped to Targets either as custom value or workflow input.\nNote: Nexus switch is added as HTTP Endpoint by disabling Authentication Required input slider.\nMethod\rPOST\rURL\r/api/aaaLogin.json\rBody\rThe request body has templates with values referred from workflow input as follows:\nPassword workflow input should be marked as secure property to make sure the value is hidden and encrypted while data-in-transit and data-at-rest.\n\"Body\": {\n{\n\"aaaUser\": {\n\"attributes\": {\n\"name\": \"{{.global.workflow.input.Username}}\",\n\"pwd\": \"{{.global.workflow.input.Password}}\",\n}\n}\n}\n}\nContent Type\rJSON\rResponse Parser\rThe Response Parser field will have the following parameter:\n\"ResponseParser\": {\n\"Parameters\": [\n{\n\"Name\": \"AuthToken\",\n\"Path\": \"$.imdata[0].aaaLogin.attributes.token\"\n\"Type\": \"string\"\n}\n]\n}\nThe following is a sample API request sent to Nexus switch to create VLAN 501 with authentication token populated in the cookie input.\nURL : POST /api/mo/sys/bd.json\nCookie : APIC-cookie=\u003cToken-Value\u003e\nBody :\n{\n“bdEntity”: {\n“children”: [\n{\n“l2BD”: {\n“attributes”: {\n“fabEncap”: “vlan-501”,\n“pcTag”: “1”\n}\n}\n}\n]\n}\n}\nThe output of first task “AuthToken” needs to be populated in the cookie input of the create VLAN task.\nThe output mapping template format is as follows:{{.global.InvokeGenericWebApi1.output.Parameters.AuthToken}}\nThe following table displays the required web API request task inputs to achieve the above requirements.\nProperty\rDescription\rTarget\rExternal targets can be mapped to Targets either as custom value or workflow input.\nNote: Nexus switch is added as HTTP Endpoint by disabling Authentication Required input slider.\nMethod\rPOST\rURL\r/api/mo/sys/bd.json\rCookie\r{\nAPIC-cookie={{.global.InvokeGenericWebApi1.output.Parameters.AuthToken}}\n}\rBody\r{\n\"bdEntity\": {\n\"children\": [\n{\n\"l2BD\": {\n\"attributes\": {\n\"fabEncap\": \"vlan-501\",\n\"pcTag\": \"1\"\n}\n}\n}\n]\n}\n}\rContent Type\rJSON\rExample: Create a Virtual Machine using Content Library and Attach a SCSI Controller to the created virtual machine–Illustrates Task Output Mapping\nThe following example workflow has two Invoke Web API tasks. The first task shows how to create a virtual machine using content library. In this task, the Virtual machine ID is extracted for the newly created virtual machine. The second task fetches the virtual machine ID of previously created virtual machine and add a SCSI controller to the created virtual machine. This example assumes that the workflow inputs names are libraryID, datastoreID, folderID, hostID, respoolID, and External Targets already exists.\nThe following is a sample API request sent to vCenter endpoint to create a virtual machine using content library.\nPOST /rest/com/vmware/vcenter/ovf/library-item/id:{{.global.workflow.input.libraryID}}?~action=deploy\n{\n{\n“deployment_spec”: {\n“accept_all_EULA”: true,\n“default_datastore_id”: “{{.global.workflow.input.datastoreID}}”\n},\n“target”: {\n“folder_id”: “{{.global.workflow.input.folderID}}”,\n“host_id”: “{{.global.workflow.input.hostID}}”,\n“resource_pool_id”: “{{.global.workflow.input.respoolID}}”\n}\n}\nThe following is a sample response received from NetApp.\n{\n“value”:\n{\n“resource_id”:\n{\n“id”:“vm-52491”\n“type”: “VirtualMachine”\n}\n“succeeded”:“true”\n}\n} From the above response, the JSON path for the id value in the resource_id parameter is $.value.resource_id.id\nThe following table displays the required web API request task input and response parser to achieve the above requirements.\nProperty\rDescription\rTarget\rExternal targets can be mapped to Targets either as custom value or workflow input.\rMethod\r\"Method\": \"POST\",\rURL\r\"Url\": \"/rest/com/vmware/vcenter/ovf/library-item/id:{{.global.workflow.input.libraryID}}?~action=deploy \",\rBody\rThe request body has templates with values referred from workflow input as follows:\n\"Body\": {\n\"deployment_spec\": {\n\"accept_all_EULA\": true,\n\"default_datastore_id\": \"{{.global.workflow.input.datastoreID}}\"\n},\n\"target\": {\n\"folder_id\": \"{{.global.workflow.input.folderID}}\",\n\"host_id\": \"{{.global.workflow.input.hostID}}\",\n\"resource_pool_id\": \"{{.global.workflow.input.respoolID}}\"\n}\n}\nContent Type\r\"ContentType\": \"json\",\rResponse Parser\r\"ResponseParser\": {\n\"Parameters\": [\n{\n\"Name\": \"vmID\",\n\"Path\": \"$.value.resource_id.id \",\n\"Type\": \"string\"\n}\rThe following is a sample API request sent to VMware vCenter endpoint to add SCSI controller using virtual machine ID:\nPOST /rest/vcenter/vm/vm-52491/hardware/adapter/scsi\n{“spec”: {“type”: “LSILOGICSAS”}} The following is a sample response received from VMware vCenter.\n{\n“value”:“1000”\n}\nThe URL input requires previous task’s vmID output. The name of web API tasks within a workflow is named InvokeGenericWebApi\u003cnumber\u003e, irrespective of what the user names it. To get previous task name through workflow designer, click the JSON View button and make a note of the Task Name, for example, InvokeGenericWebApi1.\nThe output mapping template format is as follows:\n{{.global.InvokeGenericWebApi1.output.Parameters.vmID}}\nProperty\rDescription\rTarget\rExternal targets can be mapped to Targets either as custom value or workflow input.\rMethod\r\"Method\": \"POST\",\rURL\r\"Url\": \"/rest/vcenter/vm/{{.global.InvokeGenericWebApi1.output.Parameters.vmID}}/hardware/adapter/scsi \",\nNote: InvokeGenericWebApi1 is the task reference name of the previous task in the workflow.\nBody\rThe request body has templates with values referred from workflow input as follows:\n\"Body\": {\"spec\": {\"type\": \"LSILOGICSAS\"}\nContent Type\r\"ContentType\": \"json\",\rResponse Parser\r\"ResponseParser\": { \"Parameters\": [ { \"Name\": \"value\", \"Path\": \"$.value\", \"Type\": \"string\" }\rUpgrading Connector Packs on UCS Director Instances\nCisco Intersight introduces the ability to update connector pack versions that are installed on claimed UCS Director instances. After claiming a UCS Director instance in Intersight, as an account administrator, you can perform the following actions:\nView a list of updated versions for currently installed connector packs on the UCS Director instance. The list of updated versions available for connector packs is based on the UCS Director software version installed on the instance. Download and install the updated versions of the connector packs on the UCS Director instance. You can either install the updated versions immediately after downloading them or you can install it at a later point in time. From Cisco Intersight, you can view and install updated versions of connector packs only. You cannot download and install updated versions of Cisco UCS Director. To install the latest versions of Cisco UCS Director, you must download it from Cisco.com. For more information, see the Cisco UCS Director Installation and Upgrade Guides.\nPrerequisites and Guidelines\nThis feature is available only with UCS Director version 6.7(4.0) and later versions.\nIn an optimized multi-node configuration, the updated connector pack versions are installed on the primary node.\nInstalling updated versions of connector packs on a UCS Director instance will result in the UCS Director services restarting. All users who are logged in to the UCS Director instance will be automatically logged out.\nPrior to installing the updated versions of the connector packs, take a backup of the data on the UCS Director instance. For more information, see Backup and Restore for Cisco UCS Director Instances.\nFrom Cisco Intersight, you can download and update all connector packs on a UCS Director instance. You cannot download and install specific connector packs. If you want to install specific connector packs, then you must use the UCS Director user interface. For more information, see the Cisco UCS Director Administration Guide.\nFor customers using Intersight Private Virtual Appliance, the connector packs are available in the Intersight Private Virtual Appliance account.\nUpdating Connector Pack Versions on UCS Director Instances\nFrom the table view of the UCS Director instances, select a UCS Director instance and click Update Software.\nIn the Update Software screen, wait for the screen to populate information on the updated versions of connector packs. The following information is displayed:\nConnector Pack Version Information—Displays the names of the connector packs, versions of the connector packs installed on the UCS Director instance and the latest version number for each connector pack. This information is based on the last inventory run on the UCS Director instance. The inventory runs every 12 hours. UCS Director Instance Information—Displays the UCS Director instance name, management IP address, environment in which the instance is deployed, the installed UCS Director software version and the time when the last inventory process was run on the instance. Choose one of the following options: Click Download to Instance to download the new versions of the connector packs to the UCS Director instance. After the connector packs are downloaded, you can either choose to install the updated connector packs right away, or at a later point. If you want to install specific connector pack versions on the UCS Director instance, then you must use the UCS Director user interface. Click Download and Update to download the new versions of the connector packs and install these versions on the UCS Director instance immediately. Note: Installing latest versions of connector packs on the UCS Director instance will result in a restart of the UCS Director services. All logged in users are automatically logged out when the services restart.\nTo view the progress of the installation process, choose Requests on the header pane, and click View All.\nChoose a workflow name to view the details.\nBackup and Restore for UCS Director in Intersight\nOverview\nCisco Intersight introduces the ability to take backups and restore backups for claimed UCS Director instances. After claiming a UCS Director instance in Intersight, as an account administrator, you can perform the following tasks:\nTake a backup of Cisco UCS Director—You can either create a backup policy to run at a scheduled time or you can perform an on-demand backup. For either of these options, you can choose to have the backed up files stored on the local UCS Director instance or you can specify a system on the network.\nView a list of backups—You can view the list of backup processes that have run on all UCS Director instances.\nRestore data from a backup image—You can choose a backup image and restore it on a UCS Director instance.\nDownload Connector Packs—You can download the latest versions of installed connector packs on a UCS Director instance.\nA user with read-only privileges can only view the list of backup processes that have run on all UCS Director instances.\nPrerequisites and Guidelines\nDevice Connector version 1.0.9-1165 or higher must be installed.\nCisco UCS Director Base Platform Pack version 6.7.3.1 or later must be installed on the UCS Director instance to use the backup and restore feature. In an optimized multi-node setup, prior to installing or upgrading the base platform pack to version 6.7.3.1 or later, you must first configure passwordless authentication between the primary node and the database node.\nYou can take backups and restore backups in both, single node and optimized multi-node configurations. However, you cannot take backups of a UCS Director instance in a single node configuration and restore it on an instance in an optimized multi-node configuration.\nIf the versions of the connector packs in the backup image are more recent than the connector pack versions installed on the UCS Director instance that you want to restore the backup to, then the restore process upgrades the connector packs on the UCS Director instance to the latest version.\nIf the file location specified for an on-demand backup process and a scheduled backup process is the same, then the file created by the on-demand backup process is deleted based on the retention copies configured in the backup schedule.\nRunning an Immediate Backup for UCS Director Instances\nAn immediate backup is a point-in-time process and is initiated immediately after you provide the backup details. Prior to initiating this backup, you must specify if the backup file must be stored on the current UCS Director instance or on a specific system in the network.\nFrom the table view of the UCS Director instances, select a UCS Director instance and click Backup.\nIn the General page, review the details of the UCS Director instance that is displayed, and click Next.\nIn the Configure Backup page, specify the location of the backup file.\nSelected Instance—Implies that the backup file must be stored on the current UCS Director instance.\nNetwork Share—Implies that the backup file must be stored in a location external to the current UCS Direct instance.\nIf you chose Selected Instance, provide the following information: Field\rDescription\rBackup Filename Prefix\rA prefix for the name of the backup file. A unique file name is created for the backup image that includes the specified prefix and the timestamp.\rIf you chose Network Share, provide the following information: Field\rDescription\rBackup Filename Prefix\rA prefix for the name of the backup file. A unique file name is created for the backup that includes the specified prefix and the timestamp.\rProtocol\rProtocol to be used to transfer the backup file to the location where the file must be stored. It can be one of the following:\nSCP\nSFTP\nFTP\nImportant: Storing backup files on anonymous FTP servers is currently not supported.\nFile Location\rThe location where the backup file must be stored. You must provide the IP address or the hostname of the location and the complete file system path.\nFor example: 10.10.10.10/var/backup.\nUsername\rUser name for the backup server.\rPassword\rPassword for the user name of the backup server.\rClick Save. The backup process is initiated immediately. You can view the the list of backup files from the Backups tab. Creating a Backup Schedule\nYou can create a backup schedule to ensure that backups run at a stipulated time and backup images are stored at a specific location. You can choose to store the backup files either in the root directory of the UCS Director instance or choose a different location on the network.\nFrom the table view of the UCS Director instances, select a UCS Director instance and click Schedule Backup.\nIn the General page, review the details of the UCS Director instance that is displayed, and click Next.\nIn the Configure Backup page, specify the organization that the UCS Director instance belongs to and the type of schedule you want to create.\nOrganizations—Displays the list of organizations that the UCS Director instance belongs to. By choosing a specific organization from this list, it allows administrators of those specific organizations to view backup images created for this instance, and restore from those images.\nDaily—The backup schedule runs every day, starting with the date and time you select.\nPeriodic—The backup schedule runs periodically, starting with the date and time interval you select. By default, a periodic backup schedule runs every 8 hours. Other options include 4, 12, 16, or 20.\nSpecify the location where the backup file must be stored. It can be one of the following: Selected Instance—Default option. The backup file is stored on the current UCS Director instance.\nNetwork Share—The backup file is stored in a location external to the current UCS Direct instance.\nIf you chose Selected Instance, provide the following information: Field\rDescription\rBackup Filename Prefix\rA prefix for the name of the backup file. A unique file name is created for the backup image that includes the specified prefix and the timestamp.\rRetention Copies\rThe number of backup copies maintained on the server.\rIf you chose Network Share, provide the following information: Field\rDescription\rBackup Filename Prefix\rA prefix for the name of the backup file. A unique file name is created for the backup image that includes the specified prefix and the timestamp.\rProtocol\rProtocol to be used to transfer the backup image to the location where the image must be stored. It can be one of the following:\nSCP\nSFTP\nFTP\nImportant: Storing backup images on anonymous FTP servers is currently not supported.\nFile Location\rThe location where the backup file must be stored. Provide the IP address or the hostname of the location and the complete file system path. For example: 10.10.10.10/var/backup.\rUsername\rUser name for the backup server.\rPassword\rPassword for the user name of the backup server.\rRetention Copies\rThe number of backup copies maintained on the server.\rClick Save. Note: To edit a backup schedule at a later point in time, select the UCS Director instance and click Schedule Backup. In the subsequent panes, edit the values of the fields and click Save.\nViewing Backup Files for UCS Director Instances\nThe Backups tab displays the list of backup files that have been created for all UCS Director instances claimed in Intersight. On this tab, you can view the following information:\nLast Modified—The time when backups were performed on UCS Director instances.\nStatus—The status of backup processes. It can be Failed or Completed.\nBackup Server IP—The IP address of the backup server where the backup files are stored.\nLocation—The complete path to the backup file on the backup server.\nBackup File Name—The name of the backup file created.\nFile Size (MB)—The size of the backup file.\nDuration (minutes)—The duration of the backup process.\nInstance—The IP address of the UCS Director instance.\nOrganizations—The organizations that the UCS Director instance is associated with.\nRestoring a Backup Image for a UCS Director Instance\nYou can restore a backup image that is of the same version that is running on the selected UCS Director instance. While restoring a backup image, if more recent versions of connector packs that are currently installed on the UCS Director instance are available, then the restore process will also upgrade the connector pack versions to the latest versions.\nFrom the table view of the UCS Director instances, select a UCS Director instance and click Restore From Backup.\nIn the Backup Selection page, use the toggle bar to indicate if you want to exclude the licensing information while restoring the backup image.\nReview the list of backup files available for the selected UCS Director instance and select the backup file to restore.\nImportant: The list of backup files displayed is dependent on the platform version of the UCS Director instance that you selected in step 1.\nClick Next.\nIn the Backup Location page, modify the following fields, if required:\nField\rDescription\rProtocol\rProtocol to transfer the backup image to the location where the image must be restored. It can be one of the following:\nSCP\nSFTP\nFTP\nThis value is auto-populated. You cannot modify the protocol if you have chosen to restore from a local backup image.\nFile Location\rThis field is auto-populated based on the backup image that you selected in the Backup Selection page.\rUsername\rUser name of the backup server name.\rPassword\rPassword of the user name of the backup server name.\rClick Next.\nIn the Summary page, review the information that is displayed and click Restore.\nTo view the progress of the restore process, choose Requests on the header pane and click View All.\nClick a workflow name to view the details of the process.\n","categories":["ICO"],"description":"Cisco Intersight ICO","excerpt":"Cisco Intersight ICO","ref":"/docs/ico/ico-cleanup/","tags":["Workflow"],"title":"Cisco Intersight ICO - Post-conversion Cleanup"},{"body":"Dette er landingssiden til en seksjon på øverste nivå.\nOppsummer Seksjonen din Her ","categories":"","description":"","excerpt":"Dette er landingssiden til en seksjon på øverste nivå.\nOppsummer …","ref":"/no/docs/","tags":"","title":"TechOS-Dokumentasjon"},{"body":"Cisco Intersight is a cloud operations platform that consists of optional, modular capabilities of advanced infrastructure, workload optimization, and Kubernetes services. Cisco Intersight infrastructure services include the deployment, monitoring, management, and support of your physical and virtual infrastructure. It supports Cisco Unified Computing System (Cisco UCS) and Cisco HyperFlex hyperconverged infrastructure (HCI), and other third-party Intersight-connected targets. The level of functionality may vary by target type.\nWith Intersight, you get all of the benefits of SaaS delivery and full lifecycle management of distributed Intersight-connected servers and third-party storage across data centers, remote sites, branch offices, and edge environments. This empowers you to analyze, update, fix, and automate your environment in ways that were not possible with prior generations’ tools. As a result, your organization can achieve significant TCO savings and deliver applications faster in support of new business initiatives.\nThe Intersight platform works in conjunction with Cisco UCS Manager, Cisco Integrated Management Controller (IMC), and Cisco HyperFlex Connect. You can simply associate a model-based configuration to provision servers and associated storage and fabric automatically, regardless of form factor. Using profiles, IT staff can consistently align policy, server personality, and workloads. These policies can be created once and used to simplify server deployments, resulting in improved productivity and compliance, and lower risk of failures due to inconsistent configuration. In addition, Cisco provides integrations to third-party operations tools, starting with ServiceNow, to allow customers to use their existing solutions more efficiently.\nCisco Intersight offers flexible deployment either as Software as a Service (SaaS) on Intersight.com or running on your premises as Cisco Intersight Virtual Appliance. The virtual appliance provides the benefits of Cisco Intersight while allowing more flexibility for those with additional data locality and security requirements. The Cisco Intersight connected Virtual Appliance software can be deployed on premises, allowing users to take advantage of the SaaS functionality. The Private Virtual Appliance can be deployed on premises with further security restrictions. To learn more about the virtual appliance, see the Cisco Intersight Virtual Appliance Getting Started Guide.\nCisco Intersight includes an API that supports the OpenAPI Specification, a powerful definition format to describe RESTful APIs. Support for the OpenAPI specification provides access to an interoperable REST API with tools that automate the generation of the Intersight API documentation, API schemas, and SDKs. The Intersight API includes fully functional Python and PowerShell SDKs.\nTo get started with Intersight, watch the Getting Started with Cisco Intersight Infrastructure Services video.\n","categories":["Examples","Placeholders"],"description":"What does your user need to know to try your project?\n","excerpt":"What does your user need to know to try your project?\n","ref":"/docs/getting-started/","tags":["test","docs"],"title":"Overview"},{"body":"","categories":"","description":"","excerpt":"","ref":"/fa/blog/news/","tags":"","title":"اخبار داکسی"},{"body":" این صفحه به شما نشان می‌دهد چگونه از این پوسته استفاده کنید.\nاین قسمت مکانیست که مستندات کاربران در آن قرار دارد. همه‌ی اطلاعاتی که کاربران شما نیاز به فهمیدن دارند تا به درستی از پروژه شما استفاده کنند.\nبرای مستندات بزرگتر ما پیشنهاد می‌کنیم مطالب را طبق این مثال قرار دهید. البته ممکن است بعضی از آنها نیاز نباشد. پس در حذف و اضافه کردن مطالب خود راحت باشید. نمونه کوچکتر مستندات داکسی را می‌توانید در اینجا مشاهده کنید که در مخزن گیتهاب پوسته داکسی قرار دارد.\nبرای فهمیدن چگونگی استفاده از پوسته داکسی، از رهنمود‌های پوسته داکسی استفاده کنید. همچنین می‌توانید در باره‌ی چگونگی مرتب کردن مستندات خود در اینجا بخوانید.\n","categories":"","description":"","excerpt":" این صفحه به شما نشان می‌دهد چگونه از این پوسته استفاده کنید.\nاین قسمت …","ref":"/fa/docs/","tags":"","title":"مستندات"},{"body":"","categories":"","description":"","excerpt":"","ref":"/fa/blog/releases/","tags":"","title":"نسخه های منتشر شده"},{"body":"","categories":"","description":"Intersight Orchestrator allows workflow designers to perform executor tasks on endpoint in workflows. For more information, see:\n","excerpt":"Intersight Orchestrator allows workflow designers to perform executor …","ref":"/docs/ico/executors/","tags":"","title":"Executors"},{"body":"","categories":"","description":"","excerpt":"","ref":"/docs/whats_new/","tags":"","title":"What's New"},{"body":"","categories":"","description":"Cisco Intersight Cloud Orchestrator simplifies orchestration and automation for infrastructure and workloads across hybrid cloud by providing an easy-to-use workflow designer.\n","excerpt":"Cisco Intersight Cloud Orchestrator simplifies orchestration and …","ref":"/docs/ico/","tags":"","title":"Intersight Cloud Ochestrator"},{"body":"","categories":"","description":"New Features in Hulk 2.0","excerpt":"New Features in Hulk 2.0","ref":"/docs/ico_new/","tags":"","title":"Hulk 2.0"},{"body":"\rAbout Goldydocs A sample site using the Docsy Hugo theme.\rGoldydocs is a sample site using the Docsy Hugo theme that shows what\rit can do and provides you with a template site structure. It’s designed for you to clone and edit as much as you\rlike. See the different sections of the documentation and site for more ideas.\rThis is another section\rThis is another section\r","categories":"","description":"","excerpt":"\rAbout Goldydocs A sample site using the Docsy Hugo theme.\rGoldydocs …","ref":"/features/","tags":"","title":"Features"},{"body":"\rCSCwb90747 - Intersight Cloud Orchestrator: HSM Enabled field goes to disabled state even after enabling in the UI.\rStatus: Resolved\nDate: August 11, 2022\nWorkaround: For an Intersight Account with Intersight Workload Optimizer (IWO) license, the Hardware Support Manager (HSM) will go back to disabled state even after enabling HSM in the UI. However, the HSM functionality works as expected.\nCSCwb45235 - Intersight Cloud Orchestrator: Support for variables mapping to and from serial loop tasks.\rStatus: Resolved\nDate: August 11, 2022\nWorkaround: Variable support is added for Serial Loop.\nCSCwb30421 - Intersight Cloud Orchestrator: Workflow execution terminates if input array size is less than the loop count or condition.\rStatus: Resolved\nDate: August 11, 2022\nWorkaround: Workflow execution continues when input array size is less than the loop count or condition.\nCSCwb20925 - Intersight Managed Mode: Server Inventory fails to display the latest Server Certificate.\rStatus: Resolved\nDate: August 25, 2022\nWorkaround: In Cisco UCS B-Series servers, the Server Inventory Page does not display the latest Server Certificate due to delayed Unified Endpoint Management (UEM) events.\nCSCvz44489 - Intersight Managed Mode: The Not Deployed Changes message is not displayed when the UUID property is modified.\rStatus: Resolved\nDate: February 3, 2022\nWorkaround: When the UUID property is modified for a previously deployed Server Profile, the server profile status shows OK instead of Not Deployed Changes\nCSCwa44246 - Intersight Managed Mode: Out-of-Band IP address on an Intersight Managed Mode server becomes unreachable after Fabric Interconnect reboot\rStatus: Resolved\nDate: February 3, 2022\nWorkaround: The Out-of-Band IP address configured on an Intersight Managed Mode server using the IMC Access policy becomes unreachable after Fabric Interconnect reboot.\nCSCvz25126 - Intersight Managed Mode: The power consumption reading of UCSX-210C-M6 server is lower than the actual power that the server consumes.\rStatus: Resolved\nDate: December 2, 2021\nWorkaround: When the UCSX-210C-M6 server is powered on, the power consumption reading is lower than the actual power that the server consumes. The difference amount is -7% to -8% of the actual power.\nCSCvz36957 - Intersight Managed Mode: The server UUID defined during server profile deployment is not displayed on the Server Inventory page for Cisco UCS C-series servers.\rStatus: Resolved\nDate: October 26, 2021\nWorkaround: When the server profile deployment is complete, the latest UUID is not displayed on the Server Inventory page, even after the server restart. This issue is specifically observed on Cisco UCS C-series servers.\nCSCvz08702 - Intersight Managed Mode: NVMe controllers are not displayed on the HCL Validation page\rStatus: Resolved\nDate: October 14, 2021\nWorkaround: The Non-Volatile Memory Express (NVMe) controllers are not displayed in HCL Validation page. However, the controllers are displayed in the Server Inventory page. This will result in incorrect HCL evaluation.\nCSCvv50863 – Intersight Managed Mode: ISO mapping fails when port numbers are explicitly mentioned in NI-HUU or NI-SCU config files\rStatus: Resolved\nDate: October 14, 2021\nWorkaround: Upgrade from a custom port is not supported for servers running software version earlier than Cisco IMC 4.0(4m).\nCSCvz84786 - Infrastructure: On the Software Downloads page, the tabs are not clickable for the existing users\rStatus: Resolved\nDate: October 14, 2021\nWorkaround: The existing users are not able to click the tabs present on the Software Downloads page. New users do not face this issue.\nCSCvz25321 - Intersight Managed Mode: Python OS Discovery Tool (ODT) fails on UCSX 210C M6 servers for Linux OS\rStatus: Resolved\nDate: October 7, 2021\nWorkaround: Python ODT is currently not supported on UCSX 210C M6 servers for the Linux OS that includes Red Hat Enterprise Linux (RHEL), SUSE Linux Enterprise Server(SLES), Ubuntu Sever, CentOS, and Oracle Linux. This will result in ODT script failure.\nCSCvz72536 - Infrastructure: Organization edit operation is not working as expected\rStatus: Resolved\nDate: October 1, 2021\nWorkaround: While editing the Organization name results in removal of the Resource Groups and editing the Organization name along with unselecting/selecting the Resource Group, results in the Organization edit page becoming unresponsive.\nCSCvy00846 - Intersight Managed Mode: The user configuration on blades may be lost when there is a power outage to a rack hosting the Fabric Interconnect and Chassis\rStatus: Resolved\nDate: September 30, 2021\nWorkaround: When there is a power outage to a rack, all user configuration on the blade servers may be lost.\nCSCvz48955 - Intersight Virtual Appliance: The APIDocs for Storage Policy is not in sync with the UI and API\rStatus: Resolved\nDate: September 30, 2021\nWorkaround: You can now fetch and modify Storage policies using APIDocs URI\nCSCvu88769 - Infrastructure: The embedded installation mode fails when using file server with domain name\rStatus: Resolved\nDate: September 23, 2020\nWorkaround: The embedded installation mode fails when using file server with domain name.\nCSCvv61398 - Infrastructure: Target claim fails if the password for the admin login includes any of the XML reserved\rStatus: Resolved\nDate: September 23, 2020\nWorkaround: The issue of target claim failing if the password for the admin login includes any of the XML reserved characters (\u0026, \u003c, \u003e, “, ‘) has been resolved.\nCSCvz46580 - Intersight Managed Mode: vKVM SSO login might show Login denied after the system time is changed on Cisco IMC\rStatus: Resolved\nDate: September 23, 2020\nWorkaround: vKVM SSO login might show Login denied after the system time is changed on the Cisco IMC version between 4.1(3a) and 4.1(3d).\nCSCvz14268 – Intersight Managed Mode: For the cluster Fabric Interconnect, redeployment of the server profile fails on the rack server\rStatus: Resolved\nDate: September 23, 2020\nWorkaround: Redeployment of the server profile on the rack server fails with the error that the Domain Profile is not associated with the Fabric Interconnects to which the server is attached. This error appears even though the Domain Profile was deployed on the Fabric Interconnects\nCSCvy77588 – Intersight Managed Mode: M6 servers in IMM do not show the local disks during server discovery\rStatus: Resolved\nDate: September 16, 2021\nWorkaround: The M6 servers in IMM do not show the local disks on server discovery after decommissioning/recommissioning.\nCSCvz22743 - Intersight Managed Mode: Direct upgrade fails for M6 server when the proxy is not set in the Device Connector\rStatus: Resolved\nDate: September 2, 2021\nWorkaround: Direct upgrade of M6 standalone servers fails if the proxy is not set on the device connector.\nCSCvz14208 – Intersight Managed Mode: The Replace option is not available in the Detailed View page of the Fabric Interconnect that is to be replaced\rStatus: Resolved\nDate: July 30, 2021\nWorkaround: Replace Fabric Interconnect and Replace UCS Domain options are added to the Actions menu in the Fabric Interconnect Detailed View page.\nCSCvy65585 - Intersight Managed Mode: Physical disk and Virtual Drives states are not updated in Server inventory report\rStatus: Resolved\nDate: July 22, 2021\nWorkaround: For M6 standalone servers, the state of the physical drives and virtual disks is not updated even after the storage policy is deployed. The virtual drive creation and set state actions are carried out, and the drive state alone is not updated in Server inventory page. This behavior is observed with firmware 4.2(1a). The fix is expected in 4.2(1b).\nCSCvy50227 – Intersight Managed Mode: Upgrade Impact Error is observed when EFT image is selected for an upgrade\rStatus: Resolved\nDate: June 10, 2021\nWorkaround: The selected image appears invalid when the user tries an upgrade using an EFT firmware bundle.\nCSCvy21552 - Intersight Managed Mode: BIOS POST is pending during upgrade of Cisco UCS B200 M5 Blade Server for more than 12 minutes\rStatus: Resolved\nDate: June 9, 2021\nWorkaround: The upgrade of Cisco UCS B200 M5 Blade Server is failed with timeout error as the BIOS POST was in pending status for more than 12 minutes. This issue is resolved in the infrastructure B and C bundles 4.1(3e).\nCSCvy31340 - Security: Migration of One Identity to the identity provider Okta is complete\rStatus: Resolved\nDate: June 3, 2021\nWorkaround: Multi-Factor Authentication now works for all Cisco domain users.\nCSCvv35790 - Intersight Managed Mode: Tunneled vKVM fails when using server firmware version 4.1(2a)\rStatus: Resolved\nDate: May 25, 2021\nWorkaround: Tunneled vKVM fails when using server firmware version 4.1(2a).\nCSCvx43924 – Intersight Managed Mode: The discovery workflow of rack server gets into a loop and fails\rStatus: Resolved\nDate: May 20, 2021\nWorkaround: When the firmware 4.1(3a) or 4.1(3b), is running on the endpoint, the discovery workflow of rack server may get into a loop and fails. CSCvy35774 - Intersight Managed Mode: Launch of Tunneled vKVM fails with specific hostname format\rStatus: Resolved\nDate: May 18, 2021\nWorkaround: Tunneled vKVM fails to launch with hostnames in the format of www.intersight.com or {account_moid}.intersight.com.\nCSCvx39905 – Intersight Managed Mode: All the assigned policies may not sync when template configured with all the supported policies is attached to a Server Profile\rStatus: Resolved\nDate: May 13, 2021\nWorkaround: When an imported standalone server profile is attached to a standalone server template configured with a completely different set of policies, then some of the server template policies may not sync to the server profile.\nCSCvt20882 – Intersight Managed Mode: Chrome browser throws an error and does not let the user to proceed and launch KVM\rStatus: Resolved\nDate: May 13, 2021\nWorkaround: This failure is due to stronger security restrictions in the browser for a self-signed server certificate. Trying another browser that allows such exceptions, such as Firefox, can solve the issue.\nCSCvy08053 – Intersight Managed Mode: The false HDD missing alarms are displayed on servers\rStatus: Resolved\nDate: May 5, 2021\nWorkaround: Though the HDD is not removed, the EquipmentFruMissing alarm is displayed.\nCSCvx16605 - Infrastructure: The health status of a server or Fabric Interconnect is updated in the Cisco Intersight user interface, whereas the health status does not synchronize to the device console\rStatus: Resolved\nDate: May 6, 2021\nWorkaround: The health status of a server or Fabric Interconnect is updated in the Cisco Intersight user interface, whereas the health status does not synchronize to the device console.\nCSCvx58446 - UCSM Managed Mode: The UMM server upgrade workflow fails at the firmware image download stage\rStatus: Resolved\nDate: April 29, 2021\nWorkaround: The UMM server upgrade workflow fails at the firmware image download stage.\nCSCvx01686 - Infrastructure: State cannot be set for the physical drives on M.2 controller\rStatus: Resolved\nDate: April 22, 2021\nWorkaround: Set State action of MSTOR-RAID/M.2 controller on physical disk tab is disabled.\nCSCwa77606 - Kubernetes: Error while deleting worker node groups\rStatus: Resolved\nDate: February 10, 2022\nWorkaround: An error occurs when you delete a Worker Node Group from the Worker Node Pools Configuration screen.\nCSCvz66973 - Kubernetes: Unable to change a VM configuration\rStatus: Resolved\nDate: February 10, 2022\nWorkaround: VM resizing is not supported.\nCSCvy59071 - Kubernetes: Missing privileges for the Kubernetes Operator role\rStatus: Resolved\nDate: February 10, 2022\nWorkaround: A user with the Kubernetes Operator role is not able to download the KubeConfig and deploy add-ons to an existing clusters.\nCSCwa69598 - Kubernetes: Hyperlinks to the optional add-ons are disabled\rStatus: Resolved\nDate: February 03, 2022\nWorkaround: Hyperlinks to the optional add-ons such as Grafana, Kubernetes Dashboard, and SMM Dashboard, are disabled in the Operate tab of the Cluster Details page.\nCSCwa51286 - Kubernetes: Prometheus crashes repeatedly when Persistent Volume exceeds the configured storage capacity\rStatus: Resolved\nDate: February 03, 2022\nWorkaround: Prometheus crashes repeatedly when you use Persistent Volume with the default size of 20 GB.\nCSCwa25562 - Kubernetes: Add-on installation fails after an incomplete uninstall\rStatus: Resolved\nDate: February 03, 2022\nWorkaround: If an add-on is not completely uninstalled, a subsequent add-on installation will fail. Even though the ‘helm -n iks ls` list command does not list any add-on resources, it is possible that some of the resources are not removed. This issue causes a subsequent add-on installation to fail.\nCSCvz24357 - Kubernetes: Add-on URLs do not work\rStatus: Resolved\nDate: February 03, 2022\nWorkaround: If more than 1 LoadBalancer IP address is assigned to a cluster, the add-on URL does not work.\nCSCvz99130 - Kubernetes: Status and address information is missing from IKS inventory collection\rStatus: Resolved\nDate: February 03, 2022\nWorkaround: The IKS inventory collection is dropping data about the node status and IP addresses due to misconfiguration of the inventory yaml.\nCSCvz88105 - Kubernetes: Add-on installations fail with custom Namespace and Overrides configuration\rStatus: Resolved\nDate: February 03, 2022\nWorkaround: Installation of the Dashboard, Monitor, and SMM add-on fails on tenant clusters that are configured with a custom Namespace or an Override settings.\nCSCvy37909 - Kubernetes: essential-vsphere-csi custom resource fails\rStatus: Resolved\nDate: February 03, 2022\nWorkaround: Occasionally, the essential-vsphere-csi HelmChart custom resource fails due to a race condition.\nCSCvz25142 - Kubernetes: Pagination issue in the Kubernetes cluster table\rStatus: Resolved\nDate: April 19, 2021\nWorkaround: The Kubernetes cluster table displays 10 clusters at a time. Selection of clusters for a bulk action is limited to 10 because the next page, and previous page buttons are disabled.\nCSCvw81794 - Kubernetes: Unable to parse / in the network name\rStatus: Resolved\nDate: April 19, 2021\nWorkaround: While creating an Infrastructure Provider policy, IKS VM creation fails if you use the / in the input to the Interface field.\nCSCvx27447 - Kubernetes: Push cached images to tenant registry\rStatus: Resolved\nDate: April 19, 2021\nWorkaround: When you import a new VM template into vCenter, it has a name format that is shorter because “ubuntu” is replaced with “u”. This consumes additional storage space.\nCSCvw50943 - Kubernetes: Incorrect style applied to Create button in the Infra Provider Policy page\rStatus: Resolved\nDate: April 19, 2021\nWorkaround: The Create button in the Infra Provider Policy page is enabled even if the mandatory fields are not filled. Moreover, there are no error messages displayed when you click the Create button without entering the mandatory fields. This is a button styling issue.\nCSCvx41865 - Intersight Managed Mode: The deployment of Server Profile fails with an error- UnconfigureSingleVeth failed with error : Commit request failed\rStatus: Resolved\nDate: April 13, 2021\nWorkaround: After recommission or decommission of chassis, the deployment of server profile on a server may fail with an error - - UnconfigureSingleVeth failed with error : Commit request failed. This issue is resolved in Release 4.1(3c).\nCSCvv23834 – Intersight Managed Mode: vHBA bound vETH's VLAN do not change after modification of FCoE VLAN, resulting in hosts losing SAN connection\rStatus: Resolved\nDate: April 2, 2021\nWorkaround: When an FCoE VLAN of a VSAN is modified in the domain profile, the hosts that are using the VSAN lose SAN connectivity.\nCSCwa76782 - Kubernetes: API DELETE of Kubernetes NodeGroup fails\rStatus: Resolved\nDate: May 18, 2022\nWorkaround: If you issue a REST API DELETE for a Kubernetes NodeGroupProfile that has NodeProfiles in the Nodes property, you will see a 202 HTTP response (delete accepted). A workflow will be initiated, and it will conclude with a COMPLETED status, however, the NodeGroupProfile is not deleted.\nCSCvx72042 - Kubernetes: Add-on data is not displayed in the Cluster Details page\rStatus: Resolved\nDate: April 2, 2021\nWorkaround: The data of the deployed add-ons is not displayed in the Monitor and Operate tabs of the Cluster Details page.\nCSCvx76462 - Kubernetes: Ingress IP address changes on scale or upgrade\rStatus: Resolved\nDate: April 2, 2021\nWorkaround: The virtual IP address of Nginx ingress might not be retained after a tenant upgrade.\nCSCvx01762 - Intersight Managed Mode: Locator LED operation is not working for FEX\rStatus: Resolved\nDate: March 5, 2021\nWorkaround: The FEX LED operation is not working from both the API and the GUI.\nCSCvv81281 - Cloud Orchestration: Hitachi - Missing Data Reduction and Provisioned fields in main view\rStatus: Resolved\nDate: February 25, 2021\nWorkaround: Data Reduction and Provisioned fields available under Intersight \u003e Operate \u003e Storage for Hitachi targets managed via Intersight display null values.\nCSCvx40544 - HyperFlex: Server firmware upgrade for HyperFlex Edge clusters may fail when all servers in the cluster are not claimed in Intersight\rStatus: Resolved\nDate: February 25, 2021\nWorkaround: An error message is now available in the Intersight UI to indicate that all the servers must be claimed for a successful server firmware upgrade.\nCSCvx36564 - Infrastructure: iSCSI Boot policy creation fails with Auto Target Source and Auto Initiator IP Source options\rStatus: Resolved\nDate: February 18, 2021\nWorkaround: When you create an iSCSI Boot policy with “Auto” target source type, policy creation fails with the following error “Failed to create a policy iSCSI Boot”. A similar error is seen when you create an iSCSI Boot policy with \"Static\" target source type with \"Auto\" Initiator IP Source.\nCSCvx03750 - Infrastructure: Unable to create network connectivity policy with only IPv6 address\rStatus: Resolved\nDate: February 15, 2021\nWorkaround: The user is unable to create a network connectivity policy exclusively with IPv6 address. This issue is found both in the user interface and in the API.\nCSCvx13383 - Intersight Managed Mode: The default value of Tunneled vKVM is toggled to the on state on resetting the device connector\rStatus: Resolved\nDate: January 26, 2021\nWorkaround: Tunneled vKVM is toggled to the off state for all servers to rectify this issue.\nCSCvv64458 - Intersight Virtual Appliance: In the Cisco Intersight Virtual Appliance release, 1.0.9-164, UCS Firmware Upgrade images fail to display in the UI\rStatus: Resolved\nDate: December 9, 2020\nWorkaround: UCS Firmware Upgrade images fail to display in the UI in the Cisco Intersight Virtual Appliance release, 1.0.9-164.\nCSCvt61722 - Infrastructure: Unexpected errors are seen if System QoS policy is not selected during UCS Domain profile creation\rStatus: Resolved\nDate: October 29, 2020\nWorkaround: UCS Domain profile creation for Intersight Managed targets are allowed without selecting System QoS Policy\nCSCvv13330 - Infrastructure: User cannot NTP, Network Connectivity and Syslog policies for Domain Profile in an account at Cisco Intersight Base license\rStatus: Resolved\nDate: September 8, 2020\nWorkaround: User cannot use NTP, Network Connectivity and Syslog policies for Domain Profile in an account at Cisco Intersight Base license.\nCSCvs96324 - Infrastructure: Port policy configuration option is shown for Server Administrators\rStatus: Resolved\nDate: September 4, 2020\nWorkaround: Although, a Server Administrator can edit and save a Port Policy, it will fail to deploy with HTTP 403 forbidden error.\nCSCvv12655 - HyperFlex: HyperFlex cluster deployment is not supported on Intersight Private Virtual Appliance\rStatus: Resolved\nDate: August 24, 2020\nWorkaround: HyperFlex cluster deployment is not supported on Intersight Private Virtual Appliance releases, 1.0.9-148 and 1.0.9-150.\nCSCvt70211 - Infrastructure: The user label set does not work for blade servers\rStatus: Resolved\nDate: August 21, 2020\nWorkaround: The user label set does not work for blade servers.\nCSCvv27196 - Intersight Private Virtual Appliance: Tech Support collection is not initiated for endpoints\rStatus: Resolved\nDate: August 13, 2020\nWorkaround: This caveat is applicable only for Intersight Private Virtual Appliance. Clicking on the UI action \"Collect Tech Support\" for Servers, Fabric Interconnects, and UCS Director targets does not initiate the tech support collection process.\nCSCvv14616 - Intersight Managed Mode: Intersight Managed FI-attached rack server fails to discover in Intersight\rStatus: Resolved\nDate: August 10, 2020\nWorkaround: Intersight Managed FI-attached rack server fails to discover in Intersight. The failure is at the \"Enable Server Event Channel\" workflow stage.\nCSCvu39006 - Infrastructure: IPv6 HTTP file share of custom port mapping with DNS name gives an error\rStatus: Resolved\nDate: May 28, 2020\nWorkaround: OS installations using an IPv6 HTTP file share with custom port mapping with the DNS name for vMedia mapping results in an error.\nCSCvu01357 - Infrastructure: HTTP, HTTPS file shares to add support for non-default port number\rStatus: Resolved\nDate: May 18, 2020\nWorkaround: OS installations using IPv6-based HTTP and HTTPS file shares for vMedia mapping results in an error.\nCSCvr69139 - Infrastructure: Persistent Memory security operations\rStatus: Resolved\nDate: May 11, 2020\nWorkaround: Persistent Memory security operations may fail when the passphrase contains the ’\u0026’ symbol.\nCSCvr88988 - Infrastructure: Boot Policy does not support non-VIC adapters for PXE boot configuration\rStatus: Resolved\nDate: April 30, 2020\nWorkaround: Boot policy in Intersight requires an Interface name or MAC addresses for non-VIC adapters including the LOM and the adapters in PCI slots.\nCSCvq80554 - Infrastructure: Stale or missing HCL data in Intersight\rStatus: Resolved\nDate: Apr 10, 2020\nWorkaround: Stale or missing HCL data in Intersight due to a failure in the communication between the Cisco IMC and Cisco UCS Manager.\nCSCvp88912 - Infrastructure: Persistent Memory Inventory not updated\rStatus: Resolved\nDate: March 24, 2020\nWorkaround: In the Persistent Memory Inventory, Regions and Namespaces are not updated after configuration changes.\nCSCvs49282 - HyperFlex: HX Cluster Capacity Runway is not displayed even when the servers are licensed under the Essentials tier\rStatus: Resolved\nDate: December 19, 2019\nWorkaround: After a server belonging to a Fabric Interconnect-attached HyperFlex cluster gets decommissioned and recommissioned from Cisco UCS Manager, the license validation for the cluster reports an incorrect result. Therefore, the HyperFlex Cluster Capacity Runway is not displayed even when the servers are licensed under the Essentials tier.\nCSCvp28844 - Infrastructure: Deployment of LAN Connectivity Policy on Cisco UCS C240 M5 Rack Servers with Quad Port adapters running on Cisco IMC 4.0(x) fails\rStatus: Resolved\nDate: November 21, 2019\nWorkaround: Deployment of LAN Connectivity Policy on Cisco UCS C240 M5 Rack Servers with Quad Port adapters running on Cisco IMC 4.0(x) fails.\nCSCvr88366 - Infrastructure: Cisco UCSC-MLOM-C25Q-04 driver is not listed in the Cisco UCS Hardware and Software Compatibility tool for Standalone UCS C240 M5S servers\rStatus: Resolved\nDate: November 15, 2019\nWorkaround: Cisco UCSC-MLOM-C25Q-04 driver is not listed in the UCS Hardware and Software Compatibility tool for Standalone UCS C240 M5S servers with Intel Xenon Processor Scalable Family running Oracle Linux UEK 4.1.4.35-1902.\nCSCvr88381 - Infrastructure: 12G Modular SAS RAID Controller is not listed in the Cisco UCS Hardware and Software Compatibility tool for Standalone UCS C240 M5S servers\rStatus: Resolved\nDate: November 14, 2019\nWorkaround: Cisco 12G Modular SAS RAID Controller is not listed in the UCS Hardware and Software Compatibility tool for Standalone UCS C240 M5S servers with Intel Xenon Processor Scalable Family running Oracle Linux UEK 4.1.12-112 and Oracle Linux UEK 4.1.12-124, on Cisco IMC 4.0(4).\nCSCvr26096 - Infrastructure: LSI Mega Raid SAS 3108 and UCSC-MLOM-C40Q-03 driver is not listed in the Cisco UCS Hardware and Software Compatibility tool for Standalone Cisco UCS C240 M5S servers\rStatus: Resolved\nDate: November 6, 2019\nWorkaround: LSI Mega Raid SAS 3108 and UCSC-MLOM-C40Q-03 driver is not listed in the in the UCS Hardware and Software Compatibility tool for Standalone UCS C240 M5S servers running Oracle Linux UEK 4.1.4.35-1902, on Cisco IMC 4.0(4).\nCSCvo05293 - Infrastructure: Deployment of Network Policies fails intermittently on Cisco UCS C-Series Standalone M4 and M5 servers\rStatus: Resolved\nDate: April 23, 2019\nWorkaround: Deployment of LAN Connectivity, SAN Connectivity, and Adapter Configuration Policies on Cisco UCS C-Series Standalone M4 and M5 servers running Cisco IMC version 4.0(2c) fails intermittently. This condition is caused when there are more than 2 Cisco VIC (Virtual Interface Card) Adapters on the server, and the policies are deployed on all of them.\nCSCwd14586 - For UCS-IOM-2304 and UCS-IOM-2304V2 IO Modules, after adding or deleting no-drop class, IOM reboot is required\rStatus: Open\nDate: Workaround: When the no-drop class in System QoS policy is changed after deploying the Domain Profile on the Fabric Interconnects, all UCS-IOM-2304 IO Modules on both sides of the Fabric Interconnect need to be reset (IOM reset will reboot the IOM) for the QoS changes to be applied.\nCSCwe08601 - Intersight Managed Mode: Chassis profile deployment fails after IOM reset, decommission, or recommission\rStatus: Open\nDate: Workaround: After the reset, decommission, or recommission activity on the IOM (UCS-IOM-2304V or UCS-IOM-2304V2), the IOM displays online state, but the Chassis (UCSB-5108) profile deployment fails with this error message \"Unable to apply the configuration because the IOM-B is offline. Retry when the IOM is online. If the issue persists, contact Cisco TAC.\nCSCwd53385 - Intersight Managed Mode: OS boot fails in Cisco UCS B200 M6 server after chassis power-cycle\rStatus: Open\nDate: Workaround: When power is lost and restored on a chassis, the server boot to the host OS fails when booting via FC LUN. It is due to a delay in configuring the HIF ports of the adapter. The host tries to boot but has no path, so it fails and boots into the UEFI shell instead.\nCSCwc54734 - Intersight Managed Mode: vNIC status is not operational.\rStatus: Open\nDate: Workaround: Faults are not displayed for all vNICs after a reboot in Intersight Managed Mode. This is either due to the Server Profile that has vNICs are pinned to an uplink which is down or the vNICs are not pinned to any uplink or host OS down.\nCSCwd14758 - Intersight Managed Mode: Cisco UCS VIC 1380 adapter does not get updated on moving a Cisco UCS B-Series M5 server from UMM to IMM\rStatus: Open\nDate: Workaround: A Cisco UCS B-Series M5 server having firmware version 4.2(2a) is migrated from UMM to IMM. Cisco UCS 1400 Series adapters are replaced with Cisco UCS 1300 Series adapters. After the discovery of the server, Cisco UCS VIC 1340 adapter gets updated, but Cisco UCS VIC 1380 does not get updated.\nCSCwd76511 - Intersight Managed Mode: Server discovery failure due to adapter issues\rStatus: Open\nDate: Workaround: Server discovery fails for a B-Series or C-Series M5 server with Cisco UCS VIC 1300 Series adapters. The GUI shows message as \"No Adapter Units found. Try a rediscovery of the server after sometime.\" The possible causes can be adapter not working, connectivity issues with the adapter, unsupported Cisco IMC firmware version.\nCSCwd16403 - Intersight Managed Mode: The Hostname displays as Linux after SUSE Linux Enterprise Server (SLES) Operating System (OS) 12 SP5 version install\rStatus: Open\nDate: Workaround: After SLES OS install, the Hostname is displayed as Linux by default instead of SLES. This is specifically observed on SLES OS 12 SP5 version\nCSCwc91572 - Intersight Managed Mode: Modifications to domain profile PVLAN configuration are not reflected in the server profile PVLAN\rStatus: Open\nDate: Workaround: When a domain profile PVLAN is modified, for example, mapping the Isolated or Community VLAN to a different Primary VLAN, the changes are not reflected in the server profile PVLAN.\nCSCwc40084 - Intersight Managed Mode: Domain profile deployment fails when a VLAN with the same ID as a residual FCoE VLAN is used in VLAN configuration\rStatus: Open\nDate: Workaround: Deployment of the domain profile fails, when a VLAN with the same ID as a residual FCoE VLAN, is used in VLAN configuration. Deployment of the domain profile fails when the FCoE VLAN, created during previous operations, is not cleared from the Fabric Interconnects.\nCSCwd10649 - Intersight Managed Mode: When the Placement mode changes, the Server Profile goes to Pending Changes state\rStatus: Open\nDate: Workaround: If you move the placement option from Simple to advanced or vice versa, the Server Profile moves to Not Deployed state. If the server has a single VIC, the Server Profile redeployment is not required. If the server has a multiple VICs and when the vNICs or vHBAs get assigned to a different VIC other than the one configured earlier, the Server Profile needs to be redeployed.\nCSCwc96598 - Intersight Managed Mode: Bundle version is not seen for already claimed Fabric Interconnects\rStatus: Open\nDate: Workaround: Bundle version is not seen for already claimed Fabric Interconnects. However, the bundle version comes up once the upgrade firmware is successful.\nCSCvz51265 - Intersight Managed Mode: Scale Issue: Internal error occurs while deleting policies\rStatus: Open\nDate: Workaround: The operation to delete an Ethernet Network policy with 3000 VLANs leads to Internal Error in the first attempt. Deleting an Ethernet Network Policy with 3000 VLANs triggers a cascade delete and DB operations of the VLANs leading to Internal Error.\nCSCwb68483 - Intersight Managed Mode: Scale Issue: Profiles fail to get assigned to multiple servers in parallel\rStatus: Open\nDate: Workaround: The operation to assign profiles to a large number (greater than 100) of servers in parallel gets timed out.\nCSCwc62086 - Intersight Managed Mode: UEFI Secure Boot not supported on ESXi Operating System for Standalone and IMM servers\rStatus: Open\nDate: Workaround: In Cisco UCS C-Series Standalone and Intersight Managed Mode servers, the UEFI Secure Boot is not supported on ESXi Operating System Installation.\nCSCwc35483 - Intersight Managed Mode: UEFI Secure Boot not supported on RHEL Operating System for IMM servers\rStatus: Open\nDate: Workaround: For RHEL installation with UEFI Secure Boot on Intersight Managed Mode (IMM) servers, the keys used for signing LSI storage drivers are to be added manually in the Machine Owner Key (MOK) database for booting the OS after installation.\nCSCwc26997: Intersight Managed Mode - Server upgrade to 4.2(1) patches fails on a few Micron and Samsung HDD models\rStatus: Open\nDate: Workaround: Server upgrade to 4.2(1) patches fails on a few Micron and Samsung HDD models including MTFDDAK120TDT.\nCSCwb40651 - Intersight Managed Mode: SLDP login with FI Admin password fails for C-Series FI-attached servers\rStatus: Open\nDate: Workaround: SLDP login with FI Admin password fails for C-Series FI-attached servers with breakout connection.\nCSCwb25229 - Intersight Managed Mode: Disabling the proxy on the Device Connector causes the server to return an invalid JSON response\rStatus: Open\nDate: Workaround: When the proxy is disabled on the Device Connector, the server does not return a valid JSON response. However, this invalid response does not have any impact on any of the settings.\nCSCwa85888 - Intersight Managed Mode: Domain Profile redeploy and port configuration fails after erase-configuration for Cisco UCS 6400 Series FI\rStatus: Open\nDate: Workaround: On re-deploying a domain profile after performing the erase configuration, Ethernet related port configuration is not pushed to Fabric Interconnect device connector for 6400 Series FI.\nCSCwa77455 - Intersight Managed Mode: Server discovery is not initiated on dynamically adding servers to N9K-C93180YC-FX3 Fabric Extender\rStatus: Open\nDate: Workaround: Re-claim and re-deploy the domain profile whose servers were discovered through N9K-C93180YC-FX3 FEX. FEX discovers both the Fabric Interconnects but the discovery of servers connected using 25G cables is not initiated.\nCSCwa80829 - Intersight Managed Mode: VNIC/VHBA configuration is not restored for N9K-C93180YC-FX3 Fabric Extender connected server after decom/recom fex\rStatus: Open\nDate: Workaround: N9K-C93180YC-FX3 Fabric Extender is first decommissioned, then re-commissioned and discovered. VNIC/VHBA configuration is not restored after FEX re-discovery.\nCSCwa24768 - Intersight Managed Mode: Switch mode changes are not reflected in the Fabric Interconnect, when the Port Policy is not assigned to the Domain Profile\rStatus: Open\nDate: Workaround: When the switching mode is set using the Switch Control policy, and the Domain Profile is deployed with the Switch Control policy but without the Port policy, the Fabric Interconnects do not reboot, and the switch mode changes are not reflected in the Fabric Interconnect.\nCSCwa34969 - Intersight Managed Mode: Switch mode changes are not reflected in the Fabric Interconnect inventory immediately after the Fabric Interconnect reboots\rStatus: Open\nDate: Workaround: When the switching mode is changed, the Fabric Interconnect reboots, but the switch mode changes are sometimes not reflected in the Fabric Interconnect inventory.\nCSCvz41858 - Intersight Managed Mode: On rebooting a server after successful Windows installation with iSCSI Boot and UEFI, the server boot is getting stuck at the EFI shell.\rStatus: Open\nDate: Workaround: When a server profile is configured with UEFI + iSCSI Boot and during the installation if the custom partitioning of LUN is selected, the boot loader is installed on the M.2 RAID controller disks or local disks, if present. The server boot after the Windows installation is getting stuck at the EFI shell.\nCSCvy97064 - Intersight Managed Mode: Disk numbers cannot be swapped between different Drive Groups and between Drive Group and Global Hot Spare.\rStatus: Open\nDate: Workaround: Updating a Storage policy by swapping the disk numbers shows an update failure message.\nCSCvy19447 - Intersight Managed Mode: The critical alarms are not getting cleared even after changing state of vHBA/vNIC from down to up state.\rStatus: Open\nDate: Workaround: The critical alarms are not getting cleared even after changing state of vHBA/vNIC from down to up state. The adapter events are dropped.\nCSCvz18604 - Intersight Managed Mode: Failure of login to BMC through the serial console, using the Fabric Interconnect new admin password\rStatus: Open\nDate: Workaround: When a user logs into BMC through the serial console using the Fabric Interconnect new admin password, the authentication is failed. Whereas, the login is successful with the old password.\nCSCvz31237 - Intersight Managed Mode: Storage policy is not getting imported when virtual drive name is empty\rStatus: Open\nDate: Workaround: In Intersight, storage policy is not getting imported when the virtual drive name is empty in the endpoint.\nCSCvy00949 - Intersight Managed Mode: Unable to swap disk slots between Drive Group and Global Hot Spare, and between different Drive Groups\rStatus: Open\nDate: Workaround: While editing a storage policy, an error occurs when the user tries to swap a disk slot from Drive Group to Global Hot Spare OR when they try to swap a disk slot from one Drive Group to another.\nCSCvz14187 – Intersight Managed Mode: The Replace workflow status of the cluster Fabric Interconnect displays the workflow state as Unknown\rStatus: Open\nDate: Workaround: The Replace workflow status of the cluster Fabric Interconnect is displayed as Unknown when the workflow is a success\nCSCvx85657 – Intersight Managed Mode: Reset CMOS does not preserve the Boot policy and Bios policy settings\rStatus: Open\nDate: Workaround: CMOS reset operation does not preserve the configuration settings of Boot and BIOS policies on the server.\nCSCvz04956 – Intersight Managed Mode: Switch role is not supported in IdP initiated SSO\rStatus: Open\nDate: Workaround: Switching of user role is not supported when a user with multiple accounts or multiple roles is logged in using IdP initiated SSO.\nCSCvn57742 – Intersight Managed Mode: The usage of sub-policies is not displayed in the policy view page\rStatus: Open\nDate: Workaround: The usage of sub-policies like Ethernet adapter policy, Ethernet network policy, Ethernet QoS policy, FC QoS policy, FC Network policy, and FC adapter policy, is not displayed in the policy view page.\nCSCvx70944 — Intersight Managed Mode: OS installation together on multiple servers fails intermittently\rStatus: Open\nDate: Workaround: When you select multiple servers together for OS install, then OS installation fails sometimes.\nCSCvx73658 – Intersight Managed Mode: For IMM c240 rack servers, the field-replaceable-unit fan module 7 is shown as missing\rStatus: Open\nDate: Workaround: c240 specification has six fan modules. Fan module 7 should not be shown as missing.\nCSCvy09951 – Intersight Managed Mode: IMM expects both the Fabric interconnects to be available for implementing configuration changes through domain profile, chassis profile, and server profile\rStatus: Open\nDate: Workaround: IMM expects both the Fabric interconnects to be available for implementing configuration changes through domain profile, chassis profile, and server profile.\nCSCwb47181 - UCSM Managed Mode: Intersight HCL shows incomplete for compliance with UCSM servers and Cisco Custom VMWare ESXi OS installed\rStatus: Open\nDate: Workaround: UCSM servers are missing the host inventory annotations. Some of the values in the key-value pairs are mismatched or missing.\nCSCvu70337 - UCSM Managed Mode: The user is unable to trigger any workflow if the UMM upgrade fails once\rStatus: Open\nDate: Workaround: Once the user starts an upgrade, the supported hardware becomes incompatible. Even after decommissioning the hardware, Cisco Intersight picks up the last failure state. Hence, it throws a validation error.\nCSCwe22713 - HyperFlex: When adding a M6 compute node to a HyperFlex DC-No-FI cluster running HFDP 5.0(2b), the node personality is not set to compute on CIMC/IS.\rStatus: Open\nDate: Workaround: After adding an M6 compute node to a HyperFlex DC-No-FI cluster running HyperFlex Data Platform 5.0(2b) in Intersight, the server will have a converged node personality set. The personality name shown in the CIMC web interface and Intersight may show as either \"HyperFlex Hybrid Server\", \"HyperFlex All Flash Server\", or \"HyperFlex All NVMe Server\" instead of the intended value of \"HyperFlex Compute Server\". Additionally, the \"server-role\" property in the \"Additional Info\" field of the personality will be \"storage\" instead of \"compute\".\nCSCwc80899 - HyperFlex: hx_post_install fails on expanded NIC-based cluster\rStatus: Open\nDate: Workaround: hx_post_install fails on expanded NIC-based custer with vMotion already configured. The vMotion switch cannot be found.\nCSCwa79851 - HyperFlex: Upgrade ESXi on all nodes to 7.0U2 or above and retry\rStatus: Open\nDate: Workaround: For FI-attached clusters, the following error may be seen during the Hypervisor management network configuration step, even if all of the nodes are running the same ESXi version: Please upgrade ESXi on all nodes to 7.0U2 or above and retry.\nCSCvy94937 - HyperFlex: HyperFlex cluster expansion for compute nodes fails with error message: Insufficient Replication IPs\rStatus: Open\nDate: Workaround: For a HyperFlex cluster in which Backup policy is deployed, cluster expansion may fail due to insufficient replication IPs.\nCSCvz06219 - HyperFlex: After HyperFlex cluster expansion datastore displays ‘Mount Failure’ status\rStatus: Open\nDate: Workaround: After HyperFlex cluster expansion when an existing backup target datastore is mounted on newly added node of the target HyperFlex cluster, the datastore displays ‘Mount Failure’ status.\nCSCvy84658 - HyperFlex: Upgrading ESXi to 7.0 U2 may fail on servers running older generation CPUs\rStatus: Open\nDate: Workaround: HyperFlex cluster upgrade initiated through Intersight or HX Connect will display the failure message \"CPU_SUPPORT WARNING: The CPU in this host may not be supported in future ESXi releases. Please plan accordingly.\"\nCSCvu52248 - HyperFlex: HyperFlex Cluster Capacity Runway may be shown as locked in the HyperFlex cluster table view due to insufficient license\rStatus: Open\nDate: Workaround: For some HyperFlex clusters in the Essentials or higher licensing tier claimed before May 28th, 2020, the Capacity Runway may be shown as locked in the HyperFlex cluster table view due to miscalculated license.\nCSCvw85728 - HyperFlex: HX Controller VM actions are not disabled by default for vCenter Targets, or, internal HX Datastore actions are not disabled by default for vCenter Targets\rStatus: Open\nDate: Workaround: HX Controller VM actions are not disabled by default for vCenter Targets, or, internal HX Datastore actions are not disabled by default for vCenter Targets\nCSCvx46827 - HyperFlex: HX Upgrade with an update to the latest ESXi patch fails if server firmware is already at the desired version\rStatus: Open\nDate: Workaround: When you perform a combined HX upgrade with an update to the latest ESXi patch, the update node sub-workflow fails, if the server firmware is already at the desired version.\nCSCvx61290 – HyperFlex: Cluster profile may not be automatically imported if a HyperFlex cluster has nodes with the same hostname\rStatus: Open\nDate: Workaround: HyperFlex cluster import fails when the cluster deployed outside of the current account is claimed and if the cluster has nodes with duplicate hostnames.\nCSCwc27500 - HPE ProLiant Servers: Some of the adapters are not shown in inventory\rStatus: Open\nDate: Workaround: This issue is seen when the HPE ProLiant servers have HP or Broadcom adapters. Redfish API response from the server does not return the details for these adapters because of which Intersight server inventory is not able to display them.\nCSCwc17410 - Dell PowerEdge Servers: Mismatch in the number of storage controllers between BMC UI and Intersight Server Inventory UI\rStatus: Open\nDate: Workaround: This issue is seen due to the discrepancy in the number of storage controllers returned in the Redfish API response.\nCSCwc17404 - Dell PowerEdge Servers: Mismatch in the number of PCIe devices between iDRAC UI and Intersight Server Inventory UI\rStatus: Open\nDate: Workaround: This issue is seen due to the discrepancy in the number of PCIe devices returned in the Redfish API response.\nCSCwc51914 - Third-Party Servers: Incorrect values shown for CPU in the inventory\rStatus: Open\nDate: Workaround: This issue is seen in all servers claimed through Intersight Assist.\nCSCwa47304 - Workload Optimizer: Log4j vulnerability\rStatus: Open\nDate: Workaround: Intersight Assist Version 1.0.9-361 addresses the Log4j vulnerability.\nCSCvw48300 - Workload Optimizer: Editing a Dynatrace target does not pre-fill the current Environment ID parameter\rStatus: Open\nDate: Workaround: When editing a Dynatrace target, the Environment ID parameter that was filled during target claim is not displayed.\nCSCvx72064 - Workload Optimizer: In the Workload Optimizer supply chain HyperFlex DiskArray and Hyper-V storage may not display some values\rStatus: Open\nDate: Workaround: In the Workload Optimizer supply chain, HyperFlex DiskArray will not display Hyper-V storage, attached hosts, and virtual machine; likewise Hyper-V cluster will not display HyperFlex DiskArray.\nCSCwa92321 - Intersight Cloud Orchestrator: Assigning a value to the workflow variable using the transformed mapping template option does not work\rStatus: Open\nDate: Workaround: When you use the transformed mapping template option to assign a value to the workflow variable, the transformed mapping rule does not get applied during workflow execution. Instead, the initial value of the variable is mapped.\nCSCwb41333 - Intersight Cloud Orchestrator: Require proper validation of outputs/inputs used in condition\rStatus: Open\nDate: Workaround: When Condition is used as the loop mode in a Serial Loop task, the evaluation of the condition fails if the task name or input/output names are wrong, and the loop exits after the first iteration without honoring the condition.\nCSCwb83887 - Kubernetes: Cluster profile deployment fails if the Port for the vCenter Target is set to 0\rStatus: Open\nDate: Workaround: If the Port for the vCenter Target is set to 0, cluster profile deployment fails with the following error: Missing Port for vCenter target specified in VirtualMachineInfraConfigPolicy my-infra-policy. Check Target configuration and retry.\nCSCwb32462 - Kubernetes: Nvidia-device-plugin pods fail to start after a cluster upgrade\rStatus: Open\nDate: Workaround: IKS Images 1.20.14-iks.0 and later do not cache the container image required for the nvidia-device-plugin daemonset. Not caching the image results in the nvidia-device-plugin pods remaining in the ImagePullBackOff state and the pods failing to start.\nCSCwa17374 - Kubernetes: Unable to reconfigure some of the IKS settings after initial cluster deployment\rStatus: Open\nDate: Workaround: You can configure the following settings only during the initial cluster deployment: \u003cbr\u003e - Container Runtime policy \u003cbr\u003e - Virtual Machine Infra Config policy \u003cbr\u003e - Virtual Machine Instance Type policy \u003cbr\u003e - IP Pools \u003cbr\u003e - Trusted Registries policy \u003cbr\u003e - SSH keys \u003cbr\u003e Any change to these settings thereafter will not be applied to the cluster.\nCSCwa92460 - Kubernetes: Upgrading the Monitoring add-on to 0.4.11-cisco1 or later fails and creates multiple Monitoring jobs\rStatus: Open\nDate: Workaround: Upgrading the Monitoring add-on to 0.4.11-cisco1 or later fails and creates multiple Monitoring jobs.\nCSCwa51692 - Kubernetes: Upgrading 1.19.15 IKS tenant with SMM addon times out and fails\rStatus: Open\nDate: Workaround: 1.19.15 IKS tenant upgrade fails when you install the SMM add-on and then try to upgrade the tenant.\nCSCvz89618 - Kubernetes: SMM add-on installation fails with Docker proxy configuration\rStatus: Open\nDate: Workaround: Installation of SMM add-on fails on tenant clusters that are configured with docker proxy settings.\nCSCvz24357 - Kubernetes: Add-on URLs do not work\rStatus: Open\nDate: Workaround: If more than 1 LoadBalancer IP address is assigned to a cluster, the add-on URL does not work.\nCSCvy10553 - Kubernetes: Unable to configure VM of disk size greater than 40GB\rStatus: Open\nDate: Workaround: When you configure a VM of disk size greater than 40GB, the system defaults to a disk size of 40 GB.\nCSCvx97900 - Kubernetes: Certs validation is not supported\rStatus: Open\nDate: Workaround: Validation for invalid and expired certs is not supported.\nCSCvw96794 - Kubernetes: IKS cluster deployment fails if ESX clusters use a resource pool with the same name across multiple datacenters\rStatus: Open\nDate: Workaround: In a given datacenter, if multiple ESX clusters use resource pools having the same name then deployment of IKS clusters that use this resource pool fails.\nCSCwb19524 - Infrastructure: Image download fails when you trigger, from Intersight, an upgrade of the UCSM infrastructure to the 4.2(1l)A bundle\rStatus: Open\nDate: Workaround: UCS firmware download fails for the 4.2(1l) packages.\nCSCvz22743 - Infrastructure:Download of firmware upgrade image fails when the proxy is not set in CIMC for M6 Standalone Rack Servers\rStatus: Open\nDate: Workaround: During the workflow of direct upgrade of rack servers, the download of the firmware upgrade image fails when the proxy is not set in CIMC.\nCSCwa09515 - Infrastructure: Adapters, NIC and HBA interfaces count in server view might not be accurate for all hardware configurations\rStatus: Open\nDate: Workaround: In the current implementation, the count for these interfaces is derived from CIMC ComputeRackUnit MO. The NIC and HBA interfaces count provides information only for VIC cards and does not include interfaces of non-Cisco adapters (NIC and FC HBA PCI cards).\nCSCvz40348 - Infrastructure: The Resource Group count field shows incorrect count\rStatus: Open\nDate: Workaround: In the Claim Target page, the Resource Group Count field shows incorrect count. It is expected to display only the count of Resource Groups associated with the Organization mapped against Device Administrator and Device Technician roles\nCSCvy83825 - Infrastructure: An Organization user is unable to perform bulk target claim\rStatus: Open\nDate: Workaround: In the Claim Target page, an Organization user is unable to perform bulk target claim using Set the Configuration via File option.\nCSCvy65585 - Infrastructure: Drive State is not updated after policy deployment on M6 servers\rStatus: Open\nDate: Workaround: Physical drive state for the M6 server does not get updated after the deployment of the service profile containing the Storage policy.\nCSCvm67025 - Infrastructure: Unable to install Windows on a JBOD or virtual disk if these targets contain an existing Windows version\rStatus: Open\nDate: Workaround: Unable to install Windows on a JBOD or virtual disk if these targets contain an existing Windows version.\nCSCvo06115 - Infrastructure: OS Installation and Server Profile deployment cannot be performed simultaneously on the same server\rStatus: Open\nDate: Workaround: OS installation and server profile deployment cannot be performed simultaneously on the same server. When the OS installation is in progress, power actions on the server are also disallowed.\nCSCvq43037 - Infrastructure: Unable to install Windows Server OS, if the host already has a Windows Server OS installed on it\rStatus: Open\nDate: Workaround: Unable to redeploy or reinstall Windows Server OS using the embedded mode of installation without Server Configuration Utility (SCU), if another Windows Server OS is already deployed on the same host.\nCSCvs09817 - Infrastructure: Persistent Memory shows 41 Namespaces only\rStatus: Open\nDate: Workaround: Persistent Memory Inventory shows 41 Namespaces only, out of the 64 Namespaces configured.\nCSCvs34452 - Infrastructure: Unable to view vCenter in Device Connector Manager for custom organizations with specific privileges\rStatus: Open\nDate: Workaround: vCenter is not visible in Device Connector Manager for a custom organization with Server Administrator, HyperFlex Administrator, and Read-Only privileges. However, vCenter appears in the devices list.\nCSCvt21720 - Infrastructure: Deployed Secure Passphrase window shows up during Server Profile deployment\rStatus: Open\nDate: Workaround: When you change the Persistent Memory policy to a different one in the Server Profile and use the same Secure Passphrase for Persistent Memory Local Security, the Deployed Secure Passphrase window shows up during Server Profile deployment.\nCSCvt39285 - Infrastructure: RHEL8 installation is not supported on C125 M5 server with 4.0(2h) BIOS and firmware\rStatus: Open\nDate: Workaround: When you install RHEL 8 with 4.0(2h) server firmware, the server becomes unresponsive.\nCSCvt62202 - Infrastructure: User roles modified in the GUI do not update in the backend\rStatus: Open\nDate: Workaround: User roles modified in the GUI do not update in the backend.\nCSCvu84717 - Infrastructure: Special characters in file share like space and % can render a Bad Request format for OS installation\rStatus: Open\nDate: Workaround: Special characters in file share like space and % can render a Bad Request format for OS installation.\nCSCvv16489 - Infrastructure: The API gateway returns a timeout error\rStatus: Open\nDate: August 13, 2020\nWorkaround: The API gateway returns a timeout error when 3000 VLANs are created at a time under the VLAN policy.\nCSCvv81399 - Infrastructure: When using firmware 4.1(1x), the Install Target Selection page does not display a created virtual drive that is out of sync\rStatus: Open\nDate: Workaround: When using firmware 4.1(1x), the Install Target Selection page does not display a created virtual drive that is out of sync.\nCSCvw02532 - Infrastructure: Login fails when the LDAP Policy is deployed on a server running firmware version 4.1(2a) and higher\rStatus: Open\nDate: Workaround: Login fails when the LDAP Policy is deployed on a server running firmware version 4.1(2a) and higher.\nCSCvw97203 - Infrastructure: The blade discovery workflow fails with the error message: Failed to send Http Request to Device\rStatus: Open\nDate: Workaround: When a user replaces a blade, the blade discovery workflow gets triggered twice. The first blade discovery workflow that gets triggered for the old blade server, fails with the Failed to Send Http Request to Device error. This workflow can be ignored by the user. The second blade discovery workflow gets triggered for the newly replaced blade which is executed without any issue.\nCSCvx03878 - Infrastructure: Unable to delete M.2 Virtual Drive\rStatus: Open\nDate: Workaround: M.2 Virtual Drive does not get deleted from the Storage Controllers tab on the UI or through API. This happens because the virtual drive gets marked as bootable.\n","categories":"","description":"","excerpt":"\rCSCwb90747 - Intersight Cloud Orchestrator: HSM Enabled field goes to …","ref":"/docs/caveats/","tags":"","title":"Caveats"},{"body":"\rGeneral, Account Setup, Claim Target\rBrowser Support, Supported Systems, and Multi-Language Support\rLicensing\rData Traffic, Security\rOrganizations and Roles in Intersight\rSingle Sign-On\rMulti-Factor Authentication\rAutomatic Generation of Tech Support Files by Cisco TAC\rIntersight Virtualization Service\rOthers\r","categories":"","description":"","excerpt":"\rGeneral, Account Setup, Claim Target\rBrowser Support, Supported …","ref":"/docs/faqs/","tags":"","title":"FAQs"},{"body":"\rCisco Intersight™ is a management platform delivered as a service with embedded analytics for your Cisco and 3rd party IT infrastructure. This platform offers an intelligent level of management that enables IT organizations to analyze, simplify, and automate their environments in more advanced ways than the prior generations of tools. These videos help you get started using Intersight, so you can quickly begin taking advantage of the functionality.\nFor the latest videos on new Intersight features and functionality, visit the Intersight Documentation videos playlist on YouTube.\nWatch out for new videos that are being continuously added to the Managing UCS Infrastructure in Intersight and Managing Cisco X-Series Modular System in Intersight playlists.\nCisco Intersight - New User Interface Introduction\rThis video explores the new user interface, additional features and updated organization designed to simplify the entire user experience with Cisco Intersight.\nCisco Intersight - New User Interface Introduction\rYoutube ID: yP3-rlLx_Jg\nDescription: \u003cp\u003eThis video explores the new user interface, additional features and updated organization designed to simplify the entire user experience with Cisco Intersight.\u003c/p\u003e\nGetting Started with Cisco Intersight Infrastructure Services\rYoutube ID: YFUrNTN4SNk\nDescription: \u003cp\u003eThis video helps you get started with Cisco Intersight Infrastructure Services. The Base edition is available at no charge. \u003c/br\u003e\u003c/br\u003eExplore in a few easy steps how you can sign-in, claim targets and add new users!\u003c/p\u003e\nCisco Intersight Licensing Tiers and Registration\rYoutube ID: WJEbUMKBvPo\nDescription: \u003cp\u003eCisco Intersight licensing tiers and registration process enables you to centralize configuration management through a unified policy engine, and initiate firmware updates. \u003c/br\u003e\u003c/br\u003eWatch this video to understand the licensing tiers available in Intersight and how you can configure the license registration in a few easy steps!\u003c/p\u003e\nCisco Intersight Device Connector\rYoutube ID: Description: \u003cp\u003eThis video explains the various options to configure the device connector setting to support Cisco UCS C-Series servers using Cisco IMC.\u003c/p\u003e\nIntroduction to Organizations\rYoutube ID: BqyyYJTcNhc\nDescription: \u003cp\u003eAn Organization is a logical entity that enables multi-tenancy through separation of targets. Organizations allow you to group the targets into logical groups and enable you to apply the required configuration settings on a subset of targets. In this video, you will learn how to create an organization, create custom roles that can be tied to one or more organizations, and define privileges for each organization.\u003c/p\u003e\nAutomated HyperFlex Deployment\rYoutube ID: vncGACwBCgc\nDescription: \u003cp\u003eIntersight can automate HyperFlex cluster deployments using the Ansible modules for Cisco Intersight. This demo explains how to use the Ansible playbook with Intersight.\u003c/p\u003e\nInstalling an Operating System\rYoutube ID: 5hwlDgtAR0E\nDescription: \u003cp\u003eIntersight enables you to perform an unattended OS installation on one or more Cisco UCS C-Series Standalone servers from your centralized data center. This video walks you through the installation workflow.\u003c/p\u003e\nIntersight Single Sign-On\rYoutube ID: 4dWLWlAqWpk\nDescription: \u003cp\u003eSingle Sign-On (SSO) authentication enables you to use a single set of credentials to log in to multiple applications. With SSO authentication, you can log in to Intersight with your corporate credentials instead of your Cisco.com ID. This video overview shows how to enable Intersight Single Sign-On (SSO) and setup a custom SAML 2.0 application in an external Identity Provider (IdP). \u003c/p\u003e\nSetting Up Cisco Intersight Virtual Appliance\rYoutube ID: 6RJ_V96HePM\nDescription: \u003cp\u003eCisco Intersight Virtual Appliance delivers the management features of Intersight in an easy to deploy VMware OVA, Microsoft Hyper-V Server VM, and KVM hypervisor on Linux, that allows you to control what system details leave your premises. The Virtual Appliance form factor enables additional data locality, security, or compliance needs that are not completely met by intersight.com. This video shows you how to install and set up Cisco Intersight Virtual Appliance.\u003c/p\u003e\nCisco Intersight Virtual Appliance LDAP/AD Setup\rYoutube ID: 9DUEO2xXszM\nDescription: \u003cp\u003eIntersight Virtual Appliance supports LDAP/AD-based remote authentication. You can configure the appliance to authenticate a user login using LDAP. This video show you how to integrate your virtual appliance with the LDAP/AD services in your organization.\u003c/p\u003e\nInstalling and Setting Up Intersight Private Virtual Appliance\rYoutube ID: xsMVgBtNXok\nDescription: \u003cp\u003eIntersight Private Virtual Appliance deployment is intended for an environment where you operate data centers in a disconnected (air gap) mode. Watch this video for information on downloading, installing, and setting up Private Virtual Appliance, DNS pre-requisites, licensing, and more.\u003c/p\u003e\nUpgrading Intersight Private Virtual Appliance\rYoutube ID: _QLBt9vTdiE\nDescription: \u003cp\u003eWatch this video for information on upgrading your Private Virtual Appliance.\u003c/p\u003e\nDevice Connector for UCS Director\rYoutube ID: RLrRdEABIyA\nDescription: \u003cp\u003eUCS Director can be updated automatically through Intersight. This demo describes how to connect Intersight to UCS Director.\u003c/p\u003e\nInstalling and Configuring Cisco Intersight Assist\rYoutube ID: _HSUNCZ2HmY\nDescription: \u003cp\u003eCisco Intersight Assist helps you add endpoint targets to Cisco Intersight. Cisco Intersight Assist is typically a virtual machine (VM) running in your datacenter. You can install Intersight Assist using the bootstrap OVA that is available on Cisco.com. Currently, you can add Pure Storage targets and VMware vCenter targets into Intersight after claiming them using Cisco Intersight Assist. This video shows you how to install and configure Cisco Intersight Assist.\u003c/p\u003e\nCisco Intersight Managed Mode Series\rYoutube ID: WKx3DDGINdw\nDescription: \u003cp\u003ePart 1: Prerequisites and Setup - Intersight Managed Mode is a new architecture that unifies the capabilities of the UCS Systems and the cloud-based flexibility of Intersight, thus combining the management experience for the standalone and Fabric Interconnect attached systems. This video shows you how to set up and configure Intersight Managed Mode\u003c/p\u003e\nCisco Intersight Managed Mode Series\rYoutube ID: rbCPJAlj4yA\nDescription: \u003cp\u003ePart 2: Configuring UCS Domain Profiles - In this video, you will learn how to create UCS Domain profiles in Intersight Managed Mode.\u003c/p\u003e\nCisco Intersight Managed Mode Series\rYoutube ID: nma9yhxkHSU\nDescription: \u003cp\u003ePart 3: Configuring Server Profiles - In this video, you will learn how to configure server profiles in Intersight Managed Mode.\u003c/p\u003e\nCisco Intersight Managed Mode Transition Tool, 1.0.1\rYoutube ID: Oqmf2CAPxtE\nDescription: \u003cp\u003eIMM Transition Tool - Version 1.0.1 - In this video, you will learn how to transition UCSM Pools, Policies, and Templates from legacy UCSM Domains to Intersight Managed Mode.\u003c/p\u003e\nCisco Intersight Managed Mode Transition Tool, 2.0.1\rYoutube ID: duczkcICYrk\nDescription: \u003cp\u003eIMM Transition Tool - Version 2.0.1 - In this video, you will learn how to transition Service Profile Templates from UCS Central to Intersight.\u003c/p\u003e\nCisco Intersight Managed Mode Transition Tool, 3.0.1\rYoutube ID: 6HB4uaSvpxw\nDescription: \u003cp\u003eIMM Transition Tool - Version 3.0.1 - In this video, you will learn to migrate the Service Profile to Intersight keeping the IDs intact, clone an Intersight account, and map the source UCS orgs to the destination Intersight org.\u003c/p\u003e\nManaging UCS Infrastructure in Intersight\rYoutube ID: videoseries?list=PLIlKAL_0d4EwF0Dn_UyIw40zkAx09H2Y2\nDescription: \u003cp\u003eCisco Intersight infrastructure services include the deployment, monitoring, management, and support of your physical and virtual infrastructure. It supports Cisco Unified Computing System (Cisco UCS) and Cisco HyperFlex, other third-party Intersight-connected targets, and more. \u003c/br\u003e\u003c/br\u003eWatch this series of short videos to learn more about how to manage your UCS infrastructure with Intersight.\u003c/p\u003e\nManaging Cisco X-Series Modular System in Intersight\rYoutube ID: videoseries?list=PLIlKAL_0d4EyI6UMPKuJFml-Hx7zWQgwt\nDescription: \u003cp\u003eThe Cisco UCS X-Series Modular System powered by Intersight is an adaptable, future-ready system engineered to simplify IT and innovate at the speed of software. \u003c/br\u003e\u003c/br\u003eWatch this series of short videos to learn more about how to manage your Cisco X-Series Modular System in Intersight.\u003c/p\u003e\n","categories":"","description":"","excerpt":"\rCisco Intersight™ is a management platform delivered as a service …","ref":"/docs/vidoes/","tags":"","title":"Videos"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/executors/","tags":"","title":"executors"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/webapi/","tags":"","title":"WebAPI"},{"body":"WebAPI Param ( [switch]$EnableBasicAuth = $false, [switch]$SKipNetworkProfileCheck = $false, [switch]$ForceNewSSLCert = $false, [string]$SubjectName = $env:COMPUTERNAME, [int]$CertValidityDays = 1095 )\nFunction New-SelfSignedCert { Param ( [string]$SubjectName, [int]$ValidDays = 1095 )\n","categories":["executors"],"description":"Intersight Cloud Orchestrator allows workflow designers to run commands over SSH by using the **Invoke SSH Commands** reusable task in the workflows.","excerpt":"Intersight Cloud Orchestrator allows workflow designers to run …","ref":"/docs/ico/executors/webapi/","tags":["WebAPI"],"title":"WebAPI"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/data-type/","tags":"","title":"Data Type"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/executors/","tags":"","title":"Executors"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/ico/","tags":"","title":"ICO"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/task/","tags":"","title":"Task"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/workflow/","tags":"","title":"Workflow"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/ssh/","tags":"","title":"SSH"},{"body":"این یک نوشته معمولی شامل تصویر می باشد.\nدر مشخصات ابتدایی هر مطلب، عنوان، تاریخ و یک خلاصه که در لیست نوشته های نمایش داده می‌شود قرار دارد.\nشامل تصویر اینجا یک تصویر (featured-sunset-get.png) که شامل بالاین و کپشن است می‌باشد.\nدریافت و تغییر سایز یک تصویر در نسخه هوگو ۰.۴۳\rPhoto: Riona MacNamara / CC-BY-CA\nمشخصات زیر که در اطلاعات پست آمده است روی تمامی تصاویر این پست اعمال می‌شوند:\nresources:\r- src: \"**.{png,jpg}\"\rtitle: \"Image #:counter\"\rparams:\rbyline: \"Photo: Riona MacNamara / CC-BY-CA\" برای افزودن تصویر در یک صفحه، مشخصات آن را به صورت زیر مشخص کنید:\nدریافت و تغییر سایز یک تصویر در نسخه هوگو ۰.۴۳\rPhoto: Riona MacNamara / CC-BY-CA\nتصاویر در اندازه و با بایلاین مشخص شده نمایش داده می‌شوند.\n","categories":"","description":"پوسته داکسی، قدرت گرفته از هوگو باعث می‌شود که سازندگان پروژه تمرکز خود را روی ساخت مطالب قرار دهند و نیازی به ساخت وبسایت نداشته باشد.","excerpt":"پوسته داکسی، قدرت گرفته از هوگو باعث می‌شود که سازندگان پروژه تمرکز …","ref":"/fa/blog/2018/10/06/%D9%85%D8%B3%D8%AA%D8%AF%D8%A7%D8%AA-%D8%B1%D8%A7%D8%AD%D8%AA-%D8%A8%D8%A7-%D8%AF%D8%A7%DA%A9%D8%B3%DB%8C/","tags":"","title":"مستدات راحت با داکسی"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cloud-computing/tutorials/the-math-of-microservices-detailed-spec/","tags":"","title":"Matten til mikroservicer: Detaljert spesifikasjon"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cross-platform/examples/in-depth-java-detailed-spec/","tags":"","title":"Detaljert om Java: Detaljert spesifikasjon"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cross-platform/the-inside-of-monoliths-the-core-concepts/","tags":"","title":"Innsiden av monolitter: De grunnleggende konseptene"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cloud-computing/tutorials/the-math-of-monoliths-the-inner-workings/","tags":"","title":"Matten til monolitter: Drivverket"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/content-management/the-inside-of-cryptography-how-does-it-work/","tags":"","title":"Innsiden av kryptografi: Hvordan virker det?"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/content-management/tutorials/the-inside-of-recursion-the-inner-workings/","tags":"","title":"Innsiden av rekursjon: Drivverket"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cross-platform/the-inside-of-recursion-how-does-it-work/","tags":"","title":"Innsiden av rekursjon: Hvordan virker det?"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cloud-computing/tutorials/the-math-of-java-the-inner-workings/","tags":"","title":"Matten til Java: Drivverket"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cross-platform/examples/the-math-of-recursion-the-inner-workings/","tags":"","title":"Matten til rekursjon: Drivverket"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/content-management/tutorials/in-depth-microservices-the-core-concepts/","tags":"","title":"Detaljert om mikroservicer: De grunnleggende konseptene"},{"body":"Dette er landingssiden til en seksjon et sted nede i seksjonshierarkiet.\nOppsummer Seksjonen din Her ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cross-platform/tutorials/","tags":"","title":"Steg for steg hjelpeartikler"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cross-platform/examples/the-inside-of-java-the-core-concepts/","tags":"","title":"Innsiden av Java: De grunnleggende konseptene"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cross-platform/the-inside-of-monographs-how-does-it-work/","tags":"","title":"Innsiden av monografer: Hvordan virker det?"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cloud-computing/examples/the-inside-of-monoliths-how-does-it-work/","tags":"","title":"Innsiden av monolitter: Hvordan virker det?"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cross-platform/tutorials/the-math-of-cryptography-how-does-it-work/","tags":"","title":"Matten til kryptografi: Hvordan virker det?"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/api-reference/examples/the-math-of-monographs-how-does-it-work/","tags":"","title":"Matten til monografer: Hvordan virker det?"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cloud-computing/tutorials/the-math-of-monographs-detailed-spec/","tags":"","title":"Matten til monografer: Detaljert spesifikasjon"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/content-management/the-math-of-monoliths-the-inner-workings/","tags":"","title":"Matten til monolitter: Drivverket"},{"body":"Create a Cisco Intersight Account To get started with Cisco Intersight, create a Cisco Intersight account:\nVisit https://intersight.com/ to create your Intersight account. You must have a valid Cisco ID to create a Cisco Intersight account. If you do not have a Cisco ID, create one here.\nIn the Welcome to Intersight screen, click the Create an account link.\nIn the End User License Agreement, click the checkbox next to I accept, and then click Next.\nIn the Account Creation dialog box, enter a name for your account in the Account Name field.\nNote: An Account Name can only contain letters(a-z, A-Z), numbers(0-9) or hyphen(-).\nClick Create.\nDo one of the following:\nEnable Trial License.\nRegister Product License.\nAfter creating an Intersight account, you can begin claiming targets to manage your endpoints.\nNote It is possible to bypass the Intersight main page during login by using a link containing the Intersight account and SSO ID, which takes take you directly to your identity provider for authentication. The link should be structured to include the Account ID, as well as the user ID being authenticated. An example of the link is: https://5eb2e1e47564612d3079fe92.intersight.com/iam/weblogin?email=abc@domain.com\u003c/a To know more about the Cisco Intersight account creation process, watch the video:\n","categories":["Examples"],"description":"A short lead description about this content page. It can be **bold** or _italic_ and can be split over multiple paragraphs.\n","excerpt":"A short lead description about this content page. It can be **bold** …","ref":"/docs/getting-started/account_creation/","tags":["test","sample","docs"],"title":"Account Creation"},{"body":"Minimum Permissions for Targets The following table lists the minimum endpoint privileges required for targets:\nTargets Endpoint Privileges Hitachi Virtual Storage Platform Administrator VMware vCenter Administrator Pure Storage FlashArray Array Administrator NetApp Active IQ Unified Manager for NetApp ONTAP Administrator Cisco UCS C890 M5 Rack Server Administrator Dell PowerEdge and HPE ProLiant Redfish Servers Administrator Cisco Nexus Switch Administrator Cisco MDS Switch Administrator Target Claim To claim a new target, do the following:\nLog into Intersight with the Account Administrator, Device Administrator, or Device Technician privileges.\nFrom the Service Selector drop-down list, select System.\nNavigate to ADMIN** \u003e Targets** \u003e Claim a New Target****.\nChoose Available for Claiming and select the target type you want to claim. Click Start**.\nEnter the required details and click Claim** to complete the claiming process.\nTarget Claim for Compute/Fabric, Hyperconverged, Orchestrator, and Platform Services Targets From the Targets table view, click Claim a New Target, select the target type, and enter the following details:\nEnter the applicable Device ID. Endpoint targets connect to the Cisco Intersight portal through a Device Connector that is embedded in the management controller (Management VM for Cisco UCS Director) of each system. The Device Connector provides a secure way for connected targets to send information and receive control instructions from the Cisco Intersight portal, using a secure Internet connection. The following table provides the format of the device ID and the device connector location:\nClaim Code—Enter the device claim code and click Claim. You can find this code in the Device Connector.\nNote:** Before you gather the Claim Code, ensure that the Device Connector has outbound network access to Cisco Intersight, and is in the “Not Claimed” state.\nResource Groups—Select the Resource Group from the list to add it to the Organization.\nNote:** The Resource Group selection is enabled for the supported targets. Refer **Note** added in the following targets table to view supported target list.\nClick Claim.\nAfter the targets are claimed, you can view the managed targets in the Targets table view.\nDevice ID Format and Device Connector Location\nTargets\nDevice ID Format and Example\nDevice Connector Location\n**Compute\r/ Fabric**\nCisco UCS Server (Standalone)\nSerial Number\nExample: NGTR12345\nFrom Admin** \u003e **\rDevice Connector**** in Cisco IMC\nCisco UCS Domain (UCSM Managed)\nDevice serial ID of the primary and subordinate\rFabric Interconnects\nExample: [SAL1924GKV6\u0026SAL1913CJ7V]\nFrom Admin** \u003e **\rDevice Connector**** in Cisco UCS Manager\nCisco UCS Domain (Intersight Managed)\nDevice serial ID of the primary and subordinate\rFabric Interconnects\nExample: [SAL1924GKV6\u0026SAL1913CJ7V]\nDevice Connector in Device Console\nPlatform Services**\nCisco Intersight Appliance\nxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\nFrom Settings** \u003e Cloud Connection** \u003e Device Connector**** in Intersight\rAppliance\nCisco Intersight Assist\nxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\nFrom Settings** \u003e Cloud Connection** \u003e Device Connector**** in Intersight\rAssist\nHyperconverged Target\nCisco HyperFlex Cluster\nCluster UUID\nExample: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx\nFrom HyperFlex Connect UI** \u003e Settings** \u003e Device Connector**** in Cisco\rHyperFlex\nOrchestrator**\nCisco UCS Director\nDevice ID\nExample: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.\nFrom Administration** \u003e Device Connector**** in Cisco UCS\rDirector\nOthers**\nCisco Data Center Network Manager (DCNM)\nDevice ID\nExample: xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.\nFrom Administration** \u003e DCNM Server ** \u003e Device Connector**** in Cisco\rDCNM\nCisco Application Policy Infrastructure Controller\r(APIC)\nDevice ID made up of the serial ID of the APIC\rnodes\nExample: DIF1123FGFG\u0026 DIF2345GHJK \u0026 DIS5678SDFG\nFrom System** \u003e System Settings** \u003e Intersight** \u003e Intersight Device Connector**** in Cisco\rAPIC\nCisco Application Services Engine\nDevice ID made up of the serial ID of the Service\rnodes\nExample: DIF1123FGFG\u0026 DIF2345GHJK \u0026 DIS5678SDFG\nFrom Cisco APIC** \u003e Apps** \u003e **Cisco\rApplication Services Engine** \u003e Intersight**** for Cisco Application\rServices Engine\nCisco Nexus Dashboard\nDevice ID made up of the serial ID of the Service\rnodes\nExample:WMP24070021\u0026WMP240700ED\u0026WMP240700FN\u0026WMP241000RJ\u0026WMP241000UQ\u0026WMP241000UR\nFrom Cisco Nexus Dashboard** \u003e Infrastructure** \u003e Intersight ** \u003e Intersight Device Connector****\nNote:**\nFollowing are the targets that support target claim for the Organization using Resource Groups:\nCisco UCS Server (Standalone)\nCisco UCS Domain (UCSM Managed)\nCisco UCS Domain (Intersight Managed)\nCisco Intersight Appliance\nCisco Intersight Assist\nCisco HyperFlex Cluster\nCisco UCS Director\nCisco Data Center Network Manager (DCNM)\nCisco Application Policy Infrastructure Controller (APIC)\nCisco Nexus Dashboard\nFor more information about Enabling Intersight Management and Configuring the Device Connector on the Management Interfaces, see the appropriate documentation that is listed below:\nCisco UCS Manager Administration Guide\nCisco UCS C-Series Integrated Management Controller GUI Configuration Guide\nCisco HyperFlex Systems Installation Guide for Cisco Intersight\nCisco UCS Director Administration Guide\nCisco Network Insights Documentation\nCisco Intersight Managed Mode Guide\nTarget Claim in Intersight Managed Mode Target Claim in Intersight Managed Mode has the following considerations:\nYou can choose between the native UCSM Managed Mode (UMM) or Intersight Managed Mode (IMM) for the Fabric attached UCS Systems during initial setup of the Fabric Interconnects. If you choose to switch back between UMM and IMM, you must erase the present configuration and start from initial setup.\nNote:** Before erasing the configuration, you must ensure to unclaim the device from Intersight and decommission all rack servers.\nFor the complete set of hardware and software requirements, see Supported Hardware for Intersight Managed Mode and Software Compatibility.\nComplete these steps to claim these targets in Intersight Managed Mode:\nFrom the Targets table view, click Claim a New Target \u003e Cisco UCS Domain (Intersight Managed). Click Start**.\nImportant:** Complete the initial configuration of the Fabric Interconnects before claiming them for use with the Cisco Intersight platform.\nEnter the following details to complete the target claim:\nDevice ID—Device serial ID of the primary or subordinate Fabric Interconnect. Example: [SAL1924GKV6\u0026SAL1913CJ7V].\nClaim Code—Device claim code of Fabric Interconnect.\nTo get the device ID and claim code after completing the initial configuration of the Fabric Interconnects, run the following commands in Fabric Interconnect CLI:\nconnect device-connector\rshow status The command displays the device serial ID and claim code only when Fabric Interconnects have formed the cluster and connection to Intersight has been established.\nAlternately, you can get the device ID and claim code from the Device Connector** tab of Device Console that is accessed using the Fabric Interconnect IP address.\nResource Groups—Select the Resource Group from the list to add it to the Organization.\nNote:** The Resource Group selection is enabled for the supported targets. Refer **Note** section in the above targets table to view supported target list.\nClick Claim.\nAfter the targets are claimed, you can view Intersight Managed targets in the Targets table view.\nUnclaim Targets You can unclaim a target directly from the Intersight portal or from the Device Connector on the endpoints. Cisco recommends that you unclaim a target from the Intersight portal, when possible. Use the Unclaim** option on the Device Connector only when you do not have access to the account that the target was originally claimed to, or if you lose connection to Intersight and you want to unclaim the target locally from the endpoint.\nUnclaiming a target directly from the Intersight portal ensures that the target inventory is completely removed and the target gets reset to the onboarding account. The target can next be reclaimed. However, when you unclaim a target from the endpoint, the target stays in the Unclaimed ** status in the current Intersight account or the virtual appliance it is claimed to. You must remove the target inventory from the Intersight UI to enable the target to move to the onboarding account before you can claim the target again.\nWhen you unclaim a target, you will no longer be able to manage it from Intersight.\nWhen a target is unclaimed, it is immediately detached from the corresponding Intersight account.\nThe target retains any configuration applied before the unclaim operation, but any subsequent attempt to change the configuration fails. Any associated profiles will be detached from the corresponding targets. Before you assign the profiles again or perform any other action, you must reclaim the target into another Intersight account, and then recreate and redeploy the policies, profiles, and other configuration settings.\nTo unclaim a target from the Intersight UI:\nLog into Intersight.\nFrom the Service Selector drop-down list, select System.\nClick Targets to view the Targets table view.\nSelect the target(s) that you want to unclaim and click the Trash can** icon. You can reclaim the target(s) later as required by following the steps in the Claim a Target** wizard.\nNote:** Unclaiming a target does not change the target configuration but just removes it from the Intersight account it is claimed to. Access to the target by Intersight after unclaiming would only be possible if you claim the target again.\nTo unclaim a target from the Device Connector on the endpoint—Do this only if you do not have access to the Intersight account the target was claimed to.\nLog in directly to the target and navigate to the Device Connector.\nClick Unclaim. The target now becomes available for Claim. After the unclaim from account is complete from the endpoint, verify that the Targets** table view displays Unclaimed** status for the targets that are detached from the account. Complete the unclaim process in the Intersight UI before you claim this target in Intersight again.\nTarget Claim Using Intersight Assist You can add endpoint targets, such as Pure Storage, Hitachi Virtual Storage Platform devices, NetApp Active IQ Unified Manager, Cisco UCS C890 M5, HTTP Endpoint, SSH Endpoint, Ansible Endpoint, PowerShell Endpoint, Cisco Nexus Switch, Cisco MDS Switch, and VMware vCenter, into Cisco Intersight only if you use Cisco Intersight Assist to claim them.\nNote:**\nThe HTTP endpoint targets can be added either directly or via Intersight Assist.\nComplete the following steps to claim these targets using Intersight Assist:\nLog into Intersight with the Account Administrator, Device Administrator, or Device Technician privileges.\nFrom the Service Selector drop-down list, select System.\nNavigate to ADMIN \u003e Targets** \u003e Claim a New Target**.\nChoose Available for Claiming and select the target type that you want to claim. Click Start**.\nEnter the following details to complete the target claim:\nConnect through an Intersight Assist—For HTTP endpoint targets, enable if the target is reachable via Intersight Assist only. This option is applicable for endpoint targets that can be reached either directly or via Intersight Assist.\nIntersight Assist—If there is more than one Intersight Assist, select one from the list to use.\nName—A user provided name for the managed target for SSH, Ansible, or PowerShell endpoint target.\nHostname/IP Address/Management Address—Management address of the Pure Storage FlashArray, Hitachi Virtual Storage Platform devices, NetApp Active IQ Unified Manager, Cisco UCS C890 M5, HTTP Endpoint, SSH Endpoint, Ansible Endpoint, PowerShell Endpoint, Nexus Switch, MDS Switch, or the VMware vCenter. It can be IPv4 or a Fully Qualified Domain Name (FQDN). For Hitachi, specify ctl1Ip, ctl2Ip, or svpIp from Hitachi Ops Center API Configuration Manager. Use the same entry that is assigned to targetCtl (ctl1Ip or ctl2Ip).\nPort—Port number to connect to the managed target. This is an optional field. If you do not specify a port number, the default port is chosen.\nAuthentication Required—Disable if the HTTP endpoint does not require any authentication or when the authentication required for the endpoint is not supported in the Authentication Scheme.\nAuthentication Scheme—If Authentication Required** is enabled, select the athentication scheme for the HTTP endpoint as Basic** to provide the Username and Password or select Bearer Token to provide the bearer token.\nAuthentication Mode—Select the authentication protocol as Password or Key Based for the SSH or Ansible endpoint.\nUsername—Login credential for the managed target.\nFor VMware vCenter targets, NetApp Active IQ Unified Manager, HTTP Endpoint, SSH Endpoint, Ansible Endpoint, PowerShell Endpoint, Nexus Switch, MDS Switch, or Cisco UCS C890 M5 targets, enter the username of the administrator.\nFor Pure Storage targets, enter the username of the array administrator.\nPassword—Password associated with the username.\nPrivate Key—The private key that is used to authenticate a managed target for the SSH or Ansible endpoint. When you generate the SSH Key for an endpoint, do the following:\nSSH Keys in PEM format:\nssh-keygen -m PEM -t \u003crsa, ecdsa, ed25519, or dsa\u003e\nOpenSSH has deprecated DSA keys due to security weakness. You must update the SSH configuration to enable it to work with DSA keys.\nSSH Keys in OpenSSH format:\n``ssh-keygen -t \u003crsa, ed25519\u003e``\nDSA and ECDSA keys are not supported.\nYou need to provide the passphrase if required.\nThe private key and passphrase are treated as a single entity. When you modify the private key, the passphrase field is cleared.\nThe corresponding public key needs to be added to the authorized list of the remote SSH or Ansible endpoint.\nNote:** The authorized keys are by default configured in .ssh/authorized_keys in the home directory.\nPassphrase—(Optional) The passphrase associated with the private key.\nHitachi Ops Center API Configuration Manager Address—Management address of the Hitachi Ops Center API Configuration Manager. It can be IPv4 or a Fully Qualified Domain Name (FQDN).\nEnable HTTPS Protocol—Select if the connection to the HTTP endpoint target should be established using HTTPS.\nClick Claim.\nAfter the targets are claimed, you can view Pure Storage, Hitachi Virtual Storage Platform, NetApp Active IQ Unified Manager, Cisco UCS C890 M5, HTTP Endpoint, SSH Endpoint, Ansible Endpoint, PowerShell Endpoint, Nexus Switch, MDS Switch, and VMware vCenter targets in the Targets tab. In addition, you can view the Storage and Virtualization** tabs on the left panel.\nFor more information on Cisco Intersight with NetApp Storage see, Cisco Intersight with NetApp Storage Quick Start Guide.\nNote:**\nYou must ensure that NX-API is enabled through HTTPS on the MDS or Nexus endpoint target to claim an MDS or a Nexus switch.\nTo verify that NX-API is enabled and to get the HTTPS port number, run the show nxapi** command on the MDS or Nexus endpoint target. The following is an example of the show nxapi** command:\nswitch# show nxapi\rNX-API: Enabled Sandbox: Disabled\rHTTPS Port: 8443 To enable NX-API, run the nxapi https port port command on the MDS or Nexus endpoint target.\nTo know more about the process of claiming a target, watch the Claim Target video.\nTarget Claim Using VMware vCenter You can add VMware vCenter endpoint targets into Cisco Intersight only, if you use Cisco Intersight Assist to claim them. Hence, before claiming a target, ensure you have deployed and claimed Intersight Assist.\nComplete the following steps to claim these targets using VMware vCenter:\nLog into Intersight with the Account Administrator, Device Administrator, or Device Technician privileges.\nFrom the Service Selector drop-down list, select System.\nNavigate to ADMIN \u003e Targets** \u003e Claim a New Target**.\nChoose Available for Claiming and select the VMware vCenter target type that you want to claim. Click Start**.\nEnter the following details to complete the target claim:\nIntersight Assist—Select the appropriate Intersight Assist from the list to use.\nHostname/IP Address—Enter the hostname or IP address.\nPort—Enter the port number to connect to the target. This is an optional field. If you do not specify a port number, the default port is chosen.\nUsername—Enter the username of the target. For VMware vCenter targets, you can enter the username of the administrator.\nPassword—Enter the password associated with the username.\nSecure—Select to establish the HTTP endpoint target using HTTPS. This option is enabled by default.\nDatastore Browsing Enabled—Select to control the Workload Optimizer scanning the vCenter datastores to identify files which are not used and can be deleted to reclaim space and improve actual disk utilization. For example, orphaned VMDK files.\nGuest Metrics Enabled—Select to enable retrieval of advanced memory metrics by Workload optimizerService. It issupported only on vCenterServer version 6.5U3 or later. Guest Virtual Machines must run VMware Tools 10.3.2 Build 10338 or later.\nEnable HSM—Select to enable Hardware Support Manager (HSM) in VMware vCenter targets. This option allows you to perform firmware upgrade on UCS servers claimed in Cisco Intersight.\nTo enable HSM for the previously created VMware vCenter targets, you can select the target and use edit option. HSM also can be enabled while claiming the VMware vCenter targets in Cisco Intersight.\nNote:**\nThe HSM allows you to manage the server firmware upgrade operations outside of the Intersight application, from VMware vSphere Lifecycle Manager (vLCM) plug-in. For more information, see Managing Firmware Using Hardware Support Manager.\nBefore using vLCM plug-in, ensure to upgrade the vCenter server and all ESXi hosts in the cluster to vSphere 7.0 or later versions.\nThe HSM is supported on Cisco UCS C-Series Standalone and Intersight Managed Mode (IMM) servers.\nClick Claim.\nTo know more about the process of claiming a target, watch the Claim Target video.\nClaim a Public Cloud as a Target Public cloud endpoints such as Amazon Web Services (AWS) can be added to Cisco Intersight by claiming them as a target.\nTo claim a public cloud as a target, perform the following steps:\nLog into Intersight with the Account Administrator, Device Administrator, or Device Technician privileges.\nFrom the Service Selector drop-down list, select System.\nFrom the Admin grouping in the left navigation pane in the home Intersight screen, click Targets.\nIntersight displays the targets list in the All Targets tab that contains existing targets and columns of information about each including their connection status, the time of their claim, and who claimed them.\nClick Claim a New Target.\nIntersight displays the Select a Target Type screen.\nIn the Categories section under Filters in the lefthand side of the screen, ensure the All radio button is selected (default).\nIn the Cloud section of the main part of the Select a Target screen, click Amazon Web Services and click the Start button at the bottom of the screen.\nIntersight displays the Claim Amazon Web Services Target screen. Provide the required information here.\nName — Provide a name for the Amazon Web Service target.\nAccess Key \u0026 Secret Access Key — Ensure you have generated an AWS access key and AWS secret access key. Locate the access key and type it in the Access Key field. Locate the secret access key and type it in the Secret Access Key field.\nRegional Distribution — Optional for users with an Essential license, but mandatory with Intersight Advantage or Premier licenses and will enable access to public cloud inventory and operations management features within Intersight.\nRegion Group — Click the list box and select the appropriate region for your public cloud account\nRegion(s) — Click the Edit Region (pencil) icon and browse the resulting region list until you find the region you want to apply to the AWS cloud, click the checkbox to the left of it and then click Select. Public cloud inventory is collected only for those regions that are enabled here\nClick Claim.\nAfter the targets are claimed, you can view the managed targets in the Targets tablie view.\n","categories":["Examples"],"description":"A short lead description about this content page. It can be **bold** or _italic_ and can be split over multiple paragraphs.\n","excerpt":"A short lead description about this content page. It can be **bold** …","ref":"/docs/getting-started/claimntarget/","tags":["test","sample","docs"],"title":"Claim Target"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cloud-computing/in-depth-go-detailed-spec/","tags":"","title":"Detaljert om Go: Detaljert spesifikasjon"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cloud-computing/examples/in-depth-cryptography-the-core-concepts/","tags":"","title":"Detaljert om kryptografi: De grunnleggende konseptene"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cross-platform/in-depth-cryptography-detailed-spec/","tags":"","title":"Detaljert om kryptografi: Detaljert spesifikasjon"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/api-reference/examples/in-depth-monoliths-detailed-spec/","tags":"","title":"Detaljert om monolitter: Detaljert spesifikasjon"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/docs/","tags":"","title":"docs"},{"body":"Dette er landingssiden til en seksjon et sted nede i seksjonshierarkiet.\nOppsummer Seksjonen din Her ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cross-platform/examples/","tags":"","title":"Praktiske eksempler"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/examples/","tags":"","title":"Examples"},{"body":"Dette er landingssiden til en seksjon et sted nede i seksjonshierarkiet.\nOppsummer Seksjonen din Her ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cross-platform/","tags":"","title":"Flere plattformer"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/content-management/tutorials/the-inside-of-cryptography-the-core-concepts/","tags":"","title":"Innsiden av kryptografi: De grunnleggende konseptene"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/big-data/tutorials/the-inside-of-microservices-detailed-spec/","tags":"","title":"Innsiden av mikroservicer: Detaljert spesifikasjon"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cloud-computing/tutorials/the-inside-of-microservices-detailed-spec/","tags":"","title":"Innsiden av mikroservicer: Detaljert spesifikasjon"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cross-platform/examples/the-math-of-go-the-inner-workings/","tags":"","title":"Matten til Go: Drivverket"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/content-management/the-math-of-microservices-how-does-it-work/","tags":"","title":"Matten til mikroservicer: Hvordan virker det?"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/sample/","tags":"","title":"sample"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/test/","tags":"","title":"test"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cloud-computing/examples/in-depth-go-how-does-it-work/","tags":"","title":"Detaljert om Go: Hvordan virker det?"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cloud-computing/in-depth-monoliths-detailed-spec/","tags":"","title":"Detaljert om monolitter: Detaljert spesifikasjon"},{"body":"Dette er landingssiden til en seksjon et sted nede i seksjonshierarkiet.\nOppsummer Seksjonen din Her ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cloud-computing/examples/","tags":"","title":"Praktiske eksempler"},{"body":"Dette er landingssiden til en seksjon et sted nede i seksjonshierarkiet.\nOppsummer Seksjonen din Her ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/content-management/tutorials/","tags":"","title":"Steg for steg hjelpeartikler"},{"body":"Dette er landingssiden til en seksjon et sted nede i seksjonshierarkiet.\nOppsummer Seksjonen din Her ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/content-management/","tags":"","title":"Håndtering av innhold"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cloud-computing/tutorials/the-inside-of-go-the-inner-workings/","tags":"","title":"Innsiden av Go: Drivverket"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/api-reference/examples/the-inside-of-cryptography-detailed-spec/","tags":"","title":"Innsiden av kryptografi: Detaljert spesifikasjon"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/big-data/tutorials/the-inside-of-cryptography-how-does-it-work/","tags":"","title":"Innsiden av kryptografi: Hvordan virker det?"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/content-management/tutorials/the-inside-of-microservices-the-core-concepts/","tags":"","title":"Innsiden av mikroservicer: De grunnleggende konseptene"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/content-management/the-inside-of-monographs-the-core-concepts/","tags":"","title":"Innsiden av monografer: De grunnleggende konseptene"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cloud-computing/tutorials/in-depth-monographs-the-inner-workings/","tags":"","title":"Detaljert om monografer: Drivverket"},{"body":"Dette er landingssiden til en seksjon et sted nede i seksjonshierarkiet.\nOppsummer Seksjonen din Her ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/api-reference/examples/","tags":"","title":"Praktiske eksempler"},{"body":"Dette er landingssiden til en seksjon et sted nede i seksjonshierarkiet.\nOppsummer Seksjonen din Her ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cloud-computing/tutorials/","tags":"","title":"Steg for steg hjelpeartikler"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cloud-computing/the-inside-of-java-how-does-it-work/","tags":"","title":"Innsiden av Java: Hvordan virker det?"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/api-reference/examples/the-math-of-java-how-does-it-work/","tags":"","title":"Matten til Java: Hvordan virker det?"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/big-data/tutorials/the-math-of-cryptography-the-inner-workings/","tags":"","title":"Matten til kryptografi: Drivverket"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/api-reference/the-math-of-monoliths-detailed-spec/","tags":"","title":"Matten til monolitter: Detaljert spesifikasjon"},{"body":"Dette er landingssiden til en seksjon et sted nede i seksjonshierarkiet.\nOppsummer Seksjonen din Her ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/cloud-computing/","tags":"","title":"Data i skyen"},{"body":"Dette er landingssiden til en seksjon et sted nede i seksjonshierarkiet.\nOppsummer Seksjonen din Her ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/api-reference/","tags":"","title":"Komplett API-referance"},{"body":"Dette er landingssiden til en seksjon et sted nede i seksjonshierarkiet.\nOppsummer Seksjonen din Her ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/big-data/examples/","tags":"","title":"Praktiske eksempler"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/api-reference/the-inside-of-java-the-inner-workings/","tags":"","title":"Innsiden av Java: Drivverket"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/big-data/tutorials/the-inside-of-java-detailed-spec/","tags":"","title":"Innsiden av Java: Detaljert spesifikasjon"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/api-reference/examples/the-inside-of-microservices-how-does-it-work/","tags":"","title":"Innsiden av mikroservicer: Hvordan virker det?"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/big-data/examples/the-math-of-monographs-how-does-it-work/","tags":"","title":"Matten til monografer: Hvordan virker det?"},{"body":"Dette er landingssiden til en seksjon et sted nede i seksjonshierarkiet.\nOppsummer Seksjonen din Her ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/big-data/","tags":"","title":"Store mengder data"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/big-data/tutorials/in-depth-go-the-inner-workings/","tags":"","title":"Detaljert om Go: Drivverket"},{"body":"Dette er landingssiden til en seksjon et sted nede i seksjonshierarkiet.\nOppsummer Seksjonen din Her ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/big-data/tutorials/","tags":"","title":"Steg for steg hjelpeartikler"},{"body":"Text can be bold, italic, or strikethrough. Links should be blue with no underlines (unless hovered over).\nThere should be whitespace between paragraphs. Lorem markdownum tempus auras formasque ore vir crescere est! Malo quod, hunc, est dura; aut haec simillima nec per conantemque iusserat audax moriensque confessasque. Haec vulneret quam libratum homo pede arbore tu manus membrisque iuveni Clymeneia se cepi unda, iustae? Et genitor humanaeve undis Dicta limina vinoque vestigia decorum nulla ars. Pectora sede: quoque magnum Persidaque in suos, adiciunt tenebor.\nFormidine humo velle vulnera remotis admonitu suo mora vivo ubi. Libidine et mittor Orphei nulla. Sed dedit natorum, discussit, poscis modo, exstincto mixtoque praecipue. Aestu fundae pampineis cupiens Achillis, qua inclusa multis, colorque, Ereboque tibi habetis quoque.\nThere should be no margin above this first sentence.\nBlockquotes should be a lighter gray with a border along the left side in the secondary color.\nThere should be no margin below this final sentence.\nFirst Header 2 This is a normal paragraph following a header. Victrix tridentigero corripuere messibus, una rector, me se Iovis. Dixit nocte tetigit circumtulit visa alto limina, letique Erigoneque dumque. Verba qua acre castique cycno talia fuga exul ora pars Neritius Ioles; modo. Solacia fores servat querno tamen! Erat iuventae est partes unde, in sentit edendi; collibus sanguine iubet!\nDeae legum paulatimque terra, non vos mutata tacet: dic. Vocant docuique me plumas fila quin afuerunt copia haec o neque.\nOn big screens, paragraphs and headings should not take up the full container width, but we want tables, code blocks and similar to take the full width.\nErat vera cur scelus mundo quam? Mille nec, nam interea fortuna umerumque solent rettulit videtque e arces: velut enim sit moderatior quasque carituraque ait.\nSecond Header 2 This is a blockquote following a header. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nHeader 3 This is a code block following a header. Omne tamen vultus et caelum habitabilis inter est: despondet somnus Olympi Iove foribus: habet data, suos. Suis illi auro verba sibi os Turno. Oris avis mariti callida deficis tangor.\nHeader 4 This is an unordered list following a header. This is an unordered list following a header. This is an unordered list following a header. Header 5 This is an ordered list following a header. This is an ordered list following a header. This is an ordered list following a header. Header 6 What Follows A table A header A table A header A table A header There’s a horizontal rule above and below this.\nHere is an unordered list:\nLiverpool F.C. Chelsea F.C. Manchester United F.C. And an ordered list:\nMichael Brecker Seamus Blake Branford Marsalis And an unordered task list:\nCreate a Hugo theme Add task lists to it Take a vacation And a “mixed” task list:\nPack bags ? Travel! And a nested list:\nJackson 5 Michael Tito Jackie Marlon Jermaine TMNT Leonardo Michelangelo Donatello Raphael Definition lists can be used with Markdown syntax. Definition headers are bold.\nName Godzilla Born 1952 Birthplace Japan Color Green Tables should have bold headings and alternating shaded rows.\nArtist Album Year Michael Jackson Thriller 1982 Prince Purple Rain 1984 Beastie Boys License to Ill 1986 If a table is too wide, it should scroll horizontally.\nArtist Album Year Label Awards Songs Michael Jackson Thriller 1982 Epic Records Grammy Award for Album of the Year, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Selling Album, Grammy Award for Best Engineered Album, Non-Classical Wanna Be Startin’ Somethin’, Baby Be Mine, The Girl Is Mine, Thriller, Beat It, Billie Jean, Human Nature, P.Y.T. (Pretty Young Thing), The Lady in My Life Prince Purple Rain 1984 Warner Brothers Records Grammy Award for Best Score Soundtrack for Visual Media, American Music Award for Favorite Pop/Rock Album, American Music Award for Favorite Soul/R\u0026B Album, Brit Award for Best Soundtrack/Cast Recording, Grammy Award for Best Rock Performance by a Duo or Group with Vocal Let’s Go Crazy, Take Me With U, The Beautiful Ones, Computer Blue, Darling Nikki, When Doves Cry, I Would Die 4 U, Baby I’m a Star, Purple Rain Beastie Boys License to Ill 1986 Mercury Records noawardsbutthistablecelliswide Rhymin \u0026 Stealin, The New Style, She’s Crafty, Posse in Effect, Slow Ride, Girls, (You Gotta) Fight for Your Right, No Sleep Till Brooklyn, Paul Revere, Hold It Now, Hit It, Brass Monkey, Slow and Low, Time to Get Ill Code snippets like var foo = \"bar\"; can be shown inline.\nAlso, this should vertically align with this and this.\nCode can also be shown in a block element.\nfoo := \"bar\";\rbar := \"foo\"; Code can also use syntax highlighting.\nfunc main() { input := `var foo = \"bar\";` lexer := lexers.Get(\"javascript\") iterator, _ := lexer.Tokenise(nil, input) style := styles.Get(\"github\") formatter := html.New(html.WithLineNumbers()) var buff bytes.Buffer formatter.Format(\u0026buff, style, iterator) fmt.Println(buff.String()) } Long, single-line code blocks should not wrap. They should horizontally scroll if they are too long. This line should be long enough to demonstrate this. Inline code inside table cells should still be distinguishable.\nLanguage Code Javascript var foo = \"bar\"; Ruby foo = \"bar\"{ Small images should be shown at their actual size.\nLarge images should always scale down and fit in the content container.\nThe photo above of the Spruce Picea abies shoot with foliage buds: Bjørn Erik Pedersen, CC-BY-SA.\nComponents Alerts This is an alert. Note This is an alert with a title. Note This is an alert with a title and Markdown. This is a successful alert. This is a warning. Warning This is a warning with a title. Another Heading Add some sections here to see how the ToC looks like. Bacon ipsum dolor sit amet t-bone doner shank drumstick, pork belly porchetta chuck sausage brisket ham hock rump pig. Chuck kielbasa leberkas, pork bresaola ham hock filet mignon cow shoulder short ribs biltong.\nThis Document Inguina genus: Anaphen post: lingua violente voce suae meus aetate diversi. Orbis unam nec flammaeque status deam Silenum erat et a ferrea. Excitus rigidum ait: vestro et Herculis convicia: nitidae deseruit coniuge Proteaque adiciam eripitur? Sitim noceat signa probat quidem. Sua longis fugatis quidem genae.\nPixel Count Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nContact Info Factum Perseus est brevis abdita Odrysius, quod contendere urbes misceat accessit nudum oris non. Cumque dentibus nullam nec mille potentia regnumque supplex!\nExternal Links Doloris decurrere vitae Ida Arcades matres de remisit polypus, introrsus et sed qua maerenti? Serpit meta illic ut sinu. Transformat ungues genitor, et visis ademit sustinet abstulit lampadibus. Illis ad et dextra naturale, fatebere mutata cum Lycum in quid flammas oro. Populus Aurora caerula et feremus clavigeri ungues dubitant et inde corpore clamat, qui non Ilioneus pugnat abstuleris undas, habet.\nThis is the final element on the page and there should be no margin below this. ","categories":"","description":"En kort oppsummering av denne siden. Tekst kan **utheves** sller skrives i _kursiv_ og kan ha flere avsnitt.\n","excerpt":"En kort oppsummering av denne siden. Tekst kan **utheves** sller …","ref":"/no/docs/big-data/the-math-of-monographs-how-does-it-work/","tags":"","title":"Matten til monografer: Hvordan virker det?"},{"body":"Installation\nNote Check system compatibility before proceeding. Download the installation files.\nRun the installation script\nsudo sh install.sh\nTest that your installation was successfully completed.\n","categories":"","description":"","excerpt":"Installation\nNote Check system compatibility before proceeding. …","ref":"/docs/ico_new/newfeatures2/","tags":"","title":""},{"body":"","categories":"","description":"","excerpt":"","ref":"/no/categories/","tags":"","title":"Categories"},{"body":"","categories":"","description":"","excerpt":"","ref":"/fa/categories/","tags":"","title":"Categories"},{"body":"\r","categories":"","description":"","excerpt":"\r","ref":"/community/","tags":"","title":"Community"},{"body":" This is a placeholder page that shows you how to use this template site.\nThis section is where the user documentation for your project lives - all the information your users need to understand and successfully use your project.\nFor large documentation sets we recommend adding content under the headings in this section, though if some or all of them don’t apply to your project feel free to remove them or add your own. You can see an example of a smaller Docsy documentation site in the Docsy User Guide, which lives in the Docsy theme repo if you’d like to copy its docs section.\nOther content such as marketing material, case studies, and community updates should live in the About and Community pages.\nFind out how to use the Docsy theme in the Docsy User Guide. You can learn more about how to organize your documentation (and how we organized this site) in Organizing Your Content.\n","categories":"","description":"","excerpt":" This is a placeholder page that shows you how to use this template …","ref":"/docs/","tags":"","title":"Documentation"},{"body":"\rWelcome to Goldydocs: A Docsy Example Project! Learn More Download Porridge temperature assessment - in the cloud!\nGoldydocs provides a single web UI providing visibility into porridge temperature, chair size, and bed softness metrics! You can even find out who’s been eating your porridge.\n(Sadly, Goldydocs isn’t a real project, but you can use this site as an example to create your own real websites with Docsy)\nNew chair metrics! The Goldydocs UI now shows chair size metrics by default.\nPlease follow this space for updates!\nContributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\nFollow us on Twitter! For announcement of latest features etc.\nRead more …\nThis is the second Section\rDownload from AppStore Get the Goldydocs app!\nContributions welcome! We do a Pull Request contributions workflow on GitHub. New users are always welcome!\nRead more …\nFollow us on Twitter! For announcement of latest features etc.\nRead more …\nThis is another Section\r","categories":"","description":"","excerpt":"\rWelcome to Goldydocs: A Docsy Example Project! Learn More Download …","ref":"/","tags":"","title":"Goldydocs"},{"body":"","categories":"","description":"","excerpt":"","ref":"/categories/placeholders/","tags":"","title":"Placeholders"},{"body":"","categories":"","description":"","excerpt":"","ref":"/search/","tags":"","title":"Search Results"},{"body":"","categories":"","description":"","excerpt":"","ref":"/no/search/","tags":"","title":"Søkeresultat"},{"body":"","categories":"","description":"","excerpt":"","ref":"/no/tags/","tags":"","title":"Tags"},{"body":"","categories":"","description":"","excerpt":"","ref":"/fa/tags/","tags":"","title":"Tags"},{"body":"\rDette er TechOS! Dokumentasjon Last ned TechOS kan nå lastes ned i AppStore!\n","categories":"","description":"","excerpt":"\rDette er TechOS! Dokumentasjon Last ned TechOS kan nå lastes ned i …","ref":"/no/","tags":"","title":"TechOS"},{"body":"","categories":"","description":"","excerpt":"","ref":"/tags/whats-new/","tags":"","title":"What's New"},{"body":"\rبه اسناد گلدی خوش آمدید. این یک نمونه برای پوسته داکسی می‌باشد. بیشتر بخوانید دانلود ارزیابی درجه حرارت فرنی - در فضای ابری!\nاسناد گلدی یک وبسایت آماده کرده است درباره ارزیابی در حرارت فرنی، سایز صندلی و مشخصه های نرمی! شما حتی خواهید فهمید چه کسی فرنی شما را خورده است!\nمتاسفانه، اسناد گلدی یک وبسایت واقعی نیست، اما شما می‌توانید از آن به عنوان یک نمونه برای ساخت وبسایت واقعی خودتان با داکسی استفاده کنید.\nمعیارهای جدید صندلی! اسناد گلدی به شما معیارهای اندازه صندلی را به شما نشان می‌دهد.\nبرای اطلاع از به روز رسانی ها دنبال کنید.\nهمکاری ما یک فرآیند پول ریکوئست در گیتهاب داریم. ما همیشه از همکاران جدید خوشحال می‌شویم.\nبیشتر بخوانید …\nما را در توییتر دنبال کنید. برای اطلاع از آخرین خبرها\nبیشتر بخوانید …\nاین قسمت دوم است.\rاز فروشگاه اپ استور دانلود کنید Get the Goldydocs app!\nهمکاری ما یک فرآیند پول ریکوئست در گیتهاب داریم. ما همیشه از همکاران جدید خوشحال می‌شویم.\nبیشتر بخوانید …\nما را در توییتر دنبال کنید. برای اطلاع از آخرین خبرها\nبیشتر بخوانید …\nاین یک قسمت دیگر است.\r","categories":"","description":"","excerpt":"\rبه اسناد گلدی خوش آمدید. این یک نمونه برای پوسته داکسی می‌باشد. بیشتر …","ref":"/fa/","tags":"","title":"اسناد گلدی"},{"body":"\r","categories":"","description":"","excerpt":"\r","ref":"/fa/community/","tags":"","title":"انجمن"},{"body":"اینجا قسمت بلاگ است و دو دسته بندی دارد: اخبار و نسخه های منتشر شده. فایل های داخل این دو پوشه به ترتیب عکس زمانی لیست می‌شوند.\n","categories":"","description":"","excerpt":"اینجا قسمت بلاگ است و دو دسته بندی دارد: اخبار و نسخه های منتشر شده. …","ref":"/fa/blog/","tags":"","title":"بلاگ داکسی"},{"body":"","categories":"","description":"","excerpt":"","ref":"/fa/search/","tags":"","title":"نتایج جستجو"}]