<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cisco Intersight Help Center – Executors</title>
    <link>http://localhost:8080/docs/ico/executors/</link>
    <description>Recent content in Executors on Cisco Intersight Help Center</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 28 Jan 2022 15:53:22 +0000</lastBuildDate>
    
	  <atom:link href="http://localhost:8080/docs/ico/executors/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Docs: Ansible</title>
      <link>http://localhost:8080/docs/ico/executors/ansible/</link>
      <pubDate>Fri, 28 Jan 2022 15:52:40 +0000</pubDate>
      
      <guid>http://localhost:8080/docs/ico/executors/ansible/</guid>
      <description>
        
        
        &lt;p&gt;This is a sample text.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;div&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;content-desktop&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;div&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;nav&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;collapse td-sidebar-nav&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;td-section-nav&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;td-sidebar-nav__section pr-md-3 ul-0&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;td-sidebar-nav__section-title td-sidebar-nav__section with-child active-path&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;m-docs-li&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/docs/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;align-left pl-0 td-sidebar-link td-sidebar-link__section tree-root&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;m-docs&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;Documentation&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;span&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ul-1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;td-sidebar-nav__section-title td-sidebar-nav__section with-child&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;m-docsgettingstarted-li&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/docs/gettingstarted/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;align-left pl-0 td-sidebar-link td-sidebar-link__section&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;m-docsgettingstarted&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;Getting Started&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;span&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;ul&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ul-2 foldable&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;li&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;td-sidebar-nav__section-title td-sidebar-nav__section without-child collapse&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;m-docsgettingstartedoverview-li&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;a&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;href&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;/docs/gettingstarted/overview/&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;align-left pl-0 td-sidebar-link td-sidebar-link__page&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;id&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;m-docsgettingstartedoverview&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;span&lt;/span&gt; &lt;span style=&#34;color:#c4a000&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;Overview&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;span&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;/&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;li&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;div style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;&#34;&gt;
&lt;table style=&#34;border-spacing:0;padding:0;margin:0;border:0;&#34;&gt;&lt;tr&gt;&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;&#34;&gt;&lt;code&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 1
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 2
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 3
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 4
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 5
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 6
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 7
&lt;/span&gt;&lt;span style=&#34;background-color:#dfdfdf&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 8
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt; 9
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;10
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;11
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;12
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;13
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;14
&lt;/span&gt;&lt;span style=&#34;background-color:#dfdfdf&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;15
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;background-color:#dfdfdf&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;16
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;background-color:#dfdfdf&#34;&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;17
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;18
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;19
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;20
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;21
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;22
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;23
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;24
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;25
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;26
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;27
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;28
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;29
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;30
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;31
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;32
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;33
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;34
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;35
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;36
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;37
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;38
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;39
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;40
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;41
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;42
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;43
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;44
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;45
&lt;/span&gt;&lt;span style=&#34;white-space:pre;user-select:none;margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f&#34;&gt;46
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;
&lt;td style=&#34;vertical-align:top;padding:0;margin:0;border:0;;width:100%&#34;&gt;
&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;display:grid;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Param&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;switch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;EnableBasicAuth&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;switch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SKipNetworkProfileCheck&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;switch&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ForceNewSSLCert&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SubjectName&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;env&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;COMPUTERNAME&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;CertValidityDays&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1095&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#dfdfdf&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000&#34;&gt;Function&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;New&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SelfSignedCert&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000&#34;&gt;Param&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SubjectName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ValidDays&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1095&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#dfdfdf&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#dfdfdf&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;hostnonFQDN&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;env&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;computerName&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex; background-color:#dfdfdf&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;hostFQDN&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;System&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Net&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Dns&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]::&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;GetHostByName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;((&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;env&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;computerName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Hostname&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SignatureAlgorithm&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;SHA256&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;New&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Object&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;COM&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;X509Enrollment.CX500DistinguishedName.1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Encode&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;CN=$SubjectName&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;New&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Object&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;COM&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;X509Enrollment.CX509PrivateKey.1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ProviderName&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;Microsoft Enhanced RSA and AES Cryptographic Provider&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;KeySpec&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Length&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;4096&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SecurityDescriptor&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;MachineContext&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Create&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;serverauthoid&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;New&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Object&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;COM&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;X509Enrollment.CObjectId.1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;serverauthoid&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;InitializeFromValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;1.3.6.1.5.5.7.3.1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ekuoids&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;New&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Object&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;COM&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;X509Enrollment.CObjectIds.1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ekuoids&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Add&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;serverauthoid&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ekuext&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;New&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Object&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;COM&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;X509Enrollment.CX509ExtensionEnhancedKeyUsage.1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ekuext&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;InitializeEncode&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ekuoids&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cert&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;New&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Object&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;COM&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;X509Enrollment.CX509CertificateRequestCertificate.1&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cert&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;InitializeFromPrivateKey&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;key&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cert&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Subject&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;name&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cert&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Issuer&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cert&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Subject&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cert&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NotBefore&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Get&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Date&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AddDays&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#0000cf;font-weight:bold&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cert&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NotAfter&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;cert&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;NotBefore&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;AddDays&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ValidDays&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SigOID&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;New&lt;/span&gt;&lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Object&lt;/span&gt; &lt;span style=&#34;color:#ce5c00;font-weight:bold&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;ComObject&lt;/span&gt; &lt;span style=&#34;color:#000&#34;&gt;X509Enrollment&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;CObjectId&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SigOID&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;InitializeFromValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(([&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Security&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Cryptography&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Oid&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;$&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;SignatureAlgorithm&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#000&#34;&gt;Value&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Ansible Resuable</title>
      <link>http://localhost:8080/docs/ico/executors/ansible-resuable/</link>
      <pubDate>Fri, 28 Jan 2022 21:23:12 +0530</pubDate>
      
      <guid>http://localhost:8080/docs/ico/executors/ansible-resuable/</guid>
      <description>
        
        
        &lt;h1 id=&#34;executors--invoke-ansible-playbook---reusable-task&#34;&gt;Executors – Invoke Ansible Playbook - Reusable Task&lt;/h1&gt;
&lt;h2 id=&#34;supported-targets&#34;&gt;Supported Targets&lt;/h2&gt;
&lt;p&gt;The Invoke Ansible Playbook task can be run only on the targets that are added as an Ansible Endpoint target type in Cisco Intersight.&lt;/p&gt;
&lt;p&gt;The &lt;strong&gt;Invoke Ansible Playbook&lt;/strong&gt; task is executed as an orchestrator task and does not include the management of the Ansible Controller node.&lt;/p&gt;
&lt;p&gt;To run the Ansible Playbook task on the Ansible Controller node from Cisco Intersight, ensure that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The Ansible target is reachable through Intersight Assist when hosted on the customer premises.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Ansible Playbook modules and Ansible Playbook executables required to run the playbooks are already installed on the Ansible Controller node.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Ansible Controller node has password-less SSH access to the hosts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The Ansible Controller node can resolve the endpoint hostnames if the Ansible Host Inventory file specifies the hostnames.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information on Intersight Target Claim, see &lt;a href=&#34;http://localhost:8080/help/getting_started/claim_targets#target_claim_using_intersight_assist&#34;&gt;Target Claim Using Intersight Assist&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-the-executor-ansible-playook-reusable-task&#34;&gt;Using the Executor Ansible Playook Reusable Task&lt;/h2&gt;
&lt;p&gt;Use the &lt;strong&gt;Invoke Ansible Playbook&lt;/strong&gt; from the &lt;strong&gt;Executors&lt;/strong&gt; section in the Intersight Orchestrator Task Designer UI to create a Invoke Ansible Playbook reusable task.&lt;/p&gt;
&lt;p&gt;For more information on tasks, see &lt;a href=&#34;http://localhost:8080/help/resources/Task_Designer#defining_a_task&#34;&gt;Defining a Task&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The following table explains the Invoke Ansible Playbook task properties:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;General&lt;/td&gt;
&lt;td&gt;For more information, see &lt;a href=&#34;http://localhost:8080/help/resources/Task_Designer#defining_a_task&#34;&gt;Defining a Task&lt;/a&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Inputs&lt;/td&gt;
&lt;td&gt;Ansible Controller—The target on which the Ansible Playbook task is run. By default, the Ansible Controller task input is created for the task. &lt;br&gt;		The Ansible Playbook target must be in the Connected state.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Outputs&lt;/td&gt;
&lt;td&gt;To extract the required values from the command responses and map it to task outputs, do the following:&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create Task Output—Specify the task output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Map to Task Output—Check the check box to map the task output to an command response.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task Output—Select the command response to which the task output is mapped. The options available are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Exit Code | Invoke Ansible Playbook&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Execution Summary | Invoke Ansible Playbook&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Execution Log Path | Invoke Ansible Playbook&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;|
|   |   |
|   |   |
|   |   |
|   |   |&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;
&lt;p&gt;For example, if you create two task outputs &lt;em&gt;Exitcode&lt;/em&gt; and &lt;em&gt;Logapth&lt;/em&gt; and map it to &lt;em&gt;Exit Code | Invoke Ansible Playbook&lt;/em&gt; and &lt;em&gt;Execution Log Path | Invoke Ansible Playbook&lt;/em&gt; respectively, after the workflow is executed, the output will show:&lt;/p&gt;
&lt;p&gt;The following table explains the Invoke Ansible Playbook executor input:&lt;/p&gt;
&lt;p&gt;Property&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Playbook Path&lt;/p&gt;
&lt;p&gt;The path of the Ansible Playbook file that resides on the Ansible Controller node added as Ansible Endpoint target in Intersight.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Static Value—The path of the Ansible Playbook.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Direct Mapping—Select an existing task input or task output field.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task&amp;rsquo;s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced Mapping—Map a Golang template to the task input. For example, &lt;code&gt;FindAllString&lt;/code&gt; function returns a slice of all substrings that match the given regular expression in the given string.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Host Inventory&lt;/p&gt;
&lt;p&gt;The path of the host inventory file that resides on the Ansible Controller or a comma-separated list of hosts on which the Ansible Playbook task is run.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Static Value—The path of the host inventory file that resides on the Ansible Controller or a comma-separated list of hosts.&lt;/p&gt;
&lt;p&gt;For example, you can enter the hostname as &lt;a href=&#34;mailto:root@10.10.10.10&#34;&gt;root@10.10.10.10&lt;/a&gt;,&lt;/p&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;The hostname must be suffixed with a comma (,).&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Direct Mapping—Select the path from the task input or task output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task&amp;rsquo;s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced Mapping—Map a Golang template to the task input. For example, &lt;code&gt;FindAllString&lt;/code&gt; function returns a slice of all substrings that match the given regular expression in the given string.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Command Timeout&lt;/p&gt;
&lt;p&gt;The command timeout in seconds for the execution of the Ansible Playbook. The range is 10 to 7200 seconds.&lt;/p&gt;
&lt;p&gt;The default timeout is 600 seconds.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Static Value—The command timeout in seconds.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Direct Mapping—Select the command timeout from the task input or task output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task&amp;rsquo;s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced Mapping—Map a Golang template to the task input. For example, &lt;code&gt;FindAllString&lt;/code&gt; function returns a slice of all substrings that match the given regular expression in the given string.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Command Line Argument&lt;/p&gt;
&lt;p&gt;The optional command line arguments required to run the Ansible playbook.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Static Value—The command line argument.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Direct Mapping—Select the input from the task input or task output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task&amp;rsquo;s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced Mapping—Map a Golang template to the task input. For example, &lt;code&gt;FindAllString&lt;/code&gt; function returns a slice of all substrings that match the given regular expression in the given string.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Escape character backslash(\) needs to be used when the command line arguments contain double quotes(&amp;quot;).&lt;/p&gt;
&lt;p&gt;The following command line options are not supported by the Ansible Playbook task.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;-vvv&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-vvvv&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-k, -K&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;-c&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;--connection&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;--sftp-extra-args&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;--scp-extra-args&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;--ask-vault-password&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;--step&lt;/p&gt;
&lt;p&gt;For information on the available command line arguments, see &lt;a href=&#34;https://docs.ansible.com/ansible/latest/cli/ansible-playbook.html&#34;&gt;https://docs.ansible.com/ansible/latest/cli/ansible-playbook.html&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following table explains the Ansible Playbook executor Outputs:&lt;/p&gt;
&lt;p&gt;Property&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Exit Code&lt;/p&gt;
&lt;p&gt;The exit code after the execution of the Ansible Playbook against the given endpoint.&lt;/p&gt;
&lt;p&gt;Execution Summary&lt;/p&gt;
&lt;p&gt;The summary after the execution of Ansible Playbook against the given endpoint.&lt;/p&gt;
&lt;p&gt;Execution Log Path&lt;/p&gt;
&lt;p&gt;The Ansible execution log path on the Ansible Control node after the execution of Ansible Playbook against the given endpoint.&lt;/p&gt;
&lt;p&gt;The following table explains the Invoke Ansible Playbook task Outcomes:&lt;/p&gt;
&lt;p&gt;Property&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Outcomes&lt;/p&gt;
&lt;p&gt;To set the custom execution status and status message based on the obtained outputs, do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Click Add Outcome.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name—The name for the outcome.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Outcome Type—Select the outcome type. The options available are Success, Skip To Success, Error, Terminal Error, Skip Task Execution, or Status.&lt;/p&gt;
&lt;p&gt;For more information on Outcomes, see &lt;a href=&#34;http://localhost:8080/help/resources/Task_Designer#outcomes&#34;&gt;Outcomes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Message—The message when the condition is met.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Condition—The condition for the outcome.&lt;/p&gt;
&lt;p&gt;For example, {{eq .global.InvokeAnsiblePlaybook1.output.ExitCode &amp;ldquo;0&amp;rdquo;}}.&lt;/p&gt;
&lt;p&gt;This condition checks whether the output `ExitCode` of the executor named `InvokeAnsiblePlaybook1` equals to 0. If the condition is true, the task status is set to the value provided in `Outcome Type` and task status message is set to value provided in `Message`.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;template-parameters&#34;&gt;Template Parameters&lt;/h2&gt;
&lt;p&gt;The request body template can refer to values from task inputs, previous task outputs, or implicit parameters. The following table explains the template parameters.&lt;/p&gt;
&lt;p&gt;Prefix/Format&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{.global.task.input.&amp;lt;ParameterName&amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Task input reference.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{.global.&amp;lt;ExecutorRefName&amp;gt;.output.&amp;lt;ParameterName&amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Previous executor output reference. &lt;strong&gt;ExecutorRefName&lt;/strong&gt; is the name of the previous executor having output &lt;strong&gt;ParameterName&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{.security.AccountMoid}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Implicit parameter reference to Account MoID under which the workflow is running.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{.security.OrganizationMoid}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Implicit parameter reference to Organization MoID under which the workflow is running.&lt;/p&gt;
&lt;h2 id=&#34;template-functions&#34;&gt;Template Functions&lt;/h2&gt;
&lt;p&gt;The template engine has in-built functions to transform values before they are populated in the request templates. The following table explains the functions supported in &lt;strong&gt;Invoke SSH Commands&lt;/strong&gt; task.&lt;/p&gt;
&lt;p&gt;Function&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;TrimSpace&lt;/p&gt;
&lt;p&gt;Returns a string after removing white spaces from a the string.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{TrimSpace .global.task.input.HostName}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ContainsString&lt;/p&gt;
&lt;p&gt;Returns a boolean if a substring is present in a given string.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{if (ContainsString .global.task.input.SizeAsString \”MB\”)}}Mega Bytes{{else}}Bytes{{end}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;FindAllString&lt;/p&gt;
&lt;p&gt;Returns a slice of substrings matching the regular expression in a given string.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{(FindAllString .global.task.input.NumberString \”([0-9]+)\”)}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns array [“123”, “456”] for input string “123 some text 456.”&lt;/p&gt;
&lt;p&gt;ToJson&lt;/p&gt;
&lt;p&gt;Converts a value to a JSON format.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{(FindAllString .global.task.input.NumberString \&amp;quot;([0-9]+)\&amp;quot;) | ToJson}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns JSON array literal [“123”, “456”] for input string “123 some text 456.”&lt;/p&gt;
&lt;p&gt;AsArray&lt;/p&gt;
&lt;p&gt;Takes in an element and returns an array of one element.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{AsArray .global.task.output.serverMo}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns an array of one server Mo.&lt;/p&gt;
&lt;p&gt;Substring&lt;/p&gt;
&lt;p&gt;Returns a substring within the given index bounds.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{Substring .global.task.input.StorageId 2 6}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns “ABCD” for string “12ABCD3456.”&lt;/p&gt;
&lt;p&gt;IpToCidr&lt;/p&gt;
&lt;p&gt;Returns the classless inter-domain routing (CIDR) notation of an IPv4 address and subnet mask.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{IpToCidr .global.task.input.Ip .global.task.input.Netmask}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns “10.10.10.10/24” for the input parameters “10.10.10.10” and “255.255.255.0.”&lt;/p&gt;
&lt;p&gt;LookupInSlice&lt;/p&gt;
&lt;p&gt;Checks if a given value is present in given slice or array and returns true if it exists. This function can be used for any value.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{LookupInSlice .global.task.input.IpAddressList \”10.10.10.10\”}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns true for input [”10.10.10.10”, “20.20.20.20”].&lt;/p&gt;
&lt;p&gt;Index&lt;/p&gt;
&lt;p&gt;Returns a value from an array when an input index exists.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ index .global.task.input.nodes .global.task.input.idx }} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above example, if nodes is an array of devices and idx is 2, the index function returns the second device in the array.&lt;/p&gt;
&lt;p&gt;Itob&lt;/p&gt;
&lt;p&gt;Converts an integer to a boolean.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ Itob global.task.input.OnOffFlip }} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns true and false for inputs 1 and 0 respectively.&lt;/p&gt;
&lt;p&gt;Itoa&lt;/p&gt;
&lt;p&gt;Converts a given number to a string value.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ Itoa global.task.input.Port }} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns “12345” for input 12345.&lt;/p&gt;
&lt;p&gt;Itof&lt;/p&gt;
&lt;p&gt;Converts a given integer to a float value.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ Itof global.task.input.Rate }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns 15.0 for an input 15.&lt;/p&gt;
&lt;p&gt;Btoa&lt;/p&gt;
&lt;p&gt;Converts a given boolean to a string value.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ Btoa global.task.input.OnOffFlip }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns “true” for input true.&lt;/p&gt;
&lt;p&gt;Btoi&lt;/p&gt;
&lt;p&gt;Converts a given boolean to a integer value.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ Btoi global.task.input.OnOffFlip }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns 1 and 0 for inputs true and false respectively.&lt;/p&gt;
&lt;p&gt;Atob&lt;/p&gt;
&lt;p&gt;Converts the given string into a boolean value.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ Atob global.task.input.OnOffFlip }}Returns true for input “true”
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Atoi&lt;/p&gt;
&lt;p&gt;Converts a given number in string format to the integer type.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ftoa&lt;/p&gt;
&lt;p&gt;Converts a given number into the string form based on the given precision.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{Ftoa .global.task.input.Size 2}} returns the following output: 123.456 =&amp;gt; “123.45”, 1028 =&amp;gt; “1028.00”
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ftoi&lt;/p&gt;
&lt;p&gt;Converts a given float input to a integer value.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ Ftoi global.task.input.Rate }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns 15 for an input 15.833.&lt;/p&gt;
&lt;p&gt;Eval&lt;/p&gt;
&lt;p&gt;Supports an expression evaluation function. The below example returns 2GB for a input value of 2048. Note that the second argument is passed as ‘.’ in the template, which represents the map of all parameters.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{Eval \&amp;quot;{{.global.task.input.Size}} / 1024\&amp;quot; .}}GB
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;template-engine-syntax&#34;&gt;Template Engine Syntax&lt;/h2&gt;
&lt;p&gt;The template engine uses &lt;code&gt;prefix&lt;/code&gt; notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Comparison Statements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The comparison statements can be written using &lt;strong&gt;eq&lt;/strong&gt; (equal check), &lt;strong&gt;ne&lt;/strong&gt; (not equal check), &lt;strong&gt;lt&lt;/strong&gt; (less than check), &lt;strong&gt;le&lt;/strong&gt; (less than or equal check), &lt;strong&gt;gt&lt;/strong&gt; (greater than check), and &lt;strong&gt;ge&lt;/strong&gt; (greater than or equal check).&lt;/p&gt;
&lt;p&gt;Here is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators &lt;strong&gt;and&lt;/strong&gt;, &lt;strong&gt;ge&lt;/strong&gt;, and &lt;strong&gt;lt&lt;/strong&gt; are specified before their operands.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Conditional Statements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{if &amp;lt;comparision_statement&amp;gt;}} Template to be used {{end}}

{{if &amp;lt;comparision_statement&amp;gt;}} Template to be used {{else}} Template to be used {{end}}

{{if &amp;lt;comparision_statement&amp;gt;}} Template to be used {{else if &amp;lt;comparision_statement}} Tempalte to be used {{end}}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;invoke-ansible-playbook-reusable-task-example&#34;&gt;Invoke Ansible Playbook Reusable Task Example&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Example: &lt;strong&gt;Create a reusable task to run Ansible Playbook on the hosts&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This example task runs on an Intersight Ansible Playbook controller. In this task, the Ansible Playbook path and host inventory list fields are provided by the task input fields.&lt;/p&gt;
&lt;p&gt;The task properties required for this example are as following:&lt;/p&gt;
&lt;p&gt;Property&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;General&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Organization—The organization that you are creating the task in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display Name—A user friendly short name to identify the task definition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reference Name—The name of the Task definition.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inputs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ansible Controller—By default, the Ansible Controller task input is created for the task.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reference Name—AnsibleController&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type—Target Data Type&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Playbook Path—The user defined task input for the path of the Ansible Playbook.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reference Name—PlaybookPath&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type—String&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Host Inventory—The user defined task input for the path of the host inventory file.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reference Name—HostInventory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type—String&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Outputs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ExitCode—Task output&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reference Name—ExitCode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type—String&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Map to Task Output—&lt;em&gt;Exit Code | Invoke Ansible Playbook&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Summary—Task output&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reference Name—Summary&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type—String&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Map to Task Output—&lt;em&gt;Execution Summary | Invoke Ansible Playbook&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Logpath—Task output&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reference Name—Logpath&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type—String&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Map to Task Output—&lt;em&gt;Execution Log Path | Invoke Ansible Playbook&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following table explains the Invoke Ansible Playbook executor inputs:&lt;/p&gt;
&lt;p&gt;Property&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Playbook Path&lt;/p&gt;
&lt;p&gt;Direct Mapping—{{.global.task.input.PlaybookPath}}&lt;/p&gt;
&lt;p&gt;Host Inventory&lt;/p&gt;
&lt;p&gt;Direct Mapping—{{.global.task.input.HostInventory}}&lt;/p&gt;
&lt;p&gt;Command Timeout&lt;/p&gt;
&lt;p&gt;Default value.&lt;/p&gt;
&lt;p&gt;Command Line Argument&lt;/p&gt;
&lt;p&gt;Static—-vv&lt;/p&gt;
&lt;p&gt;Command line argument &amp;ndash;vv is for the Ansible execution log verbosity.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Powershell</title>
      <link>http://localhost:8080/docs/ico/executors/powershell/</link>
      <pubDate>Fri, 28 Jan 2022 21:22:21 +0530</pubDate>
      
      <guid>http://localhost:8080/docs/ico/executors/powershell/</guid>
      <description>
        
        
        &lt;h1 id=&#34;overview&#34;&gt;Overview&lt;/h1&gt;
&lt;p&gt;The Invoke PowerShell Script task is an out-of-box solution that allows you to automate PowerShell operations on the PowerShell target that is added as a PowerShell endpoint target in Cisco Intersight. This feature allows a workflow designer to extend the automation capabilities of the workflow engine beyond what is natively available in the task library and interact with the PowerShell target endpoint.
For more information, see &lt;a href=&#34;Docs_on_Intersight_Help_Center&#34;&gt;Intersight Kubernetes Service&lt;/a&gt;&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/MldPSHPYslU&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h2 id=&#34;supported-targets&#34;&gt;Supported Targets&lt;/h2&gt;
&lt;p&gt;The Invoke PowerShell Script task can be run only on the targets that are added as a PowerShell endpoint target type in Cisco Intersight.&lt;/p&gt;
&lt;p&gt;To run the PowerShell Script task on the PowerShell target endpoint from Cisco Intersight, ensure that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The endpoint is reachable through Intersight Assist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The endpoint target is in the Connected state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;PowerShell Remoting is enabled on the target endpoint to allow the endpoint to receive PowerShell remote commands.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To enable PowerShell Remoting on a PowerShell endpoint target, execute the following remoting script on the PowerShell target endpoint:&lt;/p&gt;
&lt;div class=&#34;td-card card&#34;&gt;
  
  
    
  
  
  
  &lt;div class=&#34;card-body code p-l0 m-0&#34;&gt;
      &lt;pre tabindex=&#34;0&#34;&gt;&lt;code class=&#34;language-none&#34; data-lang=&#34;none&#34;&gt;
Param (
    [switch]$EnableBasicAuth = $false,
    [switch]$SKipNetworkProfileCheck = $false,
    [switch]$ForceNewSSLCert = $false,
    [string]$SubjectName = $env:COMPUTERNAME,
    [int]$CertValidityDays = 1095
)

Function New-SelfSignedCert
{
    Param (
        [string]$SubjectName,
        [int]$ValidDays = 1095
    )

    $hostnonFQDN = $env:computerName
    $hostFQDN = [System.Net.Dns]::GetHostByName(($env:computerName)).Hostname
    $SignatureAlgorithm = &amp;#34;SHA256&amp;#34;

    $name = New-Object -COM &amp;#34;X509Enrollment.CX500DistinguishedName.1&amp;#34;
    $name.Encode(&amp;#34;CN=$SubjectName&amp;#34;, 0)

    $key = New-Object -COM &amp;#34;X509Enrollment.CX509PrivateKey.1&amp;#34;
    $key.ProviderName = &amp;#34;Microsoft Enhanced RSA and AES Cryptographic Provider&amp;#34;
    $key.KeySpec = 1
    $key.Length = 4096
    $key.SecurityDescriptor = &amp;#34;D:PAI(A;;0xd01f01ff;;;SY)(A;;0xd01f01ff;;;BA)(A;;0x80120089;;;NS)&amp;#34;
    $key.MachineContext = 1
    $key.Create()

    $serverauthoid = New-Object -COM &amp;#34;X509Enrollment.CObjectId.1&amp;#34;
    $serverauthoid.InitializeFromValue(&amp;#34;1.3.6.1.5.5.7.3.1&amp;#34;)
    $ekuoids = New-Object -COM &amp;#34;X509Enrollment.CObjectIds.1&amp;#34;
    $ekuoids.Add($serverauthoid)
    $ekuext = New-Object -COM &amp;#34;X509Enrollment.CX509ExtensionEnhancedKeyUsage.1&amp;#34;
    $ekuext.InitializeEncode($ekuoids)

    $cert = New-Object -COM &amp;#34;X509Enrollment.CX509CertificateRequestCertificate.1&amp;#34;
    $cert.InitializeFromPrivateKey(2, $key, &amp;#34;&amp;#34;)
    $cert.Subject = $name
    $cert.Issuer = $cert.Subject
    $cert.NotBefore = (Get-Date).AddDays(-1)
    $cert.NotAfter = $cert.NotBefore.AddDays($ValidDays)

    $SigOID = New-Object -ComObject X509Enrollment.CObjectId
    $SigOID.InitializeFromValue(([Security.Cryptography.Oid]$SignatureAlgorithm).Value)

    [string[]] $AlternativeName  += $hostnonFQDN
    $AlternativeName += $hostFQDN
    $IAlternativeNames = New-Object -ComObject X509Enrollment.CAlternativeNames

    foreach ($AN in $AlternativeName)
    {
        $AltName = New-Object -ComObject X509Enrollment.CAlternativeName
        $AltName.InitializeFromString(0x3,$AN)
        $IAlternativeNames.Add($AltName)
    }

    $SubjectAlternativeName = New-Object -ComObject X509Enrollment.CX509ExtensionAlternativeNames
    $SubjectAlternativeName.InitializeEncode($IAlternativeNames)

    [String[]]$KeyUsage = (&amp;#34;DigitalSignature&amp;#34;, &amp;#34;KeyEncipherment&amp;#34;)
    $KeyUsageObj = New-Object -ComObject X509Enrollment.CX509ExtensionKeyUsage
    $KeyUsageObj.InitializeEncode([int][Security.Cryptography.X509Certificates.X509KeyUsageFlags]($KeyUsage))
    $KeyUsageObj.Critical = $true

    $cert.X509Extensions.Add($KeyUsageObj)
    $cert.X509Extensions.Add($ekuext)
    $cert.SignatureInformation.HashAlgorithm = $SigOID
    $CERT.X509Extensions.Add($SubjectAlternativeName)
    $cert.Encode()

    $enrollment = New-Object -COM &amp;#34;X509Enrollment.CX509Enrollment.1&amp;#34;
    $enrollment.InitializeFromRequest($cert)
    $certdata = $enrollment.CreateRequest(0)
    $enrollment.InstallResponse(2, $certdata, 0, &amp;#34;&amp;#34;)

    # extract/return the thumbprint from the generated cert
    $parsed_cert = New-Object System.Security.Cryptography.X509Certificates.X509Certificate2
    $parsed_cert.Import([System.Text.Encoding]::UTF8.GetBytes($certdata))

    return $parsed_cert.Thumbprint
}

# Setup error handling
Trap
{
    $_
    Exit 1
}

# Treat non terminating erros as terminating errors
$ErrorActionPreference = &amp;#34;Stop&amp;#34;

# Get the ID and security principal of the current user account
$myWindowsID=[System.Security.Principal.WindowsIdentity]::GetCurrent()
$myWindowsPrincipal=new-object System.Security.Principal.WindowsPrincipal($myWindowsID)

# Get the security principal for the Administrator role
$adminRole=[System.Security.Principal.WindowsBuiltInRole]::Administrator

# Check to see if we are currently running &amp;#34;as Administrator&amp;#34;
if (-Not $myWindowsPrincipal.IsInRole($adminRole))
{
    Write-Output &amp;#34;ERROR: You need elevated Administrator privileges in order to run this script.&amp;#34;
    Write-Output &amp;#34;       Start Windows PowerShell by using the Run as Administrator option.&amp;#34;
    Exit 2
}


# Ensure PowerShell version is greater that 3.0
if ($PSVersionTable.PSVersion.Major -lt 3) {
    Throw &amp;#34;Minimum required PowerShell version is 3.0&amp;#34;
}

# Ensure WinRM is present on the machine
if (!(Get-Service &amp;#34;WinRM&amp;#34; -ErrorAction SilentlyContinue)) {
    Throw &amp;#34;WinRM service is not present on the machine&amp;#34;
}

# Ensure WinRM is running on the machine
if (!(Get-Service &amp;#34;WinRM&amp;#34; -ErrorAction SilentlyContinue | where {$_.Status -eq &amp;#34;Running&amp;#34;})) {
    Write-Output &amp;#34;WinRM service is not running&amp;#34;
    Write-Output &amp;#34;Attempting to start WinRM service&amp;#34;
    Start-Service &amp;#34;WinRM&amp;#34;
}

# Check if PS Remoting is already enabled, if not enable it
# WinRM should be running; check that we have a PS session config.
if (!(Get-PSSessionConfiguration -Verbose:$false) -or (!(Get-ChildItem WSMan:\localhost\Listener)))
{
  if ($SkipNetworkProfileCheck) {
    Write-Verbose &amp;#34;Enabling PS Remoting without checking Network profile.&amp;#34;
    Enable-PSRemoting -SkipNetworkProfileCheck -Force -ErrorAction Stop
    Write-Output &amp;#34;Enabled PS Remoting.&amp;#34;
  }
  else {
    Write-Verbose &amp;#34;Enabling PS Remoting.&amp;#34;
    Enable-PSRemoting -Force -ErrorAction Stop
    Write-Output &amp;#34;Enabled PS Remoting.&amp;#34;
  }
}
else
{
    Write-Verbose &amp;#34;PS Remoting is already enabled.&amp;#34;
}

# Ensure LocalAccountTokenFilterPolicy is set to 1
# https://github.com/ansible/ansible/issues/42978
# Needed for NTLM authentication
$token_path = &amp;#34;HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System&amp;#34;
$token_prop_name = &amp;#34;LocalAccountTokenFilterPolicy&amp;#34;
$token_key = Get-Item -Path $token_path
$token_value = $token_key.GetValue($token_prop_name, $null)
if ($token_value -ne 1) {
    Write-Verbose &amp;#34;Setting LocalAccountTOkenFilterPolicy to 1&amp;#34;
    if ($null -ne $token_value) {
        Remove-ItemProperty -Path $token_path -Name $token_prop_name
    }
    New-ItemProperty -Path $token_path -Name $token_prop_name -Value 1 -PropertyType DWORD &amp;gt; $null
}


# Make sure there is a SSL listener.
$listeners = Get-ChildItem WSMan:\localhost\Listener
if (!($listeners | Where-Object {$_.Keys -like &amp;#34;TRANSPORT=HTTPS&amp;#34;}))
{
    # We cannot use New-SelfSignedCertificate on 2012R2 and earlier
    $thumbprint = New-SelfSignedCert -SubjectName $SubjectName -ValidDays $CertValidityDays
    Write-Output &amp;#34;Self-signed SSL certificate generated; thumbprint: $thumbprint&amp;#34;
    # Create the hashtables of settings to be used.
    $valueset = @{
        Hostname = $SubjectName
        CertificateThumbprint = $thumbprint
    }
    $selectorset = @{
        Transport = &amp;#34;HTTPS&amp;#34;
        Address = &amp;#34;*&amp;#34;
    }
    Write-Verbose &amp;#34;Enabling SSL listener.&amp;#34;
    New-WSManInstance -ResourceURI &amp;#39;winrm/config/Listener&amp;#39; -SelectorSet $selectorset -ValueSet $valueset
    Write-Verbose &amp;#34;Enabled SSL listener.&amp;#34;
}
else
{
    Write-Verbose &amp;#34;SSL listener is already active.&amp;#34;
    # Force a new SSL cert on Listener if the $ForceNewSSLCert
    if ($ForceNewSSLCert)
    {
        # We cannot use New-SelfSignedCertificate on 2012R2 and earlier
        $thumbprint = New-SelfSignedCert -SubjectName $SubjectName -ValidDays $CertValidityDays
        Write-Verbose &amp;#34;Self-signed SSL certificate generated; thumbprint: $thumbprint&amp;#34;
        $valueset = @{
            CertificateThumbprint = $thumbprint
            Hostname = $SubjectName
        }
        # Delete the listener for SSL
        $selectorset = @{
            Address = &amp;#34;*&amp;#34;
            Transport = &amp;#34;HTTPS&amp;#34;
        }
        Remove-WSManInstance -ResourceURI &amp;#39;winrm/config/Listener&amp;#39; -SelectorSet $selectorset
        # Add new Listener with new SSL cert
        New-WSManInstance -ResourceURI &amp;#39;winrm/config/Listener&amp;#39; -SelectorSet $selectorset -ValueSet $valueset
    }
}

# Enable/Disable basic authentication as needed
$basicAuth = Get-Item WSMan:\localhost\Service\Auth\Basic
if ($EnableBasicAuth) {
    if ($basicAuth.Value -eq &amp;#34;true&amp;#34;) {
        Write-Output &amp;#34;Basic authentication is already enabled&amp;#34;
    } else {
        Write-Output &amp;#34;Basic authentication is currently disabled&amp;#34;
        Set-Item WSMan:\localhost\Service\Auth\Basic -Value $true
        Write-Output &amp;#34;Basic authentication has been enabled&amp;#34;
    }
} else {
    if ($basicAuth.Value -eq &amp;#34;true&amp;#34;) {
        Write-Output &amp;#34;Basic authentication is currently enabled&amp;#34;
        Set-Item WSMan:\localhost\Service\Auth\Basic -Value $false
        Write-Output &amp;#34;Basic authentication has been disabled&amp;#34;
    } else {
        Write-Output &amp;#34;Basic authentication is already disabled&amp;#34;
    }
}

# Check firewall
$rule = Get-NetFirewallRule | where {$_.DisplayName -eq &amp;#34;Allow WinRM HTTPS&amp;#34;}
if ($rule) {
    if ($rule.Profile.ToString() -eq &amp;#34;Any&amp;#34;) {
        Write-Output &amp;#34;Firewall rule already exists for WinRM&amp;#34;
    } else {
        Set-NetFirewallRule -DisplayName &amp;#34;Allow WinRM HTTPS&amp;#34; -Profile Any
    }
} else {
   Write-Output &amp;#34;Creating firewall rule for WinRM&amp;#34;
   New-NetFirewallRule -Profile Any -Name &amp;#34;Allow WinRM HTTPS&amp;#34; -DisplayName &amp;#34;Allow WinRM HTTPS&amp;#34; -Direction Inbound -LocalPort 5986 -Protocol &amp;#34;TCP&amp;#34; -Action Allow -Enabled True | Out-Null
}

# Test a remoting connection to localhost, which should work.
$httpResult = Invoke-Command -ComputerName &amp;#34;localhost&amp;#34; -ScriptBlock {$env:COMPUTERNAME} -ErrorVariable httpError -ErrorAction SilentlyContinue
$httpsOptions = New-PSSessionOption -SkipCACheck -SkipCNCheck -SkipRevocationCheck
$httpsResult = New-PSSession -UseSSL -ComputerName &amp;#34;localhost&amp;#34; -SessionOption $httpsOptions -ErrorVariable httpsError -ErrorAction SilentlyContinue
if ($httpResult -and $httpsResult)
{
    Write-Verbose &amp;#34;HTTP: Enabled | HTTPS: Enabled&amp;#34;
}
elseif ($httpsResult -and !$httpResult)
{
    Write-Verbose &amp;#34;HTTP: Disabled | HTTPS: Enabled&amp;#34;
}
elseif ($httpResult -and !$httpsResult)
{
    Write-Verbose &amp;#34;HTTP: Enabled | HTTPS: Disabled&amp;#34;
}
else
{
    Write-Output &amp;#34;Unable to establish an HTTP or HTTPS remoting session.&amp;#34;
    Throw &amp;#34;Unable to establish an HTTP or HTTPS remoting session.&amp;#34;
}
Write-Output &amp;#34;PS Remoting has been successfully configured for Intersight.&amp;#34;
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&#34;using-the-executor-powershell-script-embedded-task&#34;&gt;Using the Executor PowerShell Script embedded task&lt;/h2&gt;
&lt;p&gt;Use the &lt;strong&gt;Invoke PowerShell Script&lt;/strong&gt; from the &lt;strong&gt;Executors&lt;/strong&gt; section in
the Intersight Orchestrator Workflow Designer UI to create a task for a
PowerShell Script target endpoint.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Product&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;ABC&lt;/td&gt;
&lt;td&gt;Sample Text&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The following table explains the PowerShell Script task properties:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 12%&#34; /&gt;
&lt;col style=&#34;width: 87%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;External Target&lt;/td&gt;
&lt;td&gt;&lt;p&gt;The PowerShell endpoint on which the PowerShell Script task is run.&lt;/p&gt;
&lt;p&gt;The PowerShell Script target must be in the connected state.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Static Value—Click Select External Target to select the PowerShell endpoint target from the Cisco Intersight target inventory.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Direct Mapping—Select an existing workflow input or Task output field.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;To create a new Workflow input, select Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Advanced Mapping—Map a Golang template to the task input.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Script&lt;/td&gt;
&lt;td&gt;&lt;p&gt;The PowerShell script to be executed on the endpoint.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Static Value—The PowerShell script.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Direct Mapping—Select an existing workflow input or Task output field.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;To create a new Workflow input, select Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Advanced Mapping—Map a Golang template to the task input. For example, FindAllString function returns a slice of all substrings that match the given regular expression in the given string.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When you specify the PowerShell script statement and enable the Response Parser Type as JSON, at the time of execution of the workflow, Intersight pipes &lt;em&gt;ConvertTo-Json&lt;/em&gt; to the script to get the corresponding responses as JSON output. However, PowerShell script statements do not output to the pipe command, and the workflow may fail and return the error &#34;An empty pipe element is not allowed.&#34;. For example, for a script foreach ($x in 1,2,3,4,5) {$x} with Response Parser Type as JSON, when the workflow is executed the workflow fails and returns the error &#34;&lt;em&gt;An empty pipe element is not allowed&lt;/em&gt;&#34;.&lt;/p&gt;
&lt;p&gt;You must wrap the PowerShell script statement with the $() operator, such as $(foreach ($x in 1,2,3,4,5) {$x} ) for the PowerShell script to work.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Timeout&lt;/td&gt;
&lt;td&gt;&lt;p&gt;The duration in seconds for which the task waits for a response from the PowerShell target endpoint.&lt;/p&gt;
&lt;p&gt;The field corresponds to the wsman:OperationTimeout field in the WinRM SOAP/XML message.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Static Value—The timeout in seconds.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Direct Mapping—Select the command timeout from the Workflow input or Task output.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;To create a new Workflow input, select Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Transformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task&#39;s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Advanced Mapping—Map a Golang template to the task input.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Response Parser&lt;/td&gt;
&lt;td&gt;&lt;p&gt;The response parser contains information about the required values, their types, and the location in the API responses. You specify the required values along with API request details. These details are used by the response parser to extract the values from the API responses.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Static Value—Select the response type as JSON or Text.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Enable JSON Parsing—Select enable to parse the script response and extract the data from it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;Depth—The number of levels of the contained objects that must be included in the JSON representation.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;Path—The content specific path information that identifies the parameter value within the content. The value is usually XPath or JSONPath.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;Name—The name of the output under which the captured value is saved.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;Type—The response parameter type—String, Integer, Float, or Boolean.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Enable Text Parsing—Select enable to parse the script response and extract data from it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;Regular Expression—The regular expression of the line in the command response where the interested capture value resides. The format to specify the capture value in this input is $&amp;lt;Name of the parameter&amp;gt;. For example, if the value of the Regular Expression field is $&amp;lt;ParameterName&amp;gt;\@cisco\.com, then the Name field must be given the value - ParameterName.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;Name—The name of the output under which the captured value is saved. This name should be the same that is provided in the Regular Expression—$&amp;lt;Name&amp;gt;.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;Type—The response parameter type—String, Integer, Float, or Boolean.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Direct Mapping—Select the command timeout from the Workflow input or Task output.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;To create a new Workflow input, select Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Transformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task&#39;s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Advanced Mapping—Map a Golang template to the task input.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The following table explains the task Output properties:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Exit Code&lt;/td&gt;
&lt;td&gt;The exit code after the execution of the PowerShell script against the given endpoint.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Response&lt;/td&gt;
&lt;td&gt;The response returned by the script.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Extracted Parameters&lt;/td&gt;
&lt;td&gt;The list of output parameters extracted from the response.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The following table explains the task Outcomes properties:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 11%&#34; /&gt;
&lt;col style=&#34;width: 88%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Outcomes&lt;/td&gt;
&lt;td&gt;&lt;p&gt;To use the extracted values from the API response to determine the task status and set the status with an appropriate message, when the conditions match, do the following:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;Click Add Outcome.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Name—The name for the outcome.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Outcome Type—Select the outcome type as Success, Error, or Skip Task Execution.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;For more information on Outcomes, see &lt;a href=&#34;file://E:\\help\\resources\\Task_Designer&#34;&gt;Outcomes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&#34;4&#34; type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;Message—The message when the condition is met.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Condition—The condition for the outcome.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&#34;2&#34; type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;For example, {{eq .local.response.ExitCode &#34;0&#34;}}.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This condition checks whether the response exit code of API is 0.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;using-the-executor-powershell-script-custom-task&#34;&gt;Using the Executor PowerShell Script custom task&lt;/h2&gt;
&lt;p&gt;Use the &lt;strong&gt;Invoke PowerShell Script&lt;/strong&gt; from the &lt;strong&gt;Executors&lt;/strong&gt; section in
the Intersight Orchestrator Task Designer UI .&lt;/p&gt;
&lt;p&gt;For more information on custom tasks, see &lt;a href=&#34;file://E:%5Chelp%5Cresources%5CTask_Designer&#34;&gt;Defining a
Task&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The following table explains the PowerShell Script custom task
properties:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 10%&#34; /&gt;
&lt;col style=&#34;width: 89%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;General&lt;/td&gt;
&lt;td&gt;&lt;p&gt;For more information, see &lt;a href=&#34;file://E:\\help\\resources\\Task_Designer&#34;&gt;Defining a Task&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;.&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Inputs&lt;/td&gt;
&lt;td&gt;External Target—The PowerShell endpoint target on which the PowerShell script task is run.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Outputs&lt;/td&gt;
&lt;td&gt;&lt;p&gt;To extract the required values from the API responses and map it to task outputs, do the following:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;Create Task Output—Specify the task output.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Map to Task Output—Check the check box to map the task output to an API response.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Task Output—Select the API response to which the task output is mapped. The options available are:&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Exit Code | Invoke PowerShell Script&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Response | Invoke PowerShell Script&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;em&gt;Extracted Parameters | Invoke PowerShell Script&lt;/em&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, if you create a new task output &lt;em&gt;New Exit Code&lt;/em&gt; and map it to &lt;em&gt;Exit Code | Invoke PowerShell Script&lt;/em&gt;, after the workflow is executed, the output will show:&lt;/p&gt;
&lt;p&gt;.&lt;br /&gt;
└── Outputs/&lt;br /&gt;
    ├── ConfigResults:[ 1 ]/&lt;br /&gt;
    │   └── Object:{ 3 }/&lt;br /&gt;
    │       ├── ConfigResCtx:{ 1 }/&lt;br /&gt;
    │       │   └── EntityData:{ 1 }/&lt;br /&gt;
    │       │       └── task:workflow.PowerShellApiTask&lt;br /&gt;
    │       ├── State:Ok&lt;br /&gt;
    │       └── Type:Config&lt;br /&gt;
    ├── Custom_Task_Output:Handles NPM(K) PM(K) WS(K) CPU(s) Id SI ProcessName/&lt;br /&gt;
    │                        ----- ------ ----- ----- ------ -- -- -----------&lt;br /&gt;
    │                       264 16 4880 24808 1.11 2600 2 ApplicationFrameHost&lt;br /&gt;
    │                       405 28 109036 5628 85.55 2112 2 chrome&lt;br /&gt;
    │                       ...&lt;br /&gt;
    └── New Exit Code:0&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The following table explains the PowerShell Script custom task input:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 12%&#34; /&gt;
&lt;col style=&#34;width: 87%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Script&lt;/td&gt;
&lt;td&gt;&lt;p&gt;The PowerShell script to be executed on the target endpoint.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Static Value—The PowerShell Script.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Direct Mapping—Select an existing Task input or Task output field.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When you use Direct Mapping and select a task input, and then execute the workflow it fails and returns the error &lt;em&gt;map[Text:get-service : The term &#39;map[Text:get-service&#39; is not recognized as the name of a cmdlet, function, script file, or operable program. Check the spelling of the name, or if a path was included, verify that the path is correct and try again.&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You must prefix &lt;em&gt;.Text&lt;/em&gt; to the Direct Mapping input in Advanced Mapping. For example, for a task input Script, the Advanced Mapping input should be{{.global.task.input.Script.Text}}&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Advanced Mapping—Map a Golang template to the task input.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;Timeout&lt;/td&gt;
&lt;td&gt;&lt;p&gt;The duration in seconds for which the task waits for a response from the PowerShell target endpoint.&lt;/p&gt;
&lt;p&gt;The field corresponds to the wsman:OperationTimeout field in the WinRM SOAP/XML message.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Static Value—The timeout in seconds.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Direct Mapping—Select the command timeout from the Task input or Task output.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Transformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task&#39;s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Advanced Mapping—Map a Golang template to the task input.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Response Parser&lt;/td&gt;
&lt;td&gt;&lt;p&gt;The response parser contains information about the required values, their types, and the location in the API responses. You specify the required values along with API request details. These details are used by the response parser to extract the values from the API responses.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Static Value—Select the response type as JSON or Text.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Enable JSON Parsing—Select enable to parse the script response and extract the data from it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;Depth—The number of levels of the contained objects that must be included in the JSON representation.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;Path—The content specific path information that identifies the parameter value within the content. The value is usually XPath or JSONPath.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;Name—The name of the output under which the captured value is saved.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;Type—The response parameter type—String, Integer, Float, or Boolean.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Enable Text Parsing—Select enable to parse the script response and extract data from it.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;Regular Expression—The regular expression of the line in the command response where the interested capture value resides. The format to specify the capture value in this input is $&amp;lt;Name of the parameter&amp;gt;. For example, if the value of the Regular Expression field is $&amp;lt;ParameterName&amp;gt;\@cisco\.com, then the Name field must be given the value - ParameterName.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;Name—The name of the output under which the captured value is saved. This name should be the same that is provided in the Regular Expression—$&amp;lt;Name&amp;gt;.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;li&gt;&lt;blockquote&gt;
&lt;p&gt;Type—The response parameter type—String, Integer, Float, or Boolean.&lt;/p&gt;
&lt;/blockquote&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Direct Mapping—Select the input from the Task input or Task output.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When you use Direct Mapping and select a task input, and execute the workflow it fails and returns the error &lt;em&gt;Error in execution: API request cannot be populated: invalid character &#39;m&#39; looking for beginning of value&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;You must pipe &lt;em&gt;ToJson&lt;/em&gt; to Direct Mapping in Advanced Mapping. For example, for a task input ResponseParser, the Advanced Mapping input should be {{.global.task.input.ResponseParser| ToJson}}.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Advanced Mapping—Map a Golang template to the task input.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;The following table explains the PowerShell Script custom task Outcomes:&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 11%&#34; /&gt;
&lt;col style=&#34;width: 88%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Property&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;Outcomes&lt;/td&gt;
&lt;td&gt;&lt;p&gt;To use the extracted values from the API response to determine the task status and set the status with an appropriate message, when the conditions match, do the following:&lt;/p&gt;
&lt;ol type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;Click Add Outcome.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Name—The name for the outcome.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Outcome Type—Select the outcome type. The options available are Success, Skip To Success, Error, Terminal Error, Skip Task Execution, or Status.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&#34;4&#34; type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;For more information on Outcomes, see &lt;a href=&#34;file://E:\\help\\resources\\Task_Designer&#34;&gt;Outcomes&lt;/a&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&#34;4&#34; type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;Message—The message when the condition is met.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Condition—The condition for the outcome.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;ol start=&#34;5&#34; type=&#34;1&#34;&gt;
&lt;li&gt;&lt;p&gt;For example, {{eq .global.InvokePowerShellScript1.output.ExitCode &#34;0&#34;}}.&lt;/p&gt;&lt;/li&gt;
&lt;li&gt;&lt;p&gt;This condition checks whether the response exit code of the API named ‘InvokePowerShellScript1’ used in a custom task is 0.&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;template-parameters&#34;&gt;Template Parameters&lt;/h2&gt;
&lt;p&gt;The request body template can refer to values from workflow inputs,
previous task outputs, or implicit parameters for Intersight API calls.
The following table explains the template parameters.&lt;/p&gt;
&lt;table&gt;
&lt;colgroup&gt;
&lt;col style=&#34;width: 53%&#34; /&gt;
&lt;col style=&#34;width: 46%&#34; /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr class=&#34;header&#34;&gt;
&lt;th&gt;Prefix/Format&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;{{.global.workflow.input.&amp;lt;ParameterName&amp;gt;}}&lt;/td&gt;
&lt;td&gt;Workflow input reference.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;{{.global.&amp;lt;TaskRefName&amp;gt;.output.&lt;br /&gt;
Parameters.&amp;lt;ParameterName&amp;gt;}}&lt;/td&gt;
&lt;td&gt;Previous task output reference. &lt;strong&gt;TaskRefName&lt;/strong&gt; is the name of the previous task having output &lt;strong&gt;ParameterName&lt;/strong&gt;.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;odd&#34;&gt;
&lt;td&gt;{{.security.AccountMoid}}&lt;/td&gt;
&lt;td&gt;Implicit parameter reference to Account MoID under which the workflow is running.&lt;/td&gt;
&lt;/tr&gt;
&lt;tr class=&#34;even&#34;&gt;
&lt;td&gt;{{.security.OrganizationMoid}}&lt;/td&gt;
&lt;td&gt;Implicit parameter reference to Organization MoID under which the workflow is running.&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h2 id=&#34;template-engine-syntax&#34;&gt;Template Engine Syntax&lt;/h2&gt;
&lt;p&gt;The template engine uses prefix notation for the statements. In case of
operational statements, the operators are specified before the operands.
All the operations are invoked after all the operands are evaluated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Comparison Statements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The comparison statements can be written using &lt;strong&gt;eq&lt;/strong&gt; (equal check),
&lt;strong&gt;ne&lt;/strong&gt; (not equal check), &lt;strong&gt;lt&lt;/strong&gt; (less than check), &lt;strong&gt;le&lt;/strong&gt; (less than or
equal check), &lt;strong&gt;gt&lt;/strong&gt; (greater than check), and &lt;strong&gt;ge&lt;/strong&gt; (greater than or
equal check).&lt;/p&gt;
&lt;p&gt;Here is an example that checks the parameter HttpStatusCode is in the
client error code range 400 – 500. Note that the template engine
supports prefix notation and hence the operators &lt;strong&gt;and&lt;/strong&gt;, &lt;strong&gt;ge&lt;/strong&gt;, and
&lt;strong&gt;lt&lt;/strong&gt; are specified before their operands.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{&lt;span style=&#34;color:#000&#34;&gt;and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}}&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;Conditional Statements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The template engine supports conditional statements in prefix notation
syntax. This section has some examples of these conditional statements.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;{{&lt;span style=&#34;color:#000&#34;&gt;if \&amp;lt;comparision_statement&amp;gt;}} Template to be used {{end}}  &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;{{&lt;span style=&#34;color:#000&#34;&gt;if \&amp;lt;comparision_statement&amp;gt;}} Template to be used {{else}} Template to be used {{end}}  &lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;  
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;&lt;/span&gt;{{&lt;span style=&#34;color:#000&#34;&gt;if \&amp;lt;comparision_statement&amp;gt;}} Template to be used {{else if \&amp;lt;comparision_statement}} Tempalte to be used {{end}}&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
      </description>
    </item>
    
    <item>
      <title>Docs: SSH Commands</title>
      <link>http://localhost:8080/docs/ico/executors/ssh/</link>
      <pubDate>Fri, 28 Jan 2022 21:22:32 +0530</pubDate>
      
      <guid>http://localhost:8080/docs/ico/executors/ssh/</guid>
      <description>
        
        
        &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Test
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Sample Text&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: SSH Commands - Reusable</title>
      <link>http://localhost:8080/docs/ico/executors/ssh-reusable/</link>
      <pubDate>Fri, 28 Jan 2022 21:22:54 +0530</pubDate>
      
      <guid>http://localhost:8080/docs/ico/executors/ssh-reusable/</guid>
      <description>
        
        
        &lt;h1 id=&#34;executors--invoke-ssh-commands---reusable-task&#34;&gt;Executors – Invoke SSH Commands - Reusable Task&lt;/h1&gt;
&lt;p&gt;The &lt;strong&gt;Invoke SSH Commands&lt;/strong&gt; task executes SSH commands against the given Intersight SSH endpoint target.&lt;/p&gt;
&lt;h2 id=&#34;supported-targets&#34;&gt;Supported Targets&lt;/h2&gt;
&lt;p&gt;The Invoke SSH Commands task can be run only on the targets that are added as an SSH or Ansible endpoint target type in Cisco Intersight.&lt;/p&gt;
&lt;p&gt;To run the SSH Command task on the SSH or Ansible endpoint target from Cisco Intersight, ensure that:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The endpoint is reachable through Intersight Assist.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The endpoint target is in the Connected state.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The endpoint credentials are valid.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information on Intersight Target Claim, see &lt;a href=&#34;http://localhost:8080/help/getting_started/claim_targets#target_claim_using_intersight_assist&#34;&gt;Target Claim Using Intersight Assist&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;using-the-executor-ssh-commands-reusable-task&#34;&gt;Using the Executor SSH Commands Reusable Task&lt;/h2&gt;
&lt;p&gt;Use the &lt;strong&gt;Invoke SSH Commands&lt;/strong&gt; from the &lt;strong&gt;Executors&lt;/strong&gt; section in the Intersight Orchestrator Task Designer UI to create a Invoke SSH Commands reusable task.&lt;/p&gt;
&lt;p&gt;For more information on tasks, see &lt;a href=&#34;http://localhost:8080/help/resources/Task_Designer#defining_a_task&#34;&gt;Defining a Task&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following table explains the Invoke SSH Commands task properties:&lt;/p&gt;
&lt;p&gt;Property&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;General&lt;/p&gt;
&lt;p&gt;For more information, see &lt;a href=&#34;http://localhost:8080/help/resources/Task_Designer#defining_a_task&#34;&gt;Defining a Task&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Inputs&lt;/p&gt;
&lt;p&gt;External Target—The external target on which the SSH commands are run. By default, the External Target task input is created for the task.&lt;/p&gt;
&lt;p&gt;The SSH commands can be run only on targets added as SSH or Ansible endpoint target in Intersight and are in the connected state.&lt;/p&gt;
&lt;p&gt;Outputs&lt;/p&gt;
&lt;p&gt;To extract the required values from the command responses and map it to task outputs, do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Create Task Output—Specify the task output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Map to Task Output—Check the check box to map the task output to an command response.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task Output—Select the command response to which the task output is mapped. The options available are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Exit Code | Invoke SSH Commands&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Command Output | Invoke SSH Commands&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Command Execution Error| Invoke SSH Commands&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;em&gt;Extracted Parameters | Invoke SSH Commands&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information on task outputs, see Executor Output properties.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;The following table explains the Invoke SSH Commands executor input:&lt;/p&gt;
&lt;p&gt;Property&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;SSH Command&lt;/p&gt;
&lt;p&gt;The SSH commands that need to be executed on the remote server along with the details of command type.&lt;/p&gt;
&lt;p&gt;Command— The SSH command string to execute against the given target. You need to specify only the command string.&lt;/p&gt;
&lt;p&gt;You can specify multiple commands that need to run on the given target. For more information, see &lt;a href=&#34;http://localhost:8080/help/resources/Executor_SSH#using_ssh_commands&#34;&gt;Using SSH Commands&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;The command chaining is allowed only when the command type is non-interactive.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Static Value—The SSH commands that are to be run on the remote server.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Non-Interactive Command—The SSH command that does not require user prompts.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Interactive Command—The SSH commands that require user prompts. For example, the Sudo or install packages command prompts for the user inputs. To specify the user inputs for the command, do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Expect —The regular expression of the expect prompt of the interactive command. You must provide the complete regular expression of the Expect string and the expression must end with the special character &amp;lsquo;$&amp;rsquo; to match the end of the Expect string.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send—The answer string to the expect prompt. You can specify a string value.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;End prompt—The regular expression of the Shell Prompt of the remote server or target. You must provide the complete regular expression of the Shell Prompt and it must end with special character &amp;lsquo;$&amp;rsquo; to match the end of the Shell Prompt string.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Direct Mapping—Select an existing task input or task output field.&lt;/p&gt;
&lt;p&gt;You can map only a custom data type of type SSH Command.&lt;/p&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;Direct mapping of task input or output of string data type is not valid.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced Mapping—You can use Go template expressions for advance use cases where data manipulation is required.&lt;/p&gt;
&lt;p&gt;For example, to use substring of the task input StringInput in the SSH command, the advanced mapping can be:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{Command: &amp;quot;{{Substring .global.task.input.StringInput 5 15}}&amp;quot;, 
CommandType: &amp;quot;NonInteractiveCmd&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;em&gt;CommandType&lt;/em&gt; can be `NonInteractiveCmd` and `InteractiveCmd`.&lt;/p&gt;
&lt;p&gt;Following is an example for the &amp;lsquo;InteractiveCmd&amp;rsquo;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{
&amp;quot;Command&amp;quot;: &amp;quot;{{Substring .global.task.input.StringInput 5 15}}&amp;quot;,
&amp;quot;CommandType&amp;quot;: &amp;quot;InteractiveCmd&amp;quot;,
&amp;quot;ExpectPrompts&amp;quot;: [
{
&amp;quot;Expect&amp;quot;: &amp;quot;Password:\\s+$&amp;quot;,
&amp;quot;Send&amp;quot;: &amp;quot;dummyValue&amp;quot;
}
],
&amp;quot;ShellPrompt&amp;quot;: &amp;quot;\\[root\\@onprem-appliance\\]\\s+$&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;For more information on template functions, see &lt;a href=&#34;http://localhost:8080/help/resources/Executor_SSH_Reusable#template_functions&#34;&gt;Template Functions&lt;/a&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Command Timeout&lt;/p&gt;
&lt;p&gt;The command timeout in seconds for the execution of the command against the given endpoint. The range is 10 to 7200 seconds.&lt;/p&gt;
&lt;p&gt;The default timeout value is 600 seconds.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Static Value—The command timeout in seconds for the execution of the command against the given target.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Direct Mapping——Select an existing task input or task output field.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transformed Mapping—Allows applying data transformation through a combination of one or more transformation stages for a task&amp;rsquo;s input. In each transformation stage, you can select a transformation function along with its inputs. The transformation stages will be converted into a template.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced Mapping—Map a Golang template to the task input. For example, &lt;code&gt;FindAllString&lt;/code&gt; function returns a slice of all substrings that match the given regular expression in the given string.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Expected Exit Codes&lt;/p&gt;
&lt;p&gt;The list of expected exit codes for the SSH command that is run by the task. Task status is set to Success if the obtained exit code is present in the list of expected exit codes.&lt;/p&gt;
&lt;p&gt;If this input is not specified, then the default exit code is 0 and is used to determine the status of command execution.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Static Value—The exit code for the SSH command that is run by the task.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Direct Mapping—Select the expected exit codes from the task input or task output.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced Mapping—Map a Golang template to the task input. For example, &lt;code&gt;FindAllString&lt;/code&gt; function returns a slice of all substrings that match the given regular expression in the given string.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Response Parser&lt;/p&gt;
&lt;p&gt;The response parser specification which is used to extract the values from the command response.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Static Value&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Regular Expression—The regular expression of the line in the command response where the interested capture value resides. The format to specify the capture value in this input is &amp;lsquo;$&lt;Name of the parameter&gt;&amp;rsquo;. For example, if we need to capture &lt;em&gt;&amp;lsquo;intersight&amp;rsquo;&lt;/em&gt; in the sample response &amp;lsquo;&lt;a href=&#34;mailto:intersight@cisco.com&#34;&gt;intersight@cisco.com&lt;/a&gt;&amp;rsquo;, the regular expression looks like $&lt;Name&gt;\@cisco\.com where &amp;lsquo;&lt;em&gt;Name&lt;/em&gt;&amp;rsquo; is the name given to this captured parameter.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name—The name of the output under which the captured value is saved. This name should be the same that is provided in the Regular Expression—$&lt;Name&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type—The response parameter type—String, Integer, Float, or Boolean.&lt;/p&gt;
&lt;p&gt;The default value is String.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Direct Mapping—Select a task input or task output field.&lt;/p&gt;
&lt;p&gt;To create a new Workflow input, select the Create Workflow Input from the drop-down. The Add Input screen appears with auto-populated fields.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Advanced Mapping—Map a Golang template to the task input. For example, &lt;code&gt;FindAllString&lt;/code&gt; function returns a slice of all substrings that match the given regular expression in the given string.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For more information, see &lt;a href=&#34;http://localhost:8080/help/resources/Executor_SSH#response_parser&#34;&gt;Response Parser&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;The following table explains the SSH Command executor Outputs :&lt;/p&gt;
&lt;p&gt;Property&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Exit Code&lt;/p&gt;
&lt;p&gt;The exit code after the execution of the command against the given endpoint.&lt;/p&gt;
&lt;p&gt;Command Output&lt;/p&gt;
&lt;p&gt;The complete response after the execution of the command against the given endpoint.&lt;/p&gt;
&lt;p&gt;Command Execution Error&lt;/p&gt;
&lt;p&gt;Captures the error encountered while executing the command.&lt;/p&gt;
&lt;p&gt;Extracted Parameters&lt;/p&gt;
&lt;p&gt;The response parser extracted outputs from the command execution response.&lt;/p&gt;
&lt;p&gt;The following table explains the Invoke SSH Commands task Outcomes:&lt;/p&gt;
&lt;p&gt;Property&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;Outcomes&lt;/p&gt;
&lt;p&gt;To set the custom execution status and status message based on the obtained outputs, do the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Click Add Outcome.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name—The name for the outcome.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Outcome Type—Select the outcome type. The options available are Success, Skip To Success, Error, Terminal Error, Skip Task Execution, or Status.&lt;/p&gt;
&lt;p&gt;For more information on Outcomes, see &lt;a href=&#34;http://localhost:8080/help/resources/Task_Designer#outcomes&#34;&gt;Outcomes&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Message—The message when the condition is met.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Condition—The condition for the outcome.&lt;/p&gt;
&lt;p&gt;For example, {{eq .global.InvokeSshCommands1.output.ExitCode &amp;ldquo;0&amp;rdquo;}}.&lt;/p&gt;
&lt;p&gt;This condition checks whether the output `ExitCode` of the executor named `InvokeSshCommands1` equals to 0. If the condition is true, the task status is set to the value provided in `Outcome Type` and task status message is set to value provided in `Message`.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;using-ssh-commands&#34;&gt;Using SSH Commands&lt;/h2&gt;
&lt;p&gt;You can specify multiple commands that need to run on the given target by chaining the commands with special characters. The following table explains the operators.&lt;/p&gt;
&lt;p&gt;Operators&lt;/p&gt;
&lt;p&gt;Function&lt;/p&gt;
&lt;p&gt;&amp;amp;&amp;amp; (Logical AND)&lt;/p&gt;
&lt;p&gt;The command following this operator will only execute if the command preceding this operator has been successfully executed.&lt;/p&gt;
&lt;p&gt;; (Semi-colon)&lt;/p&gt;
&lt;p&gt;The command following this operator will execute even if the command preceding this operator is not successfully executed.&lt;/p&gt;
&lt;p&gt;|| ( Logical OR)&lt;/p&gt;
&lt;p&gt;The command succeeding this operator is only executed if the command preceding it has failed.&lt;/p&gt;
&lt;p&gt;| (Pipe)&lt;/p&gt;
&lt;p&gt;The output of the first command acts as input to the second command.&lt;/p&gt;
&lt;p&gt;! (NOT)&lt;/p&gt;
&lt;p&gt;Negates an expression within a command. It is much like an “except” statement.&lt;/p&gt;
&lt;p&gt;&amp;gt;,&amp;raquo;, &amp;lt; (Redirection)&lt;/p&gt;
&lt;p&gt;Redirects the output of a command or a group of commands to a file or stream.&lt;/p&gt;
&lt;h2 id=&#34;template-parameters&#34;&gt;Template Parameters&lt;/h2&gt;
&lt;p&gt;The request body template can refer to values from task inputs, previous task outputs, or implicit parameters. The following table explains the template parameters.&lt;/p&gt;
&lt;p&gt;Prefix/Format&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{.global.task.input.&amp;lt;ParameterName&amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Task input reference.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{.global.&amp;lt;ExecutorRefName&amp;gt;.output.&amp;lt;ParameterName&amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Previous executor output reference. &lt;strong&gt;ExecutorRefName&lt;/strong&gt; is the name of the previous executor having output &lt;strong&gt;ParameterName&lt;/strong&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{.security.AccountMoid}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Implicit parameter reference to Account MoID under which the workflow is running.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{.security.OrganizationMoid}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Implicit parameter reference to Organization MoID under which the workflow is running.&lt;/p&gt;
&lt;h2 id=&#34;template-functions&#34;&gt;Template Functions&lt;/h2&gt;
&lt;p&gt;The template engine has in-built functions to transform values before they are populated in the request templates. The following table explains the functions supported in &lt;strong&gt;Invoke SSH Commands&lt;/strong&gt; task.&lt;/p&gt;
&lt;p&gt;Function&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;TrimSpace&lt;/p&gt;
&lt;p&gt;Returns a string after removing white spaces from a the string.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{TrimSpace .global.task.input.HostName}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;ContainsString&lt;/p&gt;
&lt;p&gt;Returns a boolean if a substring is present in a given string.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{if (ContainsString .global.task.input.SizeAsString \”MB\”)}}Mega Bytes{{else}}Bytes{{end}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;FindAllString&lt;/p&gt;
&lt;p&gt;Returns a slice of substrings matching the regular expression in a given string.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{(FindAllString .global.task.input.NumberString \”([0-9]+)\”)}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns array [“123”, “456”] for input string “123 some text 456.”&lt;/p&gt;
&lt;p&gt;ToJson&lt;/p&gt;
&lt;p&gt;Converts a value to a JSON format.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{(FindAllString .global.task.input.NumberString \&amp;quot;([0-9]+)\&amp;quot;) | ToJson}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns JSON array literal [“123”, “456”] for input string “123 some text 456.”&lt;/p&gt;
&lt;p&gt;AsArray&lt;/p&gt;
&lt;p&gt;Takes in an element and returns an array of one element.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{AsArray .global.task.output.serverMo}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns an array of one server Mo.&lt;/p&gt;
&lt;p&gt;Substring&lt;/p&gt;
&lt;p&gt;Returns a substring within the given index bounds.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{Substring .global.task.input.StorageId 2 6}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns “ABCD” for string “12ABCD3456.”&lt;/p&gt;
&lt;p&gt;IpToCidr&lt;/p&gt;
&lt;p&gt;Returns the classless inter-domain routing (CIDR) notation of an IPv4 address and subnet mask.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;    &lt;/span&gt;{{&lt;span style=&#34;color:#000&#34;&gt;IpToCidr .global.task.input.Ip .global.task.input.Netmask}}&lt;/span&gt;&lt;span style=&#34;color:#f8f8f8;text-decoration:underline&#34;&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;The above example returns “10.10.10.10/24” for the input parameters “10.10.10.10” and “255.255.255.0.”&lt;/p&gt;
&lt;p&gt;LookupInSlice&lt;/p&gt;
&lt;p&gt;Checks if a given value is present in given slice or array and returns true if it exists. This function can be used for any value.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{LookupInSlice .global.task.input.IpAddressList \”10.10.10.10\”}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns true for input [”10.10.10.10”, “20.20.20.20”].&lt;/p&gt;
&lt;p&gt;Index&lt;/p&gt;
&lt;p&gt;Returns a value from an array when an input index exists.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ index .global.task.input.nodes .global.task.input.idx }} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;In the above example, if nodes is an array of devices and idx is 2, the index function returns the second device in the array.&lt;/p&gt;
&lt;p&gt;Itob&lt;/p&gt;
&lt;p&gt;Converts an integer to a boolean.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ Itob global.task.input.OnOffFlip }} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns true and false for inputs 1 and 0 respectively.&lt;/p&gt;
&lt;p&gt;Itoa&lt;/p&gt;
&lt;p&gt;Converts a given number to a string value.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ Itoa global.task.input.Port }} 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns “12345” for input 12345.&lt;/p&gt;
&lt;p&gt;Itof&lt;/p&gt;
&lt;p&gt;Converts a given integer to a float value.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ Itof global.task.input.Rate }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns 15.0 for an input 15.&lt;/p&gt;
&lt;p&gt;Btoa&lt;/p&gt;
&lt;p&gt;Converts a given boolean to a string value.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ Btoa global.task.input.OnOffFlip }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns “true” for input true.&lt;/p&gt;
&lt;p&gt;Btoi&lt;/p&gt;
&lt;p&gt;Converts a given boolean to a integer value.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ Btoi global.task.input.OnOffFlip }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns 1 and 0 for inputs true and false respectively.&lt;/p&gt;
&lt;p&gt;Atob&lt;/p&gt;
&lt;p&gt;Converts the given string into a boolean value.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ Atob global.task.input.OnOffFlip }}Returns true for input “true”
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Atoi&lt;/p&gt;
&lt;p&gt;Converts a given number in string format to the integer type.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{Atoi .global.task.input.SizeString}} returns integer 2048 for input string “2048”
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ftoa&lt;/p&gt;
&lt;p&gt;Converts a given number into the string form based on the given precision.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{Ftoa .global.task.input.Size 2}} returns the following output: 123.456 =&amp;gt; “123.45”, 1028 =&amp;gt; “1028.00”
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Ftoi&lt;/p&gt;
&lt;p&gt;Converts a given float input to a integer value.&lt;/p&gt;
&lt;p&gt;Example:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{ Ftoi global.task.input.Rate }}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The above example returns 15 for an input 15.833.&lt;/p&gt;
&lt;p&gt;Eval&lt;/p&gt;
&lt;p&gt;Supports an expression evaluation function. The below example returns 2GB for a input value of 2048. Note that the second argument is passed as ‘.’ in the template, which represents the map of all parameters.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{Eval \&amp;quot;{{.global.task.input.Size}} / 1024\&amp;quot; .}}GB
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;template-engine-syntax&#34;&gt;Template Engine Syntax&lt;/h2&gt;
&lt;p&gt;The template engine uses &lt;code&gt;prefix&lt;/code&gt; notation for the statements. In case of operational statements, the operators are specified before the operands. All the operations are invoked after all the operands are evaluated.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Comparison Statements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The comparison statements can be written using &lt;strong&gt;eq&lt;/strong&gt; (equal check), &lt;strong&gt;ne&lt;/strong&gt; (not equal check), &lt;strong&gt;lt&lt;/strong&gt; (less than check), &lt;strong&gt;le&lt;/strong&gt; (less than or equal check), &lt;strong&gt;gt&lt;/strong&gt; (greater than check), and &lt;strong&gt;ge&lt;/strong&gt; (greater than or equal check).&lt;/p&gt;
&lt;p&gt;Here is an example that checks the parameter HttpStatusCode is in the client error code range 400 – 500. Note that the template engine supports prefix notation and hence the operators &lt;strong&gt;and&lt;/strong&gt;, &lt;strong&gt;ge&lt;/strong&gt;, and &lt;strong&gt;lt&lt;/strong&gt; are specified before their operands.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{and (ge .local.response.HttpStatusCode 400) (lt .local.response.HttpStatusCode 500)}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Conditional Statements&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The template engine supports conditional statements in prefix notation syntax. This section has some examples of these conditional statements.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;{{if &amp;lt;comparision_statement&amp;gt;}} Template to be used {{end}}

{{if &amp;lt;comparision_statement&amp;gt;}} Template to be used {{else}} Template to be used {{end}}

{{if &amp;lt;comparision_statement&amp;gt;}} Template to be used {{else if &amp;lt;comparision_statement}} Tempalte to be used {{end}}
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;response-parser&#34;&gt;Response Parser&lt;/h2&gt;
&lt;p&gt;A response parser is a collection of parameters that model values to be extracted from the SSH command response.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example: Create a response parser to get the IP address for a ping command&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;To get the IP address for the host such as &lt;em&gt;&lt;a href=&#34;https://www.example.com&#34;&gt;www.example.com&lt;/a&gt;&lt;/em&gt;, you can use the ping command:&lt;/p&gt;
&lt;p&gt;&lt;div class=&#34;td-card card&#34;&gt;
  
  
  
  
  &lt;div class=&#34;card-body code p-l0 m-0&#34;&gt;
      &lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;
    ping example.com -4
    Pinging example.com [93.184.216.34] with 32 bytes of data:
    Reply from 93.184.216.34: bytes=32 time=229ms TTL=53
    Reply from 93.184.216.34: bytes=32 time=230ms TTL=53
    Reply from 93.184.216.34: bytes=32 time=230ms TTL=53
    Reply from 93.184.216.34: bytes=32 time=229ms TTL=53ping example.com
&lt;/code&gt;&lt;/pre&gt;
  &lt;/div&gt;
&lt;/div&gt;

To extract the IP address from the command output for an SSH Command task, you can configure the response parser as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Regular Expression—Pinging\s+example.com\s+\[$&lt;IP&gt;\]\s+.*&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name—IP&lt;/p&gt;
&lt;p&gt;Note:&lt;/p&gt;
&lt;p&gt;This name should be the same that is provided in the Regular Expression field. In the above example, the Regular Expression uses name $&lt;IP&gt; so the Name specified must be &amp;ldquo;IP&amp;rdquo;.&lt;/p&gt;
&lt;p&gt;Type—String&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;invoke-ssh-command-reusable-task-examples&#34;&gt;Invoke SSH Command Reusable Task Examples&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;Example 1: Create a reusable SSH Command task to list the current working directory on the host&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This example task runs on an Intersight SSH endpoint target. This task runs the &lt;em&gt;pwd&lt;/em&gt; command on the SSH endpoint target and obtains the current working directory in the output.&lt;/p&gt;
&lt;p&gt;Property&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;General&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Organization—The organization that you are creating the task in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display Name—A user friendly short name to identify the task definition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reference Name—The name of the Task definition.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inputs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;External Target—By default, the External Target task input is created for the task.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reference Name—Target&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type—Target Data Type&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Outputs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ExitCode—Task output&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reference Name—ExitCode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type—String&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Map to Task Output—&lt;em&gt;Exit Code | Invoke SSH Command&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Response—Task output&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reference Name—Response&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type—String&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Map to Task Output—&lt;em&gt;Command Output| Invoke SSH Command&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Lastline—Task output&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reference Name—Response&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type—String&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Map to Task Output—&lt;em&gt;Extracted Parameters | Invoke SSH Command&lt;/em&gt; - &lt;em&gt;WorkingDirectory&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Error—Task output&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reference Name—Error&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type—String&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Map to Task Output—&lt;em&gt;Extracted Parameters | Invoke SSH Command&lt;/em&gt; - &lt;em&gt;CommandExecutionError&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following table explains the Invoke SSH Command executor inputs:&lt;/p&gt;
&lt;p&gt;Property&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;SSH Command&lt;/p&gt;
&lt;p&gt;Static | Non-interactive—Command—pwd&lt;/p&gt;
&lt;p&gt;Command Timeout&lt;/p&gt;
&lt;p&gt;Default value.&lt;/p&gt;
&lt;p&gt;Expected Exit Codes&lt;/p&gt;
&lt;p&gt;Default value.&lt;/p&gt;
&lt;p&gt;Response Parser&lt;/p&gt;
&lt;p&gt;When you run the pwd command, you get the following output:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;$pwd
/home/user
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;To extracts the path and display it, configure the response parser as:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Regular Expression—$&lt;WorkingDirectory&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Name—WorkingDirectory&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type—String&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The configured response parser captures the entire response line.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 2: Create a reusable SSH Command task to install jq Linux command line utility on a host using interactive SSH commands&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;This example task runs on an Intersight SSH endpoint target. In this task, the &lt;em&gt;Sudo&lt;/em&gt; password is provided by the command input field, and jq Linux command line utility is installed on the SSH endpoint target.&lt;/p&gt;
&lt;p&gt;The task properties required for this example are as following:&lt;/p&gt;
&lt;p&gt;Property&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;General&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Organization—The organization that you are creating the task in.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Display Name—A user friendly short name to identify the task definition.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Reference Name—The name of the Task definition.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Inputs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;External Target—By default, the External Target task input is created for the task.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reference Name—Target&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type—Target Data Type&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Outputs&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;ExitCode—Task output&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reference Name—ExitCode&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type—String&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Map to Task Output—&lt;em&gt;Exit Code | Invoke SSH Command&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Response—Task output&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Reference Name—Response&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Type—String&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Map to Task Output—&lt;em&gt;Command Output| Invoke SSH Command&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following table explains the Invoke SSH Command executor inputs:&lt;/p&gt;
&lt;p&gt;Property&lt;/p&gt;
&lt;p&gt;Description&lt;/p&gt;
&lt;p&gt;SSH Command&lt;/p&gt;
&lt;p&gt;Static | Interactive—Command—&lt;em&gt;sudo yum install -y jq&lt;/em&gt; | Interactive&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Expect—The Expect string obtained while executing the SSH command is &lt;em&gt;[sudo]&lt;/em&gt; password for &lt;em&gt;qali:&lt;/em&gt;. You need to specify the Expect input as the regular expression of the Obtained prompt &lt;em&gt;\[sudo\]\spassword\sfor\sqali:\s$&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Send—&lt;em&gt;testPasswd&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Shell Prompt—The shell prompt obtained before executing the SSH command is &lt;em&gt;qali@automationvm-15:~$&lt;/em&gt;. You need to specify the regular expression of the obtained shell prompt &lt;em&gt;qali\@automationvm-15:~\$\s?$&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Command Timeout&lt;/p&gt;
&lt;p&gt;Default value.&lt;/p&gt;
&lt;p&gt;Expected Exit Codes&lt;/p&gt;
&lt;p&gt;Default value.&lt;/p&gt;
&lt;p&gt;Response Parser&lt;/p&gt;
&lt;p&gt;Default value.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: Sample File</title>
      <link>http://localhost:8080/docs/ico/executors/samplefile/</link>
      <pubDate>Fri, 28 Jan 2022 21:23:12 +0530</pubDate>
      
      <guid>http://localhost:8080/docs/ico/executors/samplefile/</guid>
      <description>
        
        
        &lt;h1 id=&#34;ariaid-title1&#34; class=&#34;title topictitle1&#34;&gt;Sample&lt;/h1&gt;
&lt;p&gt;::: {.body .refbody}
::: section
The Workflow Designer helps you create new workflows (as well as tasks
and data types) and also edit existing workflows to manage targets in
Cisco Intersight.&lt;/p&gt;
&lt;p&gt;::: {.note .note}
[Note:]{.notetitle}&lt;/p&gt;
&lt;p&gt;To execute the new tasks for VMware vCenter networking operations, you
should upgrade to Intersight Assist version 1.0.9-278.
:::&lt;/p&gt;
&lt;p&gt;::: {.note .important}
[Important:]{.importanttitle}&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;The [Orchestration]{.ph .uicontrol} option is visible in the left
panel only if you have installed the Intersight Premier license.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Only an Account Administrator or a user with the Workflow Designer
privilege can use the Workflow Designer to create and edit
workflows.
:::&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To launch the Workflow Designer, choose [[Orchestration]{.ph .uicontrol}
&amp;gt; [Workflows]{.ph .uicontrol}]{.ph .menucascade}. A dashboard displays
the following details under these tabs, namely, [My Workflows]{.ph
.uicontrol}, [Sample Workflows]{.ph .uicontrol}, and [All Workflows]{.ph
.uicontrol}:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Validation Status]{.ph .uicontrol}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Last Execution Status]{.ph .uicontrol}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Top Workflows by Execution Count]{.ph .uicontrol}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Top Workflow Categories]{.ph .uicontrol}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Number of System Defined Workflows]{.ph .uicontrol}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Top Workflows by Targets]{.ph .uicontrol}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Using the dashboard, you can create, edit, clone, or delete a tab. To
create your own custom view tab, click + and specify a name and then
choose the required parameters that need to be displayed in the columns,
tag columns, and widgets. You can rename the tabs if it does not have a
Lock icon.&lt;/p&gt;
&lt;p&gt;Below the dashboard is a tabular list of workflows displaying the
following information:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Display Name]{.ph .uicontrol}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Description]{.ph .uicontrol}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[System Defined]{.ph .uicontrol}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Default Version]{.ph .uicontrol}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Executions]{.ph .uicontrol}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Last Execution Status]{.ph .uicontrol}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Validation Status]{.ph .uicontrol}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Last Update]{.ph .uicontrol}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Organization]{.ph .uicontrol}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The [Actions]{.ph .uicontrol} column allows you to do the following
actions:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Execute]{.ph .uicontrol}&amp;mdash;Executes the workflow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[History]{.ph .uicontrol}&amp;mdash;Displays workflow execution history.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Manage Versions]{.ph .uicontrol}&amp;mdash;create and manage versions for
workflows. See &lt;em&gt;Managing Versions for Workflows&lt;/em&gt; later in this
document.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Delete]{.ph .uicontrol}&amp;mdash;Delete a workflow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Retry]{.ph .uicontrol}&amp;mdash;Retry a failed workflow.
:::&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;::: section&lt;/p&gt;
&lt;h2 id=&#34;creating-a-workflow&#34; class=&#34;title sectiontitle&#34;&gt;Creating a Workflow&lt;/h2&gt;
&lt;p&gt;Workflow creation can be broken down into the following sequence of
steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;[Defining a workflow]{.ph .uicontrol}&amp;mdash;you specify the display
name, description, and other important attributes.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Defining workflow inputs, workflow variables, and workflow
outputs]{.ph .uicontrol}&amp;mdash;you can specify which input parameters
are mandatory for the workflow execution, define variable(s) for
workflow, and the output(s) generated on successful execution.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Adding workflow tasks]{.ph .uicontrol}&amp;mdash;you can add one or more
workflow tasks in the Workflow Designer that are needed for the
workflow to carry out its function.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Validate the workflow]{.ph .uicontrol}&amp;mdash;you can validate a
workflow to ensure that there are no errors in connecting task
inputs and outputs.
:::&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;::: section&lt;/p&gt;
&lt;h2 id=&#34;defining-a-workflow&#34; class=&#34;title sectiontitle&#34;&gt;Defining a Workflow&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Choose [Orchestration]{.ph .uicontrol} from the left navigation
pane.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose [Create Workflow]{.ph .uicontrol}. The [Create
Workflow]{.keyword .wintitle} screen is categorized into the
following areas to help you create a workflow:&lt;/p&gt;
&lt;p&gt;The following table describes the options available to you while
creating a workflow:&lt;/p&gt;
&lt;p&gt;::: tablenoborder
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
| Workflow Designer    | Description          | Details              |
| Area/Option          |                      |                      |
+======================+======================+======================+
| [General Tab]{.ph    | Displays workflow    | You can add a        |
| .uicontrol}          | details, and also    | user-friendly short  |
|                      | inputs, variables,   | name, reference      |
|                      | and outputs of the   | name, description,   |
|                      | workflow.            | and assign an        |
|                      |                      | organization to the  |
|                      |                      | workflow. You can    |
|                      |                      | also specify a       |
|                      |                      | version or set a tag |
|                      |                      | to the workflow. In  |
|                      |                      | order to categorize  |
|                      |                      | your workflow, use   |
|                      |                      | the tag key          |
|                      |                      | [Category]{.ph       |
|                      |                      | .uicontrol} and      |
|                      |                      | provide an           |
|                      |                      | appropriate category |
|                      |                      | value. Use the       |
|                      |                      | following checkboxes |
|                      |                      | to:                  |
|                      |                      |                      |
|                      |                      | [Set as Default      |
|                      |                      | Version]{.ph         |
|                      |                      | .uicontrol}&amp;mdash;Sets   |
|                      |                      | this version as the  |
|                      |                      | default version for  |
|                      |                      | the workflow.        |
|                      |                      |                      |
|                      |                      | [Retryable]{.ph      |
|                      |                      | .                    |
|                      |                      | uicontrol}&amp;mdash;Execute |
|                      |                      | the workflow from    |
|                      |                      | the point of a       |
|                      |                      | failure or retry the |
|                      |                      | execution of the     |
|                      |                      | entire workflow. You |
|                      |                      | can retry the        |
|                      |                      | execution of the     |
|                      |                      | workflow for up to   |
|                      |                      | two weeks after the  |
|                      |                      | last update to the   |
|                      |                      | workflow.            |
|                      |                      |                      |
|                      |                      | [Enable Debug        |
|                      |                      | Logs]{.ph            |
|                      |                      | .u                   |
|                      |                      | icontrol}&amp;mdash;Collects |
|                      |                      | the workflow logs    |
|                      |                      | for each tasks. You  |
|                      |                      | can analyze and      |
|                      |                      | debug the workflow   |
|                      |                      | execution.           |
|                      |                      |                      |
|                      |                      | [Workflow            |
|                      |                      | Inputs]{.ph          |
|                      |                      | .uicontrol}&amp;mdash;You    |
|                      |                      | can click [Add       |
|                      |                      | Workflow Input]{.ph  |
|                      |                      | .uicontrol} and add  |
|                      |                      | workflow inputs.     |
|                      |                      | Each input has a     |
|                      |                      | user-friendly        |
|                      |                      | display name, a      |
|                      |                      | reference name,      |
|                      |                      | description,         |
|                      |                      | restrictions, and    |
|                      |                      | data type. Also, you |
|                      |                      | can set a default    |
|                      |                      | value and encrypt    |
|                      |                      | it. For more         |
|                      |                      | information, see     |
|                      |                      | [Defining Workflow   |
|                      |                      | Inputs, Variables,   |
|                      |                      | and                  |
|                      |                      | Outputs](/help/res   |
|                      |                      | ources/Workflow_Desi |
|                      |                      | gner#defining_workfl |
|                      |                      | ow_inputs_variables_ |
|                      |                      | and_outputs){.xref}. |
|                      |                      |                      |
|                      |                      | [Workflow            |
|                      |                      | Variable]{.ph        |
|                      |                      | .uicontrol}&amp;mdash;You    |
|                      |                      | can click [Add       |
|                      |                      | Workflow             |
|                      |                      | Variable]{.ph        |
|                      |                      | .uicontrol} and add  |
|                      |                      | a workflow variable. |
|                      |                      | Each workflow        |
|                      |                      | variable has a       |
|                      |                      | reference name, data |
|                      |                      | type, and so on.     |
|                      |                      | Also, you can set a  |
|                      |                      | default value. For   |
|                      |                      | more information,    |
|                      |                      | see [Defining        |
|                      |                      | Workflow Inputs,     |
|                      |                      | Variables, and       |
|                      |                      | Outputs](/help/res   |
|                      |                      | ources/Workflow_Desi |
|                      |                      | gner#defining_workfl |
|                      |                      | ow_inputs_variables_ |
|                      |                      | and_outputs){.xref}. |
|                      |                      |                      |
|                      |                      | [Workflow            |
|                      |                      | Outputs]{.ph         |
|                      |                      | .uicontrol}&amp;mdash;You    |
|                      |                      | can click [Add       |
|                      |                      | Workflow Output]{.ph |
|                      |                      | .uicontrol} and add  |
|                      |                      | workflow outputs.    |
|                      |                      | Each output has a    |
|                      |                      | user-friendly        |
|                      |                      | display name, a      |
|                      |                      | reference name,      |
|                      |                      | description,         |
|                      |                      | restrictions, and    |
|                      |                      | data type. Also, you |
|                      |                      | can encrypt a value  |
|                      |                      | and map it to task   |
|                      |                      | output.              |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
| [Designer Tab]{.ph   | Displays the design  | Categorized into the |
| .uicontrol}          | area where you       | following areas to   |
|                      | synthesize your      | help you create a    |
|                      | workflow.            | workflow:            |
|                      |                      |                      |
|                      |                      | -   Tools            |
|                      |                      |     Area&amp;mdash;lists all |
|                      |                      |     the tasks,       |
|                      |                      |     workflows, and   |
|                      |                      |     operations that  |
|                      |                      |     are currently    |
|                      |                      |     available in     |
|                      |                      |     Intersight. You  |
|                      |                      |     can drag and     |
|                      |                      |     drop a task or a |
|                      |                      |     workflow to the  |
|                      |                      |     canvas to create |
|                      |                      |     or edit the      |
|                      |                      |     workflow. You    |
|                      |                      |     can collapse or  |
|                      |                      |     expand the Tools |
|                      |                      |     area. You can    |
|                      |                      |     use the Search   |
|                      |                      |     feature to find  |
|                      |                      |     a specific task  |
|                      |                      |     or workflow.     |
|                      |                      |                      |
|                      |                      | -   Design           |
|                      |                      |     Area&amp;mdash;where you |
|                      |                      |     can build your   |
|                      |                      |     workflow. Drag   |
|                      |                      |     and drop tasks   |
|                      |                      |     and workflows    |
|                      |                      |     from the Tools   |
|                      |                      |     area to this     |
|                      |                      |     area of the      |
|                      |                      |     screen. This     |
|                      |                      |     area includes    |
|                      |                      |     the following    |
|                      |                      |     options that you |
|                      |                      |     can use while    |
|                      |                      |     creating the     |
|                      |                      |     workflow:        |
|                      |                      |                      |
|                      |                      |     -   Zoom in and  |
|                      |                      |         Zoom         |
|                      |                      |                      |
|                      |                      |        out&amp;mdash;Magnify |
|                      |                      |         or reduce    |
|                      |                      |         the view of  |
|                      |                      |         the          |
|                      |                      |         workflow.    |
|                      |                      |                      |
|                      |                      |     -   Auto Align   |
|                      |                      |         Work         |
|                      |                      | flow&amp;mdash;Automatically |
|                      |                      |         align the    |
|                      |                      |         workflow     |
|                      |                      |         tasks in the |
|                      |                      |         design area. |
|                      |                      |                      |
|                      |                      |     -   Auto Align   |
|                      |                      |         Selected     |
|                      |                      |         Workflow     |
|                      |                      |                      |
|                      |                      |     Entities&amp;mdash;Align |
|                      |                      |         selected     |
|                      |                      |         workflow     |
|                      |                      |         entities in  |
|                      |                      |         the design   |
|                      |                      |         area.        |
|                      |                      |                      |
|                      |                      |     -   Toggle Task  |
|                      |                      |                      |
|                      |                      |      Search&amp;mdash;Search |
|                      |                      |         for a        |
|                      |                      |         specific     |
|                      |                      |         task within  |
|                      |                      |         the          |
|                      |                      |         workflow.    |
|                      |                      |         This is      |
|                      |                      |         useful when  |
|                      |                      |         you have     |
|                      |                      |         several      |
|                      |                      |         tasks within |
|                      |                      |         the          |
|                      |                      |         workflow.    |
|                      |                      |                      |
|                      |                      |     -   Auto Connect |
|                      |                      |         Selected     |
|                      |                      |         Workflow     |
|                      |                      |         Entity&amp;mdash;Add |
|                      |                      |         the workflow |
|                      |                      |         entity in    |
|                      |                      |         the design   |
|                      |                      |         area. You    |
|                      |                      |         can drag and |
|                      |                      |         drop a task  |
|                      |                      |         in between   |
|                      |                      |         the tasks.   |
|                      |                      |         The possible |
|                      |                      |         locations    |
|                      |                      |         where the    |
|                      |                      |         selected     |
|                      |                      |         task can be  |
|                      |                      |         added is     |
|                      |                      |         denoted with |
|                      |                      |         [+ ]{.ph     |
|                      |                      |         .uicontrol}  |
|                      |                      |         icon.        |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
| [Mapping Tab]{.ph    | Displays the         | Expand and collapse  |
| .uicontrol}          | relationship between | the [Task            |
|                      | the task inputs and  | Inputs]{.ph          |
|                      | the outputs of the   | .uicontrol} and      |
|                      | selected workflow.   | [Task Outputs]{.ph   |
|                      |                      | .uicontrol} pane.    |
|                      | Information on       |                      |
|                      | workflow inputs and  |                      |
|                      | workflow outputs is  |                      |
|                      | also displayed.      |                      |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
| [Code Tab]{.ph       | Displays the code    | Read-only view of    |
| .uicontrol}          | view of the workflow | the workflow. You    |
|                      | definition           | can copy the code,   |
|                      |                      | use this as a sample |
|                      |                      | to create a workflow |
|                      |                      | using Intersight     |
|                      |                      | APIs.                |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
| [History Tab]{.ph    | Status of the        | View workflow        |
| .uicontrol}          | executed/in-progress | execution history,   |
|                      | workflows. This tab  | retry or clone a     |
|                      | appears after        | previous execution.  |
|                      | executing a          | The system displays  |
|                      | workflow.            | a maximum of 100     |
|                      |                      | instances of the     |
|                      |                      | workflow execution.  |
|                      |                      | The workflow         |
|                      |                      | execution is         |
|                      |                      | populated for each   |
|                      |                      | version of the       |
|                      |                      | workflow.            |
|                      |                      |                      |
|                      |                      | ::: {.note .note}    |
|                      |                      | [Note:]{.notetitle}  |
|                      |                      | When a workflow is   |
|                      |                      | successfully         |
|                      |                      | executed, the        |
|                      |                      | options for retrying |
|                      |                      | the workflow are not |
|                      |                      | displayed. You can   |
|                      |                      | retry a failed       |
|                      |                      | workflow only when   |
|                      |                      | the [Retryable]{.ph  |
|                      |                      | .uicontrol} option   |
|                      |                      | is enabled in the    |
|                      |                      | [General]{.ph        |
|                      |                      | .uicontrol} tab.     |
|                      |                      | :::                  |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
| [Execute]{.ph        | Launches the [Enter  | Choose the           |
| .uicontrol}          | Workflow             | Organization and the |
|                      | Inputs]{.keyword     | Workflow instance    |
|                      | .wintitle} window.   | name to execute the  |
|                      |                      | workflow.            |
|                      |                      |                      |
|                      |                      | For user-created     |
|                      |                      | workflows, the       |
|                      |                      | organization must    |
|                      |                      | match where it was   |
|                      |                      | created.             |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
| [Save Workflow]{.ph  | Validates and saves  | Review validation    |
| .uicontrol}          | the workflow.        | errors, if any, and  |
|                      |                      | rectify them.        |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
| [Close Designer]{.ph | Closes the Workflow  | Closes the Workflow  |
| .uicontrol}          | Designer.            | Designer and         |
|                      |                      | displays the table   |
|                      |                      | view of available    |
|                      |                      | workflows.           |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
:::
:::&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;::: section&lt;/p&gt;
&lt;h2 id=&#34;requests&#34; class=&#34;title sectiontitle&#34;&gt;Requests&lt;/h2&gt;
&lt;p&gt;Requests are closely related to workflows. You create requests by
running workflows; a request is generated every time you execute a
workflow in Cisco Intersight. A request is a process under the control
of Cisco Intersight.&lt;/p&gt;
&lt;p&gt;You can schedule a workflow for later execution, and Cisco Intersight
stores details of completed requests. To view the detailed information
of a request, choose a request. The following information is displayed
in the &lt;strong&gt;Requests&lt;/strong&gt; screen:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Status&amp;mdash;Displays the status of a workflow. Request can have one of
several states depending on its execution status:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Running&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Blocked (for example, awaiting an approval)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Completed&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Failed (a request can fail when one of its component tasks fails
to execute properly)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Details&amp;mdash;Displays the request details such as name, request ID,
target name and type, source name and type, name of the user who has
executed the request along with the start time and end time, and
duration of the request.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Inputs&amp;mdash;Displays the workflow input details&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Outputs&amp;mdash;Displays the workflow output details&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execution Flow&amp;mdash;Enable [Show Additional Details]{.ph .uicontrol} to
view the logs, input, and output mapping details of the user-defined
workflows. Displays the workflow execution history details similar
to the details displayed in the [History]{.ph .uicontrol} tab.
:::&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;::: {#id_131513__Defining_WF_IO .section}&lt;/p&gt;
&lt;h2 id=&#34;defining-workflow-inputs-variables-and-outputs&#34; class=&#34;title sectiontitle&#34;&gt;Defining Workflow Inputs, Variables, and Outputs&lt;/h2&gt;
&lt;p&gt;Workflows can have any number of tasks, inputs, variables, and outputs.&lt;/p&gt;
&lt;p&gt;Any task or workflow input can be either mandatory or optional. A task
or workflow cannot run without all of its mandatory inputs. You define
whether an input is mandatory or optional when you create the task or
workflow.&lt;/p&gt;
&lt;p&gt;After specifying the generic properties for a task or workflow, you
define the input parameters and variables required for task or workflow
execution. In addition, you can set workflow input Parameter Set or
Progressive Disclosure rules. These rules control the availability of
workflow inputs or filter the data based on the preceding selection
during the workflow execution. The Task Designer uses the same
parameters and information types as the workflow designer to validate
the mappings of task input and output parameters when a task is used in
a workflow along with other tasks. Task designer uses the same form as
workflow designer to obtain the parameter and information type so as
provide same user experience between workflow designer and task
designer.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Choose [Orchestration]{.ph .uicontrol} from the left navigation pane
and click [Create Workflow]{.ph .uicontrol}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the [General]{.ph .uicontrol} tab, click [Add Workflow Input]{.ph
.uicontrol} in the [Workflow Inputs]{.ph .uicontrol} tab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the [Add Workflow Input]{.ph .uicontrol} screen, enter the
following details:&lt;/p&gt;
&lt;p&gt;a.  [Display Name]{.ph .uicontrol}&amp;mdash;Enter user-friendly short name.&lt;/p&gt;
&lt;p&gt;b.  [Reference Name]{.ph .uicontrol}&lt;/p&gt;
&lt;p&gt;c.  [Description]{.ph .uicontrol}&amp;mdash;Detailed description of the
input&lt;/p&gt;
&lt;p&gt;d.  [Value Restrictions]{.ph .uicontrol}&amp;mdash;Choose [Required]{.ph
.uicontrol}, [Collection/Multiple]{.ph .uicontrol}, or can be
left blank&lt;/p&gt;
&lt;p&gt;e.  [Type]{.ph .uicontrol}&amp;mdash;Select a data type. For example,
String, Integer, Float, Boolean, Json, Enum, MoReference, Target
Data Type, or a custom data type.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The fields displayed depend on the value you select for the Type
field.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;f.  If you select the data type as [Enum]{.ph .uicontrol}, specify
the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i.  [Enum List]{.ph .uicontrol}---Label for the Enum value.

ii. [Widget type]{.ph .uicontrol}.

iii. [Set Default Value]{.ph .uicontrol}---Select the checkbox
     and select the corresponding default value.

iv. [Override]{.ph .uicontrol}---Allow the user to override the
    default value.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;g.  If you select the data type as [String]{.ph .uicontrol}, specify
the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i.  [Minimum]{.ph .uicontrol} and [Maximum Range]{.ph
    .uicontrol}

ii. [Regex]{.ph .uicontrol}---Validates the regular expression
    when you select [String]{.ph .uicontrol} in the [Type]{.ph
    .uicontrol} field.

iii. [Secure]{.ph .uicontrol}---Indicates that the values of
     these properties are encrypted and stored in Cisco
     Intersight.

iv. [Object Selector]{.ph .uicontrol}---Enable to configure the
    Intersight managed object selectors. This attribute is
    available only when the primitive data is [String]{.ph
    .uicontrol}.

    Specify the Intersight API Reference and selector attributes
    to feed the input from the table selection. Value will be
    passed according to the configuration set in the Value
    attribute.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;h.  If you select the data type as [Integer]{.ph .uicontrol} or
[Float]{.ph .uicontrol}, specify the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i.  [Minimum]{.ph .uicontrol} and [Maximum Range]{.ph
    .uicontrol}

ii. [Set Default Value]{.ph .uicontrol}---Select the checkbox
    and the corresponding default value.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;i.  If you select the data type as [Target Data Type]{.ph
.uicontrol} or [MoReference]{.ph .uicontrol}, specify the
following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i.  [Intersight API Reference]{.ph .uicontrol}---Enter the URL
    of the Intersight API configured with parameters.

ii. [Selector Attribute]{.ph .uicontrol}---Enter the attribute
    name(s) that needs to be displayed in the input table
    column. You can add multiple selector attributes by clicking
    [+]{.ph .uicontrol}.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;j.  If you select the data type as [Composite Data Type]{.ph
.uicontrol}, you can specify the field mapping for the input
field. With field mapping, you can pass the value of workflow
input to a composite data field.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;To pass the value from the parent composite data type to a child
composite data type, you must specify the field mapping in the
composite data type field. For more information, see [Creating a
Data
Type](../../../../../../../../help/resources/Data_Types#creating_a_data_type){.xref}.

To specify the field mapping, do the following:

i.  [Key]{.ph .uicontrol}---The input field that you want to
    hide.

ii. [Value Attribute]{.ph .uicontrol}---The value in a template
    style to be passed dynamically during the execution.

    If the data type is Object Selector, Enum, or Boolean then
    the input is referenced as
    `${workflow.input.InputReferenceName`{.ph .codeph}}.

    If the data type is MoReference or Target Data Type the
    input is referenced as
    `${workflow.input.InputReferenceName.AttributeName}`{.ph
    .codeph}.

    The `InputReferenceName`{.ph .codeph} is the Reference Name
    given to the input field and not the Display Name or Label.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click [Add]{.ph .uicontrol}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Repeat this procedure to create multiple inputs.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To add a Parameter Set rule, click [Add Rule]{.ph .uicontrol} &amp;gt;
[Parameter Set]{.ph .uicontrol}.&lt;/p&gt;
&lt;p&gt;For more information, see Workflow &lt;a href=&#34;../../../../../../../../help/resources/Workflow_Designer#workflow_input_parameter_set_and_progressive_disclosure_rules&#34;&gt;Workflow Input Parameter Set and
Progressive Disclosure
Rules&lt;/a&gt;{.xref}.&lt;/p&gt;
&lt;p&gt;a.  [Name]{.ph .uicontrol}&amp;mdash;The name of the Parameter Set rule.&lt;/p&gt;
&lt;p&gt;b.  [If Field]{.ph .uicontrol}&amp;mdash;Select the input field and the
properties that will be used to define the Parameter Set rule.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The inputs are referenced as *InputName* or
*InputName.Properties*.

::: {.note .note}
[Note:]{.notetitle}
The properties are applicable only if the data type is
[MoRefefence]{.ph .uicontrol} or [Target Data Type]{.ph
.uicontrol}. For example, for a Target Data Type input field
(DeviceRegistrations), you can specify *Hypervisor Manager.IP
Address*.
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;c.  [Condition]{.ph .uicontrol}&amp;mdash;The condition for the rule. The
condition can be Equal to, Not equal to, Contains, or Matches
Pattern.&lt;/p&gt;
&lt;p&gt;d.  [Value]{.ph .uicontrol}&amp;mdash;Select or enter the value. The
Parameter Set rule uses this value along with the Condition
specified to compare the value from the [If Field]{.ph
.uicontrol}.&lt;/p&gt;
&lt;p&gt;e.  [Field to be shown]{.ph .uicontrol}&amp;mdash;Select the input field(s)
that should be made available when the Parameter Set rule
condition is satisfied.&lt;/p&gt;
&lt;p&gt;f.  Click [Save]{.ph .uicontrol}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To add a Progressive Disclosure rule, click [Add Rule]{.ph
.uicontrol} &amp;gt; [Progressive Disclosure]{.ph .uicontrol}.&lt;/p&gt;
&lt;p&gt;For more information, see &lt;a href=&#34;../../../../../../../../help/resources/Workflow_Designer#workflow_input_parameter_set_and_progressive_disclosure_rules&#34;&gt;Workflow Input Parameter Set and
Progressive Disclosure
Rules&lt;/a&gt;{.xref}.&lt;/p&gt;
&lt;p&gt;a.  [Target Field]{.ph .uicontrol}&amp;mdash;The target input field on which
the progressive disclosure is applied.&lt;/p&gt;
&lt;p&gt;b.  [Attribute ]{.ph .uicontrol}&amp;mdash;The inputs are referenced as
&lt;em&gt;AttributeName.ParameterName&lt;/em&gt;. For example, for an input field,
Virtual Manager, you can specify the attribute name as
&lt;em&gt;RegisteredDevice.Moid&lt;/em&gt; or &lt;em&gt;ConnectionStatus&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;c.  [Condition]{.ph .uicontrol}&amp;mdash;The rule condition for the rule.
The condition can be Equal to, Not equal to, or Contains.&lt;/p&gt;
&lt;p&gt;d.  [Value]{.ph .uicontrol}&amp;mdash;The inputs are referenced as
&lt;code&gt;${InputReferenceName.Attribute&lt;/code&gt;{.ph .codeph}} or
&lt;code&gt;${InputReferenceName.ParameterName}&lt;/code&gt;{.ph .codeph}. For example,
for a VM input field, you can specify the value as
&lt;code&gt;${HypervisorManager.Moid}&lt;/code&gt;{.ph .codeph} or
&lt;code&gt;${Target.ConnectionStatus}&lt;/code&gt;{.ph .codeph}.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;::: {.note .note}
[Note:]{.notetitle}
For a [String]{.ph .uicontrol} input field, if you have selected
the Object Selector option then you need not specify the
Attribute or Parameter value.
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the [General]{.ph .uicontrol} tab, click [Add Workflow
Variables]{.ph .uicontrol} in the [Workflow Variables]{.ph
.uicontrol} tab. For more information, see &lt;a href=&#34;http://localhost:8080/help/resources/Workflow_Designer#workflow_variables&#34;&gt;Workflow
Variables&lt;/a&gt;{.xref}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the [Add Workflow Variable]{.ph .uicontrol} screen, enter the
following details:&lt;/p&gt;
&lt;p&gt;a.  [Reference Name]{.ph .uicontrol}&amp;mdash;Enter user-friendly short
name.&lt;/p&gt;
&lt;p&gt;b.  [Type]{.ph .uicontrol}&amp;mdash;Select the data type. For example,
String, Integer, Float, Boolean, Json, Enum, MoReference, or
Target Data Type.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;The fields displayed depend on the value you select for the Type
field.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;c.  If you select the data type as [String]{.ph .uicontrol}, specify
the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i.  [Object Selector]{.ph .uicontrol}---Enable to configure the
    Intersight managed object selectors.

    The Object Selector field is optional.

ii. Specify the Intersight API Reference and selector attributes
    to feed the input from the table selection. The value will
    be passed according to the configuration set in the Value
    attribute.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;d.  If you select the data type as [Enum]{.ph .uicontrol}, specify
the following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i.  [Enum List]{.ph .uicontrol}---Label and value for the Enum
    list.

ii. [Widget type]{.ph .uicontrol}---The widget type as Radio or
    none.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;e.  If you select the data type as [Target Data Type]{.ph
.uicontrol} or [MoReference]{.ph .uicontrol}, specify the
following:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;i.  [Intersight API Reference]{.ph .uicontrol}---Enter the URL
    of the Intersight API configured with parameters.

ii. [Selector Attribute]{.ph .uicontrol}---Enter the attribute
    name(s) that needs to be displayed in the input table
    column. You can add multiple selector attributes by clicking
    [+]{.ph .uicontrol}.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;f.  Select the [Initial Mapping To]{.ph .uicontrol} type and specify
the corresponding variable value.&lt;/p&gt;
&lt;p&gt;g.  Click [Add]{.ph .uicontrol}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click [Workflow Outputs]{.ph .uicontrol} and click [Add Workflow
Output]{.ph .uicontrol}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose a parameter and click [Add]{.ph .uicontrol}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click [Save]{.ph .uicontrol}.
:::&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;::: {#id_131513__section_z2q_jns_drb .section}&lt;/p&gt;
&lt;h2 id=&#34;workflow-input-parameter-set-and-progressive-disclosure-rules&#34; class=&#34;title sectiontitle&#34;&gt;Workflow Input Parameter Set and Progressive Disclosure Rules&lt;/h2&gt;
&lt;p&gt;When you create a workflow, you can specify the inputs for the workflow
execution. After you define the workflow inputs, you can set Parameter
Set or Progressive Disclosure rules. These rules control the
availability of workflow inputs or filter the data based on the
preceding selection during the workflow execution.&lt;/p&gt;
&lt;p&gt;::: {.note .note}
[Note:]{.notetitle}&lt;/p&gt;
&lt;p&gt;You can define a Parameter Set or Progressive Disclosure rule only for a
workflow that has more than two input fields with the supported data
type.
:::&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Parameter Set Rule&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Parameter Set rules control the availability of specific parameters
or inputs during the execution. After the first input is specified, the
Parameter Set rule controls which subsequent input fields are made
available during the workflow execution.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; The following example shows how to create a Parameter Set
rule for a workflow with three input fields. The workflow input fields
are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Enum]{.ph .uicontrol}&amp;mdash;[Type]{.ph .uicontrol} is &lt;em&gt;Enum&lt;/em&gt; and [Enum
list]{.ph .uicontrol} is &lt;em&gt;VM&lt;/em&gt; and &lt;em&gt;HX&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Input1]{.ph .uicontrol}&amp;mdash;[Type]{.ph .uicontrol} is &lt;em&gt;String&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Input2]{.ph .uicontrol}&amp;mdash;[Type]{.ph .uicontrol} is &lt;em&gt;String&lt;/em&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can create two workflow input Parameter Set rules. During the
workflow execution when the [Enum]{.ph .uicontrol} value is &lt;em&gt;VM&lt;/em&gt; only
[Input1]{.ph .uicontrol} field is made available. Alternately, when the
[Enum]{.ph .uicontrol} value is &lt;em&gt;HX&lt;/em&gt;, only [Input2]{.ph .uicontrol} is
made available. The details of the Parameter Set rules are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Rule1]{.ph .uicontrol}&amp;mdash;[If Field]{.ph .uicontrol} is &lt;em&gt;Enum&lt;/em&gt;,
[Condition]{.ph .uicontrol} is &lt;em&gt;Equal to&lt;/em&gt;, [Value ]{.ph
.uicontrol}is &lt;em&gt;VM&lt;/em&gt;, and [Fields to be shown ]{.ph .uicontrol}is
&lt;em&gt;Input1.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Rule2]{.ph .uicontrol}&amp;mdash;[If Field]{.ph .uicontrol} is &lt;em&gt;Enum&lt;/em&gt;,
[Condition]{.ph .uicontrol} is &lt;em&gt;Equal to&lt;/em&gt;, [Value ]{.ph
.uicontrol}is &lt;em&gt;HX&lt;/em&gt;, and [Fields to be shown ]{.ph .uicontrol}is
&lt;em&gt;Input2.&lt;/em&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following is a sample of the API request.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  &amp;#34;InputParameterSet&amp;#34;: [
    {
      &amp;#34;Condition&amp;#34;: &amp;#34;eq&amp;#34;,
      &amp;#34;ControlParameter&amp;#34;: &amp;#34;Enum&amp;#34;,
      &amp;#34;EnableParameters&amp;#34;: [
        &amp;#34;Input1&amp;#34;
      ],
      &amp;#34;Name&amp;#34;: &amp;#34;Rule1&amp;#34;,
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.ParameterSet&amp;#34;,
      &amp;#34;Value&amp;#34;: &amp;#34;VM&amp;#34;
    },
    {
      &amp;#34;Condition&amp;#34;: &amp;#34;eq&amp;#34;,
      &amp;#34;ControlParameter&amp;#34;: &amp;#34;Enum&amp;#34;,
      &amp;#34;EnableParameters&amp;#34;: [
        &amp;#34;Input2&amp;#34;
      ],
      &amp;#34;Name&amp;#34;: &amp;#34;Rule2&amp;#34;,
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.ParameterSet&amp;#34;,
      &amp;#34;Value&amp;#34;: &amp;#34;HX&amp;#34;
    },
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The supported data types for Parameter Set rules are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Boolean&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Enum&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String Object Selector&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;MoReference&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Target&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Progressive Disclosure Rule&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The Progressive Disclosure rules filter the data available in an input
field based on the preceding selection during a workflow execution. The
first input field is populated with broadest options. The subsequent
input fields are populated with options based on the previous selection.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example 1:&lt;/strong&gt; The following example shows how to create a Progressive
Disclosure rule for a workflow with two input fields. Both these input
fields are MoReference data type. The workflow input fields are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Field1]{.ph .uicontrol}&amp;mdash;[Type]{.ph .uicontrol} is &lt;em&gt;MoReference&lt;/em&gt;,
[Intersight API Reference]{.ph .uicontrol} is
&lt;code&gt;/api/v1/asset/DeviceRegistrations&lt;/code&gt;{.ph .codeph}, and [Selector
attribute]{.ph .uicontrol} is &lt;code&gt;ConnectionStatus&lt;/code&gt;{.ph .codeph}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Field2]{.ph .uicontrol}&amp;mdash;[Type ]{.ph .uicontrol}is &lt;em&gt;MoReference&lt;/em&gt;,
[Intersight API Reference]{.ph .uicontrol} is
&lt;code&gt;/api/v1/asset/DeviceRegistrations&lt;/code&gt;{.ph .codeph}, and [Selector
attribute]{.ph .uicontrol} is &lt;code&gt;ConnectionStatus&lt;/code&gt;{.ph .codeph}.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can create a Progressive Disclosure rule so that during the workflow
execution, the data is filtered for [Field2 ]{.ph .uicontrol}fields
based on value in the [Field1 ]{.ph .uicontrol}field. The details of the
Progressive Disclosure rule are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[Field2 Rule]{.ph .uicontrol}&amp;mdash;[Target Field]{.ph .uicontrol} is
&lt;code&gt;Field2&lt;/code&gt;{.ph .codeph}, [Attribute]{.ph .uicontrol} is
&lt;code&gt;ConnectionStatus&lt;/code&gt;{.ph .codeph}, [Condition]{.ph .uicontrol} is
&lt;em&gt;Equal to&lt;/em&gt;, and [Value]{.ph .uicontrol} is
&lt;code&gt;${Field1.ConnectionStatus}.&lt;/code&gt;{.ph .codeph}&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Example 2:&lt;/strong&gt;: The following example shows how to create a Progressive
Disclosure rule for a workflow with two input fields. Both these input
fields are composite custom data type. The workflow input fields are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Input1]{.ph .uicontrol}&amp;mdash;Composite data type with two fields
(Field1 and Field2)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Field1]{.ph .uicontrol}&amp;mdash;[Type]{.ph .uicontrol} is
&lt;em&gt;MoReference&lt;/em&gt;, [Intersight API Reference]{.ph .uicontrol} is
&lt;code&gt;/api/v1/asset/DeviceRegistrations&lt;/code&gt;{.ph .codeph}, and [Selector
attribute]{.ph .uicontrol} is &lt;code&gt;ConnectionStatus&lt;/code&gt;{.ph .codeph}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Field2]{.ph .uicontrol}&amp;mdash;[Type ]{.ph .uicontrol}is
&lt;em&gt;MoReference&lt;/em&gt;, [Intersight API Reference]{.ph .uicontrol} is
&lt;code&gt;/api/v1/asset/DeviceRegistrations&lt;/code&gt;{.ph .codeph}, and [Selector
attribute]{.ph .uicontrol} is &lt;code&gt;ConnectionStatus&lt;/code&gt;{.ph .codeph}.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Input2]{.ph .uicontrol}&amp;mdash;Composite data type with two fields
(Field3 and Field4)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Field3]{.ph .uicontrol}&amp;mdash;[Type]{.ph .uicontrol} is
&lt;em&gt;MoReference&lt;/em&gt;, [Intersight API Reference]{.ph .uicontrol} is
&lt;code&gt;/api/v1/asset/DeviceRegistrations&lt;/code&gt;{.ph .codeph}, and [Selector
attribute]{.ph .uicontrol} is &lt;code&gt;ConnectionStatus&lt;/code&gt;{.ph .codeph}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Field4]{.ph .uicontrol}&amp;mdash;[Type ]{.ph .uicontrol}is
&lt;em&gt;MoReference&lt;/em&gt;, [Intersight API Reference]{.ph .uicontrol} is
&lt;code&gt;/api/v1/asset/DeviceRegistrations&lt;/code&gt;{.ph .codeph}, and [Selector
attribute]{.ph .uicontrol} is &lt;code&gt;ConnectionStatus&lt;/code&gt;{.ph .codeph}.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;You can create two Progressive Disclosure rules. During the workflow
execution, the data is filtered for [Input2 ]{.ph .uicontrol}fields
based on value in the [Input1]{.ph .uicontrol} fields. The details of
the two Progressive Disclosure rules are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Input2.Field3 Rule]{.ph .uicontrol}&amp;mdash;[Target Field]{.ph
.uicontrol} is &lt;code&gt;Input2.Field3&lt;/code&gt;{.ph .codeph}, [Attribute]{.ph
.uicontrol} is &lt;code&gt;ConnectionStatus&lt;/code&gt;{.ph .codeph}, [Condition]{.ph
.uicontrol} is &lt;em&gt;Equal to&lt;/em&gt;, and [Value]{.ph .uicontrol} is
&lt;code&gt;${Input1.Field1.ConnectionStatus}.&lt;/code&gt;{.ph .codeph}&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Input2.Field4 Rule]{.ph .uicontrol}&amp;mdash;[Target Field]{.ph
.uicontrol} is &lt;code&gt;Input2.Field4&lt;/code&gt;{.ph .codeph}, [Attribute]{.ph
.uicontrol} is &lt;code&gt;ConnectionStatus&lt;/code&gt;{.ph .codeph}, [Condition]{.ph
.uicontrol} is &lt;em&gt;Equal to&lt;/em&gt;, and [Value]{.ph .uicontrol} is
&lt;code&gt;${Input1.Field2.ConnectionStatus}.&lt;/code&gt;{.ph .codeph}&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The following is a sample of the API request.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;  &amp;#34;UiInputFilters&amp;#34;: [
    {
      &amp;#34;Filters&amp;#34;: [
        &amp;#34;ConnectionStatus eq &amp;#39;${Input1.Field1.ConnectionStatus}&amp;#39;&amp;#34;
      ],
      &amp;#34;Name&amp;#34;: &amp;#34;Input2.Field3&amp;#34;,
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.UiInputFilter&amp;#34;,
      &amp;#34;UserHelpMessage&amp;#34;: &amp;#34;&amp;#34;
    },
    {
      &amp;#34;Filters&amp;#34;: [
        &amp;#34;ConnectionStatus eq &amp;#39;${Input1.Field2.ConnectionStatus}&amp;#39;&amp;#34;
      ],
      &amp;#34;Name&amp;#34;: &amp;#34;Input2.Field4&amp;#34;,
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.UiInputFilter&amp;#34;,
      &amp;#34;UserHelpMessage&amp;#34;: &amp;#34;&amp;#34;
    }
  ]
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The supported data types for the Progressive Disclosure rules are:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;MoReference&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Target&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;String Object Selector
:::&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;::: section&lt;/p&gt;
&lt;h2 id=&#34;workflow-variables&#34; class=&#34;title sectiontitle&#34;&gt;Workflow Variables&lt;/h2&gt;
&lt;p&gt;Workflow variables are similar to local variables within functions of a
programming language. You define variables for workflows in Workflow
Designer, and the scope of the workflow variables lies within the
defined workflow. In a workflow, all tasks are bound to the scope of the
workflow and have access to the workflow variables that are defined for
the workflow. You can use the workflow variable to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Simplify complex workflows which have multiple branches based on the
conditional operator. Save the output of tasks that get executed in
different branches of the workflow into a single variable. This
variable can then be mapped in the downstream tasks irrespective of
the branch from which it was taken.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Evaluate the workflow input using a complex expression, save the
result as a variable, and reuse the variable in the subsequent
tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Transform the output of a task with the help of template functions
and map the value into a workflow variable. The variables can then
be used in multiple mappings without having to redo the
transformation in every mapping.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To define the workflow variable and specify the corresponding value, you
can do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;In the [General]{.ph .uicontrol} tab, click [Add Workflow
Variable]{.ph .uicontrol} and define the variable properties.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the [Designer]{.ph .uicontrol} tab, click the task, and then
click the [Variables]{.ph .uicontrol} tab.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;To add a new workflow variable, click [Add Workflow
Variable]{.ph .uicontrol} and define the variable properties.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;To add or edit a mapping to an existing variable, click [Edit
Mapping]{.ph .uicontrol} and specify the new value.&lt;/p&gt;
&lt;p&gt;::: {.note .note}
[Note:]{.notetitle}
To view events for a workflow variable, click the [View]{.ph
.uicontrol} icon.
:::&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The workflow variables can be assigned one of the following values:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Static value]{.ph .uicontrol}&amp;mdash;Either the default value of the
variable or the value specified in the workflow tasks.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Direct mapping ]{.ph .uicontrol}&amp;mdash;Mapped to a workflow input, task
output, or another workflow variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Advanced or Transformational mapping]{.ph .uicontrol}&amp;mdash;Evaluate a
complex expression and save the result in a variable.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;After you define the workflow variable, you can map the workflow
variable to task input, workflow output, or as an input for another
variable. For more information, see &lt;a href=&#34;file:/help/resources/Workflow_Designer#input_variable_and_output_mapping&#34;&gt;Input, Variable, and Output
Mapping&lt;/a&gt;{.xref}.&lt;/p&gt;
&lt;p&gt;Following is a simple example which explains static mapping for a
workflow variable. A workflow has two tasks &lt;em&gt;Task1&lt;/em&gt; and &lt;em&gt;Task2&lt;/em&gt; and a
workflow variable &lt;em&gt;Variable1&lt;/em&gt; is defined with a default value as &lt;em&gt;100&lt;/em&gt;.
For &lt;em&gt;Task1&lt;/em&gt;, in the [Variable]{.ph .uicontrol} tab for the task, you can
specify a static mapping for the workflow variable value as 90.
Similarly, for &lt;em&gt;Task2&lt;/em&gt;, in the [Variable]{.ph .uicontrol} tab for the
task, you can specify the workflow variable value as 80 by mapping the
&lt;em&gt;Variable1&lt;/em&gt; value.&lt;/p&gt;
&lt;p&gt;When you execute the workflow, the start value of &lt;em&gt;Variable1&lt;/em&gt; is the
default value &lt;em&gt;100&lt;/em&gt; . After &lt;em&gt;Task1&lt;/em&gt; is executed, the value of
&lt;em&gt;Variable1&lt;/em&gt; is set to &lt;em&gt;90&lt;/em&gt; based on the static value that is mapped for
the task. After &lt;em&gt;Task2&lt;/em&gt; is executed, the value of &lt;em&gt;Variable1&lt;/em&gt; is set to
&lt;em&gt;80&lt;/em&gt; based on the static value that is mapped for the task.
:::&lt;/p&gt;
&lt;p&gt;::: {#id_131513__section_ycb_mjr_4sb .section}&lt;/p&gt;
&lt;h2 id=&#34;input-variable-and-output-mapping&#34; class=&#34;title sectiontitle&#34;&gt;Input, Variable, and Output Mapping&lt;/h2&gt;
&lt;p&gt;Workflows inputs, variables, and task outputs can be used for mapping
and they can be used as direct, transformed, or advanced mapping. The
syntax to refer to these will depend on the type of mapping.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Workflow inputs are referenced as &lt;code&gt;${workflow.input.InputName}&lt;/code&gt;{.ph
.codeph} where [InputName]{.ph .uicontrol} is the Reference Name
given to the workflow input and not the Display Name or Label.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Workflow variables are referenced as
&lt;code&gt;${workflow.variable.InputName}&lt;/code&gt;{.ph .codeph} , where
[InputName]{.ph .uicontrol} is the Reference Name for the workflow
variable.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Task outputs are referenced as &lt;code&gt;${TaskName.output.OutputName}&lt;/code&gt;{.ph
.codeph} where [TaskName]{.ph .uicontrol} is the Instance Name for
the task and not the Display Name or Label and [OutputName]{.ph
.uicontrol} is the Reference Name for the task output.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;To specify an input mapping, select a task and click [Edit]{.ph
.uicontrol} against a task input parameter.&lt;/p&gt;
&lt;p&gt;To specify a workflow variable mapping, select a task and click
[Map]{.ph .uicontrol} against a workflow variable parameter.&lt;/p&gt;
&lt;p&gt;Following are the available options:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Static Value]{.ph .uicontrol}&amp;mdash;Enter a value that is assigned to
the task input or workflow variable field.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Direct Mapping]{.ph .uicontrol}&amp;mdash;Map an existing input, workflow
variable, or task output to the task input.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Transformed Mapping]{.ph .uicontrol}&amp;mdash;Allows applying data
transformation through a combination of one or more transformation
stages for a task&#39;s input. In each transformation stage, you can
select a transformation function along with its inputs. The
transformation stages will be converted into a template. You can
then preview the template and test the transformation with sample
values.&lt;/p&gt;
&lt;p&gt;::: {.note .note}
[Note:]{.notetitle}
Transformed mapping is only supported for task inputs of primitive
data types, such as &lt;em&gt;string&lt;/em&gt;, &lt;em&gt;integer&lt;/em&gt;, &lt;em&gt;boolean&lt;/em&gt;, and &lt;em&gt;float&lt;/em&gt;.
:::&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;::: p
[Advanced Mapping]{.ph .uicontrol}&amp;mdash;Map a Golang template to the
task input or workflow variable. For example, &lt;code&gt;FindAllString&lt;/code&gt;{.ph
.codeph} function returns a slice of all substrings that match the
given regular expression in the given string.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;FindAllString(s, regex string) ([]string, error)
Example: {{(FindAllString .global.task.input.NumberString \&amp;#34;([0-9]+)\&amp;#34;)}} 
returns array [“123”, “456”] for input string “123 some text 456”.
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;For example, &lt;code&gt;Atoi&lt;/code&gt;{.ph .codeph} function converts the given number
in string format to integer type.&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Atoi(s string) (int, error)
Example: {{Atoi .global.task.input.SizeString}} 
returns integer 2048 for input string “2048”
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;:::
:::&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;::: section&lt;/p&gt;
&lt;h2 id=&#34;operations---conditional-task&#34; class=&#34;title sectiontitle&#34;&gt;Operations - Conditional Task&lt;/h2&gt;
&lt;p&gt;Operations can be used to control the execution path of the workflows.
Orchestrator supports Condition tasks which can be used to control the
tasks that need to be executed.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Tasks to Control Execution Flow of Workflows&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The [Conditional Task]{.ph .uicontrol} under [Operations]{.ph
.uicontrol} allows you to perform programmatic decisional expressions in
a conditional task during a workflow execution. The conditional
expression can be simple expression or a combined compound expression.&lt;/p&gt;
&lt;p&gt;::: {.note .note}
[Note:]{.notetitle}&lt;/p&gt;
&lt;p&gt;Only JSON style template is supported with conditional expressions.
:::&lt;/p&gt;
&lt;p&gt;Conditional expressions support the following operators:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Comparison operators&lt;/strong&gt; such as === (Equal to), != (Not equal to),
&amp;gt; (Greater than), &amp;lt; (Less than), &amp;gt;= (Greater than or equal to),
&amp;lt;= (Less than or equal to)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Arithmetic operators&lt;/strong&gt; such as =, -, * (Multiplication), /
(division), % (Modulo), ** (Logical AND)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Logical operators&lt;/strong&gt; such as &amp;amp;&amp;amp; (Logical AND), || (Logical OR), !
((Logical NOT)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Ternary operator&lt;/strong&gt; such as condition ? val1 : val2&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The syntax for workflow input is
&lt;code&gt;${workflow.input.&amp;lt;workflow input ReferenceName&amp;gt;}&lt;/code&gt;{.ph .codeph} and the
syntax for task output is &lt;code&gt;${&amp;lt;Task Name&amp;gt;.output.&amp;lt;Task Output Name&amp;gt;}&lt;/code&gt;{.ph
.codeph}. You can get the values for the task name and task output name
from the Code view.&lt;/p&gt;
&lt;p&gt;::: p
Following is an example for conditional expressions:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;if ( (${workflow.input.name} != &amp;#39;test&amp;#39; || ${workflow.input.name} != &amp;#39;test123’)) &amp;#39;bad input&amp;#39;; else if((${workflow.input.id} != null &amp;amp;&amp;amp; ${workflow.input.id} % 2 == 0)) &amp;#39;even&amp;#39;; else &amp;#39;odd&amp;#39;;
if ( (${workflow.input.name} != &amp;#39;test123’ || ${workflow.input.name} != &amp;#39;test123’)) &amp;#39;bad input&amp;#39;; else if((${workflow.input.id} != null &amp;amp;&amp;amp; ${workflow.input.id} % 2 == 0)) &amp;#39;even&amp;#39;; else &amp;#39;odd&amp;#39;;
if ( (${workflow.input.name}.length === 12 || ${workflow.input.name} !== ‘test’ )) &amp;#39;even&amp;#39;; else &amp;#39;odd&amp;#39;; &amp;lt;&amp;lt; fgfgfgfgfgfg , even
if ( (${workflow.input.name}.length === 12 || ${workflow.input.name} !== ‘test’ )) &amp;#39;even&amp;#39;; else &amp;#39;odd&amp;#39;; &amp;lt;&amp;lt; test , odd
if ( (${workflow.input.name} != null &amp;amp;&amp;amp; &amp;#39;decisionTest&amp;#39;.indexOf(${workflow.input.name}) != -1 )) &amp;#39;even&amp;#39;; else &amp;#39;odd&amp;#39;;
if ( (${workflow.input.name}.toLowerCase() == ‘testing’)) &amp;#39;even&amp;#39;; else &amp;#39;odd&amp;#39;; &amp;lt;&amp;lt; used integers as input name to try odd path
if ( (${workflow.input.name}.search(/\s/g) != -1)) &amp;#39;even&amp;#39;; else &amp;#39;odd&amp;#39;;
if ( (${workflow.input.name}.match(/\s/g) != -1)) &amp;#39;even&amp;#39;; else &amp;#39;odd&amp;#39;;
if ( (${workflow.input.name}.startsWith(&amp;#39;Not&amp;#39;,0) || ${workflow.input.name}.endsWith(&amp;#39;.&amp;#39;))) &amp;#39;even&amp;#39;; else &amp;#39;odd&amp;#39;;
if ( (${workflow.input.name}.length &amp;gt;= 3 &amp;amp;&amp;amp; ${workflow.input.name}.length &amp;lt;= 20)) &amp;#39;even&amp;#39;; else &amp;#39;odd&amp;#39;;
if ( (${workflow.input.name}. === undefined)) ‘odd’; else ‘even’;
if ( (${workflow.input.name}.search(&amp;#39;Failed&amp;#39;) != -1)) &amp;#39;even&amp;#39;; else &amp;#39;odd&amp;#39;;
if ( (${workflow.input.name}.toLowerCase() != &amp;#39;&amp;#39; || ${workflow.input.name}.toUpperCase() != ‘Not-assigned’ )) &amp;#39;even&amp;#39;; else &amp;#39;odd&amp;#39;;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;The expression is executed during runtime and depending on the result,
the respective path is chosen. If none of the conditions match, the
default path is chosen.&lt;/p&gt;
&lt;p&gt;For example, you can have a conditional task that follows a path of
execution depending on the profile state. You can create a condition in
a workflow to check the state of the profile. If the profile is in the
[Assigned]{.ph .uicontrol} state then you can deploy the profile, else
delete the profile.&lt;/p&gt;
&lt;p&gt;After choosing the conditional task, use the [Conditions]{.ph
.uicontrol} tab to specify expressions in the [Condition]{.ph
.uicontrol} field of the tab. The values for the condition are specified
in the [Value]{.ph .uicontrol} field of the [Cases]{.ph .uicontrol}
area. Expressions are validated for syntax accuracy when workflow is
saved.&lt;/p&gt;
&lt;p&gt;The following examples return the value of the condition.&lt;/p&gt;
&lt;p&gt;::: p&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;${workflow.input.Names}.length
${workflow.input.ArrayOfIds}.length              (here ArrayOfIds represent an array)
${workflow.input.Names}.toLowerCase()
${workflow.input.Names}.toUpperCase()
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;The following examples return the boolean value &#39;true&#39; or &#39;false&#39;.&lt;/p&gt;
&lt;p&gt;::: p&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;${workflow.input.Names}.startsWith(&amp;#39;Te&amp;#39;)
${workflow.input.Names}.endsWith(&amp;#39;st&amp;#39;)
${workflow.input.Names} == null
${workflow.input.Names} != null
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;In addition to workflow, task output can also be used. Here a boolean
value is used in a ternary operation. If True, branch1 executes,
otherwise branch2 executes &lt;em&gt;${task1.output.IsValid} ? branch1 :
branch2&lt;/em&gt;.
:::&lt;/p&gt;
&lt;p&gt;::: {#id_131513__section_j5c_qy5_rrb .section}&lt;/p&gt;
&lt;h2 id=&#34;operations---parallel-loop-task&#34; class=&#34;title sectiontitle&#34;&gt;Operations - Parallel Loop Task&lt;/h2&gt;
&lt;p&gt;Operations can be used to control the execution path of the workflows.
Orchestrator supports the Parallel Loop operation task that can be used
to run a single task or sub-workflow, iteratively, based on a specified
count input.&lt;/p&gt;
&lt;p&gt;The iteration count can either be a static value that is specified when
the workflow is created or a dynamic value that is derived from a
workflow input or task output.&lt;/p&gt;
&lt;p&gt;When the task is executed, the count &#39;N&#39; is determined, and the tasks
or sub-workflows are scheduled for execution in parallel. When all the
instances of the task or sub-workflow reach a final state, the parallel
loop operation completes, and the workflow execution moves on to the
next task.&lt;/p&gt;
&lt;p&gt;::: {.note .note}
[Note:]{.notetitle}&lt;/p&gt;
&lt;p&gt;If one of the tasks or sub-workflows fails then the entire parallel loop
task fails.
:::&lt;/p&gt;
&lt;p&gt;The dynamic values for the count must be specified as a template
function. For example, if a loop must run for a count which matches the
length of a workflow input called [StringArray]{.ph .uicontrol}, then
the count must be specified using a template function &lt;em&gt;{{ len
.global.workflow.input.StringArray }}&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;In addition, you can use the keyword &lt;em&gt;.iteration&lt;/em&gt; in a workflow template
input to control the inputs that feed into the task. For example, the
task within the loop needs to take one value from the workflow input
[StringArray]{.ph .uicontrol}, then the task string input can be mapped
to the template &lt;em&gt;HostGroupName{{.iteration}}&lt;/em&gt; during the workflow
creation.&lt;/p&gt;
&lt;p&gt;Use the &lt;strong&gt;Parallel Loop&lt;/strong&gt; task from the &lt;strong&gt;Operations&lt;/strong&gt; section in the
Intersight Orchestrator Workflow Designer UI to build the workflow.&lt;/p&gt;
&lt;p&gt;To add a task or a sub-workflow to a Parallel Loop task, you must drag
and drop the single task or sub-workflow inside the Parallel Loop task
in the Workflow Designer UI.&lt;/p&gt;
&lt;p&gt;The following table explains the Parallel Loop task input properties:&lt;/p&gt;
&lt;p&gt;::: tablenoborder
+&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
| Property | Description                                              |
+==========+==========================================================+
| Count    | The iteration count value for the parallel loop. The     |
|          | count can either be a static value defined as a constant |
|          | or a dynamic value defined as an expression that is      |
|          | evaluated to an integer value at execution time.         |
|          |                                                          |
|          | The dynamic values for the count must be specified as a  |
|          | template function. For example, if a loop must run for a |
|          | count which matches the length of a workflow input       |
|          | called &lt;code&gt;StringArray&lt;/code&gt;{.ph .codeph}, then the count must   |
|          | be specified using a template function                   |
|          | &lt;code&gt;{{ len .global.workflow.input.StringArray }}&lt;/code&gt;{.ph       |
|          | .codeph}.                                                |
|          |                                                          |
|          | The count must be less than or equal to 100.             |
+&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
:::&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example: &lt;strong&gt;Create a workflow with the Parallel Loop task to create
multiple storage host groups&lt;/strong&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;The following example workflow has two tasks&amp;mdash;Parallel Loop and New
Storage Host Group. The first task runs the Parallel Loop task. In this
task, the Count input is a static value and is set to &lt;em&gt;2&lt;/em&gt;. The second
task, New Storage Host Group, creates storage host groups with the host
group name as a workflow input.&lt;/p&gt;
&lt;p&gt;When the workflow is executed, the count &#39;N&#39; is determined as 2, and
two create storage host group tasks are executed in parallel. When all
the instances of the task reach a final state, the parallel loop
completes.&lt;/p&gt;
&lt;p&gt;The workflow input field required for this example is as follows:&lt;/p&gt;
&lt;p&gt;::: tablenoborder
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
| Property       | Description                                        |
+================+====================================================+
| Storage Device | -   [Reference Name]{.ph                           |
|                |     .uicontrol}&amp;mdash;&lt;em&gt;StorageDevice&lt;/em&gt;                  |
|                |                                                    |
|                | -   [Type]{.ph .uicontrol}&amp;mdash;&lt;em&gt;Target Data Type&lt;/em&gt;    |
|                |                                                    |
|                | -   [Intersight API Reference]{.ph                 |
|                |     .uicontrol}&amp;mdash;&lt;em&gt;/api/v1/storage/PureArrays&lt;/em&gt;     |
|                |                                                    |
|                | -   [Selector Attribute]{.ph .uicontrol}&amp;mdash;&lt;em&gt;Name&lt;/em&gt;  |
|                |                                                    |
|                | -   [Selector Attribute]{.ph                       |
|                |     .uicontrol}&amp;mdash;&lt;em&gt;Vendor&lt;/em&gt;                         |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
:::&lt;/p&gt;
&lt;p&gt;The following table lists the properties for the Parallel Loop task:&lt;/p&gt;
&lt;p&gt;::: tablenoborder
Property   Description&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;Count      [Count]{.ph .uicontrol}&amp;mdash;&lt;em&gt;2&lt;/em&gt;
:::&lt;/p&gt;
&lt;p&gt;The following table lists the properties for the New Storage Host Group
task:&lt;/p&gt;
&lt;p&gt;::: tablenoborder
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
| Property       | Description                                        |
+================+====================================================+
| Storage Device | [Workflow Input]{.ph                               |
|                | .uicontrol}&amp;mdash;&lt;em&gt;${workflow.input.StorageDevice}&lt;/em&gt;   |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
| Host Group     | [Custom Value]{.ph                                 |
|                | .uicontrol}&amp;mdash;&lt;em&gt;HostGroupName{{.iteration}}&lt;/em&gt;        |
|                |                                                    |
|                | The keyword &lt;em&gt;.iteration&lt;/em&gt; in a workflow template    |
|                | input to control the inputs that feed into the     |
|                | task.                                              |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;-+
:::&lt;/p&gt;
&lt;p&gt;After you execute the workflow, you would see the following output:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;├── New Storage Host Group
├── ...
│   ├── Inputs
│   │   └── Host Group: HostGroupName0
│   │       └── Storage Device:{ 2 }
│   │           ├── Moid: 619efa1d6e64612d317a248a
│   │           └── ObjectType: storage.PureArray
│   └── Outputs
│       ├── ConfigResults:[ 1 ]
│       │   └── Object: { 4 }
│       │       ├── ConfigResCtx: { 1 }
│       │       │   └── EntityData: { 1 }
│       │       │       └── task: workflow.ApiTask
│       │       ├── Message: Host group created successfully.
│       │       ├── State: Ok
│       │       └── Type: Config
│       └── Host Group: HostGroupName0
├── New Storage Host Group
└── ...
    ├── Inputs
    │   └── Host Group: HostGroupName1
    │       └── Storage Device:{ 2 }
    │           ├── Moid: 619efa1d6e64612d317a248a
    │           └── ObjectType: storage.PureArray
    └── Outputs
        ├── ConfigResults:[ 1 ]
        │   └── Object: { 4 }
        │       ├── ConfigResCtx: { 1 }
        │       │   └── EntityData: { 1 }
        │       │       └── task: workflow.ApiTask
        │       ├── Message: Host group created successfully.
        │       ├── State: Ok
        │       └── Type: Config
        └── Host Group: HostGroupName1
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;The following is a sample code view:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
  &amp;#34;Catalog&amp;#34;: {
    &amp;#34;Moid&amp;#34;: &amp;#34;5e6109bc696f6e2d31f856e5&amp;#34;,
    &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.Catalog&amp;#34;,
    &amp;#34;link&amp;#34;: &amp;#34;https://www.intersightcom/api/v1/workflow/Catalogs/5e6109bc696f6e2d31f856e5&amp;#34;
  },
  &amp;#34;DefaultVersion&amp;#34;: true,
  &amp;#34;Description&amp;#34;: &amp;#34;&amp;#34;,
  &amp;#34;InputDefinition&amp;#34;: [
    {
      &amp;#34;CustomDataTypeProperties&amp;#34;: {
        &amp;#34;CatalogMoid&amp;#34;: &amp;#34;&amp;#34;,
        &amp;#34;CustomDataTypeId&amp;#34;: &amp;#34;&amp;#34;,
        &amp;#34;CustomDataTypeName&amp;#34;: &amp;#34;&amp;#34;,
        &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.CustomDataProperty&amp;#34;
      },
      &amp;#34;Default&amp;#34;: {
        &amp;#34;IsValueSet&amp;#34;: false,
        &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.DefaultValue&amp;#34;,
        &amp;#34;Override&amp;#34;: false,
        &amp;#34;Value&amp;#34;: null
      },
      &amp;#34;Description&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;DisplayMeta&amp;#34;: {
        &amp;#34;InventorySelector&amp;#34;: true,
        &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.DisplayMeta&amp;#34;,
        &amp;#34;WidgetType&amp;#34;: &amp;#34;None&amp;#34;
      },
      &amp;#34;InputParameters&amp;#34;: null,
      &amp;#34;IsArray&amp;#34;: false,
      &amp;#34;Label&amp;#34;: &amp;#34;Storage Device&amp;#34;,
      &amp;#34;Max&amp;#34;: 0,
      &amp;#34;Min&amp;#34;: 0,
      &amp;#34;Name&amp;#34;: &amp;#34;StorageDevice&amp;#34;,
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.TargetDataType&amp;#34;,
      &amp;#34;Properties&amp;#34;: [
        {
          &amp;#34;ConnectorAttribute&amp;#34;: &amp;#34;RegisteredDevice.Moid&amp;#34;,
          &amp;#34;ConstraintAttributes&amp;#34;: [
            &amp;#34;ObjectType&amp;#34;
          ],
          &amp;#34;DisplayAttributes&amp;#34;: [
            &amp;#34;Name&amp;#34;,
            &amp;#34;Vendor&amp;#34;
          ],
          &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.TargetProperty&amp;#34;,
          &amp;#34;Selector&amp;#34;: &amp;#34;/api/v1/storage/PureArrays&amp;#34;,
          &amp;#34;SelectorProperty&amp;#34;: {
            &amp;#34;Body&amp;#34;: null,
            &amp;#34;Method&amp;#34;: &amp;#34;GET&amp;#34;,
            &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.SelectorProperty&amp;#34;
          },
          &amp;#34;SupportedObjects&amp;#34;: [
            &amp;#34;storage.PureArray&amp;#34;
          ]
        }
      ],
      &amp;#34;Required&amp;#34;: true
    }
  ],
  &amp;#34;InputParameterSet&amp;#34;: [],
  &amp;#34;Label&amp;#34;: &amp;#34;Parallel Loop&amp;#34;,
  &amp;#34;Name&amp;#34;: &amp;#34;ParallelLoop&amp;#34;,
  &amp;#34;OutputDefinition&amp;#34;: [],
  &amp;#34;OutputParameters&amp;#34;: null,
  &amp;#34;Properties&amp;#34;: {
    &amp;#34;Cloneable&amp;#34;: true,
    &amp;#34;EnableDebug&amp;#34;: false,
    &amp;#34;ExternalMeta&amp;#34;: true,
    &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.WorkflowProperties&amp;#34;,
    &amp;#34;Retryable&amp;#34;: false,
    &amp;#34;SupportStatus&amp;#34;: &amp;#34;Supported&amp;#34;
  },
  &amp;#34;Tags&amp;#34;: [],
  &amp;#34;Tasks&amp;#34;: [
    {
      &amp;#34;Description&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;Label&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;Name&amp;#34;: &amp;#34;StartTask&amp;#34;,
      &amp;#34;NextTask&amp;#34;: &amp;#34;parallelLoop1&amp;#34;,
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.StartTask&amp;#34;
    },
    {
      &amp;#34;Description&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;Label&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;Name&amp;#34;: &amp;#34;SuccessEndTask&amp;#34;,
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.SuccessEndTask&amp;#34;
    },
    {
      &amp;#34;Description&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;Label&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;Name&amp;#34;: &amp;#34;FailureEndTask&amp;#34;,
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.FailureEndTask&amp;#34;
    },
    {
      &amp;#34;Count&amp;#34;: &amp;#34;2&amp;#34;,
      &amp;#34;Description&amp;#34;: &amp;#34;A Parallel Loop is a control task that runs one task or one sub-workflow multiple times based on a specified count.  The count can be a static value that is specified during design time or a dynamic value that is derived from workflow inputs or task outputs.  When the loop is executed, the count &amp;#39;N&amp;#39; is determined, N tasks or sub-workflows are scheduled for execution in parallel.  When all N instances of the task or sub-workflow reach a final state the parallel loop will complete and workflow execution will move on to the next task.  If any one of the tasks or sub-workflows fails, then the entire loop will fail.  Dynamic values for count must be specified as a template.  For example, if a loop must run for a count which matches the length of a workflow input called StringArray, then the count must be specified using a template &amp;#39;{{ len .global.workflow.input.StringArray }}&amp;#39;.  The iteration of the loop is available using the keyword &amp;#39;.iteration&amp;#39; and it can be used to control inputs that feed into the task.  For example, the task inside the loop needs to take one value from the workflow input StringArray, then the task string input can be mapped to the template &amp;#39;{{ index .global.workflow.input.StringArray .iteration}}&amp;#39; during design.&amp;#34;,
      &amp;#34;Label&amp;#34;: &amp;#34;Parallel Loop&amp;#34;,
      &amp;#34;LoopStartTask&amp;#34;: &amp;#34;NewStorageHostGroup1&amp;#34;,
      &amp;#34;Name&amp;#34;: &amp;#34;parallelLoop1&amp;#34;,
      &amp;#34;NumberOfBatches&amp;#34;: 1,
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.LoopTask&amp;#34;,
      &amp;#34;OnSuccess&amp;#34;: &amp;#34;SuccessEndTask&amp;#34;,
      &amp;#34;Parallel&amp;#34;: true
    },
    {
      &amp;#34;CatalogMoid&amp;#34;: &amp;#34;5c2fc884696f6e2d316c5d59&amp;#34;,
      &amp;#34;Description&amp;#34;: &amp;#34;Create a host group with host group name as input. On successful execution, the newly created host group name is generated as output.&amp;#34;,
      &amp;#34;InputParameters&amp;#34;: {
        &amp;#34;HostGroupName&amp;#34;: &amp;#34;HostGroupName{{.iteration}}&amp;#34;,
        &amp;#34;StorageDevice&amp;#34;: &amp;#34;${workflow.input.StorageDevice}&amp;#34;
      },
      &amp;#34;Label&amp;#34;: &amp;#34;New Storage Host Group&amp;#34;,
      &amp;#34;Name&amp;#34;: &amp;#34;NewStorageHostGroup1&amp;#34;,
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.WorkerTask&amp;#34;,
      &amp;#34;OnFailure&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;OnSuccess&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;RollbackDisabled&amp;#34;: false,
      &amp;#34;TaskDefinitionId&amp;#34;: &amp;#34;5f7ed8a2696f6e2d30eb388b&amp;#34;,
      &amp;#34;TaskDefinitionName&amp;#34;: &amp;#34;NewStorageHostGroup&amp;#34;,
      &amp;#34;UseDefault&amp;#34;: false,
      &amp;#34;Version&amp;#34;: 2
    }
  ],
  &amp;#34;UiInputFilters&amp;#34;: [],
  &amp;#34;UiRenderingData&amp;#34;: {
    &amp;#34;Positions&amp;#34;: [
      {
        &amp;#34;Name&amp;#34;: &amp;#34;StartTask&amp;#34;,
        &amp;#34;X&amp;#34;: 269.5,
        &amp;#34;Y&amp;#34;: 45.5
      },
      {
        &amp;#34;Name&amp;#34;: &amp;#34;SuccessEndTask&amp;#34;,
        &amp;#34;X&amp;#34;: 269.5,
        &amp;#34;Y&amp;#34;: 303
      },
      {
        &amp;#34;Name&amp;#34;: &amp;#34;FailureEndTask&amp;#34;,
        &amp;#34;X&amp;#34;: 412.5,
        &amp;#34;Y&amp;#34;: 303
      },
      {
        &amp;#34;Name&amp;#34;: &amp;#34;parallelLoop1&amp;#34;,
        &amp;#34;X&amp;#34;: 149.01800537109375,
        &amp;#34;Y&amp;#34;: 116.75314331054688
      },
      {
        &amp;#34;Name&amp;#34;: &amp;#34;NewStorageHostGroup1&amp;#34;,
        &amp;#34;X&amp;#34;: 185,
        &amp;#34;Y&amp;#34;: 177
      }
    ]
  },
  &amp;#34;Version&amp;#34;: 1,
  &amp;#34;WorkflowMetadata&amp;#34;: null
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;:::&lt;/p&gt;
&lt;p&gt;::: section&lt;/p&gt;
&lt;h2 id=&#34;managing-the-lifecycle-of-a-workflow&#34; class=&#34;title sectiontitle&#34;&gt;Managing the Lifecycle of a Workflow&lt;/h2&gt;
&lt;p&gt;Workflow management consists of organizing, creating, updating, and
deletion of workflows. The following table describes the set of actions
that you can perform with workflows in Cisco Intersight.&lt;/p&gt;
&lt;p&gt;::: tablenoborder
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
| Actions                           | Description                       |
+===================================+===================================+
| View Workflows                    | Choosing [Orchestration]{.ph      |
|                                   | .uicontrol} from the left         |
|                                   | navigation pane will display all  |
|                                   | workflows in a tabular format.    |
|                                   | You can view information such as  |
|                                   | the workflow name and             |
|                                   | description, the number of        |
|                                   | versions available, the number of |
|                                   | times the workflow has been       |
|                                   | executed, the last execution      |
|                                   | status, validation information    |
|                                   | and the last update time and      |
|                                   | date.                             |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
| Create a New Workflow             | Choose [Orchestration]{.ph        |
|                                   | .uicontrol} from the left         |
|                                   | navigation pane and click [Create |
|                                   | Workflow]{.ph .uicontrol}. This   |
|                                   | option opens up the Workflow      |
|                                   | Designer, using which you can     |
|                                   | create a new workflow.            |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
| Create a Version for a Workflow   | You can create multiple versions  |
|                                   | for a workflow. In addition, you  |
|                                   | can set a specific version of the |
|                                   | workflow as the default version   |
|                                   | for the workflow. See [Managing   |
|                                   | Versions for                      |
|                                   | Workflows                         |
|                                   | ](../../../../../../../../help/re |
|                                   | sources/Workflow_Designer#managin |
|                                   | g_versions_for_workflows){.xref}. |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
| Delete a Workflow                 | From the tabular list of          |
|                                   | workflows, you can select a       |
|                                   | workflow and click [Delete]{.ph   |
|                                   | .uicontrol}. This will remove the |
|                                   | workflow and all versions of the  |
|                                   | workflow.                         |
|                                   |                                   |
|                                   | You cannot delete a workflow when |
|                                   | :                                 |
|                                   |                                   |
|                                   | -   workflow is used as           |
|                                   |     sub-workflow task in another  |
|                                   |     workflow.                     |
|                                   |                                   |
|                                   | -   workflow is in running state. |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
| Execute a Workflow                | Select a workflow from the        |
|                                   | tabular list of workflows and     |
|                                   | choose [Execute]{.ph .uicontrol}. |
|                                   | Alternatively, you can click the  |
|                                   | workflow name, and then choose    |
|                                   | [Execute]{.ph .uicontrol} in the  |
|                                   | Workflow Designer.                |
|                                   |                                   |
|                                   | ::: {.note .important}            |
|                                   | [Important:]{.importanttitle}     |
|                                   |                                   |
|                                   | Workflow execution includes       |
|                                   | privilege-based validation for    |
|                                   | tasks. With the introduction of   |
|                                   | privilege-based validation for    |
|                                   | virtualization, compute and       |
|                                   | storage tasks, a user must have   |
|                                   | all the required privileges to    |
|                                   | execute all the domain tasks      |
|                                   | within a workflow. For example, a |
|                                   | user can successfully execute a   |
|                                   | workflow that includes storage    |
|                                   | and virtualization tasks only if  |
|                                   | the user has both Storage and     |
|                                   | Virtualization Administrator      |
|                                   | privileges. In the absence of     |
|                                   | either one of these privileges,   |
|                                   | the [Execute]{.ph .uicontrol}     |
|                                   | button will not be displayed and  |
|                                   | the user cannot execute the       |
|                                   | workflow.                         |
|                                   |                                   |
|                                   | However, an Account Administrator |
|                                   | can execute all workflow.         |
|                                   | :::                               |
|                                   |                                   |
|                                   | While configuring the properties  |
|                                   | of a workflow, if you selected    |
|                                   | the [Retryable]{.ph .uicontrol}   |
|                                   | option, then in the event of a    |
|                                   | workflow failure, you can either  |
|                                   | choose to execute the workflow    |
|                                   | again from the point of failure,  |
|                                   | or you can execute the entire     |
|                                   | workflow again.                   |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
| Clone a Workflow                  | From the tabular list of          |
|                                   | workflows, you can select a       |
|                                   | workflow and click [Clone]{.ph    |
|                                   | .uicontrol}. This will clone the  |
|                                   | selected workflow.                |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
| Save a Workflow as                | From the tabular list of          |
|                                   | workflows, you can choose a       |
|                                   | workflow and click. By default,   |
|                                   | the workflow details are          |
|                                   | displayed in the [Designer]{.ph   |
|                                   | .uicontrol} tab. You can choose   |
|                                   | [Save As]{.ph .uicontrol} option  |
|                                   | from the [Action]{.ph .uicontrol} |
|                                   | drop-down list to clone or create |
|                                   | a new version of the existing     |
|                                   | workflow.                         |
|                                   |                                   |
|                                   | You can also perform this         |
|                                   | operation in the [General]{.ph    |
|                                   | .uicontrol} tab.                  |
|                                   |                                   |
|                                   | In the [Save As]{.ph .uicontrol}  |
|                                   | screen, you can choose one of the |
|                                   | following:                        |
|                                   |                                   |
|                                   | -   [New Version]{.ph             |
|                                   |     .uicontrol}&amp;mdash;Specify a new   |
|                                   |     version and related           |
|                                   |     description. Click [Save]{.ph |
|                                   |     .uicontrol}.                  |
|                                   |                                   |
|                                   |     This option is not available  |
|                                   |     for a system generated        |
|                                   |     workflow.                     |
|                                   |                                   |
|                                   | -   [Clone]{.ph                   |
|                                   |     .uicontrol}&amp;mdash;Specify         |
|                                   |     user-friendly short name,     |
|                                   |     reference name, description,  |
|                                   |     and tag key. Click [Save]{.ph |
|                                   |     .uicontrol}. For more         |
|                                   |     information, see [Cloning a   |
|                                   |     Workflow](../../../../../../  |
|                                   | ../../help/resources/Workflow_Des |
|                                   | igner#cloning_a_workflow){.xref}. |
+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;mdash;&amp;ndash;+
:::
:::&lt;/p&gt;
&lt;p&gt;::: {#id_131513__CloningWorkflow .section}&lt;/p&gt;
&lt;h2 id=&#34;cloning-a-workflow&#34; class=&#34;title sectiontitle&#34;&gt;Cloning a Workflow&lt;/h2&gt;
&lt;p&gt;You can clone a workflow. The cloned workflow is identical to the
original workflow. You can edit the new workflow immediately. You might
do this, for example, to create a workflow that is similar to the source
workflow that can be edited based on your requirements. The new workflow
has a new, separate version history.&lt;/p&gt;
&lt;p&gt;To clone a workflow, complete the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Choose [Orchestration]{.ph .uicontrol} from the left navigation
pane.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From the tabular list of workflows, select a workflow and choose
[Clone]{.ph .uicontrol}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the [Clone Workflow]{.ph .uicontrol} screen, edit the
user-friendly short name, reference name, description, and
organization details. The organization mappings are displayed only
for pre-canned workflows and not for the custom workflows.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Check the [Open Clone in Editor]{.ph .uicontrol} check box if you
want to open the cloned workflow in the workflow designer and edit
the details.&lt;/p&gt;
&lt;p&gt;::: {.note .note}
[Note:]{.notetitle}
[Open Clone in Editor]{.ph .uicontrol} check box is not displayed
when you clone a workflow using the [Save As]{.ph .uicontrol}
option.
:::&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click [Clone]{.ph .uicontrol}.
:::&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;::: {#id_131513__section_azj_mg5_dpb .section}&lt;/p&gt;
&lt;h2 id=&#34;managing-versions-for-workflows&#34; class=&#34;title sectiontitle&#34;&gt;Managing Versions for Workflows&lt;/h2&gt;
&lt;p&gt;Cisco Intersight allows you to create and manage versions for workflows.
In addition to creating versions, you can also set a specific version as
the default version for the workflow. You can create a version of a
workflow and execute it only if you are one of the following users:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Account Administrator&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;User with Workflow Designer privileges&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Read-Only users can only view versions of a workflow. They cannot
create, edit, execute or delete versions. Users with Storage
Administrator and Virtualization Administrator privileges can only view
and execute specific versions of a workflow.&lt;/p&gt;
&lt;p&gt;To create a version for a workflow, complete the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Choose [Orchestration]{.ph .uicontrol} from the left navigation
pane.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From the tabular list of workflows, select a workflow and choose
[Manage Versions]{.ph .uicontrol}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the [Manage Versions]{.keyword .wintitle} screen, you can perform
the following tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Create a new version for the workflow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Execute a specific version of the workflow&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete a specific version. You cannot directly delete the
default version of a workflow. To delete the default version,
perform the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Make another version the default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Change the workflow version to be deleted as non-default.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Delete the workflow version that was changes as non-default.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Set a specific version of the workflow as the default version&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Choose [Create a New Version]{.ph .uicontrol} and enter the
following details:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;[Source Version]{.ph .uicontrol}&amp;mdash;Choose a specific version
that will form the source for the new version that you are
creating.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Version]{.ph .uicontrol}&amp;mdash;Specify a version number for the
workflow.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Description]{.ph .uicontrol}&amp;mdash;Enter a description for the
version so that you can identify it.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;[Set as Default Version]{.ph .uicontrol}&amp;mdash;Check this check box
to set this new version as the default version for the workflow.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click [Create]{.ph .uicontrol}.&lt;/p&gt;
&lt;p&gt;After creating a version for a workflow, clicking on the version
number on the [Manage Versions]{.keyword .wintitle} screen opens the
workflow in Workflow Designer.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;::: {.note .note}
[Note:]{.notetitle}&lt;/p&gt;
&lt;p&gt;Deleting a workflow will delete all versions created for the workflow.
:::
:::&lt;/p&gt;
&lt;p&gt;::: section&lt;/p&gt;
&lt;h2 id=&#34;exporting-a-workflow&#34; class=&#34;title sectiontitle&#34;&gt;Exporting a Workflow&lt;/h2&gt;
&lt;p&gt;Intersight Cloud Orchestrator enables you to export workflows from an
account to your system and then import them to another account.&lt;/p&gt;
&lt;p&gt;To export a workflow, complete the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Choose [Orchestration]{.ph .uicontrol} from the left navigation
pane.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click the [Workflow]{.ph .uicontrol} tab.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;From the tabular list of workflows, do one of the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Select a workflow, click the [Ellipsis (&amp;hellip;)]{.ph .uicontrol}
icon in the same row, and then choose [Export Workflow]{.ph
.uicontrol}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Select multiple workflows, click the [Ellipsis (&amp;hellip;)]{.ph
.uicontrol} icon from the header or footer of the tabular list,
and then choose [Export Workflow]{.ph .uicontrol}.&lt;/p&gt;
&lt;p&gt;::: {.note .note}
[Note:]{.notetitle} You can also export workflows from the
[Actions]{.ph .uicontrol} menu in the [Workflow
Designer]{.keyword .wintitle} window.
:::&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the [Export Workflow]{.ph .uicontrol} screen:&lt;/p&gt;
&lt;p&gt;a.  In the [JSON File Name]{.ph .uicontrol} field, use the default
filename or enter a filename of your choice for the JSON file
that stores the workflow components.&lt;/p&gt;
&lt;p&gt;b.  Use the [Export Tags]{.ph .uicontrol} toggle button to include
or exclude the user-defined tags. ICO does not export the
system-defined tags.&lt;/p&gt;
&lt;p&gt;c.  Click [Export]{.ph .uicontrol}.&lt;/p&gt;
&lt;p&gt;d.  Save a local copy of the JSON file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;importing-a-workflow&#34; class=&#34;title sectiontitle&#34;&gt;Importing a Workflow&lt;/h2&gt;
&lt;p&gt;Intersight Cloud Orchestrator enables you to import workflows to your
account by importing a JSON file that contains the workflow components.
You can create the JSON file by exporting the workflow components from
another account.&lt;/p&gt;
&lt;p&gt;To import a workflow, complete the following steps:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Choose [Orchestration]{.ph .uicontrol} from the left navigation
pane.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Click [Import]{.ph .uicontrol}.&lt;/p&gt;
&lt;p&gt;The [Import]{.keyword .wintitle} wizard appears.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the [Select File]{.keyword .wintitle} screen:&lt;/p&gt;
&lt;p&gt;a.  From the [Organization]{.ph .uicontrol} drop-down list, choose
the organization to which you want to import the workflow(s).&lt;/p&gt;
&lt;p&gt;b.  Click [Browse]{.ph .uicontrol}, and then select the JSON file
that contains the Workflow(s).&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;::: {.note .note}
[Note:]{.notetitle} Ensure that the file size of the JSON file
is not more than 1MB. If the file size is more than 1MB, export
the workflow(s) in batches, and then try import.
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;c.  Click [Next]{.ph .uicontrol}.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Intersight Cloud Orchestrator validates the JSON file and
displays the workflow(s) in the [Details]{.keyword .wintitle}
screen.
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the [Details]{.keyword .wintitle} screen:&lt;/p&gt;
&lt;p&gt;a.  To associate an additional tag to the components listed in the
table, enter the tag in the [Set Tags]{.ph .uicontrol} field.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;::: {.note .note}
[Note:]{.notetitle} [Set Tags]{.ph .uicontrol} is an optional
field. You must enter the tag in the `key:value`{.ph .codeph}
format.
:::
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;b.  If one or more workflow components are already available in the
system, choose a rule to replace or skip the duplicate
components.&lt;/p&gt;
&lt;p&gt;c.  Click [Import]{.ph .uicontrol}.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;In the [Import Result]{.keyword .wintitle} screen:&lt;/p&gt;
&lt;p&gt;a.  Verify the status of the imported workflow.&lt;/p&gt;
&lt;p&gt;b.  If you want to view the details of the import request:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;-   Click the link displayed above the table.

-   Alternatively, click the [Requests]{.ph .uicontrol} icon
    displayed in the menu bar.

    For more information, see
    [Requests](../../../../../../../../help/resources/Workflow_Designer#requests){.xref}.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;c.  Click [Close]{.ph .uicontrol}.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;You can execute the imported workflow from the [Workflows]{.ph
.uicontrol} tab.
:::&lt;/p&gt;
&lt;p&gt;::: section&lt;/p&gt;
&lt;h2 id=&#34;defining-workflow-input-rules&#34; class=&#34;title sectiontitle&#34;&gt;Defining Workflow Input Rules&lt;/h2&gt;
&lt;p&gt;Intersight Cloud Orchestrator allows you to configure input rules that
control the display of fields in the workflow execution screen. You can
define these input rules for a workflow by using the Intersight API and
while creating a composite data type. By default, all input fields for a
workflow are displayed in the workflow execution screen. By configuring
input rules, the fields in this screen are displayed or hidden based on
the value selected for a previous input field.&lt;/p&gt;
&lt;p&gt;After configuring input rules in the workflow definition using the
Intersight API, you can view the input rules using the [Code]{.ph
.uicontrol} tab in the Workflow Designer.&lt;/p&gt;
&lt;p&gt;Following is a sample of a simple input rule set for a workflow:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;background-color:#f8f8f8;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;InputParameterSet&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a40000&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;ObjectType&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;workflow.ParameterSet&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;rule-1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;ControlParameter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;input-1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;Condition&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;eq&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;Value&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;EnableParameters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;input-2&amp;#34;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;},&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;ObjectType&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;workflow.ParameterSet&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;Name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;rule-2&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;ControlParameter&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;input-1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;Condition&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;ne&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;Value&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#204a87;font-weight:bold&#34;&gt;&amp;#34;EnableParameters&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#4e9a06&#34;&gt;&amp;#34;input-3&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Following is an example for the parameter sets defined at workflow
level:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
  &amp;#34;Label&amp;#34;: &amp;#34;Provision VM&amp;#34;,
  &amp;#34;Name&amp;#34;: &amp;#34;ProvisionVM&amp;#34;,
  &amp;#34;DefaultVersion&amp;#34;: true,
  &amp;#34;Description&amp;#34;: &amp;#34;&amp;#34;,
  // Parameter set defintion 
  &amp;#34;InputParameterSet&amp;#34;: [
    {
      // rule-1 enables &amp;#39;vmwarehost&amp;#39; input when value of &amp;#39;vmtype&amp;#39; is &amp;#39;vmware&amp;#39;
      &amp;#34;Name&amp;#34;: &amp;#34;rule-1&amp;#34;,
      &amp;#34;ControlParameter&amp;#34;: &amp;#34;vmtype&amp;#34;,
      &amp;#34;Condition&amp;#34;: &amp;#34;eq&amp;#34;,
      &amp;#34;Value&amp;#34;: &amp;#34;vmware&amp;#34;,
      &amp;#34;EnableParameters&amp;#34;: [
        &amp;#34;vmwarehost&amp;#34;
      ]
    },
    {
      // rule-2 enables &amp;#39;hxcluster&amp;#39; input when value of &amp;#39;vmtype&amp;#39; is &amp;#39;hx&amp;#39;
      &amp;#34;Name&amp;#34;: &amp;#34;rule-2&amp;#34;,
      &amp;#34;ControlParameter&amp;#34;: &amp;#34;vmtype&amp;#34;,
      &amp;#34;Condition&amp;#34;: &amp;#34;eq&amp;#34;,
      &amp;#34;Value&amp;#34;: &amp;#34;hx&amp;#34;,
      &amp;#34;EnableParameters&amp;#34;: [
        &amp;#34;hxcluster&amp;#34;
      ]
    }
  ],
  &amp;#34;InputDefinition&amp;#34;: [
    {
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.PrimitiveDataType&amp;#34;,
      &amp;#34;InputParameters&amp;#34;: null,
      &amp;#34;Label&amp;#34;: &amp;#34;VM Type&amp;#34;,
      &amp;#34;Name&amp;#34;: &amp;#34;vmtype&amp;#34;,
      &amp;#34;Required&amp;#34;: false,
      &amp;#34;Properties&amp;#34;: {
        &amp;#34;ClassId&amp;#34;: &amp;#34;workflow.PrimitiveDataProperty&amp;#34;,
        &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.PrimitiveDataProperty&amp;#34;,
        &amp;#34;Constraints&amp;#34;: {
          &amp;#34;ClassId&amp;#34;: &amp;#34;workflow.Constraints&amp;#34;,
          &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.Constraints&amp;#34;,
          &amp;#34;EnumList&amp;#34;: [
            {
              &amp;#34;ClassId&amp;#34;: &amp;#34;workflow.EnumEntry&amp;#34;,
              &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.EnumEntry&amp;#34;,
              &amp;#34;Label&amp;#34;: &amp;#34;VMWare&amp;#34;,
              &amp;#34;Value&amp;#34;: &amp;#34;vmware&amp;#34;
            },
            {
              &amp;#34;ClassId&amp;#34;: &amp;#34;workflow.EnumEntry&amp;#34;,
              &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.EnumEntry&amp;#34;,
              &amp;#34;Label&amp;#34;: &amp;#34;HX&amp;#34;,
              &amp;#34;Value&amp;#34;: &amp;#34;hx&amp;#34;
            }
          ],
          &amp;#34;Max&amp;#34;: 0,
          &amp;#34;Min&amp;#34;: 0,
          &amp;#34;Regex&amp;#34;: &amp;#34;&amp;#34;
        },
        &amp;#34;InventorySelector&amp;#34;: [],
        &amp;#34;Secure&amp;#34;: false,
        &amp;#34;Type&amp;#34;: &amp;#34;enum&amp;#34;
      }
    },
    {
      &amp;#34;Name&amp;#34;: &amp;#34;vmname&amp;#34;,
      &amp;#34;Label&amp;#34;: &amp;#34;VM Name&amp;#34;,
      &amp;#34;Required&amp;#34;: false,
      &amp;#34;Properties&amp;#34;: {
        &amp;#34;Type&amp;#34;: &amp;#34;string&amp;#34;,
        &amp;#34;Constraints&amp;#34;: {
          &amp;#34;Min&amp;#34;: 0,
          &amp;#34;Max&amp;#34;: 0
        },
        &amp;#34;Secure&amp;#34;: false
      },
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.PrimitiveDataType&amp;#34;
    },
    {
      &amp;#34;Name&amp;#34;: &amp;#34;vmwarehost&amp;#34;,
      &amp;#34;Label&amp;#34;: &amp;#34;Host&amp;#34;,
      &amp;#34;Required&amp;#34;: false,
      &amp;#34;Properties&amp;#34;: {
        &amp;#34;Type&amp;#34;: &amp;#34;string&amp;#34;,
        &amp;#34;Constraints&amp;#34;: {
          &amp;#34;Min&amp;#34;: 0,
          &amp;#34;Max&amp;#34;: 0
        },
        &amp;#34;Secure&amp;#34;: false
      },
      &amp;#34;Default&amp;#34;: {
        &amp;#34;Override&amp;#34;: false,
        &amp;#34;Value&amp;#34;: null
      },
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.PrimitiveDataType&amp;#34;
    },
    {
      &amp;#34;Name&amp;#34;: &amp;#34;hxcluster&amp;#34;,
      &amp;#34;Label&amp;#34;: &amp;#34;Cluster&amp;#34;,
      &amp;#34;Required&amp;#34;: false,
      &amp;#34;Properties&amp;#34;: {
        &amp;#34;Type&amp;#34;: &amp;#34;string&amp;#34;,
        &amp;#34;Constraints&amp;#34;: {
          &amp;#34;Min&amp;#34;: 0,
          &amp;#34;Max&amp;#34;: 0
        },
        &amp;#34;Secure&amp;#34;: false
      },
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.PrimitiveDataType&amp;#34;
    }
  ],
  &amp;#34;OutputDefinition&amp;#34;: [],
  &amp;#34;OutputParameters&amp;#34;: null,
  &amp;#34;Tasks&amp;#34;: [
    {
      &amp;#34;ClassId&amp;#34;: &amp;#34;workflow.StartTask&amp;#34;,
      &amp;#34;Description&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;Label&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;Name&amp;#34;: &amp;#34;StartTask&amp;#34;,
      &amp;#34;NextTask&amp;#34;: &amp;#34;NewProfile1596244596840&amp;#34;,
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.StartTask&amp;#34;
    },
    {
      &amp;#34;ClassId&amp;#34;: &amp;#34;workflow.SuccessEndTask&amp;#34;,
      &amp;#34;Description&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;Label&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;Name&amp;#34;: &amp;#34;SuccessEndTask&amp;#34;,
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.SuccessEndTask&amp;#34;
    },
    {
      &amp;#34;ClassId&amp;#34;: &amp;#34;workflow.FailureEndTask&amp;#34;,
      &amp;#34;Description&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;Label&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;Name&amp;#34;: &amp;#34;FailureEndTask&amp;#34;,
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.FailureEndTask&amp;#34;
    },
    {
      &amp;#34;CatalogMoid&amp;#34;: &amp;#34;5dd45ab6696f6e2d301e2df6&amp;#34;,
      &amp;#34;ClassId&amp;#34;: &amp;#34;workflow.WorkerTask&amp;#34;,
      &amp;#34;Description&amp;#34;: &amp;#34;Task to create a Profile&amp;#34;,
      &amp;#34;InputParameters&amp;#34;: null,
      &amp;#34;Label&amp;#34;: &amp;#34;Provision VM&amp;#34;,
      &amp;#34;Name&amp;#34;: &amp;#34;ProvisionVM1596244596840&amp;#34;,
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.WorkerTask&amp;#34;,
      &amp;#34;OnFailure&amp;#34;: &amp;#34;&amp;#34;,
      &amp;#34;OnSuccess&amp;#34;: &amp;#34;SuccessEndTask&amp;#34;,
      &amp;#34;TaskDefinitionId&amp;#34;: &amp;#34;5efd7c84696f6e2d309e6877&amp;#34;,
      &amp;#34;TaskDefinitionName&amp;#34;: &amp;#34;NewProfile&amp;#34;,
      &amp;#34;Version&amp;#34;: 1
    }
  ],
  &amp;#34;Version&amp;#34;: 1
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Following is an example for the parameter sets defined at custom data
type level:&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;{
  &amp;#34;Label&amp;#34;: &amp;#34;ClusterType&amp;#34;,
  &amp;#34;Name&amp;#34;: &amp;#34;ClusterType&amp;#34;,
  &amp;#34;CompositeType&amp;#34;: true,
  &amp;#34;Description&amp;#34;: &amp;#34;Type definition for a cluster information.&amp;#34;,
  &amp;#34;TypeDefinition&amp;#34;: [
    {
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.PrimitiveDataType&amp;#34;,
      &amp;#34;Label&amp;#34;: &amp;#34;Cluster Type&amp;#34;,
      &amp;#34;Name&amp;#34;: &amp;#34;clustertype&amp;#34;,
      &amp;#34;Properties&amp;#34;: {
        &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.PrimitiveDataProperty&amp;#34;,
        &amp;#34;Constraints&amp;#34;: {
          &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.Constraints&amp;#34;,
          &amp;#34;EnumList&amp;#34;: [
            {
              &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.EnumEntry&amp;#34;,
              &amp;#34;Label&amp;#34;: &amp;#34;VM Ware&amp;#34;,
              &amp;#34;Value&amp;#34;: &amp;#34;vmware&amp;#34;
            },
            {
              &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.EnumEntry&amp;#34;,
              &amp;#34;Label&amp;#34;: &amp;#34;HX AP&amp;#34;,
              &amp;#34;Value&amp;#34;: &amp;#34;hxap&amp;#34;
            }
          ]
        },
        &amp;#34;Type&amp;#34;: &amp;#34;enum&amp;#34;
      }
    },
    {
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.PrimitiveDataType&amp;#34;,
      &amp;#34;Label&amp;#34;: &amp;#34;VMware Cluster&amp;#34;,
      &amp;#34;Name&amp;#34;: &amp;#34;vmwarecluster&amp;#34;
    },
    {
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.PrimitiveDataType&amp;#34;,
      &amp;#34;Label&amp;#34;: &amp;#34;HX Cluster&amp;#34;,
      &amp;#34;Name&amp;#34;: &amp;#34;hxcluster&amp;#34;
    },
    {
      &amp;#34;ObjectType&amp;#34;: &amp;#34;workflow.PrimitiveDataType&amp;#34;,
      &amp;#34;Label&amp;#34;: &amp;#34;Cluster Description&amp;#34;,
      &amp;#34;Name&amp;#34;: &amp;#34;clusterdescr&amp;#34;
    }
  ],
  &amp;#34;ParameterSet&amp;#34;: [
    {
      &amp;#34;Name&amp;#34;: &amp;#34;rule-1&amp;#34;,
      &amp;#34;Field&amp;#34;: &amp;#34;clustertype&amp;#34;,
      &amp;#34;Condition&amp;#34;: &amp;#34;eq&amp;#34;,
      &amp;#34;Value&amp;#34;: &amp;#34;vmware&amp;#34;,
      &amp;#34;ShowFields&amp;#34;: [
        &amp;#34;vmwarecluster&amp;#34;
      ]
    },
    {
      &amp;#34;Name&amp;#34;: &amp;#34;rule-2&amp;#34;,
      &amp;#34;Field&amp;#34;: &amp;#34;clustertype&amp;#34;,
      &amp;#34;Condition&amp;#34;: &amp;#34;eq&amp;#34;,
      &amp;#34;Value&amp;#34;: &amp;#34;hxap&amp;#34;,
      &amp;#34;ShowFields&amp;#34;: [
        &amp;#34;hxcluster&amp;#34;
      ]
    }
  ]
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;:::&lt;/p&gt;
&lt;h2 id=&#34;supported-workflows-for-storage-targets&#34;&gt;Supported Workflows for Storage Targets&lt;/h2&gt;
&lt;p&gt;The following table lists workflows supported in the various storage
targets available on Intersight:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;List of Storage Workflows&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Pure Storage&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;NetApp&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;Hitachi&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;New Storage Host&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New Storage Host Group&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New VMFS Datastore&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New NAS Datastore&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remove NFS Datastore&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remove Storage Host&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remove Storage Export Policy&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remove Storage Host Group&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Remove VMFS Datastore&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update Storage Host&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update NAS Datastore&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Update VMFS Datastore&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New Storage Interface&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New Storage Export Policy&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;New Storage Virtual Machine&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;Y&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;N&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

      </description>
    </item>
    
    <item>
      <title>Docs: WebAPI</title>
      <link>http://localhost:8080/docs/ico/executors/webapi/</link>
      <pubDate>Fri, 28 Jan 2022 15:53:22 +0000</pubDate>
      
      <guid>http://localhost:8080/docs/ico/executors/webapi/</guid>
      <description>
        
        
        &lt;h1 id=&#34;webapi&#34;&gt;WebAPI&lt;/h1&gt;
&lt;p&gt;Param (
[switch]$EnableBasicAuth = $false,
[switch]$SKipNetworkProfileCheck = $false,
[switch]$ForceNewSSLCert = $false,
[string]$SubjectName = $env:COMPUTERNAME,
[int]$CertValidityDays = 1095
)&lt;/p&gt;
&lt;p&gt;Function New-SelfSignedCert
{
Param (
[string]$SubjectName,
[int]$ValidDays = 1095
)&lt;/p&gt;

      </description>
    </item>
    
  </channel>
</rss>
